import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) '4');
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = yearMonth8.getValue(1970);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1970");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        int int9 = yearMonth6.size();
        org.joda.time.YearMonth yearMonth11 = yearMonth6.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = yearMonth6.indexOf(dateTimeFieldType12);
        org.joda.time.YearMonth yearMonth15 = yearMonth6.plusMonths((-1));
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.Interval interval27 = yearMonth19.toInterval();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        int int33 = property32.getMaximumValue();
        java.lang.String str34 = property32.getAsShortText();
        java.util.Locale locale35 = null;
        java.lang.String str36 = property32.getAsShortText(locale35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property32.getFieldType();
        int int38 = yearMonth19.get(dateTimeFieldType37);
        org.joda.time.YearMonth.Property property39 = yearMonth6.property(dateTimeFieldType37);
        org.joda.time.Chronology chronology40 = yearMonth6.getChronology();
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth(chronology40);
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((long) 9, chronology40);
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((long) 'a', chronology40);
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((long) (short) 1, chronology40);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Oct" + "'", str34, "Oct");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Oct" + "'", str36, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(chronology40);
    }

    @Test
    @Ignore
  public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = yearMonth4.getFieldTypes();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        boolean boolean22 = yearMonth14.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth.Property property27 = yearMonth26.monthOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        org.joda.time.YearMonth yearMonth36 = yearMonth31.plusMonths((int) (byte) 10);
        int int37 = property27.compareTo((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology38 = yearMonth31.getChronology();
        org.joda.time.YearMonth yearMonth39 = yearMonth18.withChronologyRetainFields(chronology38);
        org.joda.time.YearMonth yearMonth40 = yearMonth4.withChronologyRetainFields(chronology38);
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((long) (short) -1, chronology38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        int int52 = yearMonth45.indexOf(dateTimeFieldType51);
        org.joda.time.YearMonth yearMonth54 = yearMonth45.plusMonths((-1));
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth yearMonth60 = yearMonth58.minusYears((int) (short) 0);
        int int61 = yearMonth58.size();
        org.joda.time.YearMonth yearMonth63 = yearMonth58.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        int int65 = yearMonth58.indexOf(dateTimeFieldType64);
        org.joda.time.Interval interval66 = yearMonth58.toInterval();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.YearMonth yearMonth70 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology69);
        org.joda.time.YearMonth.Property property71 = yearMonth70.monthOfYear();
        int int72 = property71.getMaximumValue();
        java.lang.String str73 = property71.getAsShortText();
        java.util.Locale locale74 = null;
        java.lang.String str75 = property71.getAsShortText(locale74);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = property71.getFieldType();
        int int77 = yearMonth58.get(dateTimeFieldType76);
        org.joda.time.YearMonth.Property property78 = yearMonth45.property(dateTimeFieldType76);
        org.joda.time.Chronology chronology79 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth80 = org.joda.time.YearMonth.now(chronology79);
        org.joda.time.YearMonth yearMonth81 = org.joda.time.YearMonth.now(chronology79);
        java.lang.String str83 = yearMonth81.toString("10");
        boolean boolean84 = yearMonth41.isEqual((org.joda.time.ReadablePartial) yearMonth81);
        int int86 = yearMonth81.getValue((int) (short) 0);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 12 + "'", int72 == 12);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Oct" + "'", str73, "Oct");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Oct" + "'", str75, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertNotNull(yearMonth81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "10" + "'", str83, "10");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2020 + "'", int86 == 2020);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        java.lang.String str19 = yearMonth8.toString();
        org.joda.time.YearMonth yearMonth21 = yearMonth8.withMonthOfYear(11);
        org.joda.time.Chronology chronology22 = yearMonth21.getChronology();
        org.joda.time.YearMonth yearMonth23 = org.joda.time.YearMonth.now(chronology22);
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth(chronology22);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0097-10" + "'", str19, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(yearMonth23);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.lang.String str11 = property4.toString();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property4.getAsText(locale12);
        org.joda.time.YearMonth yearMonth15 = property4.addToCopy((int) (short) 10);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "October" + "'", str13, "October");
        org.junit.Assert.assertNotNull(yearMonth15);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth17 = yearMonth5.minus(readablePeriod16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        int int23 = property22.getMaximumValue();
        java.lang.String str24 = property22.getAsShortText();
        org.joda.time.DateTimeField dateTimeField25 = property22.getField();
        org.joda.time.YearMonth yearMonth27 = property22.setCopy("Oct");
        boolean boolean28 = yearMonth17.equals((java.lang.Object) yearMonth27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Interval interval30 = yearMonth17.toInterval(dateTimeZone29);
        org.joda.time.YearMonth.Property property31 = yearMonth17.monthOfYear();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Oct" + "'", str24, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.YearMonth yearMonth24 = yearMonth3.plusYears((-1));
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = yearMonth3.getFields();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.YearMonth yearMonth15 = yearMonth9.minus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth18 = yearMonth15.withPeriodAdded(readablePeriod16, (int) (short) 0);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.plusYears((int) ' ');
        org.joda.time.YearMonth yearMonth22 = yearMonth18.minusMonths(3);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(yearMonth22);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property15.getFieldType();
        int int18 = property15.getMaximumValueOverall();
        org.joda.time.DurationField durationField19 = property15.getRangeDurationField();
        org.joda.time.YearMonth yearMonth20 = property15.getYearMonth();
        java.lang.Class<?> wildcardClass21 = yearMonth20.getClass();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth.Property property30 = yearMonth29.monthOfYear();
        int int31 = property30.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField32 = property30.getField();
        org.joda.time.YearMonth yearMonth34 = property30.addToCopy((int) (short) 0);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth.Property property39 = yearMonth38.monthOfYear();
        int int40 = property39.getMaximumValue();
        java.util.Locale locale41 = null;
        int int42 = property39.getMaximumShortTextLength(locale41);
        java.util.Locale locale43 = null;
        int int44 = property39.getMaximumTextLength(locale43);
        java.lang.String str45 = property39.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property39.getFieldType();
        boolean boolean47 = yearMonth34.isSupported(dateTimeFieldType46);
        int int48 = yearMonth3.get(dateTimeFieldType46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate50 = yearMonth3.toLocalDate((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 12 + "'", int40 == 12);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Oct" + "'", str45, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        int int8 = property4.get();
        java.lang.String str9 = property4.getAsString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "10" + "'", str9, "10");
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth.Property property10 = yearMonth3.year();
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumShortTextLength(locale11);
        org.joda.time.YearMonth yearMonth14 = property10.addToCopy((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth14.toInterval(dateTimeZone15);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(interval16);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        boolean boolean14 = yearMonth12.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.YearMonth yearMonth30 = property19.getYearMonth();
        java.lang.String str31 = property19.getAsText();
        org.joda.time.YearMonth yearMonth32 = property19.getYearMonth();
        boolean boolean33 = yearMonth12.isBefore((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = yearMonth32.indexOf(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "October" + "'", str31, "October");
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.lang.String str11 = property4.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property4.getFieldType();
        java.util.Locale locale14 = null;
        org.joda.time.YearMonth yearMonth15 = property4.setCopy("October", locale14);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = yearMonth15.getFields();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth.Property property14 = yearMonth9.year();
        org.joda.time.YearMonth.Property property15 = yearMonth9.year();
        int int16 = property15.getMinimumValueOverall();
        java.lang.String str17 = property15.getAsText();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-292275054) + "'", int16 == (-292275054));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "97" + "'", str17, "97");
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth18 = yearMonth14.withPeriodAdded(readablePeriod16, (int) (short) -1);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((java.lang.Object) readablePeriod16);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((java.lang.Object) readablePeriod16);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.plusMonths(98);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth22);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology1 = yearMonth0.getChronology();
        org.joda.time.YearMonth yearMonth3 = yearMonth0.withMonthOfYear((int) (short) 1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth.Property property8 = yearMonth7.monthOfYear();
        int int9 = property8.getMaximumValue();
        java.util.Locale locale10 = null;
        int int11 = property8.getMaximumShortTextLength(locale10);
        java.util.Locale locale12 = null;
        int int13 = property8.getMaximumTextLength(locale12);
        java.lang.String str14 = property8.getName();
        org.joda.time.YearMonth yearMonth16 = property8.addWrapFieldToCopy(100);
        int int17 = yearMonth16.getMonthOfYear();
        org.joda.time.YearMonth.Property property18 = yearMonth16.year();
        org.joda.time.YearMonth yearMonth20 = property18.setCopy((int) '#');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        int int38 = yearMonth35.size();
        org.joda.time.YearMonth yearMonth40 = yearMonth35.plusMonths((int) (byte) 10);
        int int41 = property31.compareTo((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.Interval interval43 = yearMonth35.toInterval(dateTimeZone42);
        org.joda.time.YearMonth yearMonth45 = yearMonth35.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth yearMonth51 = yearMonth49.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology54);
        org.joda.time.YearMonth yearMonth57 = yearMonth55.minusYears((int) (short) 0);
        int int58 = yearMonth55.size();
        boolean boolean59 = yearMonth51.isAfter((org.joda.time.ReadablePartial) yearMonth55);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology67);
        org.joda.time.YearMonth yearMonth70 = yearMonth68.minusYears((int) (short) 0);
        int int71 = yearMonth68.size();
        org.joda.time.YearMonth yearMonth73 = yearMonth68.plusMonths((int) (byte) 10);
        int int74 = property64.compareTo((org.joda.time.ReadablePartial) yearMonth68);
        org.joda.time.Chronology chronology75 = yearMonth68.getChronology();
        org.joda.time.YearMonth yearMonth76 = yearMonth55.withChronologyRetainFields(chronology75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.YearMonth yearMonth79 = yearMonth76.withPeriodAdded(readablePeriod77, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        int int81 = yearMonth79.indexOf(dateTimeFieldType80);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.YearMonth yearMonth85 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology84);
        org.joda.time.YearMonth.Property property86 = yearMonth85.monthOfYear();
        int int87 = property86.getMaximumValue();
        java.lang.String str88 = property86.getAsShortText();
        java.util.Locale locale89 = null;
        java.lang.String str90 = property86.getAsShortText(locale89);
        org.joda.time.YearMonth yearMonth92 = property86.setCopy("October");
        org.joda.time.ReadableInstant readableInstant93 = null;
        org.joda.time.DateTime dateTime94 = yearMonth92.toDateTime(readableInstant93);
        org.joda.time.DateTime dateTime95 = yearMonth79.toDateTime(readableInstant93);
        org.joda.time.DateTime dateTime96 = yearMonth35.toDateTime((org.joda.time.ReadableInstant) dateTime95);
        org.joda.time.DateTime dateTime97 = yearMonth26.toDateTime((org.joda.time.ReadableInstant) dateTime96);
        org.joda.time.DateTime dateTime98 = yearMonth20.toDateTime((org.joda.time.ReadableInstant) dateTime96);
        org.joda.time.DateTime dateTime99 = yearMonth3.toDateTime((org.joda.time.ReadableInstant) dateTime98);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(yearMonth76);
        org.junit.Assert.assertNotNull(yearMonth79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 12 + "'", int87 == 12);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Oct" + "'", str88, "Oct");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Oct" + "'", str90, "Oct");
        org.junit.Assert.assertNotNull(yearMonth92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertNotNull(dateTime98);
        org.junit.Assert.assertNotNull(dateTime99);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = yearMonth8.indexOf(dateTimeFieldType14);
        org.joda.time.YearMonth yearMonth17 = yearMonth8.plusMonths((-1));
        int int18 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.YearMonth yearMonth20 = property4.addToCopy((-1));
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(yearMonth20);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Interval interval17 = yearMonth8.toInterval();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        int int24 = yearMonth21.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth21.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        int int28 = yearMonth21.indexOf(dateTimeFieldType27);
        org.joda.time.Interval interval29 = yearMonth21.toInterval();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth.Property property34 = yearMonth33.monthOfYear();
        int int35 = property34.getMaximumValue();
        java.lang.String str36 = property34.getAsShortText();
        java.util.Locale locale37 = null;
        java.lang.String str38 = property34.getAsShortText(locale37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property34.getFieldType();
        int int40 = yearMonth21.get(dateTimeFieldType39);
        org.joda.time.YearMonth.Property property41 = yearMonth8.property(dateTimeFieldType39);
        boolean boolean42 = yearMonth2.isSupported(dateTimeFieldType39);
        org.joda.time.YearMonth.Property property43 = yearMonth2.year();
        java.lang.String str44 = property43.toString();
        java.lang.Class<?> wildcardClass45 = property43.getClass();
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 12 + "'", int35 == 12);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Oct" + "'", str36, "Oct");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Oct" + "'", str38, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Property[year]" + "'", str44, "Property[year]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("1970-01");
        java.lang.Class<?> wildcardClass2 = yearMonth1.getClass();
        org.junit.Assert.assertNotNull(yearMonth1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        java.lang.String str2 = yearMonth1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth12.withYear((int) (byte) 1);
        boolean boolean36 = yearMonth1.isEqual((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.YearMonth.Property property37 = yearMonth1.monthOfYear();
        int int38 = property37.getMaximumValue();
        java.util.Locale locale40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth41 = property37.setCopy("0098-06", locale40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0098-06\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01" + "'", str2, "1970-01");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 12 + "'", int38 == 12);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth8.withYear((int) (byte) 10);
        org.joda.time.Interval interval27 = yearMonth26.toInterval();
        java.lang.String str29 = yearMonth26.toString("2015-01");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2015-01" + "'", str29, "2015-01");
    }

    @Test
    @Ignore
  public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.Chronology chronology8 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth9 = yearMonth0.withChronologyRetainFields(chronology8);
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth14 = org.joda.time.YearMonth.now(chronology8);
        int int15 = yearMonth14.getMonthOfYear();
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 11 + "'", int15 == 11);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonth yearMonth9 = yearMonth3.withPeriodAdded(readablePeriod7, (int) (byte) 0);
        org.joda.time.YearMonth yearMonth11 = yearMonth3.plusYears((int) '#');
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth11);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        int int8 = yearMonth5.size();
        org.joda.time.YearMonth yearMonth10 = yearMonth5.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonth5.indexOf(dateTimeFieldType11);
        org.joda.time.YearMonth yearMonth14 = yearMonth5.plusMonths((-1));
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.Interval interval26 = yearMonth18.toInterval();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        int int37 = yearMonth18.get(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth5.property(dateTimeFieldType36);
        org.joda.time.Chronology chronology39 = yearMonth5.getChronology();
        org.joda.time.YearMonth yearMonth40 = org.joda.time.YearMonth.now(chronology39);
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth(1, 3, chronology39);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.YearMonth yearMonth43 = yearMonth41.plus(readablePeriod42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.YearMonth yearMonth46 = yearMonth43.withPeriodAdded(readablePeriod44, (int) (short) -1);
        java.lang.Class<?> wildcardClass47 = yearMonth43.getClass();
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((long) (short) 1, chronology32);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth(chronology32);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = yearMonth36.toString(dateTimeFormatter37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonth yearMonth40 = yearMonth36.plus(readablePeriod39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth yearMonth51 = yearMonth49.minusYears((int) (short) 0);
        int int52 = yearMonth49.size();
        org.joda.time.YearMonth yearMonth54 = yearMonth49.plusMonths((int) (byte) 10);
        int int55 = property45.compareTo((org.joda.time.ReadablePartial) yearMonth49);
        org.joda.time.Chronology chronology56 = yearMonth49.getChronology();
        org.joda.time.YearMonth yearMonth57 = yearMonth36.withChronologyRetainFields(chronology56);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = null;
        java.lang.String str59 = yearMonth57.toString(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0100-10" + "'", str38, "0100-10");
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0100-10" + "'", str59, "0100-10");
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((int) ' ', 3);
        org.joda.time.YearMonth yearMonth4 = org.joda.time.YearMonth.parse("2020-11");
        int int5 = yearMonth4.getMonthOfYear();
        boolean boolean6 = yearMonth2.isBefore((org.joda.time.ReadablePartial) yearMonth4);
        org.joda.time.YearMonth yearMonth8 = yearMonth4.minusYears((int) (short) 0);
        org.junit.Assert.assertNotNull(yearMonth4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 11 + "'", int5 == 11);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(yearMonth8);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonth8.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonth8.toInterval(dateTimeZone26);
        int[] intArray28 = yearMonth8.getValues();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth yearMonth41 = yearMonth39.minusYears((int) (short) 0);
        int int42 = yearMonth39.size();
        boolean boolean43 = yearMonth35.isAfter((org.joda.time.ReadablePartial) yearMonth39);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology46);
        org.joda.time.YearMonth.Property property48 = yearMonth47.monthOfYear();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology51);
        org.joda.time.YearMonth yearMonth54 = yearMonth52.minusYears((int) (short) 0);
        int int55 = yearMonth52.size();
        org.joda.time.YearMonth yearMonth57 = yearMonth52.plusMonths((int) (byte) 10);
        int int58 = property48.compareTo((org.joda.time.ReadablePartial) yearMonth52);
        org.joda.time.Chronology chronology59 = yearMonth52.getChronology();
        org.joda.time.YearMonth yearMonth60 = yearMonth39.withChronologyRetainFields(chronology59);
        org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth((long) (short) 1, chronology59);
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth(chronology59);
        java.lang.Class<?> wildcardClass63 = chronology59.getClass();
        boolean boolean64 = yearMonth8.equals((java.lang.Object) wildcardClass63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField66 = yearMonth8.getField((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[97, 10]");
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth17 = yearMonth5.minus(readablePeriod16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.year();
        int int20 = yearMonth17.getValue((int) (byte) 1);
        org.joda.time.YearMonth.Property property21 = yearMonth17.year();
        org.joda.time.YearMonth.Property property22 = yearMonth17.monthOfYear();
        org.joda.time.YearMonth yearMonth24 = yearMonth17.minusYears(6);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth24);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        int int37 = yearMonth34.size();
        org.joda.time.YearMonth yearMonth39 = yearMonth34.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        int int41 = yearMonth34.indexOf(dateTimeFieldType40);
        org.joda.time.YearMonth yearMonth43 = yearMonth34.plusMonths((-1));
        boolean boolean44 = yearMonth9.isEqual((org.joda.time.ReadablePartial) yearMonth43);
        org.joda.time.YearMonth yearMonth46 = yearMonth43.withYear((int) '4');
        org.joda.time.YearMonth.Property property47 = yearMonth43.year();
        java.lang.String str48 = property47.getAsString();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "97" + "'", str48, "97");
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy(100);
        int int13 = yearMonth12.getMonthOfYear();
        org.joda.time.YearMonth.Property property14 = yearMonth12.year();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.YearMonth yearMonth27 = yearMonth18.plusMonths((-1));
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        org.joda.time.YearMonth yearMonth36 = yearMonth31.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        int int38 = yearMonth31.indexOf(dateTimeFieldType37);
        org.joda.time.Interval interval39 = yearMonth31.toInterval();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth.Property property44 = yearMonth43.monthOfYear();
        int int45 = property44.getMaximumValue();
        java.lang.String str46 = property44.getAsShortText();
        java.util.Locale locale47 = null;
        java.lang.String str48 = property44.getAsShortText(locale47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property44.getFieldType();
        int int50 = yearMonth31.get(dateTimeFieldType49);
        org.joda.time.YearMonth.Property property51 = yearMonth18.property(dateTimeFieldType49);
        org.joda.time.Chronology chronology52 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth(chronology52);
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth yearMonth60 = yearMonth58.minusYears((int) (short) 0);
        org.joda.time.Interval interval61 = yearMonth58.toInterval();
        org.joda.time.Chronology chronology62 = yearMonth58.getChronology();
        org.joda.time.YearMonth yearMonth63 = yearMonth54.withChronologyRetainFields(chronology62);
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth(chronology62);
        org.joda.time.YearMonth yearMonth65 = yearMonth53.withChronologyRetainFields(chronology62);
        org.joda.time.YearMonth yearMonth66 = yearMonth12.withChronologyRetainFields(chronology62);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.YearMonth yearMonth70 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology69);
        org.joda.time.YearMonth.Property property71 = yearMonth70.monthOfYear();
        int int72 = property71.getMaximumValue();
        java.util.Locale locale73 = null;
        int int74 = property71.getMaximumShortTextLength(locale73);
        java.util.Locale locale75 = null;
        int int76 = property71.getMaximumTextLength(locale75);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.YearMonth yearMonth80 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology79);
        org.joda.time.YearMonth.Property property81 = yearMonth80.monthOfYear();
        int int82 = property81.getMaximumValue();
        java.util.Locale locale83 = null;
        int int84 = property81.getMaximumShortTextLength(locale83);
        java.util.Locale locale85 = null;
        int int86 = property81.getMaximumTextLength(locale85);
        java.lang.String str87 = property81.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = property81.getFieldType();
        boolean boolean89 = property71.equals((java.lang.Object) property81);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = property81.getFieldType();
        org.joda.time.YearMonth.Property property91 = yearMonth12.property(dateTimeFieldType90);
        int int92 = property91.getMaximumValue();
        java.util.Locale locale93 = null;
        int int94 = property91.getMaximumTextLength(locale93);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 12 + "'", int45 == 12);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Oct" + "'", str46, "Oct");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Oct" + "'", str48, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 12 + "'", int72 == 12);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 9 + "'", int76 == 9);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 12 + "'", int82 == 12);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 9 + "'", int86 == 9);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Oct" + "'", str87, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 12 + "'", int92 == 12);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 9 + "'", int94 == 9);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property15.getFieldType();
        org.joda.time.DurationField durationField18 = property15.getDurationField();
        org.joda.time.YearMonth yearMonth19 = property15.getYearMonth();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(yearMonth19);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        java.lang.String str6 = yearMonth3.toString();
        java.lang.String str7 = yearMonth3.toString();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = yearMonth3.toInterval(dateTimeZone8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        boolean boolean37 = yearMonth29.isAfter((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Interval interval38 = yearMonth29.toInterval();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonth42.indexOf(dateTimeFieldType48);
        org.joda.time.Interval interval50 = yearMonth42.toInterval();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth.Property property55 = yearMonth54.monthOfYear();
        int int56 = property55.getMaximumValue();
        java.lang.String str57 = property55.getAsShortText();
        java.util.Locale locale58 = null;
        java.lang.String str59 = property55.getAsShortText(locale58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property55.getFieldType();
        int int61 = yearMonth42.get(dateTimeFieldType60);
        org.joda.time.YearMonth.Property property62 = yearMonth29.property(dateTimeFieldType60);
        boolean boolean63 = yearMonth23.isSupported(dateTimeFieldType60);
        org.joda.time.YearMonth yearMonth65 = yearMonth17.withField(dateTimeFieldType60, (int) (short) 10);
        boolean boolean66 = yearMonth13.isBefore((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.Interval interval68 = yearMonth13.toInterval(dateTimeZone67);
        int int69 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0097-10" + "'", str6, "0097-10");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0097-10" + "'", str7, "0097-10");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 12 + "'", int56 == 12);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Oct" + "'", str57, "Oct");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Oct" + "'", str59, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.YearMonth.Property property4 = yearMonth1.year();
        java.lang.String str5 = property4.getAsShortText();
        java.lang.String str6 = property4.getName();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970" + "'", str5, "1970");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "year" + "'", str6, "year");
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        int int8 = yearMonth5.size();
        org.joda.time.YearMonth yearMonth10 = yearMonth5.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonth5.indexOf(dateTimeFieldType11);
        org.joda.time.YearMonth yearMonth14 = yearMonth5.plusMonths((-1));
        org.joda.time.YearMonth yearMonth16 = yearMonth5.plusMonths((-1));
        org.joda.time.YearMonth.Property property17 = yearMonth16.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonth yearMonth20 = yearMonth16.withPeriodAdded(readablePeriod18, (int) (byte) 10);
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.Chronology chronology23 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth(chronology23);
        org.joda.time.YearMonth yearMonth25 = yearMonth20.withChronologyRetainFields(chronology23);
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) (short) 0, 9, chronology23);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        int int37 = yearMonth30.indexOf(dateTimeFieldType36);
        org.joda.time.YearMonth yearMonth39 = yearMonth30.plusMonths((-1));
        org.joda.time.YearMonth yearMonth41 = yearMonth30.plusMonths((-1));
        org.joda.time.YearMonth.Property property42 = yearMonth41.monthOfYear();
        int int43 = property42.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property42.getFieldType();
        int int45 = property42.getMaximumValueOverall();
        java.util.Locale locale46 = null;
        java.lang.String str47 = property42.getAsShortText(locale46);
        int int48 = property42.getMinimumValueOverall();
        org.joda.time.YearMonth yearMonth50 = property42.addToCopy((int) (byte) 100);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth.Property property55 = yearMonth54.monthOfYear();
        int int56 = property55.getMaximumValue();
        java.util.Locale locale57 = null;
        int int58 = property55.getMaximumShortTextLength(locale57);
        java.util.Locale locale59 = null;
        int int60 = property55.getMaximumTextLength(locale59);
        java.lang.String str61 = property55.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property55.getFieldType();
        boolean boolean63 = yearMonth50.isSupported(dateTimeFieldType62);
        boolean boolean64 = yearMonth26.isSupported(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 12 + "'", int45 == 12);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Sep" + "'", str47, "Sep");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 12 + "'", int56 == 12);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Oct" + "'", str61, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(10L);
        org.joda.time.YearMonth.Property property2 = yearMonth1.monthOfYear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth.Property property7 = yearMonth6.monthOfYear();
        int int8 = property7.getMaximumValue();
        java.util.Locale locale9 = null;
        int int10 = property7.getMaximumShortTextLength(locale9);
        java.util.Locale locale11 = null;
        int int12 = property7.getMaximumTextLength(locale11);
        java.lang.String str13 = property7.getName();
        org.joda.time.YearMonth yearMonth15 = property7.addWrapFieldToCopy(100);
        boolean boolean16 = yearMonth1.isEqual((org.joda.time.ReadablePartial) yearMonth15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.YearMonth yearMonth18 = yearMonth15.minus(readablePeriod17);
        int[] intArray19 = yearMonth15.getValues();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[97, 2]");
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((int) ' ', 3);
        java.lang.String str4 = yearMonth2.toString("0097-09");
        int int5 = yearMonth2.size();
        org.joda.time.YearMonth.Property property6 = yearMonth2.year();
        java.lang.String str8 = yearMonth2.toString("1970");
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = yearMonth2.getFields();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0097-09" + "'", str4, "0097-09");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970" + "'", str8, "1970");
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
    }

    @Test
    @Ignore
  public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.getMaximumValue();
        java.lang.String str17 = property15.getAsShortText();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property15.getAsShortText(locale18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property15.getFieldType();
        org.joda.time.YearMonth.Property property21 = yearMonth3.property(dateTimeFieldType20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        boolean boolean35 = yearMonth27.isAfter((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth.Property property40 = yearMonth39.monthOfYear();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        int int47 = yearMonth44.size();
        org.joda.time.YearMonth yearMonth49 = yearMonth44.plusMonths((int) (byte) 10);
        int int50 = property40.compareTo((org.joda.time.ReadablePartial) yearMonth44);
        org.joda.time.Chronology chronology51 = yearMonth44.getChronology();
        org.joda.time.YearMonth yearMonth52 = yearMonth31.withChronologyRetainFields(chronology51);
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3, chronology51);
        org.joda.time.YearMonth yearMonth54 = org.joda.time.YearMonth.now(chronology51);
        org.joda.time.YearMonth yearMonth55 = org.joda.time.YearMonth.now(chronology51);
        int int56 = yearMonth55.getMonthOfYear();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Oct" + "'", str17, "Oct");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Oct" + "'", str19, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 11 + "'", int56 == 11);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMaximumValue();
        int int10 = property4.getMinimumValueOverall();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property4.getAsText(locale11);
        int int13 = property4.getMaximumValueOverall();
        org.joda.time.YearMonth yearMonth14 = property4.getYearMonth();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "October" + "'", str12, "October");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
        org.junit.Assert.assertNotNull(yearMonth14);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        int int16 = property4.getMaximumValue();
        java.lang.String str17 = property4.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[monthOfYear]" + "'", str17, "Property[monthOfYear]");
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        org.joda.time.YearMonth yearMonth7 = property4.setCopy("10");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        java.lang.String str14 = yearMonth11.toString();
        java.lang.String str15 = yearMonth11.toString();
        org.joda.time.YearMonth yearMonth17 = yearMonth11.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        int int24 = yearMonth21.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth21.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        int int28 = yearMonth21.indexOf(dateTimeFieldType27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth.Property property33 = yearMonth32.monthOfYear();
        int int34 = property33.getMaximumValue();
        java.lang.String str35 = property33.getAsShortText();
        java.util.Locale locale36 = null;
        java.lang.String str37 = property33.getAsShortText(locale36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property33.getFieldType();
        org.joda.time.YearMonth.Property property39 = yearMonth21.property(dateTimeFieldType38);
        boolean boolean40 = yearMonth11.isSupported(dateTimeFieldType38);
        int int41 = yearMonth7.compareTo((org.joda.time.ReadablePartial) yearMonth11);
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Interval interval45 = yearMonth43.toInterval(dateTimeZone44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.YearMonth yearMonth47 = yearMonth43.minus(readablePeriod46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.YearMonth yearMonth49 = yearMonth43.plus(readablePeriod48);
        int int50 = yearMonth11.compareTo((org.joda.time.ReadablePartial) yearMonth49);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0097-10" + "'", str14, "0097-10");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0097-10" + "'", str15, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 12 + "'", int34 == 12);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Oct" + "'", str37, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addToCopy((int) (short) 1);
        java.util.Locale locale10 = null;
        java.lang.String str11 = property4.getAsText(locale10);
        int int12 = property4.getMinimumValue();
        java.lang.String str13 = property4.getAsText();
        java.lang.String str14 = property4.toString();
        java.util.Locale locale15 = null;
        java.lang.String str16 = property4.getAsShortText(locale15);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "October" + "'", str11, "October");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "October" + "'", str13, "October");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[monthOfYear]" + "'", str14, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Oct" + "'", str16, "Oct");
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property15.getFieldType();
        org.joda.time.DurationField durationField18 = property15.getDurationField();
        org.joda.time.DateTimeField dateTimeField19 = property15.getField();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(9, (int) (byte) 1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth.Property property7 = yearMonth6.monthOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        int int14 = yearMonth11.size();
        org.joda.time.YearMonth yearMonth16 = yearMonth11.plusMonths((int) (byte) 10);
        int int17 = property7.compareTo((org.joda.time.ReadablePartial) yearMonth11);
        org.joda.time.YearMonth yearMonth18 = property7.getYearMonth();
        java.lang.String str19 = property7.getAsText();
        org.joda.time.YearMonth yearMonth20 = property7.getYearMonth();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth.Property property25 = yearMonth24.monthOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth yearMonth31 = yearMonth29.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        int int38 = yearMonth35.size();
        boolean boolean39 = yearMonth31.isAfter((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth.Property property44 = yearMonth43.monthOfYear();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology47);
        org.joda.time.YearMonth yearMonth50 = yearMonth48.minusYears((int) (short) 0);
        int int51 = yearMonth48.size();
        org.joda.time.YearMonth yearMonth53 = yearMonth48.plusMonths((int) (byte) 10);
        int int54 = property44.compareTo((org.joda.time.ReadablePartial) yearMonth48);
        org.joda.time.Chronology chronology55 = yearMonth48.getChronology();
        org.joda.time.YearMonth yearMonth56 = yearMonth35.withChronologyRetainFields(chronology55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.YearMonth yearMonth59 = yearMonth56.withPeriodAdded(readablePeriod57, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        int int61 = yearMonth59.indexOf(dateTimeFieldType60);
        boolean boolean62 = yearMonth24.isEqual((org.joda.time.ReadablePartial) yearMonth59);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth.Property property67 = yearMonth66.monthOfYear();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.YearMonth yearMonth71 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology70);
        org.joda.time.YearMonth yearMonth73 = yearMonth71.minusYears((int) (short) 0);
        int int74 = yearMonth71.size();
        org.joda.time.YearMonth yearMonth76 = yearMonth71.plusMonths((int) (byte) 10);
        int int77 = property67.compareTo((org.joda.time.ReadablePartial) yearMonth71);
        boolean boolean78 = yearMonth24.isEqual((org.joda.time.ReadablePartial) yearMonth71);
        boolean boolean79 = yearMonth20.isAfter((org.joda.time.ReadablePartial) yearMonth24);
        org.joda.time.YearMonth yearMonth81 = yearMonth20.plusMonths(2);
        org.joda.time.YearMonth yearMonth83 = yearMonth20.minusYears(3);
        boolean boolean84 = yearMonth2.isEqual((org.joda.time.ReadablePartial) yearMonth20);
        int int85 = yearMonth20.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = null;
        java.lang.String str87 = yearMonth20.toString(dateTimeFormatter86);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "October" + "'", str19, "October");
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(yearMonth76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(yearMonth81);
        org.junit.Assert.assertNotNull(yearMonth83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "0097-10" + "'", str87, "0097-10");
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        int int47 = property46.getMinimumValue();
        java.util.Locale locale48 = null;
        int int49 = property46.getMaximumShortTextLength(locale48);
        org.joda.time.YearMonth yearMonth51 = property46.addToCopy((int) (short) 1);
        boolean boolean52 = yearMonth3.equals((java.lang.Object) yearMonth51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        int int59 = yearMonth56.size();
        org.joda.time.YearMonth yearMonth61 = yearMonth56.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        int int63 = yearMonth56.indexOf(dateTimeFieldType62);
        int int64 = yearMonth56.getYear();
        boolean boolean65 = yearMonth51.isBefore((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.Interval interval67 = yearMonth51.toInterval(dateTimeZone66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.YearMonth yearMonth70 = yearMonth51.withPeriodAdded(readablePeriod68, (int) (byte) -1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(yearMonth70);
    }

    @Test
    @Ignore
  public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        boolean boolean24 = yearMonth16.isAfter((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        int int39 = property29.compareTo((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = yearMonth33.getChronology();
        org.joda.time.YearMonth yearMonth41 = yearMonth20.withChronologyRetainFields(chronology40);
        int int42 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        int int48 = property47.getMaximumValue();
        java.util.Locale locale49 = null;
        int int50 = property47.getMaximumShortTextLength(locale49);
        java.util.Locale locale51 = null;
        int int52 = property47.getMaximumTextLength(locale51);
        org.joda.time.DurationField durationField53 = property47.getRangeDurationField();
        java.util.Locale locale54 = null;
        java.lang.String str55 = property47.getAsShortText(locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property47.getFieldType();
        org.joda.time.YearMonth yearMonth58 = yearMonth3.withField(dateTimeFieldType56, 11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = yearMonth58.getFieldTypes();
        org.joda.time.YearMonth yearMonth60 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology63);
        org.joda.time.YearMonth yearMonth66 = yearMonth64.minusYears((int) (short) 0);
        org.joda.time.Interval interval67 = yearMonth64.toInterval();
        org.joda.time.Chronology chronology68 = yearMonth64.getChronology();
        org.joda.time.YearMonth yearMonth69 = yearMonth60.withChronologyRetainFields(chronology68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.YearMonth yearMonth73 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology72);
        org.joda.time.YearMonth.Property property74 = yearMonth73.monthOfYear();
        int int75 = property74.getMaximumValue();
        java.util.Locale locale76 = null;
        int int77 = property74.getMaximumShortTextLength(locale76);
        java.util.Locale locale78 = null;
        int int79 = property74.getMaximumTextLength(locale78);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.YearMonth yearMonth83 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology82);
        org.joda.time.YearMonth.Property property84 = yearMonth83.monthOfYear();
        int int85 = property84.getMaximumValue();
        java.util.Locale locale86 = null;
        int int87 = property84.getMaximumShortTextLength(locale86);
        java.util.Locale locale88 = null;
        int int89 = property84.getMaximumTextLength(locale88);
        java.lang.String str90 = property84.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = property84.getFieldType();
        boolean boolean92 = property74.equals((java.lang.Object) property84);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = property84.getFieldType();
        int int94 = yearMonth69.get(dateTimeFieldType93);
        org.joda.time.YearMonth.Property property95 = yearMonth58.property(dateTimeFieldType93);
        org.joda.time.YearMonth yearMonth97 = yearMonth58.withYear(8);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 12 + "'", int48 == 12);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Oct" + "'", str55, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 12 + "'", int75 == 12);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 12 + "'", int85 == 12);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 9 + "'", int89 == 9);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Oct" + "'", str90, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 11 + "'", int94 == 11);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(yearMonth97);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonth8.getFieldTypes();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        boolean boolean40 = yearMonth32.isAfter((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth yearMonth51 = yearMonth49.minusYears((int) (short) 0);
        int int52 = yearMonth49.size();
        org.joda.time.YearMonth yearMonth54 = yearMonth49.plusMonths((int) (byte) 10);
        int int55 = property45.compareTo((org.joda.time.ReadablePartial) yearMonth49);
        org.joda.time.Chronology chronology56 = yearMonth49.getChronology();
        org.joda.time.YearMonth yearMonth57 = yearMonth36.withChronologyRetainFields(chronology56);
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((long) (short) 1, chronology56);
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((java.lang.Object) yearMonth8, chronology56);
        org.joda.time.YearMonth yearMonth61 = yearMonth8.plusYears((int) (short) 1);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.YearMonth yearMonth65 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology64);
        org.joda.time.YearMonth yearMonth67 = yearMonth65.minusYears((int) (short) 0);
        int int68 = yearMonth65.size();
        org.joda.time.YearMonth yearMonth70 = yearMonth65.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = null;
        int int72 = yearMonth65.indexOf(dateTimeFieldType71);
        int int73 = yearMonth65.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = yearMonth65.getFieldType(1);
        org.joda.time.YearMonth.Property property76 = yearMonth8.property(dateTimeFieldType75);
        java.lang.String str77 = yearMonth8.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 97 + "'", int73 == 97);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "0097-10" + "'", str77, "0097-10");
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.YearMonth.Property property36 = yearMonth3.property(dateTimeFieldType34);
        org.joda.time.Chronology chronology37 = yearMonth3.getChronology();
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth(chronology37);
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth yearMonth45 = yearMonth43.minusYears((int) (short) 0);
        org.joda.time.Interval interval46 = yearMonth43.toInterval();
        org.joda.time.Chronology chronology47 = yearMonth43.getChronology();
        org.joda.time.YearMonth yearMonth48 = yearMonth39.withChronologyRetainFields(chronology47);
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth(chronology47);
        org.joda.time.YearMonth yearMonth50 = yearMonth38.withChronologyRetainFields(chronology47);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        int int61 = yearMonth54.indexOf(dateTimeFieldType60);
        org.joda.time.YearMonth yearMonth63 = yearMonth54.plusMonths((-1));
        org.joda.time.YearMonth yearMonth65 = yearMonth54.plusMonths((-1));
        org.joda.time.YearMonth.Property property66 = yearMonth65.monthOfYear();
        int int67 = property66.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = property66.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property66.getFieldType();
        org.joda.time.YearMonth.Property property70 = yearMonth38.property(dateTimeFieldType69);
        int int71 = yearMonth38.size();
        org.joda.time.Interval interval72 = yearMonth38.toInterval();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(interval72);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        org.joda.time.YearMonth yearMonth41 = yearMonth36.plusMonths((int) (byte) 10);
        int int42 = property32.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        boolean boolean49 = yearMonth36.isAfter((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = yearMonth36.indexOf(dateTimeFieldType50);
        int int52 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.YearMonth yearMonth54 = yearMonth36.minusYears(11);
        org.joda.time.YearMonth yearMonth56 = yearMonth36.withMonthOfYear(2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType58 = yearMonth56.getFieldType(2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(yearMonth56);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        int int10 = property4.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth3.getFieldTypes();
        int[] intArray10 = yearMonth3.getValues();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        int int25 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.Chronology chronology26 = yearMonth19.getChronology();
        org.joda.time.YearMonth yearMonth27 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth28 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3, chronology26);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth.Property property34 = yearMonth33.monthOfYear();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth yearMonth40 = yearMonth38.minusYears((int) (short) 0);
        int int41 = yearMonth38.size();
        org.joda.time.YearMonth yearMonth43 = yearMonth38.plusMonths((int) (byte) 10);
        int int44 = property34.compareTo((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Interval interval46 = yearMonth38.toInterval(dateTimeZone45);
        org.joda.time.YearMonth yearMonth48 = yearMonth38.minusYears((int) (short) 0);
        boolean boolean49 = yearMonth29.isAfter((org.joda.time.ReadablePartial) yearMonth48);
        org.joda.time.YearMonth yearMonth51 = yearMonth48.plusYears(12);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.YearMonth yearMonth54 = yearMonth48.withPeriodAdded(readablePeriod52, 0);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[97, 10]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(yearMonth54);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        java.lang.String str9 = property4.getAsText();
        org.joda.time.YearMonth yearMonth11 = property4.setCopy(12);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonth yearMonth13 = yearMonth11.plus(readablePeriod12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        org.joda.time.YearMonth yearMonth22 = yearMonth17.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = yearMonth17.indexOf(dateTimeFieldType23);
        org.joda.time.YearMonth yearMonth26 = yearMonth17.plusMonths((-1));
        org.joda.time.YearMonth yearMonth28 = yearMonth17.plusMonths((-1));
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property29.getFieldType();
        int int32 = property29.getMaximumValueOverall();
        java.util.Locale locale33 = null;
        java.lang.String str34 = property29.getAsShortText(locale33);
        int int35 = property29.getMinimumValueOverall();
        org.joda.time.YearMonth yearMonth37 = property29.addToCopy((int) (byte) 100);
        java.lang.String str38 = property29.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property29.getFieldType();
        org.joda.time.YearMonth.Property property40 = yearMonth11.property(dateTimeFieldType39);
        org.joda.time.Interval interval41 = yearMonth11.toInterval();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "October" + "'", str9, "October");
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Sep" + "'", str34, "Sep");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "9" + "'", str38, "9");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(interval41);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth.Property property12 = yearMonth11.monthOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        int int22 = property12.compareTo((org.joda.time.ReadablePartial) yearMonth16);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = yearMonth16.toInterval(dateTimeZone23);
        org.joda.time.YearMonth yearMonth26 = yearMonth16.minusYears((int) (short) 0);
        java.lang.String str27 = yearMonth16.toString();
        org.joda.time.YearMonth yearMonth29 = yearMonth16.withMonthOfYear(11);
        boolean boolean30 = property4.equals((java.lang.Object) 11);
        int int31 = property4.getMinimumValueOverall();
        org.joda.time.DurationField durationField32 = property4.getRangeDurationField();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        org.joda.time.YearMonth yearMonth41 = yearMonth36.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        int int43 = yearMonth36.indexOf(dateTimeFieldType42);
        int int44 = yearMonth36.getYear();
        boolean boolean45 = property4.equals((java.lang.Object) yearMonth36);
        org.joda.time.DurationFieldType durationFieldType46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth48 = yearMonth36.withFieldAdded(durationFieldType46, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0097-10" + "'", str27, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 97 + "'", int44 == 97);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    @Ignore
  public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.joda.time.YearMonth yearMonth0 = org.joda.time.YearMonth.now();
        org.joda.time.YearMonth yearMonth2 = yearMonth0.plusMonths((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = yearMonth0.getFields();
        int int4 = yearMonth0.getYear();
        org.junit.Assert.assertNotNull(yearMonth0);
        org.junit.Assert.assertNotNull(yearMonth2);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2020 + "'", int4 == 2020);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth8.withYear((int) (byte) 10);
        org.joda.time.YearMonth yearMonth28 = yearMonth8.minusYears(12);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth yearMonth40 = yearMonth38.minusYears((int) (short) 0);
        int int41 = yearMonth38.size();
        boolean boolean42 = yearMonth34.isAfter((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Interval interval43 = yearMonth34.toInterval();
        org.joda.time.YearMonth.Property property44 = yearMonth34.year();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.YearMonth yearMonth46 = yearMonth34.minus(readablePeriod45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.year();
        int int48 = yearMonth28.compareTo((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.YearMonth yearMonth51 = yearMonth46.withPeriodAdded(readablePeriod49, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType53 = yearMonth46.getFieldType(98);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 98");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(yearMonth51);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.Interval interval26 = yearMonth18.toInterval();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        int int37 = yearMonth18.get(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth5.property(dateTimeFieldType36);
        org.joda.time.DurationFieldType durationFieldType39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth41 = yearMonth5.withFieldAdded(durationFieldType39, 98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        int int10 = property4.getMinimumValue();
        java.lang.String str11 = property4.getName();
        org.joda.time.DurationField durationField12 = property4.getDurationField();
        int int13 = property4.getMaximumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "monthOfYear" + "'", str11, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.plusYears((int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = yearMonth32.getFieldTypes();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth.Property property38 = yearMonth37.monthOfYear();
        int int39 = property38.getMaximumValue();
        java.util.Locale locale40 = null;
        int int41 = property38.getMaximumShortTextLength(locale40);
        java.util.Locale locale42 = null;
        int int43 = property38.getMaximumTextLength(locale42);
        org.joda.time.DurationField durationField44 = property38.getRangeDurationField();
        java.util.Locale locale45 = null;
        int int46 = property38.getMaximumShortTextLength(locale45);
        org.joda.time.YearMonth yearMonth48 = property38.addToCopy(100);
        boolean boolean49 = yearMonth32.isAfter((org.joda.time.ReadablePartial) yearMonth48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = yearMonth32.getFieldType((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.YearMonth yearMonth53 = yearMonth32.minus(readablePeriod52);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(yearMonth53);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        org.joda.time.YearMonth yearMonth13 = property4.addToCopy(3);
        java.lang.String str14 = property4.getAsString();
        java.lang.String str15 = property4.getAsShortText();
        org.joda.time.DurationField durationField16 = property4.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property4.getFieldType();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Oct" + "'", str15, "Oct");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        org.joda.time.DurationField durationField16 = property4.getDurationField();
        org.joda.time.DateTimeField dateTimeField17 = property4.getField();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property4.getAsText(locale18);
        java.util.Locale locale20 = null;
        java.lang.String str21 = property4.getAsText(locale20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((java.lang.Object) property4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.YearMonth$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "October" + "'", str19, "October");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "October" + "'", str21, "October");
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        org.joda.time.YearMonth yearMonth41 = yearMonth36.plusMonths((int) (byte) 10);
        int int42 = property32.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        boolean boolean49 = yearMonth36.isAfter((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = yearMonth36.indexOf(dateTimeFieldType50);
        int int52 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.YearMonth yearMonth54 = yearMonth36.minusYears(11);
        org.joda.time.YearMonth.Property property55 = yearMonth36.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property55.getFieldType();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = yearMonth18.toString(dateTimeFormatter22);
        org.joda.time.YearMonth.Property property24 = yearMonth18.year();
        org.joda.time.YearMonth yearMonth26 = property24.setCopy(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = yearMonth26.toString(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0097-10" + "'", str23, "0097-10");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0000-10" + "'", str28, "0000-10");
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.lang.String str8 = property4.getAsString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        boolean boolean22 = yearMonth14.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth.Property property27 = yearMonth26.monthOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        org.joda.time.YearMonth yearMonth36 = yearMonth31.plusMonths((int) (byte) 10);
        int int37 = property27.compareTo((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology38 = yearMonth31.getChronology();
        org.joda.time.YearMonth yearMonth39 = yearMonth18.withChronologyRetainFields(chronology38);
        org.joda.time.YearMonth yearMonth41 = yearMonth39.plusYears((int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = yearMonth41.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Interval interval44 = yearMonth41.toInterval(dateTimeZone43);
        int int45 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.YearMonth yearMonth47 = property4.addWrapFieldToCopy((int) '#');
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10" + "'", str8, "10");
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(yearMonth47);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.lang.String str11 = property4.toString();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property4.getAsText(locale12);
        java.lang.String str14 = property4.getName();
        java.util.Locale locale15 = null;
        java.lang.String str16 = property4.getAsShortText(locale15);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "October" + "'", str13, "October");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Oct" + "'", str16, "Oct");
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        boolean boolean14 = yearMonth12.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.YearMonth yearMonth30 = property19.getYearMonth();
        java.lang.String str31 = property19.getAsText();
        org.joda.time.YearMonth yearMonth32 = property19.getYearMonth();
        boolean boolean33 = yearMonth12.isBefore((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.YearMonth yearMonth35 = yearMonth12.minusYears(3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = yearMonth35.getFieldTypes();
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withYear((int) ' ');
        org.joda.time.YearMonth.Property property39 = yearMonth38.year();
        int int40 = yearMonth38.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth42 = yearMonth38.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "October" + "'", str31, "October");
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.YearMonth.Property property5 = yearMonth3.year();
        int int6 = property5.get();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth yearMonth9 = yearMonth7.minusYears((int) (short) 0);
        int int10 = yearMonth7.size();
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        boolean boolean27 = yearMonth19.isAfter((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Interval interval28 = yearMonth19.toInterval();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = yearMonth32.indexOf(dateTimeFieldType38);
        org.joda.time.Interval interval40 = yearMonth32.toInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        int int46 = property45.getMaximumValue();
        java.lang.String str47 = property45.getAsShortText();
        java.util.Locale locale48 = null;
        java.lang.String str49 = property45.getAsShortText(locale48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property45.getFieldType();
        int int51 = yearMonth32.get(dateTimeFieldType50);
        org.joda.time.YearMonth.Property property52 = yearMonth19.property(dateTimeFieldType50);
        boolean boolean53 = yearMonth13.isSupported(dateTimeFieldType50);
        org.joda.time.YearMonth yearMonth55 = yearMonth7.withField(dateTimeFieldType50, (int) (short) 10);
        boolean boolean56 = yearMonth3.isBefore((org.joda.time.ReadablePartial) yearMonth7);
        java.util.Locale locale58 = null;
        java.lang.String str59 = yearMonth7.toString("1970-01", locale58);
        org.joda.time.YearMonth.Property property60 = yearMonth7.monthOfYear();
        int int61 = property60.getMaximumValueOverall();
        java.util.Locale locale62 = null;
        int int63 = property60.getMaximumTextLength(locale62);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Oct" + "'", str47, "Oct");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Oct" + "'", str49, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01" + "'", str59, "1970-01");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 12 + "'", int61 == 12);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.lang.String str8 = property4.getName();
        org.joda.time.YearMonth yearMonth10 = property4.addWrapFieldToCopy(12);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.YearMonth yearMonth13 = yearMonth10.withPeriodAdded(readablePeriod11, 3);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        int int15 = property14.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology2 = yearMonth1.getChronology();
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((long) 3, chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth3.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = yearMonth3.toString(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01" + "'", str6, "1970-01");
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        int[] intArray4 = yearMonth3.getValues();
        org.joda.time.YearMonth yearMonth6 = yearMonth3.withYear(11);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        boolean boolean21 = yearMonth13.isAfter((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth.Property property26 = yearMonth25.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        int int36 = property26.compareTo((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.Chronology chronology37 = yearMonth30.getChronology();
        org.joda.time.YearMonth yearMonth38 = yearMonth17.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((long) (short) 1, chronology37);
        org.joda.time.YearMonth yearMonth40 = org.joda.time.YearMonth.now(chronology37);
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3, chronology37);
        org.joda.time.YearMonth yearMonth42 = org.joda.time.YearMonth.now(chronology37);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 10]");
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth42);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.YearMonth yearMonth33 = org.joda.time.YearMonth.now(chronology30);
        org.joda.time.Chronology chronology34 = yearMonth33.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField36 = yearMonth33.getField(98);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 98");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(chronology34);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        org.joda.time.Interval interval8 = yearMonth5.toInterval();
        org.joda.time.Chronology chronology9 = yearMonth5.getChronology();
        org.joda.time.YearMonth yearMonth10 = yearMonth1.withChronologyRetainFields(chronology9);
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((long) (byte) 0, chronology9);
        org.joda.time.YearMonth yearMonth12 = org.joda.time.YearMonth.now(chronology9);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.YearMonth yearMonth14 = yearMonth12.plus(readablePeriod13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonth yearMonth16 = yearMonth12.minus(readablePeriod15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.plusMonths(0);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth18);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth9.withYear((int) (byte) 1);
        int int33 = yearMonth32.getMonthOfYear();
        org.joda.time.YearMonth.Property property34 = yearMonth32.year();
        int int35 = property34.getMinimumValue();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-292275054) + "'", int35 == (-292275054));
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.YearMonth yearMonth3 = yearMonth1.plus(readablePeriod2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField5 = yearMonth3.getField((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth3);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        org.joda.time.YearMonth yearMonth29 = yearMonth3.minusYears(100);
        java.lang.Object obj30 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        int int51 = property41.compareTo((org.joda.time.ReadablePartial) yearMonth45);
        org.joda.time.Chronology chronology52 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth53 = org.joda.time.YearMonth.now(chronology52);
        org.joda.time.YearMonth yearMonth54 = yearMonth36.withChronologyRetainFields(chronology52);
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth(obj30, chronology52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((java.lang.Object) 100, chronology52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(yearMonth54);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        org.joda.time.YearMonth yearMonth13 = property4.addToCopy(3);
        java.lang.String str14 = property4.getAsString();
        org.joda.time.YearMonth yearMonth16 = property4.addToCopy(0);
        org.joda.time.YearMonth yearMonth18 = property4.addWrapFieldToCopy((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((java.lang.Object) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Byte");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth18);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        java.lang.String str17 = property15.toString();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[monthOfYear]" + "'", str17, "Property[monthOfYear]");
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        java.lang.String str6 = yearMonth3.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        org.joda.time.Interval interval13 = yearMonth10.toInterval();
        org.joda.time.Chronology chronology14 = yearMonth10.getChronology();
        boolean boolean15 = yearMonth3.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth17 = yearMonth3.minus(readablePeriod16);
        java.lang.Object obj18 = null;
        boolean boolean19 = yearMonth3.equals(obj18);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0097-10" + "'", str6, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth yearMonth9 = yearMonth7.minusYears((int) (short) 0);
        int int10 = yearMonth7.size();
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        boolean boolean27 = yearMonth19.isAfter((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Interval interval28 = yearMonth19.toInterval();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = yearMonth32.indexOf(dateTimeFieldType38);
        org.joda.time.Interval interval40 = yearMonth32.toInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        int int46 = property45.getMaximumValue();
        java.lang.String str47 = property45.getAsShortText();
        java.util.Locale locale48 = null;
        java.lang.String str49 = property45.getAsShortText(locale48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property45.getFieldType();
        int int51 = yearMonth32.get(dateTimeFieldType50);
        org.joda.time.YearMonth.Property property52 = yearMonth19.property(dateTimeFieldType50);
        boolean boolean53 = yearMonth13.isSupported(dateTimeFieldType50);
        org.joda.time.YearMonth yearMonth55 = yearMonth7.withField(dateTimeFieldType50, (int) (short) 10);
        boolean boolean56 = yearMonth3.isBefore((org.joda.time.ReadablePartial) yearMonth7);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.Interval interval58 = yearMonth3.toInterval(dateTimeZone57);
        org.joda.time.YearMonth yearMonth60 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Interval interval62 = yearMonth60.toInterval(dateTimeZone61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = yearMonth60.getFieldType((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth66 = yearMonth3.withField(dateTimeFieldType64, 1980);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1980 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Oct" + "'", str47, "Oct");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Oct" + "'", str49, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property4.getFieldType();
        java.lang.String str9 = property4.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[monthOfYear]" + "'", str9, "Property[monthOfYear]");
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.lang.String str11 = property4.toString();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property4.getAsText(locale12);
        java.lang.String str14 = property4.getName();
        java.lang.String str15 = property4.getAsShortText();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "October" + "'", str13, "October");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Oct" + "'", str15, "Oct");
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        org.joda.time.YearMonth yearMonth13 = property4.addToCopy(3);
        java.lang.String str14 = property4.getAsString();
        org.joda.time.YearMonth yearMonth16 = property4.addToCopy(0);
        int int17 = property4.get();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        int int7 = yearMonth4.size();
        org.joda.time.YearMonth yearMonth9 = yearMonth4.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = yearMonth4.indexOf(dateTimeFieldType10);
        org.joda.time.YearMonth yearMonth13 = yearMonth4.plusMonths((-1));
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.YearMonth yearMonth16 = yearMonth13.withPeriodAdded(readablePeriod14, 3);
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology18 = yearMonth17.getChronology();
        org.joda.time.YearMonth yearMonth19 = yearMonth13.withChronologyRetainFields(chronology18);
        org.joda.time.Chronology chronology20 = yearMonth13.getChronology();
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((long) (byte) 0, chronology20);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        int int17 = property15.getMaximumValueOverall();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property15.getAsText(locale18);
        org.joda.time.DurationField durationField20 = property15.getRangeDurationField();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "September" + "'", str19, "September");
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        int int47 = property46.getMinimumValue();
        java.util.Locale locale48 = null;
        int int49 = property46.getMaximumShortTextLength(locale48);
        org.joda.time.YearMonth yearMonth51 = property46.addToCopy((int) (short) 1);
        boolean boolean52 = yearMonth3.equals((java.lang.Object) yearMonth51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology61);
        org.joda.time.YearMonth yearMonth64 = yearMonth62.minusYears((int) (short) 0);
        int int65 = yearMonth62.size();
        boolean boolean66 = yearMonth58.isAfter((org.joda.time.ReadablePartial) yearMonth62);
        org.joda.time.Interval interval67 = yearMonth58.toInterval();
        org.joda.time.YearMonth.Property property68 = yearMonth58.year();
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.YearMonth yearMonth70 = yearMonth58.minus(readablePeriod69);
        boolean boolean71 = yearMonth51.isEqual((org.joda.time.ReadablePartial) yearMonth70);
        org.joda.time.YearMonth yearMonth72 = new org.joda.time.YearMonth((java.lang.Object) yearMonth70);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    @Ignore
  public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth(chronology29);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.plusMonths((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = yearMonth31.toString(dateTimeFormatter34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField37 = yearMonth31.getField((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2020-11" + "'", str35, "2020-11");
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        java.lang.String str9 = property4.getAsString();
        org.joda.time.YearMonth yearMonth10 = property4.getYearMonth();
        java.util.Locale locale11 = null;
        int int12 = property4.getMaximumTextLength(locale11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property4.getFieldType();
        java.util.Locale locale15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth16 = property4.setCopy("0097-12", locale15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0097-12\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "10" + "'", str9, "10");
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.YearMonth yearMonth3 = yearMonth1.plusMonths((int) (short) 10);
        org.joda.time.Interval interval4 = yearMonth1.toInterval();
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertNotNull(interval4);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(9, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.YearMonth.Property property36 = yearMonth3.property(dateTimeFieldType34);
        java.lang.String str37 = property36.getAsText();
        java.lang.String str38 = property36.getAsString();
        java.lang.String str39 = property36.getAsShortText();
        org.joda.time.YearMonth yearMonth41 = property36.addToCopy(0);
        org.joda.time.DurationField durationField42 = property36.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property36.getFieldType();
        int int44 = property36.getMinimumValue();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology51);
        org.joda.time.YearMonth.Property property53 = yearMonth52.monthOfYear();
        int int54 = property53.getMaximumValue();
        java.util.Locale locale55 = null;
        int int56 = property53.getMaximumShortTextLength(locale55);
        java.util.Locale locale57 = null;
        int int58 = property53.getMaximumTextLength(locale57);
        org.joda.time.DurationField durationField59 = property53.getRangeDurationField();
        java.util.Locale locale60 = null;
        java.lang.String str61 = property53.getAsShortText(locale60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property53.getFieldType();
        boolean boolean63 = yearMonth48.isSupported(dateTimeFieldType62);
        int[] intArray64 = yearMonth48.getValues();
        org.joda.time.YearMonth yearMonth66 = yearMonth48.withMonthOfYear(11);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.YearMonth yearMonth70 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology69);
        org.joda.time.YearMonth.Property property71 = yearMonth70.monthOfYear();
        int int72 = property71.getMaximumValue();
        java.util.Locale locale73 = null;
        int int74 = property71.getMaximumShortTextLength(locale73);
        java.util.Locale locale75 = null;
        int int76 = property71.getMaximumTextLength(locale75);
        org.joda.time.DurationField durationField77 = property71.getRangeDurationField();
        java.lang.String str78 = property71.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = property71.getFieldType();
        org.joda.time.YearMonth.Property property80 = yearMonth48.property(dateTimeFieldType79);
        int int81 = property36.compareTo((org.joda.time.ReadablePartial) yearMonth48);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "October" + "'", str37, "October");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "10" + "'", str38, "10");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Oct" + "'", str39, "Oct");
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 12 + "'", int54 == 12);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Oct" + "'", str61, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[97, 10]");
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 12 + "'", int72 == 12);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 9 + "'", int76 == 9);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Property[monthOfYear]" + "'", str78, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addToCopy((int) (short) 10);
        int[] intArray13 = yearMonth12.getValues();
        org.joda.time.YearMonth yearMonth15 = yearMonth12.minusYears((int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth.Property property20 = yearMonth19.monthOfYear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        org.joda.time.YearMonth yearMonth29 = yearMonth24.plusMonths((int) (byte) 10);
        int int30 = property20.compareTo((org.joda.time.ReadablePartial) yearMonth24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = yearMonth24.toString(dateTimeFormatter31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth.Property property37 = yearMonth36.monthOfYear();
        int int38 = property37.getMinimumValue();
        java.util.Locale locale39 = null;
        int int40 = property37.getMaximumShortTextLength(locale39);
        org.joda.time.DurationField durationField41 = property37.getDurationField();
        boolean boolean42 = yearMonth24.equals((java.lang.Object) property37);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        int int49 = yearMonth46.size();
        org.joda.time.YearMonth yearMonth51 = yearMonth46.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        int int53 = yearMonth46.indexOf(dateTimeFieldType52);
        org.joda.time.YearMonth yearMonth55 = yearMonth46.plusMonths((-1));
        boolean boolean57 = yearMonth55.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology60);
        org.joda.time.YearMonth.Property property62 = yearMonth61.monthOfYear();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth yearMonth68 = yearMonth66.minusYears((int) (short) 0);
        int int69 = yearMonth66.size();
        org.joda.time.YearMonth yearMonth71 = yearMonth66.plusMonths((int) (byte) 10);
        int int72 = property62.compareTo((org.joda.time.ReadablePartial) yearMonth66);
        org.joda.time.YearMonth yearMonth73 = property62.getYearMonth();
        java.lang.String str74 = property62.getAsText();
        org.joda.time.YearMonth yearMonth75 = property62.getYearMonth();
        boolean boolean76 = yearMonth55.isBefore((org.joda.time.ReadablePartial) yearMonth75);
        org.joda.time.YearMonth yearMonth78 = yearMonth55.minusYears(3);
        int int79 = yearMonth24.compareTo((org.joda.time.ReadablePartial) yearMonth55);
        int int80 = yearMonth15.compareTo((org.joda.time.ReadablePartial) yearMonth24);
        int[] intArray81 = yearMonth24.getValues();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[98, 8]");
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0097-10" + "'", str32, "0097-10");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "October" + "'", str74, "October");
        org.junit.Assert.assertNotNull(yearMonth75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(yearMonth78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[97, 10]");
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.YearMonth.Property property36 = yearMonth3.property(dateTimeFieldType34);
        org.joda.time.Chronology chronology37 = yearMonth3.getChronology();
        org.joda.time.YearMonth yearMonth38 = org.joda.time.YearMonth.now(chronology37);
        org.joda.time.YearMonth yearMonth39 = org.joda.time.YearMonth.now(chronology37);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth yearMonth45 = yearMonth43.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth yearMonth51 = yearMonth49.minusYears((int) (short) 0);
        int int52 = yearMonth49.size();
        boolean boolean53 = yearMonth45.isAfter((org.joda.time.ReadablePartial) yearMonth49);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.YearMonth yearMonth57 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology56);
        org.joda.time.YearMonth.Property property58 = yearMonth57.monthOfYear();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology61);
        org.joda.time.YearMonth yearMonth64 = yearMonth62.minusYears((int) (short) 0);
        int int65 = yearMonth62.size();
        org.joda.time.YearMonth yearMonth67 = yearMonth62.plusMonths((int) (byte) 10);
        int int68 = property58.compareTo((org.joda.time.ReadablePartial) yearMonth62);
        org.joda.time.Chronology chronology69 = yearMonth62.getChronology();
        org.joda.time.YearMonth yearMonth70 = yearMonth49.withChronologyRetainFields(chronology69);
        org.joda.time.YearMonth yearMonth72 = yearMonth70.plusYears((int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray73 = yearMonth72.getFieldTypes();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.YearMonth yearMonth77 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology76);
        org.joda.time.YearMonth.Property property78 = yearMonth77.monthOfYear();
        int int79 = property78.getMaximumValue();
        java.util.Locale locale80 = null;
        int int81 = property78.getMaximumShortTextLength(locale80);
        java.util.Locale locale82 = null;
        int int83 = property78.getMaximumTextLength(locale82);
        org.joda.time.DurationField durationField84 = property78.getRangeDurationField();
        java.util.Locale locale85 = null;
        int int86 = property78.getMaximumShortTextLength(locale85);
        org.joda.time.YearMonth yearMonth88 = property78.addToCopy(100);
        boolean boolean89 = yearMonth72.isAfter((org.joda.time.ReadablePartial) yearMonth88);
        boolean boolean90 = yearMonth39.isAfter((org.joda.time.ReadablePartial) yearMonth88);
        java.lang.Class<?> wildcardClass91 = yearMonth39.getClass();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray73);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 12 + "'", int79 == 12);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 9 + "'", int83 == 9);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 3 + "'", int86 == 3);
        org.junit.Assert.assertNotNull(yearMonth88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        boolean boolean23 = yearMonth15.isAfter((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.Interval interval24 = yearMonth15.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        int int31 = yearMonth28.size();
        org.joda.time.YearMonth yearMonth33 = yearMonth28.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = yearMonth28.indexOf(dateTimeFieldType34);
        org.joda.time.Interval interval36 = yearMonth28.toInterval();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        int int42 = property41.getMaximumValue();
        java.lang.String str43 = property41.getAsShortText();
        java.util.Locale locale44 = null;
        java.lang.String str45 = property41.getAsShortText(locale44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property41.getFieldType();
        int int47 = yearMonth28.get(dateTimeFieldType46);
        org.joda.time.YearMonth.Property property48 = yearMonth15.property(dateTimeFieldType46);
        boolean boolean49 = yearMonth9.isSupported(dateTimeFieldType46);
        org.joda.time.YearMonth yearMonth51 = yearMonth3.withField(dateTimeFieldType46, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = yearMonth51.getValue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 12 + "'", int42 == 12);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Oct" + "'", str43, "Oct");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Oct" + "'", str45, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(yearMonth51);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.YearMonth yearMonth19 = property4.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property4.getFieldType();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("November");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"November\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth yearMonth17 = yearMonth3.minusMonths(0);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.Chronology chronology20 = yearMonth19.getChronology();
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth(chronology20);
        int int22 = yearMonth17.compareTo((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.Chronology chronology23 = yearMonth17.getChronology();
        org.joda.time.YearMonth yearMonth24 = org.joda.time.YearMonth.now(chronology23);
        org.joda.time.ReadablePartial readablePartial25 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = yearMonth24.isBefore(readablePartial25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonth24);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.parse("0097-08", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth.Property property5 = yearMonth4.monthOfYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        org.joda.time.YearMonth yearMonth14 = yearMonth9.plusMonths((int) (byte) 10);
        int int15 = property5.compareTo((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth yearMonth16 = property5.getYearMonth();
        java.lang.String str17 = property5.getAsText();
        org.joda.time.YearMonth yearMonth18 = property5.getYearMonth();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        boolean boolean37 = yearMonth29.isAfter((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth.Property property42 = yearMonth41.monthOfYear();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        int int49 = yearMonth46.size();
        org.joda.time.YearMonth yearMonth51 = yearMonth46.plusMonths((int) (byte) 10);
        int int52 = property42.compareTo((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.Chronology chronology53 = yearMonth46.getChronology();
        org.joda.time.YearMonth yearMonth54 = yearMonth33.withChronologyRetainFields(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.YearMonth yearMonth57 = yearMonth54.withPeriodAdded(readablePeriod55, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        int int59 = yearMonth57.indexOf(dateTimeFieldType58);
        boolean boolean60 = yearMonth22.isEqual((org.joda.time.ReadablePartial) yearMonth57);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology63);
        org.joda.time.YearMonth.Property property65 = yearMonth64.monthOfYear();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.YearMonth yearMonth69 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology68);
        org.joda.time.YearMonth yearMonth71 = yearMonth69.minusYears((int) (short) 0);
        int int72 = yearMonth69.size();
        org.joda.time.YearMonth yearMonth74 = yearMonth69.plusMonths((int) (byte) 10);
        int int75 = property65.compareTo((org.joda.time.ReadablePartial) yearMonth69);
        boolean boolean76 = yearMonth22.isEqual((org.joda.time.ReadablePartial) yearMonth69);
        boolean boolean77 = yearMonth18.isAfter((org.joda.time.ReadablePartial) yearMonth22);
        boolean boolean78 = yearMonth0.isEqual((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.YearMonth yearMonth80 = yearMonth0.plus(readablePeriod79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.YearMonth yearMonth82 = yearMonth0.minus(readablePeriod81);
        org.joda.time.YearMonth yearMonth84 = yearMonth0.minusYears((int) (short) -1);
        java.util.Locale locale86 = null;
        java.lang.String str87 = yearMonth84.toString("0098-06", locale86);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "October" + "'", str17, "October");
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertNotNull(yearMonth82);
        org.junit.Assert.assertNotNull(yearMonth84);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "0098-06" + "'", str87, "0098-06");
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy(100);
        int int13 = yearMonth12.getMonthOfYear();
        org.joda.time.YearMonth.Property property14 = yearMonth12.year();
        java.lang.String str15 = property14.toString();
        org.joda.time.YearMonth yearMonth16 = property14.getYearMonth();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[year]" + "'", str15, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonth16);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Interval interval31 = yearMonth23.toInterval(dateTimeZone30);
        org.joda.time.YearMonth yearMonth33 = yearMonth23.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth yearMonth45 = yearMonth43.minusYears((int) (short) 0);
        int int46 = yearMonth43.size();
        boolean boolean47 = yearMonth39.isAfter((org.joda.time.ReadablePartial) yearMonth43);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology50);
        org.joda.time.YearMonth.Property property52 = yearMonth51.monthOfYear();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        int int59 = yearMonth56.size();
        org.joda.time.YearMonth yearMonth61 = yearMonth56.plusMonths((int) (byte) 10);
        int int62 = property52.compareTo((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology63 = yearMonth56.getChronology();
        org.joda.time.YearMonth yearMonth64 = yearMonth43.withChronologyRetainFields(chronology63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.YearMonth yearMonth67 = yearMonth64.withPeriodAdded(readablePeriod65, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = null;
        int int69 = yearMonth67.indexOf(dateTimeFieldType68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.YearMonth yearMonth73 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology72);
        org.joda.time.YearMonth.Property property74 = yearMonth73.monthOfYear();
        int int75 = property74.getMaximumValue();
        java.lang.String str76 = property74.getAsShortText();
        java.util.Locale locale77 = null;
        java.lang.String str78 = property74.getAsShortText(locale77);
        org.joda.time.YearMonth yearMonth80 = property74.setCopy("October");
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = yearMonth80.toDateTime(readableInstant81);
        org.joda.time.DateTime dateTime83 = yearMonth67.toDateTime(readableInstant81);
        org.joda.time.DateTime dateTime84 = yearMonth23.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime85 = yearMonth14.toDateTime((org.joda.time.ReadableInstant) dateTime84);
        boolean boolean86 = yearMonth8.isEqual((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.YearMonth.Property property87 = yearMonth8.monthOfYear();
        java.util.Locale locale89 = null;
        java.lang.String str90 = yearMonth8.toString("1970-01", locale89);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 12 + "'", int75 == 12);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Oct" + "'", str76, "Oct");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Oct" + "'", str78, "Oct");
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "1970-01" + "'", str90, "1970-01");
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        java.lang.String str9 = property4.getAsString();
        org.joda.time.YearMonth yearMonth10 = property4.getYearMonth();
        java.util.Locale locale11 = null;
        int int12 = property4.getMaximumTextLength(locale11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property4.getFieldType();
        java.lang.String str14 = property4.getAsString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "10" + "'", str9, "10");
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMinimumValueOverall();
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy((int) ' ');
        org.joda.time.YearMonth yearMonth14 = property4.addWrapFieldToCopy(2);
        java.lang.String str15 = yearMonth14.toString();
        int int16 = yearMonth14.getMonthOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        int int22 = property21.getMaximumValue();
        java.lang.String str23 = property21.getAsShortText();
        java.util.Locale locale24 = null;
        java.lang.String str25 = property21.getAsShortText(locale24);
        org.joda.time.YearMonth yearMonth27 = property21.setCopy("October");
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = yearMonth27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minusYears((int) (short) 0);
        int int43 = yearMonth40.size();
        boolean boolean44 = yearMonth36.isAfter((org.joda.time.ReadablePartial) yearMonth40);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology47);
        org.joda.time.YearMonth.Property property49 = yearMonth48.monthOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology52);
        org.joda.time.YearMonth yearMonth55 = yearMonth53.minusYears((int) (short) 0);
        int int56 = yearMonth53.size();
        org.joda.time.YearMonth yearMonth58 = yearMonth53.plusMonths((int) (byte) 10);
        int int59 = property49.compareTo((org.joda.time.ReadablePartial) yearMonth53);
        org.joda.time.Chronology chronology60 = yearMonth53.getChronology();
        org.joda.time.YearMonth yearMonth61 = yearMonth40.withChronologyRetainFields(chronology60);
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((long) (short) 1, chronology60);
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((java.lang.Object) readableInstant28, chronology60);
        org.joda.time.YearMonth yearMonth64 = org.joda.time.YearMonth.now(chronology60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth65 = new org.joda.time.YearMonth((java.lang.Object) int16, chronology60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0097-12" + "'", str15, "0097-12");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Oct" + "'", str23, "Oct");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Oct" + "'", str25, "Oct");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertNotNull(yearMonth64);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        org.joda.time.YearMonth yearMonth17 = property15.getYearMonth();
        org.joda.time.YearMonth yearMonth19 = property15.addToCopy(0);
        java.util.Locale locale21 = null;
        java.lang.String str22 = yearMonth19.toString("1980-01", locale21);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1980-01" + "'", str22, "1980-01");
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.DateTimeField[] dateTimeFieldArray38 = yearMonth37.getFields();
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth yearMonth45 = yearMonth43.minusYears((int) (short) 0);
        org.joda.time.Interval interval46 = yearMonth43.toInterval();
        org.joda.time.Chronology chronology47 = yearMonth43.getChronology();
        org.joda.time.YearMonth yearMonth48 = yearMonth39.withChronologyRetainFields(chronology47);
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth(chronology47);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology52);
        org.joda.time.YearMonth yearMonth55 = yearMonth53.minusYears((int) (short) 0);
        int int56 = yearMonth53.size();
        org.joda.time.YearMonth yearMonth58 = yearMonth53.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        int int60 = yearMonth53.indexOf(dateTimeFieldType59);
        org.joda.time.YearMonth yearMonth62 = yearMonth53.plusMonths((-1));
        org.joda.time.YearMonth yearMonth64 = yearMonth53.plusMonths((-1));
        org.joda.time.YearMonth.Property property65 = yearMonth64.monthOfYear();
        int int66 = property65.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property65.getFieldType();
        int int68 = yearMonth49.indexOf(dateTimeFieldType67);
        int int69 = yearMonth37.indexOf(dateTimeFieldType67);
        org.joda.time.YearMonth yearMonth71 = yearMonth37.minusMonths(0);
        org.joda.time.YearMonth yearMonth73 = yearMonth37.minusYears(10);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(dateTimeFieldArray38);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertNotNull(yearMonth73);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Interval interval6 = yearMonth3.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonth3.getFieldTypes();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        boolean boolean21 = yearMonth13.isAfter((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth.Property property26 = yearMonth25.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        int int36 = property26.compareTo((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.Chronology chronology37 = yearMonth30.getChronology();
        org.joda.time.YearMonth yearMonth38 = yearMonth17.withChronologyRetainFields(chronology37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonth42.indexOf(dateTimeFieldType48);
        org.joda.time.Interval interval50 = yearMonth42.toInterval();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth.Property property55 = yearMonth54.monthOfYear();
        int int56 = property55.getMaximumValue();
        java.lang.String str57 = property55.getAsShortText();
        java.util.Locale locale58 = null;
        java.lang.String str59 = property55.getAsShortText(locale58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property55.getFieldType();
        int int61 = yearMonth42.get(dateTimeFieldType60);
        boolean boolean62 = yearMonth38.isSupported(dateTimeFieldType60);
        org.joda.time.YearMonth yearMonth64 = yearMonth3.withField(dateTimeFieldType60, (int) (short) 1);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 12 + "'", int56 == 12);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Oct" + "'", str57, "Oct");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Oct" + "'", str59, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(yearMonth64);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        boolean boolean24 = yearMonth16.isAfter((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        int int39 = property29.compareTo((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = yearMonth33.getChronology();
        org.joda.time.YearMonth yearMonth41 = yearMonth20.withChronologyRetainFields(chronology40);
        int int42 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        int int43 = yearMonth20.getYear();
        org.joda.time.DateTimeField[] dateTimeFieldArray44 = yearMonth20.getFields();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertNotNull(dateTimeFieldArray44);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        org.joda.time.YearMonth yearMonth13 = property4.addToCopy(3);
        java.lang.String str14 = property4.getAsString();
        java.util.Locale locale15 = null;
        java.lang.String str16 = property4.getAsShortText(locale15);
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        java.lang.String str18 = property4.getAsShortText();
        int int19 = property4.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField20 = property4.getField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Oct" + "'", str16, "Oct");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy(100);
        int int13 = yearMonth12.getMonthOfYear();
        org.joda.time.YearMonth.Property property14 = yearMonth12.year();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.YearMonth yearMonth27 = yearMonth18.plusMonths((-1));
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        org.joda.time.YearMonth yearMonth36 = yearMonth31.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        int int38 = yearMonth31.indexOf(dateTimeFieldType37);
        org.joda.time.Interval interval39 = yearMonth31.toInterval();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth.Property property44 = yearMonth43.monthOfYear();
        int int45 = property44.getMaximumValue();
        java.lang.String str46 = property44.getAsShortText();
        java.util.Locale locale47 = null;
        java.lang.String str48 = property44.getAsShortText(locale47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property44.getFieldType();
        int int50 = yearMonth31.get(dateTimeFieldType49);
        org.joda.time.YearMonth.Property property51 = yearMonth18.property(dateTimeFieldType49);
        org.joda.time.Chronology chronology52 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth(chronology52);
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth yearMonth60 = yearMonth58.minusYears((int) (short) 0);
        org.joda.time.Interval interval61 = yearMonth58.toInterval();
        org.joda.time.Chronology chronology62 = yearMonth58.getChronology();
        org.joda.time.YearMonth yearMonth63 = yearMonth54.withChronologyRetainFields(chronology62);
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth(chronology62);
        org.joda.time.YearMonth yearMonth65 = yearMonth53.withChronologyRetainFields(chronology62);
        org.joda.time.YearMonth yearMonth66 = yearMonth12.withChronologyRetainFields(chronology62);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = null;
        java.lang.String str68 = yearMonth12.toString(dateTimeFormatter67);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 12 + "'", int45 == 12);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Oct" + "'", str46, "Oct");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Oct" + "'", str48, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0097-02" + "'", str68, "0097-02");
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMinimumValueOverall();
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy((int) ' ');
        org.joda.time.YearMonth yearMonth14 = property4.addWrapFieldToCopy(2);
        org.joda.time.YearMonth yearMonth16 = property4.setCopy(9);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 1);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((java.lang.Object) yearMonth16);
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusYears(10);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.YearMonth yearMonth23 = yearMonth16.plus(readablePeriod22);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(yearMonth23);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth8.minusMonths((int) (short) -1);
        org.joda.time.YearMonth.Property property27 = yearMonth26.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((java.lang.Object) property27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.YearMonth$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.YearMonth.Property property5 = yearMonth3.year();
        int int6 = yearMonth3.size();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.YearMonth.Property property5 = yearMonth3.year();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = yearMonth8.toString(dateTimeFormatter15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        int int22 = property21.getMinimumValue();
        java.util.Locale locale23 = null;
        int int24 = property21.getMaximumShortTextLength(locale23);
        org.joda.time.DurationField durationField25 = property21.getDurationField();
        boolean boolean26 = yearMonth8.equals((java.lang.Object) property21);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        int int37 = yearMonth30.indexOf(dateTimeFieldType36);
        org.joda.time.YearMonth yearMonth39 = yearMonth30.plusMonths((-1));
        boolean boolean41 = yearMonth39.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        int int53 = yearMonth50.size();
        org.joda.time.YearMonth yearMonth55 = yearMonth50.plusMonths((int) (byte) 10);
        int int56 = property46.compareTo((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.YearMonth yearMonth57 = property46.getYearMonth();
        java.lang.String str58 = property46.getAsText();
        org.joda.time.YearMonth yearMonth59 = property46.getYearMonth();
        boolean boolean60 = yearMonth39.isBefore((org.joda.time.ReadablePartial) yearMonth59);
        org.joda.time.YearMonth yearMonth62 = yearMonth39.minusYears(3);
        int int63 = yearMonth8.compareTo((org.joda.time.ReadablePartial) yearMonth39);
        org.joda.time.YearMonth yearMonth65 = yearMonth39.minusYears(12);
        org.joda.time.YearMonth yearMonth67 = yearMonth39.plusYears((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int69 = yearMonth67.getValue(2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0097-10" + "'", str16, "0097-10");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "October" + "'", str58, "October");
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth67);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.YearMonth.Property property36 = yearMonth3.property(dateTimeFieldType34);
        org.joda.time.Chronology chronology37 = yearMonth3.getChronology();
        int int39 = yearMonth3.getValue(0);
        org.joda.time.Interval interval40 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        int int53 = yearMonth50.size();
        boolean boolean54 = yearMonth46.isAfter((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.YearMonth.Property property55 = yearMonth50.year();
        org.joda.time.YearMonth.Property property56 = yearMonth50.year();
        org.joda.time.YearMonth yearMonth58 = yearMonth50.plusMonths(97);
        boolean boolean59 = yearMonth3.isAfter((org.joda.time.ReadablePartial) yearMonth58);
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((int) ' ', 3);
        java.lang.String str64 = yearMonth62.toString("0097-09");
        int int65 = yearMonth62.size();
        boolean boolean66 = yearMonth58.isEqual((org.joda.time.ReadablePartial) yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0097-09" + "'", str64, "0097-09");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addToCopy((int) (short) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        int int16 = yearMonth13.size();
        org.joda.time.YearMonth yearMonth18 = yearMonth13.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonth13.indexOf(dateTimeFieldType19);
        org.joda.time.YearMonth yearMonth22 = yearMonth13.plusMonths((-1));
        org.joda.time.YearMonth yearMonth24 = yearMonth13.plusMonths((-1));
        org.joda.time.YearMonth.Property property25 = yearMonth24.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonth yearMonth28 = yearMonth24.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.Chronology chronology31 = yearMonth30.getChronology();
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth(chronology31);
        org.joda.time.YearMonth yearMonth33 = yearMonth28.withChronologyRetainFields(chronology31);
        int int34 = yearMonth9.compareTo((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth.Property property39 = yearMonth38.monthOfYear();
        int int40 = property39.getMaximumValue();
        java.lang.String str41 = property39.getAsString();
        java.util.Locale locale43 = null;
        org.joda.time.YearMonth yearMonth44 = property39.setCopy("Sep", locale43);
        java.util.Locale locale45 = null;
        int int46 = property39.getMaximumTextLength(locale45);
        java.lang.String str47 = property39.toString();
        org.joda.time.YearMonth yearMonth49 = property39.setCopy("Oct");
        int int50 = yearMonth33.compareTo((org.joda.time.ReadablePartial) yearMonth49);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 12 + "'", int40 == 12);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "10" + "'", str41, "10");
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Property[monthOfYear]" + "'", str47, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    @Ignore
  public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(dateTimeZone0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.YearMonth yearMonth3 = yearMonth1.minus(readablePeriod2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = yearMonth1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        org.joda.time.YearMonth yearMonth14 = yearMonth9.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = yearMonth9.indexOf(dateTimeFieldType15);
        org.joda.time.Interval interval17 = yearMonth9.toInterval();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        int int23 = property22.getMaximumValue();
        java.lang.String str24 = property22.getAsShortText();
        java.util.Locale locale25 = null;
        java.lang.String str26 = property22.getAsShortText(locale25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property22.getFieldType();
        int int28 = yearMonth9.get(dateTimeFieldType27);
        org.joda.time.Interval interval29 = yearMonth9.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = yearMonth9.toString(dateTimeFormatter30);
        int int32 = yearMonth9.getMonthOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        org.joda.time.YearMonth yearMonth41 = yearMonth36.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        int int43 = yearMonth36.indexOf(dateTimeFieldType42);
        org.joda.time.YearMonth yearMonth45 = yearMonth36.plusMonths((-1));
        org.joda.time.YearMonth yearMonth47 = yearMonth36.plusMonths((-1));
        org.joda.time.YearMonth.Property property48 = yearMonth47.monthOfYear();
        int int49 = property48.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property48.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = property48.getFieldType();
        org.joda.time.YearMonth.Property property52 = yearMonth9.property(dateTimeFieldType51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        int int59 = yearMonth56.size();
        org.joda.time.YearMonth yearMonth61 = yearMonth56.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        int int63 = yearMonth56.indexOf(dateTimeFieldType62);
        org.joda.time.Interval interval64 = yearMonth56.toInterval();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology67);
        org.joda.time.YearMonth.Property property69 = yearMonth68.monthOfYear();
        int int70 = property69.getMaximumValue();
        java.lang.String str71 = property69.getAsShortText();
        java.util.Locale locale72 = null;
        java.lang.String str73 = property69.getAsShortText(locale72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = property69.getFieldType();
        int int75 = yearMonth56.get(dateTimeFieldType74);
        org.joda.time.Interval interval76 = yearMonth56.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = null;
        java.lang.String str78 = yearMonth56.toString(dateTimeFormatter77);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.YearMonth yearMonth81 = yearMonth56.withPeriodAdded(readablePeriod79, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.Interval interval83 = yearMonth56.toInterval(dateTimeZone82);
        int int84 = yearMonth9.compareTo((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.YearMonth yearMonth86 = yearMonth9.minus(readablePeriod85);
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.YearMonth yearMonth89 = yearMonth9.withPeriodAdded(readablePeriod87, 100);
        int int90 = yearMonth1.compareTo((org.joda.time.ReadablePartial) yearMonth89);
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2020-11" + "'", str5, "2020-11");
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Oct" + "'", str24, "Oct");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Oct" + "'", str26, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0097-10" + "'", str31, "0097-10");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 12 + "'", int70 == 12);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Oct" + "'", str71, "Oct");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Oct" + "'", str73, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "0097-10" + "'", str78, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth81);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(yearMonth86);
        org.junit.Assert.assertNotNull(yearMonth89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.util.Locale locale10 = null;
        int int11 = property4.getMaximumTextLength(locale10);
        java.lang.String str12 = property4.getAsText();
        org.joda.time.DateTimeField dateTimeField13 = property4.getField();
        org.joda.time.YearMonth yearMonth14 = property4.getYearMonth();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "October" + "'", str12, "October");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(yearMonth14);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        int int9 = yearMonth6.size();
        org.joda.time.YearMonth yearMonth11 = yearMonth6.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = yearMonth6.indexOf(dateTimeFieldType12);
        org.joda.time.YearMonth yearMonth15 = yearMonth6.plusMonths((-1));
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.Interval interval27 = yearMonth19.toInterval();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        int int33 = property32.getMaximumValue();
        java.lang.String str34 = property32.getAsShortText();
        java.util.Locale locale35 = null;
        java.lang.String str36 = property32.getAsShortText(locale35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property32.getFieldType();
        int int38 = yearMonth19.get(dateTimeFieldType37);
        org.joda.time.YearMonth.Property property39 = yearMonth6.property(dateTimeFieldType37);
        org.joda.time.Chronology chronology40 = yearMonth6.getChronology();
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth(chronology40);
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        org.joda.time.Interval interval49 = yearMonth46.toInterval();
        org.joda.time.Chronology chronology50 = yearMonth46.getChronology();
        org.joda.time.YearMonth yearMonth51 = yearMonth42.withChronologyRetainFields(chronology50);
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth(chronology50);
        org.joda.time.YearMonth yearMonth53 = yearMonth41.withChronologyRetainFields(chronology50);
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((long) (short) 10, chronology50);
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth(chronology50);
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth(0, 11, chronology50);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Oct" + "'", str34, "Oct");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Oct" + "'", str36, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(yearMonth53);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.getMaximumValue();
        java.lang.String str17 = property15.getAsShortText();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property15.getAsShortText(locale18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property15.getFieldType();
        org.joda.time.YearMonth.Property property21 = yearMonth3.property(dateTimeFieldType20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        boolean boolean35 = yearMonth27.isAfter((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth.Property property40 = yearMonth39.monthOfYear();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        int int47 = yearMonth44.size();
        org.joda.time.YearMonth yearMonth49 = yearMonth44.plusMonths((int) (byte) 10);
        int int50 = property40.compareTo((org.joda.time.ReadablePartial) yearMonth44);
        org.joda.time.Chronology chronology51 = yearMonth44.getChronology();
        org.joda.time.YearMonth yearMonth52 = yearMonth31.withChronologyRetainFields(chronology51);
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3, chronology51);
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth(chronology51);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.plusMonths((int) (byte) -1);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Oct" + "'", str17, "Oct");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Oct" + "'", str19, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertNotNull(yearMonth56);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField11 = property4.getField();
        org.joda.time.DurationField durationField12 = property4.getDurationField();
        org.joda.time.DateTimeField dateTimeField13 = property4.getField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((int) (byte) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth yearMonth15 = yearMonth9.minusYears(6);
        java.util.Locale locale17 = null;
        java.lang.String str18 = yearMonth9.toString("0086-10", locale17);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0086-10" + "'", str18, "0086-10");
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.YearMonth.Property property36 = yearMonth3.property(dateTimeFieldType34);
        java.lang.String str37 = property36.getAsText();
        java.lang.String str38 = property36.getAsString();
        java.lang.String str39 = property36.getAsShortText();
        org.joda.time.YearMonth yearMonth41 = property36.addToCopy(0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = yearMonth41.getFieldTypes();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        int int48 = property47.getMaximumValue();
        java.util.Locale locale49 = null;
        int int50 = property47.getMaximumShortTextLength(locale49);
        java.util.Locale locale51 = null;
        int int52 = property47.getMaximumTextLength(locale51);
        org.joda.time.DurationField durationField53 = property47.getRangeDurationField();
        java.lang.String str54 = property47.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property47.getFieldType();
        java.util.Locale locale57 = null;
        org.joda.time.YearMonth yearMonth58 = property47.setCopy("October", locale57);
        boolean boolean59 = yearMonth41.isAfter((org.joda.time.ReadablePartial) yearMonth58);
        org.joda.time.YearMonth.Property property60 = yearMonth58.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = null;
        java.lang.String str62 = yearMonth58.toString(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "October" + "'", str37, "October");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "10" + "'", str38, "10");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Oct" + "'", str39, "Oct");
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 12 + "'", int48 == 12);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Property[monthOfYear]" + "'", str54, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0097-10" + "'", str62, "0097-10");
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.YearMonth yearMonth15 = yearMonth9.minus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth18 = yearMonth15.withPeriodAdded(readablePeriod16, (int) (short) 0);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.plusYears((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = yearMonth20.toString(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0129-10" + "'", str22, "0129-10");
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth.Property property10 = yearMonth3.year();
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths(12);
        org.joda.time.Chronology chronology13 = yearMonth3.getChronology();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth5.getYear();
        org.joda.time.YearMonth yearMonth8 = yearMonth5.minusYears(0);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonth yearMonth11 = yearMonth8.withPeriodAdded(readablePeriod9, (int) (byte) 0);
        java.lang.String str12 = yearMonth8.toString();
        org.joda.time.Chronology chronology13 = yearMonth8.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = yearMonth8.getFieldTypes();
        org.joda.time.YearMonth yearMonth16 = yearMonth8.plusMonths(96);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0097-10" + "'", str12, "0097-10");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(yearMonth16);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.YearMonth yearMonth19 = property4.setCopy("October");
        org.joda.time.YearMonth yearMonth21 = property4.addWrapFieldToCopy(9);
        int int22 = property4.getMaximumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.YearMonth.Property property38 = yearMonth32.year();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonth42.indexOf(dateTimeFieldType48);
        org.joda.time.YearMonth yearMonth51 = yearMonth42.plusMonths((-1));
        org.joda.time.YearMonth yearMonth53 = yearMonth42.plusMonths((-1));
        org.joda.time.YearMonth.Property property54 = yearMonth53.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.YearMonth yearMonth57 = yearMonth53.withPeriodAdded(readablePeriod55, (int) (byte) 10);
        org.joda.time.YearMonth yearMonth59 = yearMonth57.withMonthOfYear(11);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        int int65 = property64.getMaximumValue();
        java.lang.String str66 = property64.getAsShortText();
        java.util.Locale locale67 = null;
        java.lang.String str68 = property64.getAsShortText(locale67);
        java.lang.String str69 = property64.getAsString();
        org.joda.time.YearMonth yearMonth70 = property64.getYearMonth();
        java.util.Locale locale71 = null;
        int int72 = property64.getMaximumTextLength(locale71);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = property64.getFieldType();
        int int74 = yearMonth57.get(dateTimeFieldType73);
        int int75 = yearMonth32.indexOf(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 12 + "'", int65 == 12);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Oct" + "'", str66, "Oct");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Oct" + "'", str68, "Oct");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "10" + "'", str69, "10");
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 9 + "'", int72 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 9 + "'", int74 == 9);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = yearMonth18.toString(dateTimeFormatter22);
        int[] intArray24 = yearMonth18.getValues();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        int int34 = property29.getMinimumValueOverall();
        org.joda.time.DurationField durationField35 = property29.getRangeDurationField();
        org.joda.time.YearMonth yearMonth37 = property29.addWrapFieldToCopy((int) ' ');
        org.joda.time.YearMonth yearMonth39 = property29.addWrapFieldToCopy(2);
        java.lang.String str40 = yearMonth39.toString();
        int int41 = yearMonth39.getMonthOfYear();
        boolean boolean42 = yearMonth18.equals((java.lang.Object) int41);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0097-10" + "'", str23, "0097-10");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[97, 10]");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0097-12" + "'", str40, "0097-12");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 12 + "'", int41 == 12);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth.Property property5 = yearMonth4.monthOfYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        org.joda.time.YearMonth yearMonth14 = yearMonth9.plusMonths((int) (byte) 10);
        int int15 = property5.compareTo((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = yearMonth9.getChronology();
        org.joda.time.YearMonth yearMonth17 = org.joda.time.YearMonth.now(chronology16);
        org.joda.time.YearMonth yearMonth18 = org.joda.time.YearMonth.now(chronology16);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((java.lang.Object) "0097-10", chronology16);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(chronology16);
        int int21 = yearMonth20.size();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth17 = yearMonth5.minus(readablePeriod16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.year();
        org.joda.time.YearMonth yearMonth20 = yearMonth17.plusYears(98);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth20);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        java.lang.String str19 = yearMonth8.toString();
        org.joda.time.YearMonth yearMonth21 = yearMonth8.withMonthOfYear(11);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        org.joda.time.DurationField durationField24 = property22.getDurationField();
        org.joda.time.YearMonth yearMonth26 = property22.addWrapFieldToCopy(6);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0097-10" + "'", str19, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(yearMonth26);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth yearMonth15 = yearMonth9.minusYears(6);
        org.joda.time.YearMonth yearMonth17 = yearMonth9.minusMonths((int) ' ');
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(yearMonth17);
    }

    @Test
    @Ignore
  public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth3.getFieldTypes();
        int[] intArray10 = yearMonth3.getValues();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        int int25 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.Chronology chronology26 = yearMonth19.getChronology();
        org.joda.time.YearMonth yearMonth27 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth28 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3, chronology26);
        org.joda.time.YearMonth yearMonth30 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((long) (short) -1, chronology32);
        int int34 = yearMonth30.compareTo((org.joda.time.ReadablePartial) yearMonth33);
        int[] intArray35 = yearMonth33.getValues();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[97, 10]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1969, 12]");
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth3.getFieldTypes();
        int[] intArray10 = yearMonth3.getValues();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        int int25 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.Chronology chronology26 = yearMonth19.getChronology();
        org.joda.time.YearMonth yearMonth27 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth28 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3, chronology26);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonth yearMonth32 = yearMonth3.withPeriodAdded(readablePeriod30, (int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray33 = yearMonth3.getFields();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[97, 10]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(dateTimeFieldArray33);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        org.joda.time.YearMonth yearMonth10 = property4.getYearMonth();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        int int25 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonth19.toInterval(dateTimeZone26);
        org.joda.time.YearMonth yearMonth29 = yearMonth19.minusYears((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonth yearMonth31 = yearMonth19.plus(readablePeriod30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.plusYears((int) 'a');
        int int34 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = yearMonth31.getFieldTypes();
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = yearMonth31.getFields();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth.Property property5 = yearMonth4.monthOfYear();
        int int6 = property5.getMaximumValue();
        java.util.Locale locale7 = null;
        int int8 = property5.getMaximumShortTextLength(locale7);
        java.util.Locale locale9 = null;
        int int10 = property5.getMaximumTextLength(locale9);
        java.lang.String str11 = property5.getName();
        org.joda.time.YearMonth yearMonth13 = property5.addWrapFieldToCopy(100);
        int int14 = yearMonth13.getMonthOfYear();
        org.joda.time.YearMonth.Property property15 = yearMonth13.year();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.YearMonth yearMonth28 = yearMonth19.plusMonths((-1));
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = yearMonth32.indexOf(dateTimeFieldType38);
        org.joda.time.Interval interval40 = yearMonth32.toInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        int int46 = property45.getMaximumValue();
        java.lang.String str47 = property45.getAsShortText();
        java.util.Locale locale48 = null;
        java.lang.String str49 = property45.getAsShortText(locale48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property45.getFieldType();
        int int51 = yearMonth32.get(dateTimeFieldType50);
        org.joda.time.YearMonth.Property property52 = yearMonth19.property(dateTimeFieldType50);
        org.joda.time.Chronology chronology53 = yearMonth19.getChronology();
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth(chronology53);
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology58);
        org.joda.time.YearMonth yearMonth61 = yearMonth59.minusYears((int) (short) 0);
        org.joda.time.Interval interval62 = yearMonth59.toInterval();
        org.joda.time.Chronology chronology63 = yearMonth59.getChronology();
        org.joda.time.YearMonth yearMonth64 = yearMonth55.withChronologyRetainFields(chronology63);
        org.joda.time.YearMonth yearMonth65 = new org.joda.time.YearMonth(chronology63);
        org.joda.time.YearMonth yearMonth66 = yearMonth54.withChronologyRetainFields(chronology63);
        org.joda.time.YearMonth yearMonth67 = yearMonth13.withChronologyRetainFields(chronology63);
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((long) 12, chronology63);
        org.joda.time.YearMonth yearMonth69 = org.joda.time.YearMonth.now(chronology63);
        org.joda.time.YearMonth yearMonth71 = yearMonth69.plusYears((int) (byte) 100);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "monthOfYear" + "'", str11, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Oct" + "'", str47, "Oct");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Oct" + "'", str49, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertNotNull(yearMonth71);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.YearMonth yearMonth19 = property4.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField20 = property4.getField();
        int int21 = property4.getMinimumValue();
        org.joda.time.ReadableInstant readableInstant22 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int23 = property4.compareTo(readableInstant22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth.Property property28 = yearMonth27.monthOfYear();
        int int29 = property28.getMaximumValue();
        java.lang.String str30 = property28.getAsShortText();
        org.joda.time.YearMonth yearMonth32 = property28.addWrapFieldToCopy((int) (short) -1);
        int[] intArray33 = yearMonth32.getValues();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth.Property property38 = yearMonth37.monthOfYear();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        int int48 = property38.compareTo((org.joda.time.ReadablePartial) yearMonth42);
        org.joda.time.Chronology chronology49 = yearMonth42.getChronology();
        org.joda.time.YearMonth yearMonth50 = org.joda.time.YearMonth.now(chronology49);
        org.joda.time.YearMonth yearMonth51 = yearMonth32.withChronologyRetainFields(chronology49);
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth(chronology49);
        boolean boolean53 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth52);
        org.joda.time.YearMonth.Property property54 = yearMonth52.monthOfYear();
        java.util.Locale locale56 = null;
        org.joda.time.YearMonth yearMonth57 = property54.setCopy("October", locale56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology60);
        org.joda.time.YearMonth yearMonth63 = yearMonth61.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.YearMonth yearMonth67 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology66);
        org.joda.time.YearMonth yearMonth69 = yearMonth67.minusYears((int) (short) 0);
        int int70 = yearMonth67.size();
        boolean boolean71 = yearMonth63.isAfter((org.joda.time.ReadablePartial) yearMonth67);
        org.joda.time.YearMonth.Property property72 = yearMonth67.year();
        boolean boolean73 = yearMonth57.equals((java.lang.Object) property72);
        java.util.Locale locale74 = null;
        int int75 = property72.getMaximumShortTextLength(locale74);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 12 + "'", int29 == 12);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Oct" + "'", str30, "Oct");
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 9]");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((java.lang.Object) (-1), chronology15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth.Property property28 = yearMonth27.monthOfYear();
        int int29 = property28.getMaximumValue();
        java.lang.String str30 = property28.getAsShortText();
        org.joda.time.YearMonth yearMonth32 = property28.addWrapFieldToCopy((int) (short) -1);
        int[] intArray33 = yearMonth32.getValues();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth.Property property38 = yearMonth37.monthOfYear();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        int int48 = property38.compareTo((org.joda.time.ReadablePartial) yearMonth42);
        org.joda.time.Chronology chronology49 = yearMonth42.getChronology();
        org.joda.time.YearMonth yearMonth50 = org.joda.time.YearMonth.now(chronology49);
        org.joda.time.YearMonth yearMonth51 = yearMonth32.withChronologyRetainFields(chronology49);
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth(chronology49);
        boolean boolean53 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth52);
        int int54 = yearMonth3.getMonthOfYear();
        int int55 = yearMonth3.getYear();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 12 + "'", int29 == 12);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Oct" + "'", str30, "Oct");
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 9]");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        org.joda.time.YearMonth yearMonth13 = property4.addToCopy(3);
        java.util.Locale locale15 = null;
        org.joda.time.YearMonth yearMonth16 = property4.setCopy("Jan", locale15);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth16);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = yearMonth1.toString(dateTimeFormatter2);
        int[] intArray4 = yearMonth1.getValues();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01" + "'", str3, "1970-01");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[1970, 1]");
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property15.getAsShortText(locale17);
        org.joda.time.YearMonth yearMonth20 = property15.addWrapFieldToCopy(0);
        java.lang.String str21 = property15.toString();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Sep" + "'", str18, "Sep");
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Property[monthOfYear]" + "'", str21, "Property[monthOfYear]");
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        int[] intArray16 = yearMonth5.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = yearMonth5.getValue(96);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 96");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[97, 10]");
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.YearMonth yearMonth15 = yearMonth9.minus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth18 = yearMonth15.withPeriodAdded(readablePeriod16, (int) (short) 0);
        org.joda.time.Interval interval19 = yearMonth15.toInterval();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(interval19);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth5.getYear();
        org.joda.time.YearMonth yearMonth8 = yearMonth5.minusYears(0);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonth yearMonth11 = yearMonth8.withPeriodAdded(readablePeriod9, (int) (byte) 0);
        java.lang.String str12 = yearMonth8.toString();
        org.joda.time.YearMonth yearMonth14 = yearMonth8.withYear((int) (short) 100);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        int int20 = property19.getMaximumValue();
        java.util.Locale locale21 = null;
        int int22 = property19.getMaximumShortTextLength(locale21);
        java.util.Locale locale23 = null;
        int int24 = property19.getMaximumTextLength(locale23);
        org.joda.time.DurationField durationField25 = property19.getRangeDurationField();
        java.util.Locale locale26 = null;
        java.lang.String str27 = property19.getAsShortText(locale26);
        int int28 = property19.getMinimumValueOverall();
        java.util.Locale locale30 = null;
        org.joda.time.YearMonth yearMonth31 = property19.setCopy("9", locale30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property19.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth34 = yearMonth14.withField(dateTimeFieldType32, (-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0097-10" + "'", str12, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Oct" + "'", str27, "Oct");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        java.lang.String str28 = yearMonth8.toString();
        org.joda.time.YearMonth yearMonth30 = yearMonth8.plusMonths(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = yearMonth30.getFieldTypes();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.minusYears((int) (short) 0);
        int int40 = yearMonth37.size();
        org.joda.time.YearMonth yearMonth42 = yearMonth37.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        int int44 = yearMonth37.indexOf(dateTimeFieldType43);
        org.joda.time.YearMonth yearMonth46 = yearMonth37.plusMonths((-1));
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        int int53 = yearMonth50.size();
        org.joda.time.YearMonth yearMonth55 = yearMonth50.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        int int57 = yearMonth50.indexOf(dateTimeFieldType56);
        org.joda.time.Interval interval58 = yearMonth50.toInterval();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology61);
        org.joda.time.YearMonth.Property property63 = yearMonth62.monthOfYear();
        int int64 = property63.getMaximumValue();
        java.lang.String str65 = property63.getAsShortText();
        java.util.Locale locale66 = null;
        java.lang.String str67 = property63.getAsShortText(locale66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = property63.getFieldType();
        int int69 = yearMonth50.get(dateTimeFieldType68);
        org.joda.time.YearMonth.Property property70 = yearMonth37.property(dateTimeFieldType68);
        org.joda.time.Chronology chronology71 = yearMonth37.getChronology();
        org.joda.time.YearMonth yearMonth72 = org.joda.time.YearMonth.now(chronology71);
        org.joda.time.YearMonth yearMonth73 = new org.joda.time.YearMonth(1, 3, chronology71);
        boolean boolean74 = yearMonth30.isBefore((org.joda.time.ReadablePartial) yearMonth73);
        org.joda.time.YearMonth yearMonth76 = yearMonth30.plusYears((int) '4');
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0097-09" + "'", str28, "0097-09");
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 12 + "'", int64 == 12);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Oct" + "'", str65, "Oct");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Oct" + "'", str67, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(yearMonth76);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonth yearMonth33 = yearMonth30.withPeriodAdded(readablePeriod31, (int) 'a');
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths(9);
        int int36 = yearMonth30.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate38 = yearMonth30.toLocalDate(96);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 96 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        int int15 = property14.getMaximumValue();
        java.util.Locale locale16 = null;
        int int17 = property14.getMaximumShortTextLength(locale16);
        java.util.Locale locale18 = null;
        int int19 = property14.getMaximumTextLength(locale18);
        java.lang.String str20 = property14.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property14.getFieldType();
        boolean boolean22 = property4.equals((java.lang.Object) property14);
        java.lang.String str23 = property4.getAsString();
        org.joda.time.YearMonth yearMonth25 = property4.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        boolean boolean40 = yearMonth32.isAfter((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth yearMonth51 = yearMonth49.minusYears((int) (short) 0);
        int int52 = yearMonth49.size();
        org.joda.time.YearMonth yearMonth54 = yearMonth49.plusMonths((int) (byte) 10);
        int int55 = property45.compareTo((org.joda.time.ReadablePartial) yearMonth49);
        org.joda.time.Chronology chronology56 = yearMonth49.getChronology();
        org.joda.time.YearMonth yearMonth57 = yearMonth36.withChronologyRetainFields(chronology56);
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((long) (short) 1, chronology56);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.YearMonth yearMonth61 = yearMonth58.withPeriodAdded(readablePeriod59, 100);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.YearMonth yearMonth65 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology64);
        org.joda.time.YearMonth.Property property66 = yearMonth65.monthOfYear();
        int int67 = property66.getMaximumValue();
        java.lang.String str68 = property66.getAsShortText();
        org.joda.time.YearMonth yearMonth70 = property66.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property66.getFieldType();
        int int72 = yearMonth58.get(dateTimeFieldType71);
        int int73 = yearMonth25.get(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "10" + "'", str23, "10");
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 12 + "'", int67 == 12);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Oct" + "'", str68, "Oct");
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 11 + "'", int73 == 11);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.util.Locale locale11 = null;
        int int12 = property4.getMaximumShortTextLength(locale11);
        int int13 = property4.get();
        int int14 = property4.getMaximumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        org.joda.time.Interval interval31 = yearMonth28.toInterval();
        int int32 = yearMonth8.compareTo((org.joda.time.ReadablePartial) yearMonth28);
        int int33 = yearMonth8.getYear();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth5.getYear();
        org.joda.time.YearMonth yearMonth8 = yearMonth5.minusYears(0);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonth yearMonth11 = yearMonth8.withPeriodAdded(readablePeriod9, (int) (byte) 0);
        java.lang.String str12 = yearMonth8.toString();
        org.joda.time.YearMonth.Property property13 = yearMonth8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0097-10" + "'", str12, "0097-10");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth3.getFieldTypes();
        int[] intArray10 = yearMonth3.getValues();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        int int25 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.Chronology chronology26 = yearMonth19.getChronology();
        org.joda.time.YearMonth yearMonth27 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth28 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3, chronology26);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth33.indexOf(dateTimeFieldType39);
        org.joda.time.YearMonth yearMonth42 = yearMonth33.plusMonths((-1));
        boolean boolean44 = yearMonth42.equals((java.lang.Object) 1);
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((long) 100);
        boolean boolean47 = yearMonth42.isBefore((org.joda.time.ReadablePartial) yearMonth46);
        boolean boolean48 = yearMonth3.isAfter((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.YearMonth yearMonth50 = yearMonth46.plusYears((int) ' ');
        java.lang.String str51 = yearMonth50.toString();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[97, 10]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2002-01" + "'", str51, "2002-01");
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField11 = property4.getField();
        org.joda.time.DurationField durationField12 = property4.getDurationField();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property4.getAsShortText(locale13);
        java.lang.String str15 = property4.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth17 = property4.setCopy("0100-10");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0100-10\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Oct" + "'", str14, "Oct");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[monthOfYear]" + "'", str15, "Property[monthOfYear]");
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        org.joda.time.YearMonth yearMonth13 = property4.addToCopy(3);
        java.lang.String str14 = property4.getAsString();
        java.lang.String str15 = property4.getAsShortText();
        org.joda.time.DurationField durationField16 = property4.getDurationField();
        int int17 = property4.getMaximumValue();
        java.lang.String str18 = property4.getAsShortText();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Oct" + "'", str15, "Oct");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property4.getFieldType();
        org.joda.time.YearMonth yearMonth12 = property4.addToCopy(9);
        org.joda.time.DateTimeField dateTimeField13 = property4.getField();
        org.joda.time.DurationField durationField14 = property4.getRangeDurationField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        boolean boolean24 = yearMonth16.isAfter((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        int int39 = property29.compareTo((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = yearMonth33.getChronology();
        org.joda.time.YearMonth yearMonth41 = yearMonth20.withChronologyRetainFields(chronology40);
        int int42 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        int int48 = property47.getMaximumValue();
        java.util.Locale locale49 = null;
        int int50 = property47.getMaximumShortTextLength(locale49);
        java.util.Locale locale51 = null;
        int int52 = property47.getMaximumTextLength(locale51);
        org.joda.time.DurationField durationField53 = property47.getRangeDurationField();
        java.util.Locale locale54 = null;
        java.lang.String str55 = property47.getAsShortText(locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property47.getFieldType();
        org.joda.time.YearMonth yearMonth58 = yearMonth3.withField(dateTimeFieldType56, 11);
        org.joda.time.DateTimeField[] dateTimeFieldArray59 = yearMonth3.getFields();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        int int65 = property64.getMaximumValue();
        java.util.Locale locale66 = null;
        int int67 = property64.getMaximumShortTextLength(locale66);
        int int68 = property64.getMaximumValueOverall();
        org.joda.time.YearMonth yearMonth69 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.YearMonth yearMonth73 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology72);
        org.joda.time.YearMonth yearMonth75 = yearMonth73.minusYears((int) (short) 0);
        org.joda.time.Interval interval76 = yearMonth73.toInterval();
        org.joda.time.Chronology chronology77 = yearMonth73.getChronology();
        org.joda.time.YearMonth yearMonth78 = yearMonth69.withChronologyRetainFields(chronology77);
        boolean boolean79 = property64.equals((java.lang.Object) yearMonth69);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.YearMonth yearMonth82 = yearMonth69.withPeriodAdded(readablePeriod80, (int) ' ');
        org.joda.time.YearMonth yearMonth84 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology85 = yearMonth84.getChronology();
        org.joda.time.YearMonth yearMonth86 = new org.joda.time.YearMonth((long) 3, chronology85);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = yearMonth86.getFieldType((int) (short) 1);
        org.joda.time.YearMonth.Property property89 = yearMonth69.property(dateTimeFieldType88);
        int int90 = yearMonth3.indexOf(dateTimeFieldType88);
        int int91 = yearMonth3.size();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 12 + "'", int48 == 12);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Oct" + "'", str55, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertNotNull(dateTimeFieldArray59);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 12 + "'", int65 == 12);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 12 + "'", int68 == 12);
        org.junit.Assert.assertNotNull(yearMonth75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(yearMonth78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(yearMonth82);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth.Property property8 = yearMonth7.monthOfYear();
        int int9 = property8.getMaximumValue();
        java.util.Locale locale10 = null;
        int int11 = property8.getMaximumShortTextLength(locale10);
        java.util.Locale locale12 = null;
        int int13 = property8.getMaximumTextLength(locale12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        int int19 = property18.getMaximumValue();
        java.util.Locale locale20 = null;
        int int21 = property18.getMaximumShortTextLength(locale20);
        java.util.Locale locale22 = null;
        int int23 = property18.getMaximumTextLength(locale22);
        java.lang.String str24 = property18.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property18.getFieldType();
        boolean boolean26 = property8.equals((java.lang.Object) property18);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property18.getFieldType();
        org.joda.time.YearMonth.Property property28 = yearMonth1.property(dateTimeFieldType27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property28.getFieldType();
        org.joda.time.DurationField durationField30 = property28.getRangeDurationField();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        int int37 = yearMonth36.getYear();
        org.joda.time.YearMonth yearMonth39 = yearMonth36.minusYears(0);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.YearMonth yearMonth42 = yearMonth39.withPeriodAdded(readablePeriod40, (int) (byte) 0);
        java.lang.String str43 = yearMonth39.toString();
        org.joda.time.Chronology chronology44 = yearMonth39.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = yearMonth39.getFieldTypes();
        boolean boolean46 = property28.equals((java.lang.Object) yearMonth39);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Oct" + "'", str24, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 97 + "'", int37 == 97);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0097-10" + "'", str43, "0097-10");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.getMaximumValueOverall();
        java.util.Locale locale12 = null;
        int int13 = property4.getMaximumTextLength(locale12);
        org.joda.time.DurationField durationField14 = property4.getDurationField();
        java.util.Locale locale15 = null;
        java.lang.String str16 = property4.getAsShortText(locale15);
        java.util.Locale locale17 = null;
        int int18 = property4.getMaximumShortTextLength(locale17);
        int int19 = property4.get();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Oct" + "'", str16, "Oct");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth12.withMonthOfYear((int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        boolean boolean29 = yearMonth21.isAfter((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth.Property property34 = yearMonth33.monthOfYear();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth yearMonth40 = yearMonth38.minusYears((int) (short) 0);
        int int41 = yearMonth38.size();
        org.joda.time.YearMonth yearMonth43 = yearMonth38.plusMonths((int) (byte) 10);
        int int44 = property34.compareTo((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology45 = yearMonth38.getChronology();
        org.joda.time.YearMonth yearMonth46 = yearMonth25.withChronologyRetainFields(chronology45);
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth((long) (short) 1, chronology45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.YearMonth yearMonth50 = yearMonth47.withPeriodAdded(readablePeriod48, 100);
        org.joda.time.YearMonth yearMonth52 = yearMonth47.plusYears(10);
        org.joda.time.YearMonth yearMonth54 = yearMonth52.plusYears((int) '#');
        org.joda.time.YearMonth yearMonth57 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.YearMonth yearMonth59 = yearMonth57.withYear((int) (byte) 1);
        boolean boolean60 = yearMonth52.equals((java.lang.Object) yearMonth59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.YearMonth yearMonth63 = yearMonth52.withPeriodAdded(readablePeriod61, 2);
        int int64 = yearMonth12.compareTo((org.joda.time.ReadablePartial) yearMonth63);
        org.joda.time.Chronology chronology65 = yearMonth63.getChronology();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(chronology65);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        int int37 = yearMonth34.size();
        org.joda.time.YearMonth yearMonth39 = yearMonth34.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        int int41 = yearMonth34.indexOf(dateTimeFieldType40);
        org.joda.time.YearMonth yearMonth43 = yearMonth34.plusMonths((-1));
        boolean boolean44 = yearMonth9.isEqual((org.joda.time.ReadablePartial) yearMonth43);
        org.joda.time.YearMonth yearMonth46 = yearMonth43.withYear((int) '4');
        java.lang.Class<?> wildcardClass47 = yearMonth43.getClass();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        boolean boolean20 = yearMonth12.isAfter((org.joda.time.ReadablePartial) yearMonth16);
        org.joda.time.Interval interval21 = yearMonth12.toInterval();
        org.joda.time.YearMonth.Property property22 = yearMonth12.year();
        int[] intArray23 = yearMonth12.getValues();
        org.joda.time.YearMonth yearMonth25 = yearMonth12.minusMonths(2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = yearMonth25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonth yearMonth29 = yearMonth25.withPeriodAdded(readablePeriod27, 9);
        org.joda.time.YearMonth yearMonth31 = yearMonth25.minusMonths(2020);
        int int32 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.DurationField durationField33 = property4.getRangeDurationField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[97, 10]");
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.YearMonth yearMonth17 = yearMonth14.plusMonths(1970);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((java.lang.Object) 1970);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth17);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.YearMonth yearMonth15 = yearMonth12.withPeriodAdded(readablePeriod13, 3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = yearMonth15.getFieldTypes();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonth yearMonth9 = yearMonth3.withPeriodAdded(readablePeriod7, (int) (byte) 0);
        int int10 = yearMonth3.getMonthOfYear();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonth yearMonth16 = yearMonth14.plus(readablePeriod15);
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = yearMonth16.getFields();
        int[] intArray18 = yearMonth16.getValues();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[97, 9]");
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth18 = yearMonth14.withPeriodAdded(readablePeriod16, (-1));
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth18);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeField dateTimeField29 = yearMonth27.getField((int) (short) 1);
        int int30 = yearMonth27.size();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        int int8 = yearMonth5.size();
        org.joda.time.YearMonth yearMonth10 = yearMonth5.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonth5.indexOf(dateTimeFieldType11);
        org.joda.time.YearMonth yearMonth14 = yearMonth5.plusMonths((-1));
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.Interval interval26 = yearMonth18.toInterval();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        int int37 = yearMonth18.get(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth5.property(dateTimeFieldType36);
        org.joda.time.Chronology chronology39 = yearMonth5.getChronology();
        org.joda.time.YearMonth yearMonth40 = org.joda.time.YearMonth.now(chronology39);
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth(1, 3, chronology39);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.YearMonth yearMonth43 = yearMonth41.plus(readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology46);
        org.joda.time.YearMonth.Property property48 = yearMonth47.monthOfYear();
        int int49 = property48.getMaximumValue();
        java.lang.String str50 = property48.getAsShortText();
        java.util.Locale locale51 = null;
        java.lang.String str52 = property48.getAsShortText(locale51);
        int int53 = property48.getMaximumValue();
        int int54 = property48.getMinimumValueOverall();
        java.util.Locale locale55 = null;
        java.lang.String str56 = property48.getAsText(locale55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.YearMonth yearMonth60 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology59);
        org.joda.time.YearMonth.Property property61 = yearMonth60.monthOfYear();
        int int62 = property61.getMaximumValue();
        java.lang.String str63 = property61.getAsShortText();
        org.joda.time.DateTimeField dateTimeField64 = property61.getField();
        org.joda.time.YearMonth yearMonth66 = property61.setCopy("Oct");
        int int67 = property48.compareTo((org.joda.time.ReadablePartial) yearMonth66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.YearMonth yearMonth71 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology70);
        org.joda.time.YearMonth.Property property72 = yearMonth71.monthOfYear();
        int int73 = property72.getMaximumValue();
        java.lang.String str74 = property72.getAsShortText();
        org.joda.time.YearMonth yearMonth76 = property72.addWrapFieldToCopy((int) (short) -1);
        int[] intArray77 = yearMonth76.getValues();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.YearMonth yearMonth81 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology80);
        org.joda.time.YearMonth.Property property82 = yearMonth81.monthOfYear();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.YearMonth yearMonth86 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology85);
        org.joda.time.YearMonth yearMonth88 = yearMonth86.minusYears((int) (short) 0);
        int int89 = yearMonth86.size();
        org.joda.time.YearMonth yearMonth91 = yearMonth86.plusMonths((int) (byte) 10);
        int int92 = property82.compareTo((org.joda.time.ReadablePartial) yearMonth86);
        org.joda.time.Chronology chronology93 = yearMonth86.getChronology();
        org.joda.time.YearMonth yearMonth94 = org.joda.time.YearMonth.now(chronology93);
        org.joda.time.YearMonth yearMonth95 = yearMonth76.withChronologyRetainFields(chronology93);
        org.joda.time.YearMonth yearMonth96 = new org.joda.time.YearMonth(chronology93);
        org.joda.time.YearMonth yearMonth97 = yearMonth66.withChronologyRetainFields(chronology93);
        java.lang.String str98 = yearMonth66.toString();
        int int99 = yearMonth41.compareTo((org.joda.time.ReadablePartial) yearMonth66);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 12 + "'", int49 == 12);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Oct" + "'", str50, "Oct");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Oct" + "'", str52, "Oct");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 12 + "'", int53 == 12);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "October" + "'", str56, "October");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 12 + "'", int62 == 12);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Oct" + "'", str63, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 12 + "'", int73 == 12);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Oct" + "'", str74, "Oct");
        org.junit.Assert.assertNotNull(yearMonth76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 9]");
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(yearMonth88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertNotNull(yearMonth91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(yearMonth94);
        org.junit.Assert.assertNotNull(yearMonth95);
        org.junit.Assert.assertNotNull(yearMonth97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "0097-10" + "'", str98, "0097-10");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.plusYears((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Interval interval34 = yearMonth32.toInterval(dateTimeZone33);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(interval34);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Interval interval31 = yearMonth23.toInterval(dateTimeZone30);
        org.joda.time.YearMonth yearMonth33 = yearMonth23.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth yearMonth45 = yearMonth43.minusYears((int) (short) 0);
        int int46 = yearMonth43.size();
        boolean boolean47 = yearMonth39.isAfter((org.joda.time.ReadablePartial) yearMonth43);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology50);
        org.joda.time.YearMonth.Property property52 = yearMonth51.monthOfYear();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        int int59 = yearMonth56.size();
        org.joda.time.YearMonth yearMonth61 = yearMonth56.plusMonths((int) (byte) 10);
        int int62 = property52.compareTo((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology63 = yearMonth56.getChronology();
        org.joda.time.YearMonth yearMonth64 = yearMonth43.withChronologyRetainFields(chronology63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.YearMonth yearMonth67 = yearMonth64.withPeriodAdded(readablePeriod65, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = null;
        int int69 = yearMonth67.indexOf(dateTimeFieldType68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.YearMonth yearMonth73 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology72);
        org.joda.time.YearMonth.Property property74 = yearMonth73.monthOfYear();
        int int75 = property74.getMaximumValue();
        java.lang.String str76 = property74.getAsShortText();
        java.util.Locale locale77 = null;
        java.lang.String str78 = property74.getAsShortText(locale77);
        org.joda.time.YearMonth yearMonth80 = property74.setCopy("October");
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = yearMonth80.toDateTime(readableInstant81);
        org.joda.time.DateTime dateTime83 = yearMonth67.toDateTime(readableInstant81);
        org.joda.time.DateTime dateTime84 = yearMonth23.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime85 = yearMonth14.toDateTime((org.joda.time.ReadableInstant) dateTime84);
        boolean boolean86 = yearMonth8.isEqual((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.YearMonth.Property property87 = yearMonth8.monthOfYear();
        java.util.Locale locale88 = null;
        java.lang.String str89 = property87.getAsShortText(locale88);
        org.joda.time.DateTimeField dateTimeField90 = property87.getField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 12 + "'", int75 == 12);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Oct" + "'", str76, "Oct");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Oct" + "'", str78, "Oct");
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Sep" + "'", str89, "Sep");
        org.junit.Assert.assertNotNull(dateTimeField90);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        int int18 = yearMonth8.getValue(0);
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth(1, 12);
        boolean boolean22 = yearMonth8.isEqual((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.YearMonth yearMonth25 = yearMonth21.withPeriodAdded(readablePeriod23, 1980);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(yearMonth25);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.lang.String str11 = property4.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth yearMonth17 = yearMonth15.minusYears((int) (short) 0);
        int int18 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.YearMonth yearMonth20 = property4.setCopy("9");
        java.lang.Class<?> wildcardClass21 = property4.getClass();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((java.lang.Object) "Jan");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Jan\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField7 = property4.getField();
        org.joda.time.YearMonth yearMonth9 = property4.setCopy("Oct");
        org.joda.time.YearMonth yearMonth11 = property4.addWrapFieldToCopy((int) (byte) -1);
        java.lang.String str12 = property4.getAsText();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "October" + "'", str12, "October");
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth yearMonth17 = yearMonth3.minusMonths(0);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.Chronology chronology20 = yearMonth19.getChronology();
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth(chronology20);
        int int22 = yearMonth17.compareTo((org.joda.time.ReadablePartial) yearMonth21);
        int int23 = yearMonth21.size();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        java.lang.String str11 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField12 = property4.getField();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth.Property property17 = yearMonth16.monthOfYear();
        int int18 = property17.getMinimumValue();
        java.util.Locale locale19 = null;
        int int20 = property17.getMaximumShortTextLength(locale19);
        org.joda.time.YearMonth yearMonth22 = property17.addToCopy((int) (short) 1);
        java.util.Locale locale23 = null;
        java.lang.String str24 = property17.getAsText(locale23);
        int int25 = property17.getMinimumValue();
        java.lang.String str26 = property17.getAsText();
        org.joda.time.DurationField durationField27 = property17.getDurationField();
        java.util.Locale locale29 = null;
        org.joda.time.YearMonth yearMonth30 = property17.setCopy("Oct", locale29);
        boolean boolean31 = property4.equals((java.lang.Object) property17);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10" + "'", str11, "10");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "October" + "'", str24, "October");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "October" + "'", str26, "October");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        int int11 = property4.getMinimumValueOverall();
        int int12 = property4.getMinimumValue();
        java.lang.String str13 = property4.getName();
        int int14 = property4.getMinimumValue();
        java.util.Locale locale15 = null;
        int int16 = property4.getMaximumShortTextLength(locale15);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.Chronology chronology8 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth9 = yearMonth0.withChronologyRetainFields(chronology8);
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth12 = org.joda.time.YearMonth.now(chronology8);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.plusMonths(3);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (byte) 1);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth16);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        int int10 = property4.getMinimumValue();
        java.lang.String str11 = property4.getName();
        org.joda.time.DurationField durationField12 = property4.getDurationField();
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.Chronology chronology15 = yearMonth14.getChronology();
        int int17 = yearMonth14.getValue(0);
        int int18 = yearMonth14.size();
        org.joda.time.YearMonth.Property property19 = yearMonth14.monthOfYear();
        boolean boolean20 = property4.equals((java.lang.Object) yearMonth14);
        org.joda.time.DurationField durationField21 = property4.getRangeDurationField();
        java.lang.String str22 = property4.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "monthOfYear" + "'", str11, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Property[monthOfYear]" + "'", str22, "Property[monthOfYear]");
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addToCopy((int) (short) 1);
        int int10 = property4.getMaximumValueOverall();
        java.lang.String str11 = property4.getName();
        org.joda.time.DateTimeField dateTimeField12 = property4.getField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "monthOfYear" + "'", str11, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.YearMonth yearMonth19 = property4.setCopy("October");
        org.joda.time.YearMonth yearMonth21 = property4.addWrapFieldToCopy(9);
        java.lang.String str22 = property4.getName();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "monthOfYear" + "'", str22, "monthOfYear");
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth5.getYear();
        org.joda.time.YearMonth yearMonth8 = yearMonth5.minusYears(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField10 = yearMonth5.getField(11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 11");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(yearMonth8);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(12, (int) (short) 1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.minusYears((int) (short) 0);
        int int40 = yearMonth37.size();
        org.joda.time.YearMonth yearMonth42 = yearMonth37.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        int int44 = yearMonth37.indexOf(dateTimeFieldType43);
        org.joda.time.YearMonth yearMonth46 = yearMonth37.plusMonths((-1));
        boolean boolean47 = yearMonth12.isEqual((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.YearMonth yearMonth49 = yearMonth46.withYear((int) '4');
        org.joda.time.YearMonth yearMonth51 = yearMonth46.plusYears(1970);
        boolean boolean52 = yearMonth2.equals((java.lang.Object) yearMonth46);
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth(0, (int) (short) 10);
        int int56 = yearMonth46.compareTo((org.joda.time.ReadablePartial) yearMonth55);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = yearMonth1.getFieldType((int) (short) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        org.joda.time.YearMonth yearMonth14 = yearMonth9.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = yearMonth9.indexOf(dateTimeFieldType15);
        org.joda.time.YearMonth yearMonth18 = yearMonth9.plusMonths((-1));
        org.joda.time.YearMonth yearMonth20 = yearMonth9.plusMonths((-1));
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        int int22 = property21.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property21.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property21.getFieldType();
        org.joda.time.YearMonth.Property property25 = yearMonth1.property(dateTimeFieldType24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = yearMonth1.toString("year");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: r");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField7 = property4.getField();
        org.joda.time.YearMonth yearMonth9 = property4.setCopy("Oct");
        org.joda.time.YearMonth yearMonth11 = property4.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.YearMonth yearMonth12 = property4.getYearMonth();
        java.util.Locale locale13 = null;
        int int14 = property4.getMaximumShortTextLength(locale13);
        org.joda.time.YearMonth yearMonth16 = property4.addWrapFieldToCopy(2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(yearMonth16);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((int) 'a', (-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) 100);
        org.joda.time.YearMonth.Property property2 = yearMonth1.year();
        int int3 = property2.getMinimumValueOverall();
        org.joda.time.DurationField durationField4 = property2.getDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-292275054) + "'", int3 == (-292275054));
        org.junit.Assert.assertNotNull(durationField4);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(0, 11);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = yearMonth2.getFields();
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        int int8 = yearMonth5.size();
        org.joda.time.YearMonth yearMonth10 = yearMonth5.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonth5.indexOf(dateTimeFieldType11);
        org.joda.time.YearMonth yearMonth14 = yearMonth5.plusMonths((-1));
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.Interval interval26 = yearMonth18.toInterval();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        int int37 = yearMonth18.get(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth5.property(dateTimeFieldType36);
        org.joda.time.Chronology chronology39 = yearMonth5.getChronology();
        org.joda.time.YearMonth yearMonth40 = org.joda.time.YearMonth.now(chronology39);
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth(1, 3, chronology39);
        org.joda.time.YearMonth.Property property42 = yearMonth41.monthOfYear();
        org.joda.time.Chronology chronology43 = yearMonth41.getChronology();
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology43);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy(100);
        int int13 = yearMonth12.getMonthOfYear();
        org.joda.time.YearMonth.Property property14 = yearMonth12.year();
        java.util.Locale locale15 = null;
        java.lang.String str16 = property14.getAsText(locale15);
        int int17 = property14.getMinimumValueOverall();
        java.lang.String str18 = property14.getAsText();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "97" + "'", str16, "97");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-292275054) + "'", int17 == (-292275054));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "97" + "'", str18, "97");
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonth yearMonth29 = yearMonth27.plus(readablePeriod28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonth yearMonth31 = yearMonth27.minus(readablePeriod30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth yearMonth43 = yearMonth41.minusYears((int) (short) 0);
        int int44 = yearMonth41.size();
        boolean boolean45 = yearMonth37.isAfter((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        int int60 = property50.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = yearMonth54.getChronology();
        org.joda.time.YearMonth yearMonth62 = yearMonth41.withChronologyRetainFields(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.YearMonth yearMonth65 = yearMonth62.withPeriodAdded(readablePeriod63, (int) 'a');
        org.joda.time.YearMonth yearMonth67 = yearMonth62.plusMonths(9);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.YearMonth yearMonth71 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology70);
        org.joda.time.YearMonth.Property property72 = yearMonth71.monthOfYear();
        int int73 = property72.getMaximumValue();
        java.lang.String str74 = property72.getAsShortText();
        java.util.Locale locale75 = null;
        java.lang.String str76 = property72.getAsShortText(locale75);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = property72.getFieldType();
        int int78 = yearMonth62.get(dateTimeFieldType77);
        int int79 = yearMonth27.get(dateTimeFieldType77);
        org.joda.time.Interval interval80 = yearMonth27.toInterval();
        org.joda.time.YearMonth.Property property81 = yearMonth27.monthOfYear();
        java.util.Locale locale82 = null;
        java.lang.String str83 = property81.getAsText(locale82);
        java.lang.Class<?> wildcardClass84 = property81.getClass();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 12 + "'", int73 == 12);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Oct" + "'", str74, "Oct");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Oct" + "'", str76, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "September" + "'", str83, "September");
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        java.util.Locale locale17 = null;
        int int18 = property15.getMaximumShortTextLength(locale17);
        org.joda.time.DateTimeField dateTimeField19 = property15.getField();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property15.getAsShortText(locale20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth.Property property26 = yearMonth25.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        int int36 = property26.compareTo((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minusYears((int) (short) 0);
        boolean boolean43 = yearMonth30.isAfter((org.joda.time.ReadablePartial) yearMonth40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = yearMonth40.toString(dateTimeFormatter44);
        int int47 = yearMonth40.getValue(1);
        int int48 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth40);
        org.joda.time.DurationField durationField49 = property15.getDurationField();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Sep" + "'", str21, "Sep");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0097-10" + "'", str45, "0097-10");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(durationField49);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        int int8 = yearMonth7.getYear();
        org.joda.time.YearMonth yearMonth10 = yearMonth7.plusMonths(2);
        org.joda.time.Chronology chronology11 = yearMonth7.getChronology();
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((long) (short) 1, chronology11);
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth(chronology11);
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((long) (short) 0, chronology11);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        org.joda.time.YearMonth yearMonth41 = yearMonth36.plusMonths((int) (byte) 10);
        int int42 = property32.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        boolean boolean49 = yearMonth36.isAfter((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = yearMonth36.indexOf(dateTimeFieldType50);
        int int52 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.YearMonth yearMonth54 = yearMonth36.minusYears(11);
        org.joda.time.YearMonth.Property property55 = yearMonth36.monthOfYear();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology58);
        org.joda.time.YearMonth yearMonth61 = yearMonth59.minusYears((int) (short) 0);
        int int62 = yearMonth59.size();
        org.joda.time.YearMonth yearMonth64 = yearMonth59.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = null;
        int int66 = yearMonth59.indexOf(dateTimeFieldType65);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.YearMonth yearMonth70 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology69);
        org.joda.time.YearMonth.Property property71 = yearMonth70.monthOfYear();
        int int72 = property71.getMaximumValue();
        java.lang.String str73 = property71.getAsShortText();
        java.util.Locale locale74 = null;
        java.lang.String str75 = property71.getAsShortText(locale74);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = property71.getFieldType();
        org.joda.time.YearMonth.Property property77 = yearMonth59.property(dateTimeFieldType76);
        org.joda.time.YearMonth yearMonth79 = yearMonth36.withField(dateTimeFieldType76, 3);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 12 + "'", int72 == 12);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Oct" + "'", str73, "Oct");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Oct" + "'", str75, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(yearMonth79);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        int[] intArray16 = yearMonth5.getValues();
        org.joda.time.YearMonth yearMonth18 = yearMonth5.minusMonths(2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = yearMonth18.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.YearMonth yearMonth22 = yearMonth18.withPeriodAdded(readablePeriod20, 9);
        int int23 = yearMonth22.getMonthOfYear();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[97, 10]");
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonth yearMonth29 = yearMonth27.plus(readablePeriod28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonth yearMonth31 = yearMonth27.minus(readablePeriod30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth yearMonth43 = yearMonth41.minusYears((int) (short) 0);
        int int44 = yearMonth41.size();
        boolean boolean45 = yearMonth37.isAfter((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        int int60 = property50.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = yearMonth54.getChronology();
        org.joda.time.YearMonth yearMonth62 = yearMonth41.withChronologyRetainFields(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.YearMonth yearMonth65 = yearMonth62.withPeriodAdded(readablePeriod63, (int) 'a');
        org.joda.time.YearMonth yearMonth67 = yearMonth62.plusMonths(9);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.YearMonth yearMonth71 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology70);
        org.joda.time.YearMonth.Property property72 = yearMonth71.monthOfYear();
        int int73 = property72.getMaximumValue();
        java.lang.String str74 = property72.getAsShortText();
        java.util.Locale locale75 = null;
        java.lang.String str76 = property72.getAsShortText(locale75);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = property72.getFieldType();
        int int78 = yearMonth62.get(dateTimeFieldType77);
        int int79 = yearMonth27.get(dateTimeFieldType77);
        org.joda.time.Interval interval80 = yearMonth27.toInterval();
        org.joda.time.YearMonth.Property property81 = yearMonth27.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = null;
        boolean boolean83 = yearMonth27.isSupported(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 12 + "'", int73 == 12);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Oct" + "'", str74, "Oct");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Oct" + "'", str76, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        java.lang.String str9 = property4.getAsShortText(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.getMaximumValueOverall();
        int int12 = property4.getMinimumValue();
        org.joda.time.DurationField durationField13 = property4.getRangeDurationField();
        org.joda.time.YearMonth yearMonth15 = property4.setCopy("October");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Oct" + "'", str9, "Oct");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonth15);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology1 = yearMonth0.getChronology();
        org.joda.time.YearMonth yearMonth3 = yearMonth0.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth.Property property8 = yearMonth7.monthOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        org.joda.time.YearMonth yearMonth17 = yearMonth12.plusMonths((int) (byte) 10);
        int int18 = property8.compareTo((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.YearMonth yearMonth19 = property8.getYearMonth();
        java.lang.String str20 = property8.getAsText();
        org.joda.time.YearMonth yearMonth21 = property8.getYearMonth();
        org.joda.time.YearMonth yearMonth23 = property8.setCopy("October");
        boolean boolean24 = yearMonth0.isEqual((org.joda.time.ReadablePartial) yearMonth23);
        int int25 = yearMonth23.getYear();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "October" + "'", str20, "October");
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonth yearMonth16 = yearMonth14.plus(readablePeriod15);
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = yearMonth16.getFields();
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = yearMonth19.toInterval(dateTimeZone20);
        int int22 = yearMonth16.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        java.lang.String str23 = yearMonth16.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField25 = yearMonth16.getField(6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0097-09" + "'", str23, "0097-09");
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((long) 100);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.withYear((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonth yearMonth7 = yearMonth3.plus(readablePeriod6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        int int14 = yearMonth11.size();
        org.joda.time.YearMonth yearMonth16 = yearMonth11.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        int int18 = yearMonth11.indexOf(dateTimeFieldType17);
        org.joda.time.YearMonth yearMonth20 = yearMonth11.plusMonths((-1));
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        org.joda.time.YearMonth yearMonth29 = yearMonth24.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = yearMonth24.indexOf(dateTimeFieldType30);
        org.joda.time.Interval interval32 = yearMonth24.toInterval();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth.Property property37 = yearMonth36.monthOfYear();
        int int38 = property37.getMaximumValue();
        java.lang.String str39 = property37.getAsShortText();
        java.util.Locale locale40 = null;
        java.lang.String str41 = property37.getAsShortText(locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property37.getFieldType();
        int int43 = yearMonth24.get(dateTimeFieldType42);
        org.joda.time.YearMonth.Property property44 = yearMonth11.property(dateTimeFieldType42);
        org.joda.time.Chronology chronology45 = yearMonth11.getChronology();
        int int46 = yearMonth7.compareTo((org.joda.time.ReadablePartial) yearMonth11);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology50);
        org.joda.time.YearMonth.Property property52 = yearMonth51.monthOfYear();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        int int59 = yearMonth56.size();
        org.joda.time.YearMonth yearMonth61 = yearMonth56.plusMonths((int) (byte) 10);
        int int62 = property52.compareTo((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology63 = yearMonth56.getChronology();
        org.joda.time.YearMonth yearMonth64 = org.joda.time.YearMonth.now(chronology63);
        org.joda.time.YearMonth yearMonth65 = org.joda.time.YearMonth.now(chronology63);
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((java.lang.Object) "0097-10", chronology63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = null;
        java.lang.String str68 = yearMonth66.toString(dateTimeFormatter67);
        org.joda.time.Chronology chronology69 = yearMonth66.getChronology();
        org.joda.time.YearMonth yearMonth70 = yearMonth7.withChronologyRetainFields(chronology69);
        org.joda.time.YearMonth yearMonth71 = org.joda.time.YearMonth.now(chronology69);
        org.joda.time.YearMonth yearMonth72 = new org.joda.time.YearMonth((int) (short) -1, 8, chronology69);
        org.joda.time.YearMonth yearMonth73 = new org.joda.time.YearMonth(chronology69);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 12 + "'", int38 == 12);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Oct" + "'", str39, "Oct");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Oct" + "'", str41, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0097-10" + "'", str68, "0097-10");
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertNotNull(yearMonth71);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        int int12 = property4.getMinimumValueOverall();
        java.lang.String str13 = property4.getAsText();
        java.lang.String str14 = property4.getAsString();
        java.util.Locale locale15 = null;
        java.lang.String str16 = property4.getAsText(locale15);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "October" + "'", str13, "October");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) (short) 0);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth.Property property6 = yearMonth5.monthOfYear();
        int int7 = property6.getMaximumValue();
        java.lang.String str8 = property6.getAsShortText();
        java.util.Locale locale9 = null;
        java.lang.String str10 = property6.getAsShortText(locale9);
        org.joda.time.YearMonth yearMonth12 = property6.setCopy("October");
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property6.getFieldType();
        int int14 = yearMonth1.get(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = yearMonth3.getFields();
        org.joda.time.YearMonth yearMonth26 = yearMonth3.minusMonths((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Interval interval28 = yearMonth26.toInterval(dateTimeZone27);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(interval28);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy(100);
        java.lang.String str13 = property4.getName();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology15 = yearMonth8.getChronology();
        org.joda.time.YearMonth yearMonth16 = org.joda.time.YearMonth.now(chronology15);
        org.joda.time.YearMonth yearMonth17 = org.joda.time.YearMonth.now(chronology15);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.withYear((-292275054));
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth19);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = yearMonth2.getChronology();
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', 3, chronology3);
        org.junit.Assert.assertNotNull(chronology3);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.Chronology chronology2 = yearMonth1.getChronology();
        int int4 = yearMonth1.getValue(0);
        int int5 = yearMonth1.size();
        org.joda.time.YearMonth.Property property6 = yearMonth1.monthOfYear();
        java.lang.String str7 = property6.getAsShortText();
        org.joda.time.YearMonth yearMonth9 = property6.addToCopy(0);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Jan" + "'", str7, "Jan");
        org.junit.Assert.assertNotNull(yearMonth9);
    }

    @Test
    @Ignore
  public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.Chronology chronology8 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth9 = yearMonth0.withChronologyRetainFields(chronology8);
        org.joda.time.YearMonth yearMonth10 = org.joda.time.YearMonth.now(chronology8);
        org.joda.time.YearMonth.Property property11 = yearMonth10.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = yearMonth10.toString(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2020-11" + "'", str13, "2020-11");
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMinimumValueOverall();
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy((int) ' ');
        java.util.Locale locale13 = null;
        java.lang.String str14 = property4.getAsText(locale13);
        java.lang.String str15 = property4.getName();
        int int16 = property4.getMinimumValueOverall();
        java.util.Locale locale17 = null;
        int int18 = property4.getMaximumTextLength(locale17);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "October" + "'", str14, "October");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "monthOfYear" + "'", str15, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth yearMonth17 = yearMonth3.minusMonths(0);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        boolean boolean36 = yearMonth28.isAfter((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        int int51 = property41.compareTo((org.joda.time.ReadablePartial) yearMonth45);
        org.joda.time.Chronology chronology52 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth53 = yearMonth32.withChronologyRetainFields(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonth yearMonth56 = yearMonth53.withPeriodAdded(readablePeriod54, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = yearMonth56.indexOf(dateTimeFieldType57);
        boolean boolean59 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        int int65 = property64.getMinimumValue();
        java.util.Locale locale66 = null;
        int int67 = property64.getMaximumShortTextLength(locale66);
        org.joda.time.YearMonth yearMonth69 = property64.addToCopy((int) (short) 1);
        boolean boolean70 = yearMonth21.equals((java.lang.Object) yearMonth69);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.YearMonth yearMonth74 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology73);
        org.joda.time.YearMonth yearMonth76 = yearMonth74.minusYears((int) (short) 0);
        int int77 = yearMonth74.size();
        org.joda.time.YearMonth yearMonth79 = yearMonth74.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        int int81 = yearMonth74.indexOf(dateTimeFieldType80);
        int int82 = yearMonth74.getYear();
        boolean boolean83 = yearMonth69.isBefore((org.joda.time.ReadablePartial) yearMonth74);
        org.joda.time.DateTimeField[] dateTimeFieldArray84 = yearMonth74.getFields();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = null;
        java.lang.String str86 = yearMonth74.toString(dateTimeFormatter85);
        boolean boolean87 = yearMonth17.isBefore((org.joda.time.ReadablePartial) yearMonth74);
        java.util.Locale locale89 = null;
        java.lang.String str90 = yearMonth74.toString("10", locale89);
        org.joda.time.ReadablePeriod readablePeriod91 = null;
        org.joda.time.YearMonth yearMonth92 = yearMonth74.minus(readablePeriod91);
        org.joda.time.YearMonth.Property property93 = yearMonth74.year();
        org.joda.time.YearMonth yearMonth95 = property93.addToCopy(10);
        org.joda.time.YearMonth yearMonth97 = property93.addToCopy(2);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(yearMonth76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(yearMonth79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0097-10" + "'", str86, "0097-10");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "10" + "'", str90, "10");
        org.junit.Assert.assertNotNull(yearMonth92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(yearMonth95);
        org.junit.Assert.assertNotNull(yearMonth97);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        org.joda.time.YearMonth yearMonth10 = property4.getYearMonth();
        int int11 = property4.getMaximumValue();
        org.joda.time.DurationField durationField12 = property4.getDurationField();
        int int13 = property4.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(10, 6);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        java.lang.Object obj0 = null;
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(obj0);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.YearMonth yearMonth5 = yearMonth1.minus(readablePeriod4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Interval interval7 = yearMonth1.toInterval(dateTimeZone6);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(interval7);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        int int37 = yearMonth34.size();
        org.joda.time.YearMonth yearMonth39 = yearMonth34.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        int int41 = yearMonth34.indexOf(dateTimeFieldType40);
        org.joda.time.Interval interval42 = yearMonth34.toInterval();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        int int48 = property47.getMaximumValue();
        java.lang.String str49 = property47.getAsShortText();
        java.util.Locale locale50 = null;
        java.lang.String str51 = property47.getAsShortText(locale50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property47.getFieldType();
        int int53 = yearMonth34.get(dateTimeFieldType52);
        boolean boolean54 = yearMonth30.isSupported(dateTimeFieldType52);
        int int55 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth57 = yearMonth30.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth.Property property59 = yearMonth57.property(dateTimeFieldType58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 12 + "'", int48 == 12);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Oct" + "'", str49, "Oct");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Oct" + "'", str51, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(yearMonth57);
    }

    @Test
    @Ignore
  public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonth8.getFieldTypes();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        boolean boolean40 = yearMonth32.isAfter((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth yearMonth51 = yearMonth49.minusYears((int) (short) 0);
        int int52 = yearMonth49.size();
        org.joda.time.YearMonth yearMonth54 = yearMonth49.plusMonths((int) (byte) 10);
        int int55 = property45.compareTo((org.joda.time.ReadablePartial) yearMonth49);
        org.joda.time.Chronology chronology56 = yearMonth49.getChronology();
        org.joda.time.YearMonth yearMonth57 = yearMonth36.withChronologyRetainFields(chronology56);
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((long) (short) 1, chronology56);
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((java.lang.Object) yearMonth8, chronology56);
        org.joda.time.YearMonth yearMonth60 = org.joda.time.YearMonth.now(chronology56);
        org.joda.time.YearMonth yearMonth62 = yearMonth60.minusYears((int) 'a');
        int[] intArray63 = yearMonth62.getValues();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1923, 11]");
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.YearMonth yearMonth12 = yearMonth8.withPeriodAdded(readablePeriod10, 2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(yearMonth12);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) 100);
        int[] intArray2 = yearMonth1.getValues();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1970, 1]");
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        int int8 = property4.getMaximumValueOverall();
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        org.joda.time.Interval interval16 = yearMonth13.toInterval();
        org.joda.time.Chronology chronology17 = yearMonth13.getChronology();
        org.joda.time.YearMonth yearMonth18 = yearMonth9.withChronologyRetainFields(chronology17);
        boolean boolean19 = property4.equals((java.lang.Object) yearMonth9);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.YearMonth yearMonth22 = yearMonth9.withPeriodAdded(readablePeriod20, (int) ' ');
        org.joda.time.Interval interval23 = yearMonth9.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate25 = yearMonth9.toLocalDate((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(interval23);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) (-292275054));
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        int int8 = yearMonth5.size();
        org.joda.time.YearMonth yearMonth10 = yearMonth5.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonth5.indexOf(dateTimeFieldType11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        boolean boolean26 = yearMonth18.isAfter((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        int int38 = yearMonth35.size();
        org.joda.time.YearMonth yearMonth40 = yearMonth35.plusMonths((int) (byte) 10);
        int int41 = property31.compareTo((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.Chronology chronology42 = yearMonth35.getChronology();
        org.joda.time.YearMonth yearMonth43 = yearMonth22.withChronologyRetainFields(chronology42);
        int int44 = yearMonth5.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology47);
        org.joda.time.YearMonth.Property property49 = yearMonth48.monthOfYear();
        int int50 = property49.getMaximumValue();
        java.util.Locale locale51 = null;
        int int52 = property49.getMaximumShortTextLength(locale51);
        java.util.Locale locale53 = null;
        int int54 = property49.getMaximumTextLength(locale53);
        org.joda.time.DurationField durationField55 = property49.getRangeDurationField();
        java.util.Locale locale56 = null;
        java.lang.String str57 = property49.getAsShortText(locale56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property49.getFieldType();
        org.joda.time.YearMonth yearMonth60 = yearMonth5.withField(dateTimeFieldType58, 11);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology63);
        org.joda.time.YearMonth yearMonth66 = yearMonth64.minusYears((int) (short) 0);
        int int67 = yearMonth64.size();
        org.joda.time.YearMonth yearMonth69 = yearMonth64.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = null;
        int int71 = yearMonth64.indexOf(dateTimeFieldType70);
        org.joda.time.Interval interval72 = yearMonth64.toInterval();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.YearMonth yearMonth76 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology75);
        org.joda.time.YearMonth.Property property77 = yearMonth76.monthOfYear();
        int int78 = property77.getMaximumValue();
        java.lang.String str79 = property77.getAsShortText();
        java.util.Locale locale80 = null;
        java.lang.String str81 = property77.getAsShortText(locale80);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = property77.getFieldType();
        int int83 = yearMonth64.get(dateTimeFieldType82);
        int int84 = yearMonth60.get(dateTimeFieldType82);
        int int85 = yearMonth1.indexOf(dateTimeFieldType82);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.YearMonth yearMonth87 = yearMonth1.minus(readablePeriod86);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.YearMonth yearMonth90 = yearMonth1.withPeriodAdded(readablePeriod88, 1970);
        org.joda.time.DateTimeField[] dateTimeFieldArray91 = yearMonth1.getFields();
        java.lang.String str93 = yearMonth1.toString("0097-12");
        // The following exception was thrown during execution in test generation
        try {
            int int95 = yearMonth1.getValue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 12 + "'", int50 == 12);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Oct" + "'", str57, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 12 + "'", int78 == 12);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Oct" + "'", str79, "Oct");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Oct" + "'", str81, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 11 + "'", int84 == 11);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(yearMonth87);
        org.junit.Assert.assertNotNull(yearMonth90);
        org.junit.Assert.assertNotNull(dateTimeFieldArray91);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "0097-12" + "'", str93, "0097-12");
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.getMaximumValue();
        java.lang.String str17 = property15.getAsShortText();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property15.getAsShortText(locale18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property15.getFieldType();
        org.joda.time.YearMonth.Property property21 = yearMonth3.property(dateTimeFieldType20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        boolean boolean35 = yearMonth27.isAfter((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth.Property property40 = yearMonth39.monthOfYear();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        int int47 = yearMonth44.size();
        org.joda.time.YearMonth yearMonth49 = yearMonth44.plusMonths((int) (byte) 10);
        int int50 = property40.compareTo((org.joda.time.ReadablePartial) yearMonth44);
        org.joda.time.Chronology chronology51 = yearMonth44.getChronology();
        org.joda.time.YearMonth yearMonth52 = yearMonth31.withChronologyRetainFields(chronology51);
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3, chronology51);
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth(chronology51);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minus(readablePeriod55);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Oct" + "'", str17, "Oct");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Oct" + "'", str19, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertNotNull(yearMonth56);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        int int37 = yearMonth34.size();
        org.joda.time.YearMonth yearMonth39 = yearMonth34.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        int int41 = yearMonth34.indexOf(dateTimeFieldType40);
        org.joda.time.Interval interval42 = yearMonth34.toInterval();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        int int48 = property47.getMaximumValue();
        java.lang.String str49 = property47.getAsShortText();
        java.util.Locale locale50 = null;
        java.lang.String str51 = property47.getAsShortText(locale50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property47.getFieldType();
        int int53 = yearMonth34.get(dateTimeFieldType52);
        boolean boolean54 = yearMonth30.isSupported(dateTimeFieldType52);
        org.joda.time.YearMonth.Property property55 = yearMonth30.year();
        org.joda.time.YearMonth yearMonth57 = property55.addToCopy(2020);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 12 + "'", int48 == 12);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Oct" + "'", str49, "Oct");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Oct" + "'", str51, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(yearMonth57);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        org.joda.time.YearMonth yearMonth17 = yearMonth5.plusMonths((int) '4');
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonth yearMonth19 = yearMonth5.minus(readablePeriod18);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth19);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMaximumValue();
        java.util.Locale locale10 = null;
        int int11 = property4.getMaximumShortTextLength(locale10);
        org.joda.time.YearMonth yearMonth12 = property4.getYearMonth();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(yearMonth12);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology15 = yearMonth8.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        org.joda.time.YearMonth.Property property37 = yearMonth19.property(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth8.property(dateTimeFieldType36);
        int int39 = property38.getMaximumValue();
        org.joda.time.YearMonth yearMonth41 = property38.addWrapFieldToCopy(12);
        java.lang.String str42 = property38.getAsShortText();
        int int43 = property38.getMinimumValue();
        java.lang.String str44 = property38.getAsString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Oct" + "'", str42, "Oct");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "10" + "'", str44, "10");
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(12, (int) (short) 1);
        int int3 = yearMonth2.size();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth18 = yearMonth14.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.withMonthOfYear(11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField22 = yearMonth18.getField((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth20);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.lang.String str11 = property4.toString();
        java.lang.String str12 = property4.getName();
        org.joda.time.YearMonth yearMonth14 = property4.addWrapFieldToCopy((int) '4');
        java.util.Locale locale15 = null;
        int int16 = property4.getMaximumShortTextLength(locale15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        boolean boolean38 = yearMonth25.isAfter((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth25.indexOf(dateTimeFieldType39);
        int int41 = yearMonth25.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = yearMonth25.getFieldTypes();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology46);
        org.joda.time.YearMonth yearMonth49 = yearMonth47.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology52);
        org.joda.time.YearMonth yearMonth55 = yearMonth53.minusYears((int) (short) 0);
        int int56 = yearMonth53.size();
        boolean boolean57 = yearMonth49.isAfter((org.joda.time.ReadablePartial) yearMonth53);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology60);
        org.joda.time.YearMonth.Property property62 = yearMonth61.monthOfYear();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth yearMonth68 = yearMonth66.minusYears((int) (short) 0);
        int int69 = yearMonth66.size();
        org.joda.time.YearMonth yearMonth71 = yearMonth66.plusMonths((int) (byte) 10);
        int int72 = property62.compareTo((org.joda.time.ReadablePartial) yearMonth66);
        org.joda.time.Chronology chronology73 = yearMonth66.getChronology();
        org.joda.time.YearMonth yearMonth74 = yearMonth53.withChronologyRetainFields(chronology73);
        org.joda.time.YearMonth yearMonth75 = new org.joda.time.YearMonth((long) (short) 1, chronology73);
        org.joda.time.YearMonth yearMonth76 = new org.joda.time.YearMonth((java.lang.Object) yearMonth25, chronology73);
        org.joda.time.YearMonth yearMonth77 = new org.joda.time.YearMonth(chronology73);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.YearMonth yearMonth79 = yearMonth77.plus(readablePeriod78);
        boolean boolean80 = property4.equals((java.lang.Object) yearMonth77);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "monthOfYear" + "'", str12, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertNotNull(yearMonth79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Interval interval6 = yearMonth3.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonth3.getFieldTypes();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        boolean boolean21 = yearMonth13.isAfter((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth.Property property26 = yearMonth25.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        int int36 = property26.compareTo((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.Chronology chronology37 = yearMonth30.getChronology();
        org.joda.time.YearMonth yearMonth38 = yearMonth17.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonth yearMonth39 = yearMonth3.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonth yearMonth41 = yearMonth3.minusYears(3);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        int int52 = yearMonth45.indexOf(dateTimeFieldType51);
        org.joda.time.YearMonth yearMonth54 = yearMonth45.plusMonths((-1));
        org.joda.time.YearMonth yearMonth56 = yearMonth45.plusMonths((-1));
        org.joda.time.YearMonth.Property property57 = yearMonth56.monthOfYear();
        int int58 = property57.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property57.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property57.getFieldType();
        int int61 = yearMonth41.indexOf(dateTimeFieldType60);
        // The following exception was thrown during execution in test generation
        try {
            int int63 = yearMonth41.getValue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        java.lang.String str11 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField12 = property4.getField();
        java.lang.String str13 = property4.getAsShortText();
        int int14 = property4.getMinimumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10" + "'", str11, "10");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Oct" + "'", str13, "Oct");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = yearMonth8.toString(dateTimeFormatter15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        int int22 = property21.getMinimumValue();
        java.util.Locale locale23 = null;
        int int24 = property21.getMaximumShortTextLength(locale23);
        org.joda.time.DurationField durationField25 = property21.getDurationField();
        boolean boolean26 = yearMonth8.equals((java.lang.Object) property21);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        int int37 = yearMonth30.indexOf(dateTimeFieldType36);
        org.joda.time.YearMonth yearMonth39 = yearMonth30.plusMonths((-1));
        boolean boolean41 = yearMonth39.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        int int53 = yearMonth50.size();
        org.joda.time.YearMonth yearMonth55 = yearMonth50.plusMonths((int) (byte) 10);
        int int56 = property46.compareTo((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.YearMonth yearMonth57 = property46.getYearMonth();
        java.lang.String str58 = property46.getAsText();
        org.joda.time.YearMonth yearMonth59 = property46.getYearMonth();
        boolean boolean60 = yearMonth39.isBefore((org.joda.time.ReadablePartial) yearMonth59);
        org.joda.time.YearMonth yearMonth62 = yearMonth39.minusYears(3);
        int int63 = yearMonth8.compareTo((org.joda.time.ReadablePartial) yearMonth39);
        org.joda.time.YearMonth yearMonth65 = yearMonth39.plusMonths(1);
        int int66 = yearMonth65.getMonthOfYear();
        org.joda.time.YearMonth yearMonth68 = yearMonth65.minusMonths((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.YearMonth yearMonth71 = yearMonth68.withPeriodAdded(readablePeriod69, (-292275054));
        org.joda.time.Chronology chronology72 = yearMonth68.getChronology();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0097-10" + "'", str16, "0097-10");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "October" + "'", str58, "October");
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertNotNull(chronology72);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = org.joda.time.YearMonth.now(chronology30);
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth(chronology30);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((long) (-292275054), chronology30);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth32);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = yearMonth3.toString(dateTimeFormatter6);
        org.joda.time.YearMonth.Property property8 = yearMonth3.year();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth.Property property13 = yearMonth12.monthOfYear();
        int int14 = property13.getMaximumValue();
        java.lang.String str15 = property13.getAsShortText();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property13.getAsShortText(locale16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property13.getFieldType();
        int int19 = property13.getMinimumValue();
        int int20 = property13.getMinimumValue();
        org.joda.time.YearMonth yearMonth22 = property13.addWrapFieldToCopy((int) 'a');
        boolean boolean23 = property8.equals((java.lang.Object) property13);
        int int24 = property13.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0097-10" + "'", str7, "0097-10");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Oct" + "'", str15, "Oct");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Oct" + "'", str17, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 12 + "'", int24 == 12);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.YearMonth.Property property36 = yearMonth3.property(dateTimeFieldType34);
        org.joda.time.Chronology chronology37 = yearMonth3.getChronology();
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth(chronology37);
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth yearMonth45 = yearMonth43.minusYears((int) (short) 0);
        org.joda.time.Interval interval46 = yearMonth43.toInterval();
        org.joda.time.Chronology chronology47 = yearMonth43.getChronology();
        org.joda.time.YearMonth yearMonth48 = yearMonth39.withChronologyRetainFields(chronology47);
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth(chronology47);
        org.joda.time.YearMonth yearMonth50 = yearMonth38.withChronologyRetainFields(chronology47);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minus(readablePeriod51);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(yearMonth52);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonth yearMonth29 = yearMonth27.plus(readablePeriod28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonth yearMonth31 = yearMonth27.minus(readablePeriod30);
        org.joda.time.YearMonth yearMonth33 = yearMonth27.minusMonths(2);
        org.joda.time.YearMonth.Property property34 = yearMonth27.monthOfYear();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        boolean boolean14 = yearMonth12.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.YearMonth yearMonth30 = property19.getYearMonth();
        java.lang.String str31 = property19.getAsText();
        org.joda.time.YearMonth yearMonth32 = property19.getYearMonth();
        boolean boolean33 = yearMonth12.isBefore((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.YearMonth yearMonth35 = yearMonth12.minusYears(3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = yearMonth35.getFieldTypes();
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withYear((int) ' ');
        int int39 = yearMonth38.size();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "October" + "'", str31, "October");
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addToCopy((int) (short) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        boolean boolean31 = yearMonth18.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = yearMonth28.toString(dateTimeFormatter32);
        int int34 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth28);
        int int35 = property4.getMinimumValueOverall();
        java.util.Locale locale36 = null;
        java.lang.String str37 = property4.getAsShortText(locale36);
        java.lang.String str38 = property4.getAsShortText();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0097-10" + "'", str33, "0097-10");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Oct" + "'", str37, "Oct");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Oct" + "'", str38, "Oct");
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth.Property property40 = yearMonth39.monthOfYear();
        int int41 = property40.getMaximumValue();
        java.lang.String str42 = property40.getAsShortText();
        org.joda.time.DateTimeField dateTimeField43 = property40.getField();
        org.joda.time.YearMonth yearMonth45 = property40.setCopy("Oct");
        org.joda.time.YearMonth yearMonth47 = property40.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.YearMonth yearMonth49 = yearMonth47.plusMonths(0);
        boolean boolean50 = yearMonth35.isBefore((org.joda.time.ReadablePartial) yearMonth47);
        org.joda.time.Chronology chronology51 = yearMonth47.getChronology();
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 12 + "'", int41 == 12);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Oct" + "'", str42, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((long) (short) 1, chronology32);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth(chronology32);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = yearMonth36.toString(dateTimeFormatter37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonth yearMonth40 = yearMonth36.plus(readablePeriod39);
        java.lang.Class<?> wildcardClass41 = yearMonth36.getClass();
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0100-10" + "'", str38, "0100-10");
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((long) (short) 1, chronology32);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth(chronology32);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology32);
        int int38 = yearMonth36.getValue((int) (short) 1);
        int int39 = yearMonth36.getYear();
        org.joda.time.YearMonth yearMonth41 = yearMonth36.minusYears((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.YearMonth yearMonth43 = yearMonth41.minus(readablePeriod42);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(yearMonth43);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        java.util.Locale locale17 = null;
        int int18 = property15.getMaximumShortTextLength(locale17);
        int int19 = property15.getMinimumValue();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Interval interval6 = yearMonth3.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonth3.getFieldTypes();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        boolean boolean21 = yearMonth13.isAfter((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth.Property property26 = yearMonth25.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        int int36 = property26.compareTo((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.Chronology chronology37 = yearMonth30.getChronology();
        org.joda.time.YearMonth yearMonth38 = yearMonth17.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonth yearMonth39 = yearMonth3.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonth yearMonth41 = yearMonth39.withMonthOfYear(9);
        org.joda.time.Interval interval42 = yearMonth41.toInterval();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        int int48 = property47.getMaximumValue();
        java.lang.String str49 = property47.getAsShortText();
        org.joda.time.YearMonth yearMonth51 = property47.addWrapFieldToCopy((int) (short) -1);
        int[] intArray52 = yearMonth51.getValues();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth.Property property57 = yearMonth56.monthOfYear();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology60);
        org.joda.time.YearMonth yearMonth63 = yearMonth61.minusYears((int) (short) 0);
        int int64 = yearMonth61.size();
        org.joda.time.YearMonth yearMonth66 = yearMonth61.plusMonths((int) (byte) 10);
        int int67 = property57.compareTo((org.joda.time.ReadablePartial) yearMonth61);
        org.joda.time.Chronology chronology68 = yearMonth61.getChronology();
        org.joda.time.YearMonth yearMonth69 = org.joda.time.YearMonth.now(chronology68);
        org.joda.time.YearMonth yearMonth70 = yearMonth51.withChronologyRetainFields(chronology68);
        org.joda.time.YearMonth yearMonth71 = new org.joda.time.YearMonth(chronology68);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.YearMonth yearMonth75 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology74);
        org.joda.time.YearMonth.Property property76 = yearMonth75.monthOfYear();
        int int77 = property76.getMaximumValue();
        java.lang.String str78 = property76.getAsShortText();
        java.util.Locale locale79 = null;
        java.lang.String str80 = property76.getAsShortText(locale79);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = property76.getFieldType();
        boolean boolean82 = yearMonth71.isSupported(dateTimeFieldType81);
        org.joda.time.YearMonth yearMonth84 = yearMonth41.withField(dateTimeFieldType81, (int) (short) 10);
        org.joda.time.YearMonth yearMonth86 = yearMonth84.plusYears((int) (short) 0);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 12 + "'", int48 == 12);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Oct" + "'", str49, "Oct");
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 9]");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 12 + "'", int77 == 12);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Oct" + "'", str78, "Oct");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Oct" + "'", str80, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(yearMonth84);
        org.junit.Assert.assertNotNull(yearMonth86);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        java.lang.String str10 = property4.getAsText();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        org.joda.time.YearMonth yearMonth19 = yearMonth14.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonth14.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonth yearMonth23 = yearMonth14.plusMonths((-1));
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        int int34 = yearMonth27.indexOf(dateTimeFieldType33);
        org.joda.time.Interval interval35 = yearMonth27.toInterval();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth.Property property40 = yearMonth39.monthOfYear();
        int int41 = property40.getMaximumValue();
        java.lang.String str42 = property40.getAsShortText();
        java.util.Locale locale43 = null;
        java.lang.String str44 = property40.getAsShortText(locale43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = property40.getFieldType();
        int int46 = yearMonth27.get(dateTimeFieldType45);
        org.joda.time.YearMonth.Property property47 = yearMonth14.property(dateTimeFieldType45);
        boolean boolean48 = property4.equals((java.lang.Object) yearMonth14);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology51);
        org.joda.time.YearMonth yearMonth54 = yearMonth52.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth yearMonth60 = yearMonth58.minusYears((int) (short) 0);
        int int61 = yearMonth58.size();
        boolean boolean62 = yearMonth54.isAfter((org.joda.time.ReadablePartial) yearMonth58);
        org.joda.time.Interval interval63 = yearMonth54.toInterval();
        org.joda.time.YearMonth.Property property64 = yearMonth54.year();
        org.joda.time.YearMonth yearMonth66 = yearMonth54.plusMonths((int) '4');
        org.joda.time.YearMonth yearMonth68 = yearMonth54.plusMonths(11);
        int int69 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        java.lang.String str70 = property4.getAsText();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "October" + "'", str10, "October");
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 12 + "'", int41 == 12);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Oct" + "'", str42, "Oct");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Oct" + "'", str44, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "October" + "'", str70, "October");
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth.Property property6 = yearMonth5.monthOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        org.joda.time.YearMonth yearMonth15 = yearMonth10.plusMonths((int) (byte) 10);
        int int16 = property6.compareTo((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = yearMonth10.getChronology();
        org.joda.time.YearMonth yearMonth18 = org.joda.time.YearMonth.now(chronology17);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth(100, (int) (short) 1, chronology17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType21 = yearMonth19.getFieldType((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(yearMonth18);
    }

    @Test
    @Ignore
  public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth.Property property5 = yearMonth4.monthOfYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        org.joda.time.YearMonth yearMonth14 = yearMonth9.plusMonths((int) (byte) 10);
        int int15 = property5.compareTo((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = yearMonth9.getChronology();
        org.joda.time.YearMonth yearMonth17 = org.joda.time.YearMonth.now(chronology16);
        org.joda.time.YearMonth yearMonth18 = org.joda.time.YearMonth.now(chronology16);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((java.lang.Object) "0097-10", chronology16);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(chronology16);
        int int21 = yearMonth20.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType23 = yearMonth20.getFieldType((-292275054));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -292275054");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2020 + "'", int21 == 2020);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        int int26 = yearMonth3.getMonthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        int int37 = yearMonth30.indexOf(dateTimeFieldType36);
        org.joda.time.YearMonth yearMonth39 = yearMonth30.plusMonths((-1));
        org.joda.time.YearMonth yearMonth41 = yearMonth30.plusMonths((-1));
        org.joda.time.YearMonth.Property property42 = yearMonth41.monthOfYear();
        int int43 = property42.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property42.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = property42.getFieldType();
        org.joda.time.YearMonth.Property property46 = yearMonth3.property(dateTimeFieldType45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        int int53 = yearMonth50.size();
        org.joda.time.YearMonth yearMonth55 = yearMonth50.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        int int57 = yearMonth50.indexOf(dateTimeFieldType56);
        org.joda.time.Interval interval58 = yearMonth50.toInterval();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology61);
        org.joda.time.YearMonth.Property property63 = yearMonth62.monthOfYear();
        int int64 = property63.getMaximumValue();
        java.lang.String str65 = property63.getAsShortText();
        java.util.Locale locale66 = null;
        java.lang.String str67 = property63.getAsShortText(locale66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = property63.getFieldType();
        int int69 = yearMonth50.get(dateTimeFieldType68);
        org.joda.time.Interval interval70 = yearMonth50.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = null;
        java.lang.String str72 = yearMonth50.toString(dateTimeFormatter71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.YearMonth yearMonth75 = yearMonth50.withPeriodAdded(readablePeriod73, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.Interval interval77 = yearMonth50.toInterval(dateTimeZone76);
        int int78 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.YearMonth yearMonth80 = yearMonth3.minus(readablePeriod79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.YearMonth yearMonth83 = yearMonth3.withPeriodAdded(readablePeriod81, 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth85 = yearMonth83.withMonthOfYear((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 12 + "'", int64 == 12);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Oct" + "'", str65, "Oct");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Oct" + "'", str67, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "0097-10" + "'", str72, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth75);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertNotNull(yearMonth83);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy(100);
        java.lang.String str13 = property4.getAsString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        boolean boolean35 = yearMonth22.isAfter((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        int int37 = yearMonth22.indexOf(dateTimeFieldType36);
        int int38 = yearMonth22.size();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        org.joda.time.Interval interval45 = yearMonth42.toInterval();
        int int46 = yearMonth22.compareTo((org.joda.time.ReadablePartial) yearMonth42);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Interval interval48 = yearMonth22.toInterval(dateTimeZone47);
        int int49 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "10" + "'", str13, "10");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.YearMonth yearMonth15 = yearMonth12.withPeriodAdded(readablePeriod13, 3);
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology17 = yearMonth16.getChronology();
        org.joda.time.YearMonth yearMonth18 = yearMonth12.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = yearMonth12.getFieldTypes();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property4.getFieldType();
        int int12 = property4.getMinimumValue();
        java.lang.String str13 = property4.getName();
        int int14 = property4.getMinimumValueOverall();
        int int15 = property4.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        java.util.Locale locale17 = null;
        int int18 = property15.getMaximumShortTextLength(locale17);
        org.joda.time.DateTimeField dateTimeField19 = property15.getField();
        java.lang.String str20 = property15.getAsShortText();
        java.lang.String str21 = property15.getAsText();
        java.lang.String str22 = property15.getAsString();
        java.lang.String str23 = property15.getName();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Sep" + "'", str20, "Sep");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "September" + "'", str21, "September");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "9" + "'", str22, "9");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "monthOfYear" + "'", str23, "monthOfYear");
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        int int12 = property4.getMinimumValueOverall();
        org.joda.time.YearMonth yearMonth13 = property4.getYearMonth();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(yearMonth13);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = yearMonth2.getChronology();
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth(12, 9, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.withYear(11);
        java.lang.String str8 = yearMonth6.toString("1980-01");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1980-01" + "'", str8, "1980-01");
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonth yearMonth29 = yearMonth27.plus(readablePeriod28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonth yearMonth31 = yearMonth27.minus(readablePeriod30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth yearMonth43 = yearMonth41.minusYears((int) (short) 0);
        int int44 = yearMonth41.size();
        boolean boolean45 = yearMonth37.isAfter((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        int int60 = property50.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = yearMonth54.getChronology();
        org.joda.time.YearMonth yearMonth62 = yearMonth41.withChronologyRetainFields(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.YearMonth yearMonth65 = yearMonth62.withPeriodAdded(readablePeriod63, (int) 'a');
        org.joda.time.YearMonth yearMonth67 = yearMonth62.plusMonths(9);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.YearMonth yearMonth71 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology70);
        org.joda.time.YearMonth.Property property72 = yearMonth71.monthOfYear();
        int int73 = property72.getMaximumValue();
        java.lang.String str74 = property72.getAsShortText();
        java.util.Locale locale75 = null;
        java.lang.String str76 = property72.getAsShortText(locale75);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = property72.getFieldType();
        int int78 = yearMonth62.get(dateTimeFieldType77);
        int int79 = yearMonth27.get(dateTimeFieldType77);
        org.joda.time.Interval interval80 = yearMonth27.toInterval();
        org.joda.time.YearMonth.Property property81 = yearMonth27.monthOfYear();
        java.util.Locale locale82 = null;
        java.lang.String str83 = property81.getAsText(locale82);
        int int84 = property81.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 12 + "'", int73 == 12);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Oct" + "'", str74, "Oct");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Oct" + "'", str76, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "September" + "'", str83, "September");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 12 + "'", int84 == 12);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        java.lang.String str6 = yearMonth3.toString();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.minusYears(3);
        java.lang.String str10 = yearMonth8.toString("97");
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0097-10" + "'", str6, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "97" + "'", str10, "97");
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Interval interval9 = yearMonth6.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = yearMonth6.getFieldTypes();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        boolean boolean24 = yearMonth16.isAfter((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        int int39 = property29.compareTo((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = yearMonth33.getChronology();
        org.joda.time.YearMonth yearMonth41 = yearMonth20.withChronologyRetainFields(chronology40);
        org.joda.time.YearMonth yearMonth42 = yearMonth6.withChronologyRetainFields(chronology40);
        org.joda.time.YearMonth yearMonth43 = org.joda.time.YearMonth.now(chronology40);
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth(3, (int) (byte) 1, chronology40);
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((long) (short) -1, chronology40);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertNotNull(yearMonth43);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((int) ' ', 3);
        java.lang.String str4 = yearMonth2.toString("0097-09");
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonth yearMonth6 = yearMonth2.minus(readablePeriod5);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0097-09" + "'", str4, "0097-09");
        org.junit.Assert.assertNotNull(yearMonth6);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.lang.String str11 = property4.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property4.getFieldType();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth.Property property17 = yearMonth16.monthOfYear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        int int24 = yearMonth21.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth21.plusMonths((int) (byte) 10);
        int int27 = property17.compareTo((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Interval interval29 = yearMonth21.toInterval(dateTimeZone28);
        org.joda.time.YearMonth yearMonth31 = yearMonth21.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth yearMonth43 = yearMonth41.minusYears((int) (short) 0);
        int int44 = yearMonth41.size();
        boolean boolean45 = yearMonth37.isAfter((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        int int60 = property50.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = yearMonth54.getChronology();
        org.joda.time.YearMonth yearMonth62 = yearMonth41.withChronologyRetainFields(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.YearMonth yearMonth65 = yearMonth62.withPeriodAdded(readablePeriod63, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        int int67 = yearMonth65.indexOf(dateTimeFieldType66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.YearMonth yearMonth71 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology70);
        org.joda.time.YearMonth.Property property72 = yearMonth71.monthOfYear();
        int int73 = property72.getMaximumValue();
        java.lang.String str74 = property72.getAsShortText();
        java.util.Locale locale75 = null;
        java.lang.String str76 = property72.getAsShortText(locale75);
        org.joda.time.YearMonth yearMonth78 = property72.setCopy("October");
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = yearMonth78.toDateTime(readableInstant79);
        org.joda.time.DateTime dateTime81 = yearMonth65.toDateTime(readableInstant79);
        org.joda.time.DateTime dateTime82 = yearMonth21.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        int int83 = property4.compareTo((org.joda.time.ReadableInstant) dateTime81);
        int int84 = property4.getMinimumValueOverall();
        java.lang.String str85 = property4.getAsString();
        java.lang.String str86 = property4.getAsText();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 12 + "'", int73 == 12);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Oct" + "'", str74, "Oct");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Oct" + "'", str76, "Oct");
        org.junit.Assert.assertNotNull(yearMonth78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "10" + "'", str85, "10");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "October" + "'", str86, "October");
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology15 = yearMonth8.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        org.joda.time.YearMonth.Property property37 = yearMonth19.property(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth8.property(dateTimeFieldType36);
        int int39 = property38.getMaximumValue();
        org.joda.time.DurationField durationField40 = property38.getDurationField();
        java.util.Locale locale41 = null;
        int int42 = property38.getMaximumShortTextLength(locale41);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.DurationFieldType durationFieldType6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth8 = yearMonth3.withFieldAdded(durationFieldType6, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(2020, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.util.Locale locale10 = null;
        int int11 = property4.getMaximumTextLength(locale10);
        org.joda.time.DurationField durationField12 = property4.getRangeDurationField();
        org.joda.time.YearMonth yearMonth14 = property4.setCopy(12);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(yearMonth14);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology15 = yearMonth8.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        org.joda.time.YearMonth.Property property37 = yearMonth19.property(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth8.property(dateTimeFieldType36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonth42.indexOf(dateTimeFieldType48);
        org.joda.time.YearMonth yearMonth51 = yearMonth42.plusMonths((-1));
        boolean boolean53 = yearMonth51.equals((java.lang.Object) 1);
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((long) 100);
        boolean boolean56 = yearMonth51.isBefore((org.joda.time.ReadablePartial) yearMonth55);
        int int57 = yearMonth8.compareTo((org.joda.time.ReadablePartial) yearMonth51);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.YearMonth yearMonth60 = yearMonth51.withPeriodAdded(readablePeriod58, (int) (byte) -1);
        int int61 = yearMonth51.size();
        org.joda.time.YearMonth yearMonth63 = yearMonth51.minusMonths((int) (byte) 100);
        int int65 = yearMonth51.getValue((int) (byte) 0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 97 + "'", int65 == 97);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth.Property property28 = yearMonth27.monthOfYear();
        int int29 = property28.getMaximumValue();
        java.lang.String str30 = property28.getAsShortText();
        org.joda.time.YearMonth yearMonth32 = property28.addWrapFieldToCopy((int) (short) -1);
        int[] intArray33 = yearMonth32.getValues();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth.Property property38 = yearMonth37.monthOfYear();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        int int48 = property38.compareTo((org.joda.time.ReadablePartial) yearMonth42);
        org.joda.time.Chronology chronology49 = yearMonth42.getChronology();
        org.joda.time.YearMonth yearMonth50 = org.joda.time.YearMonth.now(chronology49);
        org.joda.time.YearMonth yearMonth51 = yearMonth32.withChronologyRetainFields(chronology49);
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth(chronology49);
        boolean boolean53 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth52);
        org.joda.time.YearMonth.Property property54 = yearMonth52.monthOfYear();
        java.util.Locale locale56 = null;
        org.joda.time.YearMonth yearMonth57 = property54.setCopy("October", locale56);
        int int58 = property54.getMinimumValueOverall();
        int int59 = property54.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 12 + "'", int29 == 12);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Oct" + "'", str30, "Oct");
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 9]");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 12 + "'", int59 == 12);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        boolean boolean24 = yearMonth16.isAfter((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        int int39 = property29.compareTo((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = yearMonth33.getChronology();
        org.joda.time.YearMonth yearMonth41 = yearMonth20.withChronologyRetainFields(chronology40);
        int int42 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        int int48 = property47.getMaximumValue();
        java.util.Locale locale49 = null;
        int int50 = property47.getMaximumShortTextLength(locale49);
        java.util.Locale locale51 = null;
        int int52 = property47.getMaximumTextLength(locale51);
        org.joda.time.DurationField durationField53 = property47.getRangeDurationField();
        java.util.Locale locale54 = null;
        java.lang.String str55 = property47.getAsShortText(locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property47.getFieldType();
        org.joda.time.YearMonth yearMonth58 = yearMonth3.withField(dateTimeFieldType56, 11);
        org.joda.time.DateTimeField[] dateTimeFieldArray59 = yearMonth3.getFields();
        int int60 = yearMonth3.getMonthOfYear();
        java.lang.String str62 = yearMonth3.toString("1970-01");
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.YearMonth yearMonth64 = yearMonth3.minus(readablePeriod63);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 12 + "'", int48 == 12);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Oct" + "'", str55, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertNotNull(dateTimeFieldArray59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01" + "'", str62, "1970-01");
        org.junit.Assert.assertNotNull(yearMonth64);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property15.getFieldType();
        int int18 = property15.getMaximumValueOverall();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property15.getAsShortText(locale19);
        int int21 = property15.getMinimumValueOverall();
        org.joda.time.YearMonth yearMonth23 = property15.addWrapFieldToCopy(0);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Sep" + "'", str20, "Sep");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(yearMonth23);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        java.lang.String str12 = property4.getAsText();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.YearMonth yearMonth27 = yearMonth18.plusMonths((-1));
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        org.joda.time.YearMonth yearMonth36 = yearMonth31.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        int int38 = yearMonth31.indexOf(dateTimeFieldType37);
        org.joda.time.Interval interval39 = yearMonth31.toInterval();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth.Property property44 = yearMonth43.monthOfYear();
        int int45 = property44.getMaximumValue();
        java.lang.String str46 = property44.getAsShortText();
        java.util.Locale locale47 = null;
        java.lang.String str48 = property44.getAsShortText(locale47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property44.getFieldType();
        int int50 = yearMonth31.get(dateTimeFieldType49);
        org.joda.time.YearMonth.Property property51 = yearMonth18.property(dateTimeFieldType49);
        org.joda.time.Chronology chronology52 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth(chronology52);
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth yearMonth60 = yearMonth58.minusYears((int) (short) 0);
        org.joda.time.Interval interval61 = yearMonth58.toInterval();
        org.joda.time.Chronology chronology62 = yearMonth58.getChronology();
        org.joda.time.YearMonth yearMonth63 = yearMonth54.withChronologyRetainFields(chronology62);
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth(chronology62);
        org.joda.time.YearMonth yearMonth65 = yearMonth53.withChronologyRetainFields(chronology62);
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((long) (short) 10, chronology62);
        org.joda.time.YearMonth yearMonth67 = new org.joda.time.YearMonth(chronology62);
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((long) 98, chronology62);
        org.joda.time.YearMonth yearMonth69 = org.joda.time.YearMonth.now(chronology62);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth70 = new org.joda.time.YearMonth((java.lang.Object) str12, chronology62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"October\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "October" + "'", str12, "October");
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 12 + "'", int45 == 12);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Oct" + "'", str46, "Oct");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Oct" + "'", str48, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth69);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((long) (short) 1, chronology32);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth(chronology32);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology32);
        int int38 = yearMonth36.getValue((int) (short) 1);
        int int39 = yearMonth36.getYear();
        org.joda.time.YearMonth.Property property40 = yearMonth36.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField42 = yearMonth36.getField(96);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 96");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("97");
        org.junit.Assert.assertNotNull(yearMonth1);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth18 = yearMonth14.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.Chronology chronology21 = yearMonth20.getChronology();
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth(chronology21);
        org.joda.time.YearMonth yearMonth23 = yearMonth18.withChronologyRetainFields(chronology21);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.plusMonths(11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = yearMonth25.toString(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0098-08" + "'", str27, "0098-08");
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addToCopy((int) (short) 10);
        int[] intArray13 = yearMonth12.getValues();
        org.joda.time.YearMonth yearMonth15 = yearMonth12.minusYears((int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth.Property property20 = yearMonth19.monthOfYear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        org.joda.time.YearMonth yearMonth29 = yearMonth24.plusMonths((int) (byte) 10);
        int int30 = property20.compareTo((org.joda.time.ReadablePartial) yearMonth24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = yearMonth24.toString(dateTimeFormatter31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth.Property property37 = yearMonth36.monthOfYear();
        int int38 = property37.getMinimumValue();
        java.util.Locale locale39 = null;
        int int40 = property37.getMaximumShortTextLength(locale39);
        org.joda.time.DurationField durationField41 = property37.getDurationField();
        boolean boolean42 = yearMonth24.equals((java.lang.Object) property37);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        int int49 = yearMonth46.size();
        org.joda.time.YearMonth yearMonth51 = yearMonth46.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        int int53 = yearMonth46.indexOf(dateTimeFieldType52);
        org.joda.time.YearMonth yearMonth55 = yearMonth46.plusMonths((-1));
        boolean boolean57 = yearMonth55.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology60);
        org.joda.time.YearMonth.Property property62 = yearMonth61.monthOfYear();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth yearMonth68 = yearMonth66.minusYears((int) (short) 0);
        int int69 = yearMonth66.size();
        org.joda.time.YearMonth yearMonth71 = yearMonth66.plusMonths((int) (byte) 10);
        int int72 = property62.compareTo((org.joda.time.ReadablePartial) yearMonth66);
        org.joda.time.YearMonth yearMonth73 = property62.getYearMonth();
        java.lang.String str74 = property62.getAsText();
        org.joda.time.YearMonth yearMonth75 = property62.getYearMonth();
        boolean boolean76 = yearMonth55.isBefore((org.joda.time.ReadablePartial) yearMonth75);
        org.joda.time.YearMonth yearMonth78 = yearMonth55.minusYears(3);
        int int79 = yearMonth24.compareTo((org.joda.time.ReadablePartial) yearMonth55);
        int int80 = yearMonth15.compareTo((org.joda.time.ReadablePartial) yearMonth24);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.YearMonth yearMonth82 = yearMonth15.plus(readablePeriod81);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[98, 8]");
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0097-10" + "'", str32, "0097-10");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "October" + "'", str74, "October");
        org.junit.Assert.assertNotNull(yearMonth75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(yearMonth78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(yearMonth82);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addToCopy((int) (short) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        boolean boolean31 = yearMonth18.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = yearMonth28.toString(dateTimeFormatter32);
        int int34 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.YearMonth yearMonth35 = property4.getYearMonth();
        org.joda.time.YearMonth yearMonth37 = property4.setCopy((int) (byte) 1);
        int int38 = property4.getMaximumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0097-10" + "'", str33, "0097-10");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 12 + "'", int38 == 12);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        boolean boolean14 = yearMonth12.equals((java.lang.Object) 1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonth yearMonth16 = yearMonth12.minus(readablePeriod15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        int int29 = yearMonth26.size();
        boolean boolean30 = yearMonth22.isAfter((org.joda.time.ReadablePartial) yearMonth26);
        org.joda.time.YearMonth.Property property31 = yearMonth26.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property31.getFieldType();
        boolean boolean33 = yearMonth16.isSupported(dateTimeFieldType32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth.Property property38 = yearMonth37.monthOfYear();
        int int39 = property38.getMaximumValue();
        java.lang.String str40 = property38.getAsShortText();
        int int41 = property38.get();
        java.lang.String str42 = property38.getAsString();
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((java.lang.Object) str42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology46);
        org.joda.time.YearMonth yearMonth49 = yearMonth47.minusYears((int) (short) 0);
        int int50 = yearMonth47.size();
        org.joda.time.YearMonth yearMonth52 = yearMonth47.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        int int54 = yearMonth47.indexOf(dateTimeFieldType53);
        org.joda.time.YearMonth yearMonth56 = yearMonth47.plusMonths((-1));
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.YearMonth yearMonth60 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology59);
        org.joda.time.YearMonth yearMonth62 = yearMonth60.minusYears((int) (short) 0);
        int int63 = yearMonth60.size();
        org.joda.time.YearMonth yearMonth65 = yearMonth60.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        int int67 = yearMonth60.indexOf(dateTimeFieldType66);
        org.joda.time.Interval interval68 = yearMonth60.toInterval();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.YearMonth yearMonth72 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology71);
        org.joda.time.YearMonth.Property property73 = yearMonth72.monthOfYear();
        int int74 = property73.getMaximumValue();
        java.lang.String str75 = property73.getAsShortText();
        java.util.Locale locale76 = null;
        java.lang.String str77 = property73.getAsShortText(locale76);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = property73.getFieldType();
        int int79 = yearMonth60.get(dateTimeFieldType78);
        org.joda.time.YearMonth.Property property80 = yearMonth47.property(dateTimeFieldType78);
        java.lang.String str81 = property80.getAsText();
        java.lang.String str82 = property80.getAsString();
        java.lang.String str83 = property80.getAsShortText();
        org.joda.time.YearMonth yearMonth85 = property80.addToCopy(0);
        org.joda.time.DurationField durationField86 = property80.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = property80.getFieldType();
        boolean boolean88 = yearMonth43.isSupported(dateTimeFieldType87);
        boolean boolean89 = yearMonth16.isSupported(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Oct" + "'", str40, "Oct");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "10" + "'", str42, "10");
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 12 + "'", int74 == 12);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Oct" + "'", str75, "Oct");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Oct" + "'", str77, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "October" + "'", str81, "October");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "10" + "'", str82, "10");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Oct" + "'", str83, "Oct");
        org.junit.Assert.assertNotNull(yearMonth85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        java.lang.String str28 = yearMonth8.toString();
        org.joda.time.YearMonth.Property property29 = yearMonth8.year();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        int int38 = yearMonth35.size();
        org.joda.time.YearMonth yearMonth40 = yearMonth35.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        int int42 = yearMonth35.indexOf(dateTimeFieldType41);
        org.joda.time.YearMonth yearMonth44 = yearMonth35.plusMonths((-1));
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology47);
        org.joda.time.YearMonth yearMonth50 = yearMonth48.minusYears((int) (short) 0);
        int int51 = yearMonth48.size();
        org.joda.time.YearMonth yearMonth53 = yearMonth48.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = yearMonth48.indexOf(dateTimeFieldType54);
        org.joda.time.Interval interval56 = yearMonth48.toInterval();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.YearMonth yearMonth60 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology59);
        org.joda.time.YearMonth.Property property61 = yearMonth60.monthOfYear();
        int int62 = property61.getMaximumValue();
        java.lang.String str63 = property61.getAsShortText();
        java.util.Locale locale64 = null;
        java.lang.String str65 = property61.getAsShortText(locale64);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = property61.getFieldType();
        int int67 = yearMonth48.get(dateTimeFieldType66);
        org.joda.time.YearMonth.Property property68 = yearMonth35.property(dateTimeFieldType66);
        org.joda.time.Chronology chronology69 = yearMonth35.getChronology();
        org.joda.time.YearMonth yearMonth70 = new org.joda.time.YearMonth(chronology69);
        org.joda.time.YearMonth yearMonth71 = new org.joda.time.YearMonth((long) 9, chronology69);
        org.joda.time.YearMonth yearMonth72 = new org.joda.time.YearMonth((long) 'a', chronology69);
        org.joda.time.YearMonth yearMonth73 = new org.joda.time.YearMonth((java.lang.Object) yearMonth8, chronology69);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0097-09" + "'", str28, "0097-09");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 12 + "'", int62 == 12);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Oct" + "'", str63, "Oct");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Oct" + "'", str65, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(chronology69);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.YearMonth.Property property36 = yearMonth3.property(dateTimeFieldType34);
        java.lang.String str37 = property36.getAsText();
        org.joda.time.DateTimeField dateTimeField38 = property36.getField();
        org.joda.time.YearMonth yearMonth40 = property36.addWrapFieldToCopy(3);
        org.joda.time.YearMonth yearMonth42 = property36.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.YearMonth yearMonth44 = property36.setCopy("Oct");
        java.lang.String str45 = property36.getName();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "October" + "'", str37, "October");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "monthOfYear" + "'", str45, "monthOfYear");
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property15.getFieldType();
        int int18 = property15.getMaximumValueOverall();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property15.getAsShortText(locale19);
        int int21 = property15.getMinimumValueOverall();
        org.joda.time.YearMonth yearMonth23 = property15.addToCopy((int) (byte) 100);
        java.lang.String str24 = property15.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property15.getFieldType();
        java.util.Locale locale26 = null;
        int int27 = property15.getMaximumShortTextLength(locale26);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Sep" + "'", str20, "Sep");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "9" + "'", str24, "9");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy(100);
        org.joda.time.Chronology chronology13 = yearMonth12.getChronology();
        int int14 = yearMonth12.getYear();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        java.util.Locale locale10 = null;
        int int11 = property4.getMaximumTextLength(locale10);
        int int12 = property4.getMaximumValue();
        int int13 = property4.get();
        java.lang.String str14 = property4.getAsText();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 12 + "'", int12 == 12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "October" + "'", str14, "October");
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth.Property property5 = yearMonth4.monthOfYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        org.joda.time.YearMonth yearMonth14 = yearMonth9.plusMonths((int) (byte) 10);
        int int15 = property5.compareTo((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = yearMonth9.getChronology();
        org.joda.time.YearMonth yearMonth17 = org.joda.time.YearMonth.now(chronology16);
        org.joda.time.YearMonth yearMonth18 = org.joda.time.YearMonth.now(chronology16);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((java.lang.Object) "0097-10", chronology16);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((java.lang.Object) yearMonth19);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth18);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = yearMonth18.toString(dateTimeFormatter22);
        org.joda.time.Interval interval24 = yearMonth18.toInterval();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.YearMonth yearMonth27 = yearMonth18.withPeriodAdded(readablePeriod25, (int) (byte) -1);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.plusMonths((int) 'a');
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0097-10" + "'", str23, "0097-10");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth9.withYear((int) (byte) 1);
        int int33 = yearMonth32.getMonthOfYear();
        org.joda.time.YearMonth.Property property34 = yearMonth32.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate36 = yearMonth32.toLocalDate(1980);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1980 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        int int11 = property4.get();
        java.lang.String str12 = property4.getAsString();
        java.lang.String str13 = property4.getAsShortText();
        org.joda.time.DurationField durationField14 = property4.getDurationField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "10" + "'", str12, "10");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Oct" + "'", str13, "Oct");
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) (-292275054));
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        int int8 = yearMonth5.size();
        org.joda.time.YearMonth yearMonth10 = yearMonth5.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonth5.indexOf(dateTimeFieldType11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        boolean boolean26 = yearMonth18.isAfter((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        int int38 = yearMonth35.size();
        org.joda.time.YearMonth yearMonth40 = yearMonth35.plusMonths((int) (byte) 10);
        int int41 = property31.compareTo((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.Chronology chronology42 = yearMonth35.getChronology();
        org.joda.time.YearMonth yearMonth43 = yearMonth22.withChronologyRetainFields(chronology42);
        int int44 = yearMonth5.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology47);
        org.joda.time.YearMonth.Property property49 = yearMonth48.monthOfYear();
        int int50 = property49.getMaximumValue();
        java.util.Locale locale51 = null;
        int int52 = property49.getMaximumShortTextLength(locale51);
        java.util.Locale locale53 = null;
        int int54 = property49.getMaximumTextLength(locale53);
        org.joda.time.DurationField durationField55 = property49.getRangeDurationField();
        java.util.Locale locale56 = null;
        java.lang.String str57 = property49.getAsShortText(locale56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property49.getFieldType();
        org.joda.time.YearMonth yearMonth60 = yearMonth5.withField(dateTimeFieldType58, 11);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology63);
        org.joda.time.YearMonth yearMonth66 = yearMonth64.minusYears((int) (short) 0);
        int int67 = yearMonth64.size();
        org.joda.time.YearMonth yearMonth69 = yearMonth64.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = null;
        int int71 = yearMonth64.indexOf(dateTimeFieldType70);
        org.joda.time.Interval interval72 = yearMonth64.toInterval();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.YearMonth yearMonth76 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology75);
        org.joda.time.YearMonth.Property property77 = yearMonth76.monthOfYear();
        int int78 = property77.getMaximumValue();
        java.lang.String str79 = property77.getAsShortText();
        java.util.Locale locale80 = null;
        java.lang.String str81 = property77.getAsShortText(locale80);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = property77.getFieldType();
        int int83 = yearMonth64.get(dateTimeFieldType82);
        int int84 = yearMonth60.get(dateTimeFieldType82);
        int int85 = yearMonth1.indexOf(dateTimeFieldType82);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.YearMonth yearMonth87 = yearMonth1.minus(readablePeriod86);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.YearMonth yearMonth90 = yearMonth1.withPeriodAdded(readablePeriod88, 1970);
        org.joda.time.DateTimeField[] dateTimeFieldArray91 = yearMonth1.getFields();
        org.joda.time.DateTimeZone dateTimeZone92 = null;
        org.joda.time.Interval interval93 = yearMonth1.toInterval(dateTimeZone92);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 12 + "'", int50 == 12);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Oct" + "'", str57, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 12 + "'", int78 == 12);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Oct" + "'", str79, "Oct");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Oct" + "'", str81, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 11 + "'", int84 == 11);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(yearMonth87);
        org.junit.Assert.assertNotNull(yearMonth90);
        org.junit.Assert.assertNotNull(dateTimeFieldArray91);
        org.junit.Assert.assertNotNull(interval93);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addToCopy((int) (short) 1);
        java.util.Locale locale10 = null;
        java.lang.String str11 = property4.getAsText(locale10);
        int int12 = property4.getMinimumValue();
        java.lang.String str13 = property4.getAsText();
        java.lang.String str14 = property4.toString();
        org.joda.time.ReadableInstant readableInstant15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int16 = property4.compareTo(readableInstant15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "October" + "'", str11, "October");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "October" + "'", str13, "October");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[monthOfYear]" + "'", str14, "Property[monthOfYear]");
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        java.util.Locale locale17 = null;
        int int18 = property4.getMaximumShortTextLength(locale17);
        int int19 = property4.getMinimumValue();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property4.getAsText(locale20);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "October" + "'", str21, "October");
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.YearMonth.Property property36 = yearMonth3.property(dateTimeFieldType34);
        java.lang.String str37 = property36.getAsText();
        org.joda.time.DateTimeField dateTimeField38 = property36.getField();
        org.joda.time.YearMonth yearMonth40 = property36.addWrapFieldToCopy(3);
        org.joda.time.YearMonth yearMonth42 = property36.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.YearMonth yearMonth44 = property36.setCopy("Oct");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology47);
        org.joda.time.YearMonth.Property property49 = yearMonth48.monthOfYear();
        int int50 = property49.getMaximumValue();
        java.lang.String str51 = property49.getAsShortText();
        java.util.Locale locale52 = null;
        java.lang.String str53 = property49.getAsShortText(locale52);
        java.lang.String str54 = property49.getAsText();
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology58);
        org.joda.time.YearMonth yearMonth61 = yearMonth59.minusYears((int) (short) 0);
        org.joda.time.Interval interval62 = yearMonth59.toInterval();
        org.joda.time.Chronology chronology63 = yearMonth59.getChronology();
        org.joda.time.YearMonth yearMonth64 = yearMonth55.withChronologyRetainFields(chronology63);
        org.joda.time.YearMonth yearMonth65 = new org.joda.time.YearMonth(chronology63);
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth(chronology63);
        org.joda.time.YearMonth yearMonth67 = org.joda.time.YearMonth.now(chronology63);
        org.joda.time.YearMonth yearMonth68 = org.joda.time.YearMonth.now(chronology63);
        boolean boolean69 = property49.equals((java.lang.Object) yearMonth68);
        org.joda.time.Chronology chronology70 = yearMonth68.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth71 = new org.joda.time.YearMonth((java.lang.Object) "Oct", chronology70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Oct\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "October" + "'", str37, "October");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 12 + "'", int50 == 12);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Oct" + "'", str51, "Oct");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Oct" + "'", str53, "Oct");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "October" + "'", str54, "October");
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(chronology70);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology42 = yearMonth3.getChronology();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(chronology42);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        java.lang.String str10 = property4.getAsText();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        org.joda.time.YearMonth yearMonth19 = yearMonth14.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonth14.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonth yearMonth23 = yearMonth14.plusMonths((-1));
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        int int34 = yearMonth27.indexOf(dateTimeFieldType33);
        org.joda.time.Interval interval35 = yearMonth27.toInterval();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth.Property property40 = yearMonth39.monthOfYear();
        int int41 = property40.getMaximumValue();
        java.lang.String str42 = property40.getAsShortText();
        java.util.Locale locale43 = null;
        java.lang.String str44 = property40.getAsShortText(locale43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = property40.getFieldType();
        int int46 = yearMonth27.get(dateTimeFieldType45);
        org.joda.time.YearMonth.Property property47 = yearMonth14.property(dateTimeFieldType45);
        boolean boolean48 = property4.equals((java.lang.Object) yearMonth14);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology51);
        org.joda.time.YearMonth yearMonth54 = yearMonth52.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth yearMonth60 = yearMonth58.minusYears((int) (short) 0);
        int int61 = yearMonth58.size();
        boolean boolean62 = yearMonth54.isAfter((org.joda.time.ReadablePartial) yearMonth58);
        org.joda.time.Interval interval63 = yearMonth54.toInterval();
        org.joda.time.YearMonth.Property property64 = yearMonth54.year();
        org.joda.time.YearMonth yearMonth66 = yearMonth54.plusMonths((int) '4');
        org.joda.time.YearMonth yearMonth68 = yearMonth54.plusMonths(11);
        int int69 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        int[] intArray70 = yearMonth54.getValues();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "October" + "'", str10, "October");
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 12 + "'", int41 == 12);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Oct" + "'", str42, "Oct");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Oct" + "'", str44, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[97, 10]");
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        java.lang.String str9 = property4.getAsText();
        org.joda.time.YearMonth yearMonth11 = property4.setCopy(12);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonth yearMonth13 = yearMonth11.plus(readablePeriod12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth15 = yearMonth13.withMonthOfYear((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "October" + "'", str9, "October");
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(yearMonth13);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth.Property property10 = yearMonth9.monthOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        org.joda.time.YearMonth yearMonth19 = yearMonth14.plusMonths((int) (byte) 10);
        int int20 = property10.compareTo((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = yearMonth14.toInterval(dateTimeZone21);
        org.joda.time.YearMonth yearMonth24 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        int int37 = yearMonth34.size();
        boolean boolean38 = yearMonth30.isAfter((org.joda.time.ReadablePartial) yearMonth34);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth.Property property43 = yearMonth42.monthOfYear();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology46);
        org.joda.time.YearMonth yearMonth49 = yearMonth47.minusYears((int) (short) 0);
        int int50 = yearMonth47.size();
        org.joda.time.YearMonth yearMonth52 = yearMonth47.plusMonths((int) (byte) 10);
        int int53 = property43.compareTo((org.joda.time.ReadablePartial) yearMonth47);
        org.joda.time.Chronology chronology54 = yearMonth47.getChronology();
        org.joda.time.YearMonth yearMonth55 = yearMonth34.withChronologyRetainFields(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.YearMonth yearMonth58 = yearMonth55.withPeriodAdded(readablePeriod56, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        int int60 = yearMonth58.indexOf(dateTimeFieldType59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology63);
        org.joda.time.YearMonth.Property property65 = yearMonth64.monthOfYear();
        int int66 = property65.getMaximumValue();
        java.lang.String str67 = property65.getAsShortText();
        java.util.Locale locale68 = null;
        java.lang.String str69 = property65.getAsShortText(locale68);
        org.joda.time.YearMonth yearMonth71 = property65.setCopy("October");
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = yearMonth71.toDateTime(readableInstant72);
        org.joda.time.DateTime dateTime74 = yearMonth58.toDateTime(readableInstant72);
        org.joda.time.DateTime dateTime75 = yearMonth14.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        int int76 = property4.compareTo((org.joda.time.ReadableInstant) dateTime75);
        java.lang.String str77 = property4.getName();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 12 + "'", int66 == 12);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Oct" + "'", str67, "Oct");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Oct" + "'", str69, "Oct");
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "monthOfYear" + "'", str77, "monthOfYear");
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addToCopy(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType10 = yearMonth8.getFieldType(97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth yearMonth9 = yearMonth7.minusYears((int) (short) 0);
        int int10 = yearMonth7.size();
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        boolean boolean27 = yearMonth19.isAfter((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Interval interval28 = yearMonth19.toInterval();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = yearMonth32.indexOf(dateTimeFieldType38);
        org.joda.time.Interval interval40 = yearMonth32.toInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        int int46 = property45.getMaximumValue();
        java.lang.String str47 = property45.getAsShortText();
        java.util.Locale locale48 = null;
        java.lang.String str49 = property45.getAsShortText(locale48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property45.getFieldType();
        int int51 = yearMonth32.get(dateTimeFieldType50);
        org.joda.time.YearMonth.Property property52 = yearMonth19.property(dateTimeFieldType50);
        boolean boolean53 = yearMonth13.isSupported(dateTimeFieldType50);
        org.joda.time.YearMonth yearMonth55 = yearMonth7.withField(dateTimeFieldType50, (int) (short) 10);
        boolean boolean56 = yearMonth3.isBefore((org.joda.time.ReadablePartial) yearMonth7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate58 = yearMonth7.toLocalDate((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Oct" + "'", str47, "Oct");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Oct" + "'", str49, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Interval interval6 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology7 = yearMonth3.getChronology();
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth(chronology7);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = yearMonth18.toString(dateTimeFormatter22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth.Property property28 = yearMonth27.monthOfYear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusMonths((int) (byte) 10);
        int int38 = property28.compareTo((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology39 = yearMonth32.getChronology();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth yearMonth45 = yearMonth43.minusYears((int) (short) 0);
        int int46 = yearMonth43.size();
        org.joda.time.YearMonth yearMonth48 = yearMonth43.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        int int50 = yearMonth43.indexOf(dateTimeFieldType49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth.Property property55 = yearMonth54.monthOfYear();
        int int56 = property55.getMaximumValue();
        java.lang.String str57 = property55.getAsShortText();
        java.util.Locale locale58 = null;
        java.lang.String str59 = property55.getAsShortText(locale58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property55.getFieldType();
        org.joda.time.YearMonth.Property property61 = yearMonth43.property(dateTimeFieldType60);
        org.joda.time.YearMonth.Property property62 = yearMonth32.property(dateTimeFieldType60);
        boolean boolean63 = yearMonth18.equals((java.lang.Object) property62);
        java.util.Locale locale64 = null;
        int int65 = property62.getMaximumShortTextLength(locale64);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0097-10" + "'", str23, "0097-10");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 12 + "'", int56 == 12);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Oct" + "'", str57, "Oct");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Oct" + "'", str59, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField11 = property4.getField();
        org.joda.time.DurationField durationField12 = property4.getDurationField();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property4.getAsShortText(locale13);
        java.lang.String str15 = property4.toString();
        java.util.Locale locale16 = null;
        int int17 = property4.getMaximumShortTextLength(locale16);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Oct" + "'", str14, "Oct");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[monthOfYear]" + "'", str15, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(0, (int) (short) 10);
        org.joda.time.YearMonth yearMonth4 = yearMonth2.withYear((int) (byte) 0);
        org.junit.Assert.assertNotNull(yearMonth4);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) 100);
        org.joda.time.YearMonth yearMonth3 = yearMonth1.withYear((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.YearMonth yearMonth5 = yearMonth1.plus(readablePeriod4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        org.joda.time.YearMonth yearMonth14 = yearMonth9.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = yearMonth9.indexOf(dateTimeFieldType15);
        org.joda.time.YearMonth yearMonth18 = yearMonth9.plusMonths((-1));
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        int int29 = yearMonth22.indexOf(dateTimeFieldType28);
        org.joda.time.Interval interval30 = yearMonth22.toInterval();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth.Property property35 = yearMonth34.monthOfYear();
        int int36 = property35.getMaximumValue();
        java.lang.String str37 = property35.getAsShortText();
        java.util.Locale locale38 = null;
        java.lang.String str39 = property35.getAsShortText(locale38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property35.getFieldType();
        int int41 = yearMonth22.get(dateTimeFieldType40);
        org.joda.time.YearMonth.Property property42 = yearMonth9.property(dateTimeFieldType40);
        org.joda.time.Chronology chronology43 = yearMonth9.getChronology();
        int int44 = yearMonth5.compareTo((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        int int60 = property50.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = yearMonth54.getChronology();
        org.joda.time.YearMonth yearMonth62 = org.joda.time.YearMonth.now(chronology61);
        org.joda.time.YearMonth yearMonth63 = org.joda.time.YearMonth.now(chronology61);
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((java.lang.Object) "0097-10", chronology61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = null;
        java.lang.String str66 = yearMonth64.toString(dateTimeFormatter65);
        org.joda.time.Chronology chronology67 = yearMonth64.getChronology();
        org.joda.time.YearMonth yearMonth68 = yearMonth5.withChronologyRetainFields(chronology67);
        org.joda.time.YearMonth yearMonth69 = org.joda.time.YearMonth.now(chronology67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType71 = yearMonth69.getFieldType(3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 12 + "'", int36 == 12);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Oct" + "'", str37, "Oct");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Oct" + "'", str39, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0097-10" + "'", str66, "0097-10");
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertNotNull(yearMonth69);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        java.lang.String str9 = property4.getName();
        java.lang.String str10 = property4.getAsString();
        int int11 = property4.getMaximumValue();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property4.getAsShortText(locale12);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "monthOfYear" + "'", str9, "monthOfYear");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "10" + "'", str10, "10");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Oct" + "'", str13, "Oct");
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        java.lang.String str9 = property4.getAsText(locale8);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "October" + "'", str9, "October");
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.YearMonth.Property property38 = yearMonth32.year();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonth42.indexOf(dateTimeFieldType48);
        org.joda.time.YearMonth yearMonth51 = yearMonth42.plusMonths((-1));
        org.joda.time.YearMonth yearMonth53 = yearMonth42.plusMonths((-1));
        org.joda.time.YearMonth.Property property54 = yearMonth53.monthOfYear();
        int int55 = property54.get();
        org.joda.time.YearMonth yearMonth56 = property54.getYearMonth();
        org.joda.time.YearMonth yearMonth58 = property54.addToCopy(0);
        int int59 = property38.compareTo((org.joda.time.ReadablePartial) yearMonth58);
        java.lang.Class<?> wildcardClass60 = property38.getClass();
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addToCopy((int) (short) 1);
        java.util.Locale locale10 = null;
        java.lang.String str11 = property4.getAsText(locale10);
        int int12 = property4.getMinimumValue();
        java.lang.String str13 = property4.getAsText();
        java.lang.String str14 = property4.toString();
        java.util.Locale locale15 = null;
        java.lang.String str16 = property4.getAsText(locale15);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "October" + "'", str11, "October");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "October" + "'", str13, "October");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[monthOfYear]" + "'", str14, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth9.withYear((int) (byte) 1);
        org.joda.time.YearMonth.Property property33 = yearMonth32.year();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        java.lang.String str19 = yearMonth8.toString();
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology21 = yearMonth20.getChronology();
        org.joda.time.YearMonth yearMonth22 = yearMonth8.withChronologyRetainFields(chronology21);
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology25 = yearMonth24.getChronology();
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((long) 3, chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth22.withChronologyRetainFields(chronology25);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        org.joda.time.YearMonth yearMonth41 = yearMonth36.plusMonths((int) (byte) 10);
        int int42 = property32.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        boolean boolean49 = yearMonth36.isAfter((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = yearMonth46.toString(dateTimeFormatter50);
        org.joda.time.Interval interval52 = yearMonth46.toInterval();
        boolean boolean53 = yearMonth27.isEqual((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonth yearMonth55 = yearMonth46.minus(readablePeriod54);
        org.joda.time.DurationFieldType durationFieldType56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth58 = yearMonth46.withFieldAdded(durationFieldType56, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0097-10" + "'", str19, "0097-10");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0097-10" + "'", str51, "0097-10");
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(yearMonth55);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        org.joda.time.YearMonth yearMonth17 = yearMonth5.plusMonths((int) '4');
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        boolean boolean31 = yearMonth23.isAfter((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.YearMonth yearMonth33 = yearMonth27.minus(readablePeriod32);
        int int34 = yearMonth27.getMonthOfYear();
        boolean boolean35 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth27);
        int int36 = yearMonth27.getYear();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMinimumValueOverall();
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField11 = property4.getField();
        java.util.Locale locale12 = null;
        int int13 = property4.getMaximumShortTextLength(locale12);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        int int47 = property46.getMinimumValue();
        java.util.Locale locale48 = null;
        int int49 = property46.getMaximumShortTextLength(locale48);
        org.joda.time.YearMonth yearMonth51 = property46.addToCopy((int) (short) 1);
        boolean boolean52 = yearMonth3.equals((java.lang.Object) yearMonth51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        int int59 = yearMonth56.size();
        org.joda.time.YearMonth yearMonth61 = yearMonth56.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        int int63 = yearMonth56.indexOf(dateTimeFieldType62);
        int int64 = yearMonth56.getYear();
        boolean boolean65 = yearMonth51.isBefore((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.YearMonth yearMonth69 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology68);
        org.joda.time.YearMonth.Property property70 = yearMonth69.monthOfYear();
        int int71 = property70.getMaximumValue();
        java.util.Locale locale72 = null;
        int int73 = property70.getMaximumShortTextLength(locale72);
        java.util.Locale locale74 = null;
        int int75 = property70.getMaximumTextLength(locale74);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.YearMonth yearMonth79 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology78);
        org.joda.time.YearMonth.Property property80 = yearMonth79.monthOfYear();
        int int81 = property80.getMaximumValue();
        java.util.Locale locale82 = null;
        int int83 = property80.getMaximumShortTextLength(locale82);
        java.util.Locale locale84 = null;
        int int85 = property80.getMaximumTextLength(locale84);
        java.lang.String str86 = property80.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = property80.getFieldType();
        boolean boolean88 = property70.equals((java.lang.Object) property80);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = property80.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth91 = yearMonth56.withField(dateTimeFieldType89, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 12 + "'", int71 == 12);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 12 + "'", int81 == 12);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 9 + "'", int85 == 9);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Oct" + "'", str86, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property4.getFieldType();
        int int12 = property4.getMinimumValue();
        int int13 = property4.get();
        java.util.Locale locale14 = null;
        int int15 = property4.getMaximumTextLength(locale14);
        java.lang.String str16 = property4.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Property[monthOfYear]" + "'", str16, "Property[monthOfYear]");
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        boolean boolean36 = yearMonth28.isAfter((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        int int51 = property41.compareTo((org.joda.time.ReadablePartial) yearMonth45);
        org.joda.time.Chronology chronology52 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth53 = yearMonth32.withChronologyRetainFields(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonth yearMonth56 = yearMonth53.withPeriodAdded(readablePeriod54, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = yearMonth56.indexOf(dateTimeFieldType57);
        boolean boolean59 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology67);
        org.joda.time.YearMonth yearMonth70 = yearMonth68.minusYears((int) (short) 0);
        int int71 = yearMonth68.size();
        org.joda.time.YearMonth yearMonth73 = yearMonth68.plusMonths((int) (byte) 10);
        int int74 = property64.compareTo((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean75 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean76 = yearMonth17.isAfter((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.YearMonth yearMonth79 = yearMonth21.withPeriodAdded(readablePeriod77, 12);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.Interval interval81 = yearMonth21.toInterval(dateTimeZone80);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(yearMonth79);
        org.junit.Assert.assertNotNull(interval81);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.YearMonth yearMonth10 = property4.setCopy("October");
        java.util.Locale locale11 = null;
        int int12 = property4.getMaximumTextLength(locale11);
        java.lang.String str13 = property4.getAsString();
        int int14 = property4.getMinimumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "10" + "'", str13, "10");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        boolean boolean14 = yearMonth12.equals((java.lang.Object) 1);
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((long) 100);
        boolean boolean17 = yearMonth12.isBefore((org.joda.time.ReadablePartial) yearMonth16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth19 = yearMonth16.withMonthOfYear(1980);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1980 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology2 = yearMonth1.getChronology();
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((long) 3, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = yearMonth3.getFieldType((int) (short) 1);
        org.joda.time.YearMonth yearMonth7 = yearMonth3.plusMonths((int) '#');
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        org.joda.time.Interval interval15 = yearMonth12.toInterval();
        org.joda.time.Chronology chronology16 = yearMonth12.getChronology();
        org.joda.time.YearMonth yearMonth17 = yearMonth8.withChronologyRetainFields(chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        boolean boolean31 = yearMonth23.isAfter((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth.Property property36 = yearMonth35.monthOfYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minusYears((int) (short) 0);
        int int43 = yearMonth40.size();
        org.joda.time.YearMonth yearMonth45 = yearMonth40.plusMonths((int) (byte) 10);
        int int46 = property36.compareTo((org.joda.time.ReadablePartial) yearMonth40);
        org.joda.time.Chronology chronology47 = yearMonth40.getChronology();
        org.joda.time.YearMonth yearMonth48 = yearMonth27.withChronologyRetainFields(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.YearMonth yearMonth51 = yearMonth48.withPeriodAdded(readablePeriod49, (int) 'a');
        org.joda.time.YearMonth yearMonth53 = yearMonth48.plusMonths(9);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.YearMonth yearMonth57 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology56);
        org.joda.time.YearMonth.Property property58 = yearMonth57.monthOfYear();
        int int59 = property58.getMaximumValue();
        java.lang.String str60 = property58.getAsShortText();
        java.util.Locale locale61 = null;
        java.lang.String str62 = property58.getAsShortText(locale61);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = property58.getFieldType();
        int int64 = yearMonth48.get(dateTimeFieldType63);
        boolean boolean65 = yearMonth17.isSupported(dateTimeFieldType63);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.YearMonth yearMonth67 = yearMonth17.minus(readablePeriod66);
        boolean boolean68 = yearMonth7.isAfter((org.joda.time.ReadablePartial) yearMonth67);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = yearMonth7.getFieldTypes();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 12 + "'", int59 == 12);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Oct" + "'", str60, "Oct");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Oct" + "'", str62, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = yearMonth8.getFields();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        int int16 = yearMonth13.size();
        org.joda.time.YearMonth yearMonth18 = yearMonth13.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonth13.indexOf(dateTimeFieldType19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth.Property property25 = yearMonth24.monthOfYear();
        int int26 = property25.getMaximumValue();
        java.lang.String str27 = property25.getAsShortText();
        java.util.Locale locale28 = null;
        java.lang.String str29 = property25.getAsShortText(locale28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property25.getFieldType();
        org.joda.time.YearMonth.Property property31 = yearMonth13.property(dateTimeFieldType30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth yearMonth43 = yearMonth41.minusYears((int) (short) 0);
        int int44 = yearMonth41.size();
        boolean boolean45 = yearMonth37.isAfter((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        int int60 = property50.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = yearMonth54.getChronology();
        org.joda.time.YearMonth yearMonth62 = yearMonth41.withChronologyRetainFields(chronology61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth yearMonth68 = yearMonth66.minusYears((int) (short) 0);
        int int69 = yearMonth66.size();
        org.joda.time.YearMonth yearMonth71 = yearMonth66.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        int int73 = yearMonth66.indexOf(dateTimeFieldType72);
        org.joda.time.Interval interval74 = yearMonth66.toInterval();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.YearMonth yearMonth78 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology77);
        org.joda.time.YearMonth.Property property79 = yearMonth78.monthOfYear();
        int int80 = property79.getMaximumValue();
        java.lang.String str81 = property79.getAsShortText();
        java.util.Locale locale82 = null;
        java.lang.String str83 = property79.getAsShortText(locale82);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = property79.getFieldType();
        int int85 = yearMonth66.get(dateTimeFieldType84);
        boolean boolean86 = yearMonth62.isSupported(dateTimeFieldType84);
        boolean boolean87 = yearMonth13.isSupported(dateTimeFieldType84);
        boolean boolean88 = yearMonth8.isSupported(dateTimeFieldType84);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.YearMonth yearMonth90 = yearMonth8.minus(readablePeriod89);
        org.joda.time.YearMonth yearMonth92 = yearMonth90.plusMonths(12);
        org.joda.time.DurationFieldType durationFieldType93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth95 = yearMonth92.withFieldAdded(durationFieldType93, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Oct" + "'", str27, "Oct");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Oct" + "'", str29, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 12 + "'", int80 == 12);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Oct" + "'", str81, "Oct");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Oct" + "'", str83, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(yearMonth90);
        org.junit.Assert.assertNotNull(yearMonth92);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        java.lang.String str42 = yearMonth38.toString();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.YearMonth yearMonth44 = yearMonth38.minus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.YearMonth yearMonth46 = yearMonth38.minus(readablePeriod45);
        org.joda.time.YearMonth yearMonth48 = yearMonth38.plusYears(11);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology51);
        org.joda.time.YearMonth.Property property53 = yearMonth52.monthOfYear();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.YearMonth yearMonth57 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology56);
        org.joda.time.YearMonth yearMonth59 = yearMonth57.minusYears((int) (short) 0);
        int int60 = yearMonth57.size();
        org.joda.time.YearMonth yearMonth62 = yearMonth57.plusMonths((int) (byte) 10);
        int int63 = property53.compareTo((org.joda.time.ReadablePartial) yearMonth57);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Interval interval65 = yearMonth57.toInterval(dateTimeZone64);
        org.joda.time.YearMonth yearMonth67 = yearMonth57.minusYears((int) (short) 0);
        java.lang.String str68 = yearMonth57.toString();
        org.joda.time.YearMonth yearMonth69 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology70 = yearMonth69.getChronology();
        org.joda.time.YearMonth yearMonth71 = yearMonth57.withChronologyRetainFields(chronology70);
        org.joda.time.YearMonth yearMonth72 = yearMonth38.withChronologyRetainFields(chronology70);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0097-10" + "'", str42, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0097-10" + "'", str68, "0097-10");
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertNotNull(yearMonth72);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("2020-11");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        int int8 = yearMonth5.size();
        org.joda.time.YearMonth yearMonth10 = yearMonth5.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = yearMonth5.getFieldTypes();
        int[] intArray12 = yearMonth5.getValues();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth.Property property17 = yearMonth16.monthOfYear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        int int24 = yearMonth21.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth21.plusMonths((int) (byte) 10);
        int int27 = property17.compareTo((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.Chronology chronology28 = yearMonth21.getChronology();
        org.joda.time.YearMonth yearMonth29 = org.joda.time.YearMonth.now(chronology28);
        org.joda.time.YearMonth yearMonth30 = org.joda.time.YearMonth.now(chronology28);
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((java.lang.Object) yearMonth5, chronology28);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth.Property property36 = yearMonth35.monthOfYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minusYears((int) (short) 0);
        int int43 = yearMonth40.size();
        org.joda.time.YearMonth yearMonth45 = yearMonth40.plusMonths((int) (byte) 10);
        int int46 = property36.compareTo((org.joda.time.ReadablePartial) yearMonth40);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Interval interval48 = yearMonth40.toInterval(dateTimeZone47);
        org.joda.time.YearMonth yearMonth50 = yearMonth40.minusYears((int) (short) 0);
        boolean boolean51 = yearMonth31.isAfter((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.YearMonth yearMonth53 = yearMonth50.plusYears(12);
        boolean boolean54 = yearMonth1.isAfter((org.joda.time.ReadablePartial) yearMonth53);
        org.joda.time.YearMonth yearMonth56 = yearMonth53.minusMonths((-292275054));
        org.joda.time.Interval interval57 = yearMonth53.toInterval();
        org.junit.Assert.assertNotNull(yearMonth1);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[97, 10]");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertNotNull(interval57);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minus(readablePeriod18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        int int30 = yearMonth23.indexOf(dateTimeFieldType29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minusYears((int) (short) 0);
        int int43 = yearMonth40.size();
        boolean boolean44 = yearMonth36.isAfter((org.joda.time.ReadablePartial) yearMonth40);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology47);
        org.joda.time.YearMonth.Property property49 = yearMonth48.monthOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology52);
        org.joda.time.YearMonth yearMonth55 = yearMonth53.minusYears((int) (short) 0);
        int int56 = yearMonth53.size();
        org.joda.time.YearMonth yearMonth58 = yearMonth53.plusMonths((int) (byte) 10);
        int int59 = property49.compareTo((org.joda.time.ReadablePartial) yearMonth53);
        org.joda.time.Chronology chronology60 = yearMonth53.getChronology();
        org.joda.time.YearMonth yearMonth61 = yearMonth40.withChronologyRetainFields(chronology60);
        int int62 = yearMonth23.compareTo((org.joda.time.ReadablePartial) yearMonth40);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth.Property property67 = yearMonth66.monthOfYear();
        int int68 = property67.getMaximumValue();
        java.util.Locale locale69 = null;
        int int70 = property67.getMaximumShortTextLength(locale69);
        java.util.Locale locale71 = null;
        int int72 = property67.getMaximumTextLength(locale71);
        org.joda.time.DurationField durationField73 = property67.getRangeDurationField();
        java.util.Locale locale74 = null;
        java.lang.String str75 = property67.getAsShortText(locale74);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = property67.getFieldType();
        org.joda.time.YearMonth yearMonth78 = yearMonth23.withField(dateTimeFieldType76, 11);
        org.joda.time.DateTimeField[] dateTimeFieldArray79 = yearMonth23.getFields();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.YearMonth yearMonth83 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology82);
        org.joda.time.YearMonth.Property property84 = yearMonth83.monthOfYear();
        int int85 = property84.getMaximumValue();
        java.lang.String str86 = property84.getAsShortText();
        java.util.Locale locale87 = null;
        java.lang.String str88 = property84.getAsShortText(locale87);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = property84.getFieldType();
        int int90 = yearMonth23.get(dateTimeFieldType89);
        org.joda.time.YearMonth.Property property91 = yearMonth19.property(dateTimeFieldType89);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth92 = new org.joda.time.YearMonth((java.lang.Object) dateTimeFieldType89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 12 + "'", int68 == 12);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 9 + "'", int72 == 9);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Oct" + "'", str75, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(yearMonth78);
        org.junit.Assert.assertNotNull(dateTimeFieldArray79);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 12 + "'", int85 == 12);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Oct" + "'", str86, "Oct");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Oct" + "'", str88, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
        org.junit.Assert.assertNotNull(property91);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        org.joda.time.YearMonth yearMonth33 = property32.getYearMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property32.getFieldType();
        int int35 = yearMonth8.get(dateTimeFieldType34);
        org.joda.time.Interval interval36 = yearMonth8.toInterval();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertNotNull(interval36);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.joda.time.YearMonth yearMonth0 = org.joda.time.YearMonth.now();
        org.joda.time.YearMonth yearMonth2 = yearMonth0.plusMonths((int) (byte) -1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth yearMonth17 = yearMonth15.minusYears((int) (short) 0);
        int int18 = yearMonth15.size();
        boolean boolean19 = yearMonth11.isAfter((org.joda.time.ReadablePartial) yearMonth15);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth.Property property24 = yearMonth23.monthOfYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        int int31 = yearMonth28.size();
        org.joda.time.YearMonth yearMonth33 = yearMonth28.plusMonths((int) (byte) 10);
        int int34 = property24.compareTo((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.Chronology chronology35 = yearMonth28.getChronology();
        org.joda.time.YearMonth yearMonth36 = yearMonth15.withChronologyRetainFields(chronology35);
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((long) (short) 1, chronology35);
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth(chronology35);
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology35);
        boolean boolean40 = yearMonth2.equals((java.lang.Object) chronology35);
        org.junit.Assert.assertNotNull(yearMonth0);
        org.junit.Assert.assertNotNull(yearMonth2);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("10");
        org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.now();
        boolean boolean3 = yearMonth1.isAfter((org.joda.time.ReadablePartial) yearMonth2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType5 = yearMonth2.getFieldType((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth1);
        org.junit.Assert.assertNotNull(yearMonth2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Interval interval5 = yearMonth3.toInterval(dateTimeZone4);
        org.junit.Assert.assertNotNull(interval5);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMaximumValue();
        java.util.Locale locale10 = null;
        int int11 = property4.getMaximumShortTextLength(locale10);
        org.joda.time.DurationField durationField12 = property4.getDurationField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        boolean boolean24 = yearMonth16.isAfter((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        int int39 = property29.compareTo((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = yearMonth33.getChronology();
        org.joda.time.YearMonth yearMonth41 = yearMonth20.withChronologyRetainFields(chronology40);
        int int42 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.YearMonth yearMonth44 = yearMonth3.minusMonths((int) ' ');
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(yearMonth44);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        org.joda.time.YearMonth yearMonth41 = yearMonth36.plusMonths((int) (byte) 10);
        int int42 = property32.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        boolean boolean49 = yearMonth36.isAfter((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = yearMonth36.indexOf(dateTimeFieldType50);
        int int52 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate54 = yearMonth36.toLocalDate((int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DurationField durationField11 = property4.getDurationField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        int int11 = yearMonth3.getYear();
        java.util.Locale locale13 = null;
        java.lang.String str14 = yearMonth3.toString("1970-01", locale13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.Interval interval26 = yearMonth18.toInterval();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        int int37 = yearMonth18.get(dateTimeFieldType36);
        org.joda.time.Interval interval38 = yearMonth18.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = yearMonth18.toString(dateTimeFormatter39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        int int46 = property45.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField47 = property45.getField();
        org.joda.time.YearMonth yearMonth49 = property45.addToCopy((int) (short) 0);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology52);
        org.joda.time.YearMonth.Property property54 = yearMonth53.monthOfYear();
        int int55 = property54.getMaximumValue();
        java.util.Locale locale56 = null;
        int int57 = property54.getMaximumShortTextLength(locale56);
        java.util.Locale locale58 = null;
        int int59 = property54.getMaximumTextLength(locale58);
        java.lang.String str60 = property54.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property54.getFieldType();
        boolean boolean62 = yearMonth49.isSupported(dateTimeFieldType61);
        int int63 = yearMonth18.get(dateTimeFieldType61);
        org.joda.time.YearMonth.Property property64 = yearMonth3.property(dateTimeFieldType61);
        java.util.Locale locale65 = null;
        java.lang.String str66 = property64.getAsText(locale65);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01" + "'", str14, "1970-01");
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0097-10" + "'", str40, "0097-10");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 12 + "'", int55 == 12);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Oct" + "'", str60, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "October" + "'", str66, "October");
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth17 = yearMonth5.minus(readablePeriod16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        int int23 = property22.getMaximumValue();
        java.lang.String str24 = property22.getAsShortText();
        org.joda.time.DateTimeField dateTimeField25 = property22.getField();
        org.joda.time.YearMonth yearMonth27 = property22.setCopy("Oct");
        boolean boolean28 = yearMonth17.equals((java.lang.Object) yearMonth27);
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((java.lang.Object) yearMonth17);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = yearMonth33.getFieldTypes();
        int[] intArray40 = yearMonth33.getValues();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth yearMonth51 = yearMonth49.minusYears((int) (short) 0);
        int int52 = yearMonth49.size();
        org.joda.time.YearMonth yearMonth54 = yearMonth49.plusMonths((int) (byte) 10);
        int int55 = property45.compareTo((org.joda.time.ReadablePartial) yearMonth49);
        org.joda.time.Chronology chronology56 = yearMonth49.getChronology();
        org.joda.time.YearMonth yearMonth57 = org.joda.time.YearMonth.now(chronology56);
        org.joda.time.YearMonth yearMonth58 = org.joda.time.YearMonth.now(chronology56);
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((java.lang.Object) yearMonth33, chronology56);
        org.joda.time.YearMonth yearMonth60 = new org.joda.time.YearMonth(chronology56);
        org.joda.time.YearMonth yearMonth61 = yearMonth29.withChronologyRetainFields(chronology56);
        int int62 = yearMonth61.getMonthOfYear();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Oct" + "'", str24, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[97, 10]");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addWrapFieldToCopy((int) (byte) 10);
        java.lang.String str10 = yearMonth9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        org.joda.time.YearMonth yearMonth19 = yearMonth14.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonth14.indexOf(dateTimeFieldType20);
        org.joda.time.YearMonth yearMonth23 = yearMonth14.plusMonths((-1));
        org.joda.time.YearMonth yearMonth25 = yearMonth14.plusMonths((-1));
        org.joda.time.YearMonth.Property property26 = yearMonth25.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonth yearMonth29 = yearMonth25.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.YearMonth yearMonth31 = yearMonth29.plusMonths((int) (short) 1);
        org.joda.time.YearMonth yearMonth33 = yearMonth29.minusMonths(98);
        boolean boolean34 = yearMonth9.isAfter((org.joda.time.ReadablePartial) yearMonth33);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0097-08" + "'", str10, "0097-08");
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        java.util.Locale locale17 = null;
        int int18 = property4.getMaximumShortTextLength(locale17);
        int int19 = property4.getMinimumValueOverall();
        org.joda.time.YearMonth yearMonth21 = property4.setCopy("October");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth.Property property26 = yearMonth25.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        boolean boolean40 = yearMonth32.isAfter((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth yearMonth51 = yearMonth49.minusYears((int) (short) 0);
        int int52 = yearMonth49.size();
        org.joda.time.YearMonth yearMonth54 = yearMonth49.plusMonths((int) (byte) 10);
        int int55 = property45.compareTo((org.joda.time.ReadablePartial) yearMonth49);
        org.joda.time.Chronology chronology56 = yearMonth49.getChronology();
        org.joda.time.YearMonth yearMonth57 = yearMonth36.withChronologyRetainFields(chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.YearMonth yearMonth60 = yearMonth57.withPeriodAdded(readablePeriod58, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        int int62 = yearMonth60.indexOf(dateTimeFieldType61);
        boolean boolean63 = yearMonth25.isEqual((org.joda.time.ReadablePartial) yearMonth60);
        java.lang.String str64 = yearMonth60.toString();
        boolean boolean65 = yearMonth21.isAfter((org.joda.time.ReadablePartial) yearMonth60);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0097-10" + "'", str64, "0097-10");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth yearMonth17 = yearMonth3.minusMonths(0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth.Property property24 = yearMonth23.monthOfYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        int int31 = yearMonth28.size();
        org.joda.time.YearMonth yearMonth33 = yearMonth28.plusMonths((int) (byte) 10);
        int int34 = property24.compareTo((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.Chronology chronology35 = yearMonth28.getChronology();
        org.joda.time.YearMonth yearMonth36 = org.joda.time.YearMonth.now(chronology35);
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth(100, (int) (short) 1, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth3.withChronologyRetainFields(chronology35);
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth.Property property44 = yearMonth43.monthOfYear();
        int int45 = property44.getMaximumValue();
        java.lang.String str46 = property44.getAsShortText();
        int int47 = property44.get();
        java.lang.String str48 = property44.getAsString();
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((java.lang.Object) str48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology52);
        org.joda.time.YearMonth yearMonth55 = yearMonth53.minusYears((int) (short) 0);
        int int56 = yearMonth53.size();
        org.joda.time.YearMonth yearMonth58 = yearMonth53.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        int int60 = yearMonth53.indexOf(dateTimeFieldType59);
        org.joda.time.YearMonth yearMonth62 = yearMonth53.plusMonths((-1));
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth yearMonth68 = yearMonth66.minusYears((int) (short) 0);
        int int69 = yearMonth66.size();
        org.joda.time.YearMonth yearMonth71 = yearMonth66.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        int int73 = yearMonth66.indexOf(dateTimeFieldType72);
        org.joda.time.Interval interval74 = yearMonth66.toInterval();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.YearMonth yearMonth78 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology77);
        org.joda.time.YearMonth.Property property79 = yearMonth78.monthOfYear();
        int int80 = property79.getMaximumValue();
        java.lang.String str81 = property79.getAsShortText();
        java.util.Locale locale82 = null;
        java.lang.String str83 = property79.getAsShortText(locale82);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = property79.getFieldType();
        int int85 = yearMonth66.get(dateTimeFieldType84);
        org.joda.time.YearMonth.Property property86 = yearMonth53.property(dateTimeFieldType84);
        java.lang.String str87 = property86.getAsText();
        java.lang.String str88 = property86.getAsString();
        java.lang.String str89 = property86.getAsShortText();
        org.joda.time.YearMonth yearMonth91 = property86.addToCopy(0);
        org.joda.time.DurationField durationField92 = property86.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = property86.getFieldType();
        boolean boolean94 = yearMonth49.isSupported(dateTimeFieldType93);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth96 = yearMonth39.withField(dateTimeFieldType93, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 12 + "'", int45 == 12);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Oct" + "'", str46, "Oct");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "10" + "'", str48, "10");
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 12 + "'", int80 == 12);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Oct" + "'", str81, "Oct");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Oct" + "'", str83, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "October" + "'", str87, "October");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "10" + "'", str88, "10");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Oct" + "'", str89, "Oct");
        org.junit.Assert.assertNotNull(yearMonth91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("0098-10");
        org.junit.Assert.assertNotNull(yearMonth1);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        org.joda.time.YearMonth yearMonth10 = property4.getYearMonth();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        int int25 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonth19.toInterval(dateTimeZone26);
        org.joda.time.YearMonth yearMonth29 = yearMonth19.minusYears((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonth yearMonth31 = yearMonth19.plus(readablePeriod30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.plusYears((int) 'a');
        int int34 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth31);
        java.lang.String str36 = yearMonth31.toString("2020-11");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField38 = yearMonth31.getField(8);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 8");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2020-11" + "'", str36, "2020-11");
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        java.lang.String str19 = yearMonth8.toString();
        org.joda.time.YearMonth yearMonth21 = yearMonth8.withMonthOfYear(11);
        org.joda.time.Chronology chronology22 = yearMonth21.getChronology();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        int int29 = yearMonth26.size();
        org.joda.time.YearMonth yearMonth31 = yearMonth26.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = yearMonth26.indexOf(dateTimeFieldType32);
        org.joda.time.YearMonth yearMonth35 = yearMonth26.plusMonths((-1));
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth yearMonth41 = yearMonth39.minusYears((int) (short) 0);
        int int42 = yearMonth39.size();
        org.joda.time.YearMonth yearMonth44 = yearMonth39.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        int int46 = yearMonth39.indexOf(dateTimeFieldType45);
        org.joda.time.Interval interval47 = yearMonth39.toInterval();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology50);
        org.joda.time.YearMonth.Property property52 = yearMonth51.monthOfYear();
        int int53 = property52.getMaximumValue();
        java.lang.String str54 = property52.getAsShortText();
        java.util.Locale locale55 = null;
        java.lang.String str56 = property52.getAsShortText(locale55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property52.getFieldType();
        int int58 = yearMonth39.get(dateTimeFieldType57);
        org.joda.time.YearMonth.Property property59 = yearMonth26.property(dateTimeFieldType57);
        java.lang.String str60 = property59.getAsText();
        java.lang.String str61 = property59.getAsString();
        java.lang.String str62 = property59.getAsShortText();
        org.joda.time.YearMonth yearMonth64 = property59.addToCopy(0);
        org.joda.time.DurationField durationField65 = property59.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = property59.getFieldType();
        boolean boolean67 = yearMonth21.isSupported(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0097-10" + "'", str19, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 12 + "'", int53 == 12);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Oct" + "'", str54, "Oct");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Oct" + "'", str56, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "October" + "'", str60, "October");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "10" + "'", str61, "10");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Oct" + "'", str62, "Oct");
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Interval interval17 = yearMonth8.toInterval();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        int int24 = yearMonth21.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth21.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        int int28 = yearMonth21.indexOf(dateTimeFieldType27);
        org.joda.time.Interval interval29 = yearMonth21.toInterval();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth.Property property34 = yearMonth33.monthOfYear();
        int int35 = property34.getMaximumValue();
        java.lang.String str36 = property34.getAsShortText();
        java.util.Locale locale37 = null;
        java.lang.String str38 = property34.getAsShortText(locale37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property34.getFieldType();
        int int40 = yearMonth21.get(dateTimeFieldType39);
        org.joda.time.YearMonth.Property property41 = yearMonth8.property(dateTimeFieldType39);
        boolean boolean42 = yearMonth2.isSupported(dateTimeFieldType39);
        org.joda.time.YearMonth.Property property43 = yearMonth2.year();
        java.lang.String str44 = property43.toString();
        java.util.Locale locale45 = null;
        java.lang.String str46 = property43.getAsText(locale45);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 12 + "'", int35 == 12);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Oct" + "'", str36, "Oct");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Oct" + "'", str38, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Property[year]" + "'", str44, "Property[year]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property4.getAsShortText(locale11);
        int int13 = property4.getMinimumValueOverall();
        java.util.Locale locale15 = null;
        org.joda.time.YearMonth yearMonth16 = property4.setCopy("9", locale15);
        org.joda.time.YearMonth.Property property17 = yearMonth16.monthOfYear();
        java.lang.Class<?> wildcardClass18 = yearMonth16.getClass();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Oct" + "'", str12, "Oct");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.DurationField durationField8 = property4.getDurationField();
        org.joda.time.YearMonth yearMonth10 = property4.setCopy("Aug");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(yearMonth10);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth yearMonth9 = yearMonth7.minusYears((int) (short) 0);
        int int10 = yearMonth7.size();
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        boolean boolean27 = yearMonth19.isAfter((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Interval interval28 = yearMonth19.toInterval();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = yearMonth32.indexOf(dateTimeFieldType38);
        org.joda.time.Interval interval40 = yearMonth32.toInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        int int46 = property45.getMaximumValue();
        java.lang.String str47 = property45.getAsShortText();
        java.util.Locale locale48 = null;
        java.lang.String str49 = property45.getAsShortText(locale48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property45.getFieldType();
        int int51 = yearMonth32.get(dateTimeFieldType50);
        org.joda.time.YearMonth.Property property52 = yearMonth19.property(dateTimeFieldType50);
        boolean boolean53 = yearMonth13.isSupported(dateTimeFieldType50);
        org.joda.time.YearMonth yearMonth55 = yearMonth7.withField(dateTimeFieldType50, (int) (short) 10);
        boolean boolean56 = yearMonth3.isBefore((org.joda.time.ReadablePartial) yearMonth7);
        java.util.Locale locale58 = null;
        java.lang.String str59 = yearMonth7.toString("1970-01", locale58);
        org.joda.time.YearMonth.Property property60 = yearMonth7.monthOfYear();
        int int61 = property60.getMaximumValueOverall();
        org.joda.time.YearMonth yearMonth62 = property60.getYearMonth();
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Oct" + "'", str47, "Oct");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Oct" + "'", str49, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01" + "'", str59, "1970-01");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 12 + "'", int61 == 12);
        org.junit.Assert.assertNotNull(yearMonth62);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonth yearMonth9 = yearMonth3.withPeriodAdded(readablePeriod7, (int) (byte) 0);
        int int10 = yearMonth9.getYear();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.YearMonth yearMonth4 = yearMonth2.withYear((int) (byte) 1);
        org.joda.time.Interval interval5 = yearMonth4.toInterval();
        org.junit.Assert.assertNotNull(yearMonth4);
        org.junit.Assert.assertNotNull(interval5);
    }

    @Test
    @Ignore
  public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        java.util.Locale locale17 = null;
        int int18 = property15.getMaximumShortTextLength(locale17);
        org.joda.time.DateTimeField dateTimeField19 = property15.getField();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth(dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minus(readablePeriod22);
        int int24 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth21);
        java.lang.String str25 = property15.getName();
        org.joda.time.ReadableInstant readableInstant26 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int27 = property15.compareTo(readableInstant26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "monthOfYear" + "'", str25, "monthOfYear");
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        org.joda.time.YearMonth yearMonth10 = property4.getYearMonth();
        int int11 = yearMonth10.size();
        java.lang.String str13 = yearMonth10.toString("1970");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970" + "'", str13, "1970");
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = yearMonth3.toString(dateTimeFormatter6);
        org.joda.time.YearMonth.Property property8 = yearMonth3.year();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth.Property property13 = yearMonth12.monthOfYear();
        int int14 = property13.getMaximumValue();
        java.lang.String str15 = property13.getAsShortText();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property13.getAsShortText(locale16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property13.getFieldType();
        int int19 = property13.getMinimumValue();
        int int20 = property13.getMinimumValue();
        org.joda.time.YearMonth yearMonth22 = property13.addWrapFieldToCopy((int) 'a');
        boolean boolean23 = property8.equals((java.lang.Object) property13);
        org.joda.time.ReadableInstant readableInstant24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int25 = property13.compareTo(readableInstant24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0097-10" + "'", str7, "0097-10");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Oct" + "'", str15, "Oct");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Oct" + "'", str17, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.parse("January", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonth yearMonth29 = yearMonth27.plus(readablePeriod28);
        org.joda.time.YearMonth yearMonth31 = yearMonth27.withYear((int) (short) 10);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.withYear((-1));
        java.util.Locale locale35 = null;
        java.lang.String str36 = yearMonth31.toString("0097-11", locale35);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0097-11" + "'", str36, "0097-11");
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth.Property property12 = yearMonth11.monthOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        int int22 = property12.compareTo((org.joda.time.ReadablePartial) yearMonth16);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = yearMonth16.toInterval(dateTimeZone23);
        org.joda.time.YearMonth yearMonth26 = yearMonth16.minusYears((int) (short) 0);
        java.lang.String str27 = yearMonth16.toString();
        org.joda.time.YearMonth yearMonth29 = yearMonth16.withMonthOfYear(11);
        boolean boolean30 = property4.equals((java.lang.Object) 11);
        int int31 = property4.getMinimumValueOverall();
        java.util.Locale locale32 = null;
        int int33 = property4.getMaximumTextLength(locale32);
        java.util.Locale locale34 = null;
        int int35 = property4.getMaximumShortTextLength(locale34);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0097-10" + "'", str27, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        int int8 = property4.getMaximumValueOverall();
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        org.joda.time.Interval interval16 = yearMonth13.toInterval();
        org.joda.time.Chronology chronology17 = yearMonth13.getChronology();
        org.joda.time.YearMonth yearMonth18 = yearMonth9.withChronologyRetainFields(chronology17);
        boolean boolean19 = property4.equals((java.lang.Object) yearMonth9);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.YearMonth yearMonth22 = yearMonth9.withPeriodAdded(readablePeriod20, (int) ' ');
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology25 = yearMonth24.getChronology();
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((long) 3, chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = yearMonth26.getFieldType((int) (short) 1);
        org.joda.time.YearMonth.Property property29 = yearMonth9.property(dateTimeFieldType28);
        int int30 = property29.getMinimumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(1L);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.YearMonth yearMonth3 = yearMonth1.minus(readablePeriod2);
        int int4 = yearMonth3.size();
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        int int47 = property46.getMinimumValue();
        java.util.Locale locale48 = null;
        int int49 = property46.getMaximumShortTextLength(locale48);
        org.joda.time.YearMonth yearMonth51 = property46.addToCopy((int) (short) 1);
        boolean boolean52 = yearMonth3.equals((java.lang.Object) yearMonth51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        int int59 = yearMonth56.size();
        org.joda.time.YearMonth yearMonth61 = yearMonth56.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        int int63 = yearMonth56.indexOf(dateTimeFieldType62);
        int int64 = yearMonth56.getYear();
        boolean boolean65 = yearMonth51.isBefore((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.YearMonth yearMonth67 = yearMonth56.minus(readablePeriod66);
        org.joda.time.YearMonth yearMonth70 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.YearMonth yearMonth72 = yearMonth70.withYear((int) (byte) 1);
        boolean boolean73 = yearMonth67.equals((java.lang.Object) yearMonth72);
        java.util.Locale locale75 = null;
        java.lang.String str76 = yearMonth67.toString("0097-12", locale75);
        org.joda.time.YearMonth yearMonth78 = yearMonth67.plusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.YearMonth yearMonth80 = yearMonth67.plus(readablePeriod79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.YearMonth yearMonth83 = yearMonth80.withPeriodAdded(readablePeriod81, 0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0097-12" + "'", str76, "0097-12");
        org.junit.Assert.assertNotNull(yearMonth78);
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertNotNull(yearMonth83);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth8.withYear((int) (byte) 10);
        org.joda.time.Interval interval27 = yearMonth26.toInterval();
        org.joda.time.Interval interval28 = yearMonth26.toInterval();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth.Property property10 = yearMonth9.monthOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        org.joda.time.YearMonth yearMonth19 = yearMonth14.plusMonths((int) (byte) 10);
        int int20 = property10.compareTo((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = yearMonth14.getChronology();
        org.joda.time.YearMonth yearMonth22 = org.joda.time.YearMonth.now(chronology21);
        org.joda.time.YearMonth yearMonth23 = yearMonth5.withChronologyRetainFields(chronology21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = yearMonth5.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth23);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth5.getYear();
        org.joda.time.YearMonth yearMonth8 = yearMonth5.plusMonths(2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = yearMonth5.toString(dateTimeFormatter9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType12 = yearMonth5.getFieldType(2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0097-10" + "'", str10, "0097-10");
    }

    @Test
    @Ignore
  public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.Chronology chronology8 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth9 = yearMonth0.withChronologyRetainFields(chronology8);
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth(chronology8);
        int int14 = yearMonth13.getYear();
        org.joda.time.YearMonth yearMonth16 = yearMonth13.minusMonths((int) ' ');
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2020 + "'", int14 == 2020);
        org.junit.Assert.assertNotNull(yearMonth16);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.YearMonth yearMonth5 = property4.getYearMonth();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth.Property property10 = yearMonth9.monthOfYear();
        int int11 = property10.getMaximumValue();
        java.lang.String str12 = property10.getAsShortText();
        org.joda.time.YearMonth yearMonth14 = property10.addWrapFieldToCopy((int) (short) -1);
        int[] intArray15 = yearMonth14.getValues();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth.Property property20 = yearMonth19.monthOfYear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        org.joda.time.YearMonth yearMonth29 = yearMonth24.plusMonths((int) (byte) 10);
        int int30 = property20.compareTo((org.joda.time.ReadablePartial) yearMonth24);
        org.joda.time.Chronology chronology31 = yearMonth24.getChronology();
        org.joda.time.YearMonth yearMonth32 = org.joda.time.YearMonth.now(chronology31);
        org.joda.time.YearMonth yearMonth33 = yearMonth14.withChronologyRetainFields(chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth5.withChronologyRetainFields(chronology31);
        org.joda.time.YearMonth yearMonth35 = org.joda.time.YearMonth.now(chronology31);
        org.joda.time.DateTimeField dateTimeField37 = yearMonth35.getField((int) (short) 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Oct" + "'", str12, "Oct");
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[97, 9]");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    @Ignore
  public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.Chronology chronology8 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth9 = yearMonth0.withChronologyRetainFields(chronology8);
        org.joda.time.YearMonth yearMonth10 = org.joda.time.YearMonth.now(chronology8);
        org.joda.time.YearMonth.Property property11 = yearMonth10.monthOfYear();
        org.joda.time.YearMonth yearMonth12 = property11.getYearMonth();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property11.getAsText(locale13);
        java.util.Locale locale15 = null;
        java.lang.String str16 = property11.getAsShortText(locale15);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "November" + "'", str14, "November");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Nov" + "'", str16, "Nov");
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth yearMonth17 = yearMonth3.minusMonths(0);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonth yearMonth20 = yearMonth3.withPeriodAdded(readablePeriod18, 2020);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonth yearMonth22 = yearMonth20.plus(readablePeriod21);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(yearMonth22);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField11 = property4.getField();
        org.joda.time.DurationField durationField12 = property4.getDurationField();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property4.getAsShortText(locale13);
        int int15 = property4.getMaximumValueOverall();
        int int16 = property4.getMaximumValue();
        org.joda.time.YearMonth yearMonth18 = property4.addWrapFieldToCopy(2020);
        java.util.Locale locale19 = null;
        int int20 = property4.getMaximumShortTextLength(locale19);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Oct" + "'", str14, "Oct");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonth yearMonth9 = yearMonth3.withPeriodAdded(readablePeriod7, (int) (byte) 0);
        int int10 = yearMonth9.size();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology15 = yearMonth8.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        org.joda.time.YearMonth.Property property37 = yearMonth19.property(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth8.property(dateTimeFieldType36);
        int int39 = property38.getMinimumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth41 = property38.setCopy("year");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"year\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.Interval interval26 = yearMonth18.toInterval();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        int int37 = yearMonth18.get(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth5.property(dateTimeFieldType36);
        java.util.Locale locale40 = null;
        org.joda.time.YearMonth yearMonth41 = property38.setCopy("Oct", locale40);
        java.lang.String str42 = property38.getName();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "monthOfYear" + "'", str42, "monthOfYear");
    }

    @Test
    @Ignore
  public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        int int16 = property4.getMaximumValue();
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = yearMonth17.toString(dateTimeFormatter18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth.Property property24 = yearMonth23.monthOfYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        int int31 = yearMonth28.size();
        org.joda.time.YearMonth yearMonth33 = yearMonth28.plusMonths((int) (byte) 10);
        int int34 = property24.compareTo((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.YearMonth yearMonth35 = property24.getYearMonth();
        java.lang.String str36 = property24.getAsText();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        int int49 = yearMonth46.size();
        boolean boolean50 = yearMonth42.isAfter((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth.Property property55 = yearMonth54.monthOfYear();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology58);
        org.joda.time.YearMonth yearMonth61 = yearMonth59.minusYears((int) (short) 0);
        int int62 = yearMonth59.size();
        org.joda.time.YearMonth yearMonth64 = yearMonth59.plusMonths((int) (byte) 10);
        int int65 = property55.compareTo((org.joda.time.ReadablePartial) yearMonth59);
        org.joda.time.Chronology chronology66 = yearMonth59.getChronology();
        org.joda.time.YearMonth yearMonth67 = yearMonth46.withChronologyRetainFields(chronology66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.YearMonth yearMonth70 = yearMonth67.withPeriodAdded(readablePeriod68, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = null;
        int int72 = yearMonth70.indexOf(dateTimeFieldType71);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.YearMonth yearMonth76 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology75);
        org.joda.time.YearMonth.Property property77 = yearMonth76.monthOfYear();
        int int78 = property77.getMaximumValue();
        java.lang.String str79 = property77.getAsShortText();
        java.util.Locale locale80 = null;
        java.lang.String str81 = property77.getAsShortText(locale80);
        org.joda.time.YearMonth yearMonth83 = property77.setCopy("October");
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.DateTime dateTime85 = yearMonth83.toDateTime(readableInstant84);
        org.joda.time.DateTime dateTime86 = yearMonth70.toDateTime(readableInstant84);
        int int87 = property24.compareTo((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateTime dateTime88 = yearMonth17.toDateTime((org.joda.time.ReadableInstant) dateTime86);
        int int89 = property4.compareTo((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTimeField dateTimeField90 = property4.getField();
        java.util.Locale locale91 = null;
        java.lang.String str92 = property4.getAsText(locale91);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020-11" + "'", str19, "2020-11");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "October" + "'", str36, "October");
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 12 + "'", int78 == 12);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Oct" + "'", str79, "Oct");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Oct" + "'", str81, "Oct");
        org.junit.Assert.assertNotNull(yearMonth83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "October" + "'", str92, "October");
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        boolean boolean24 = yearMonth16.isAfter((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        int int39 = property29.compareTo((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = yearMonth33.getChronology();
        org.joda.time.YearMonth yearMonth41 = yearMonth20.withChronologyRetainFields(chronology40);
        int int42 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        int int43 = yearMonth20.getYear();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology46);
        org.joda.time.YearMonth yearMonth49 = yearMonth47.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology52);
        org.joda.time.YearMonth yearMonth55 = yearMonth53.minusYears((int) (short) 0);
        int int56 = yearMonth53.size();
        boolean boolean57 = yearMonth49.isAfter((org.joda.time.ReadablePartial) yearMonth53);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology60);
        org.joda.time.YearMonth.Property property62 = yearMonth61.monthOfYear();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth yearMonth68 = yearMonth66.minusYears((int) (short) 0);
        int int69 = yearMonth66.size();
        org.joda.time.YearMonth yearMonth71 = yearMonth66.plusMonths((int) (byte) 10);
        int int72 = property62.compareTo((org.joda.time.ReadablePartial) yearMonth66);
        org.joda.time.Chronology chronology73 = yearMonth66.getChronology();
        org.joda.time.YearMonth yearMonth74 = yearMonth53.withChronologyRetainFields(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.YearMonth yearMonth77 = yearMonth74.withPeriodAdded(readablePeriod75, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = null;
        int int79 = yearMonth77.indexOf(dateTimeFieldType78);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.YearMonth yearMonth83 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology82);
        org.joda.time.YearMonth.Property property84 = yearMonth83.monthOfYear();
        int int85 = property84.getMaximumValue();
        java.lang.String str86 = property84.getAsShortText();
        java.util.Locale locale87 = null;
        java.lang.String str88 = property84.getAsShortText(locale87);
        org.joda.time.YearMonth yearMonth90 = property84.setCopy("October");
        org.joda.time.ReadableInstant readableInstant91 = null;
        org.joda.time.DateTime dateTime92 = yearMonth90.toDateTime(readableInstant91);
        org.joda.time.DateTime dateTime93 = yearMonth77.toDateTime(readableInstant91);
        org.joda.time.DateTime dateTime94 = yearMonth20.toDateTime((org.joda.time.ReadableInstant) dateTime93);
        org.joda.time.YearMonth yearMonth95 = new org.joda.time.YearMonth((java.lang.Object) dateTime94);
        org.joda.time.YearMonth.Property property96 = yearMonth95.year();
        org.joda.time.ReadablePeriod readablePeriod97 = null;
        org.joda.time.YearMonth yearMonth98 = yearMonth95.minus(readablePeriod97);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertNotNull(yearMonth77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 12 + "'", int85 == 12);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Oct" + "'", str86, "Oct");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Oct" + "'", str88, "Oct");
        org.junit.Assert.assertNotNull(yearMonth90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertNotNull(yearMonth98);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property4.getFieldType();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property4.getFieldType();
        int int12 = property4.getMinimumValue();
        java.lang.String str13 = property4.getName();
        int int14 = property4.getMinimumValueOverall();
        java.lang.String str15 = property4.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[monthOfYear]" + "'", str15, "Property[monthOfYear]");
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        boolean boolean24 = yearMonth16.isAfter((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        int int39 = property29.compareTo((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = yearMonth33.getChronology();
        org.joda.time.YearMonth yearMonth41 = yearMonth20.withChronologyRetainFields(chronology40);
        int int42 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.YearMonth.Property property43 = yearMonth3.year();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        int int8 = property4.getMaximumValueOverall();
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        org.joda.time.Interval interval16 = yearMonth13.toInterval();
        org.joda.time.Chronology chronology17 = yearMonth13.getChronology();
        org.joda.time.YearMonth yearMonth18 = yearMonth9.withChronologyRetainFields(chronology17);
        boolean boolean19 = property4.equals((java.lang.Object) yearMonth9);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.YearMonth yearMonth22 = yearMonth9.withPeriodAdded(readablePeriod20, (int) ' ');
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology25 = yearMonth24.getChronology();
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((long) 3, chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = yearMonth26.getFieldType((int) (short) 1);
        org.joda.time.YearMonth.Property property29 = yearMonth9.property(dateTimeFieldType28);
        java.util.Locale locale30 = null;
        int int31 = property29.getMaximumShortTextLength(locale30);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        int int33 = property32.getMaximumValue();
        java.lang.String str34 = property32.getAsShortText();
        java.util.Locale locale35 = null;
        java.lang.String str36 = property32.getAsShortText(locale35);
        org.joda.time.YearMonth yearMonth38 = property32.setCopy("October");
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = yearMonth38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology50);
        org.joda.time.YearMonth yearMonth53 = yearMonth51.minusYears((int) (short) 0);
        int int54 = yearMonth51.size();
        boolean boolean55 = yearMonth47.isAfter((org.joda.time.ReadablePartial) yearMonth51);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology58);
        org.joda.time.YearMonth.Property property60 = yearMonth59.monthOfYear();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology63);
        org.joda.time.YearMonth yearMonth66 = yearMonth64.minusYears((int) (short) 0);
        int int67 = yearMonth64.size();
        org.joda.time.YearMonth yearMonth69 = yearMonth64.plusMonths((int) (byte) 10);
        int int70 = property60.compareTo((org.joda.time.ReadablePartial) yearMonth64);
        org.joda.time.Chronology chronology71 = yearMonth64.getChronology();
        org.joda.time.YearMonth yearMonth72 = yearMonth51.withChronologyRetainFields(chronology71);
        org.joda.time.YearMonth yearMonth73 = new org.joda.time.YearMonth((long) (short) 1, chronology71);
        org.joda.time.YearMonth yearMonth74 = new org.joda.time.YearMonth((java.lang.Object) readableInstant39, chronology71);
        boolean boolean75 = yearMonth8.equals((java.lang.Object) yearMonth74);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.YearMonth yearMonth79 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology78);
        org.joda.time.YearMonth yearMonth81 = yearMonth79.minusYears((int) (short) 0);
        int int82 = yearMonth81.getYear();
        boolean boolean83 = yearMonth74.isAfter((org.joda.time.ReadablePartial) yearMonth81);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Oct" + "'", str34, "Oct");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Oct" + "'", str36, "Oct");
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(yearMonth81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField11 = property4.getField();
        org.joda.time.DurationField durationField12 = property4.getDurationField();
        int int13 = property4.getMaximumValue();
        java.lang.String str14 = property4.getAsShortText();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Oct" + "'", str14, "Oct");
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        int int7 = yearMonth4.size();
        org.joda.time.YearMonth yearMonth9 = yearMonth4.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = yearMonth4.indexOf(dateTimeFieldType10);
        org.joda.time.YearMonth yearMonth13 = yearMonth4.plusMonths((-1));
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        org.joda.time.YearMonth yearMonth22 = yearMonth17.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = yearMonth17.indexOf(dateTimeFieldType23);
        org.joda.time.Interval interval25 = yearMonth17.toInterval();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth.Property property30 = yearMonth29.monthOfYear();
        int int31 = property30.getMaximumValue();
        java.lang.String str32 = property30.getAsShortText();
        java.util.Locale locale33 = null;
        java.lang.String str34 = property30.getAsShortText(locale33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property30.getFieldType();
        int int36 = yearMonth17.get(dateTimeFieldType35);
        org.joda.time.YearMonth.Property property37 = yearMonth4.property(dateTimeFieldType35);
        org.joda.time.Chronology chronology38 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth(chronology38);
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        org.joda.time.Interval interval47 = yearMonth44.toInterval();
        org.joda.time.Chronology chronology48 = yearMonth44.getChronology();
        org.joda.time.YearMonth yearMonth49 = yearMonth40.withChronologyRetainFields(chronology48);
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth(chronology48);
        org.joda.time.YearMonth yearMonth51 = yearMonth39.withChronologyRetainFields(chronology48);
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((long) (short) 10, chronology48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = yearMonth52.toString(dateTimeFormatter53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.YearMonth yearMonth56 = yearMonth52.minus(readablePeriod55);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 12 + "'", int31 == 12);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Oct" + "'", str32, "Oct");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Oct" + "'", str34, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970-01" + "'", str54, "1970-01");
        org.junit.Assert.assertNotNull(yearMonth56);
    }

    @Test
    @Ignore
  public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.Chronology chronology2 = yearMonth1.getChronology();
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(chronology2);
        int[] intArray4 = yearMonth3.getValues();
        org.joda.time.YearMonth yearMonth6 = org.joda.time.YearMonth.parse("2020-11");
        int int7 = yearMonth6.getMonthOfYear();
        int int8 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth6);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2020, 11]");
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minusYears((int) (short) 0);
        int int43 = yearMonth40.size();
        boolean boolean44 = yearMonth36.isAfter((org.joda.time.ReadablePartial) yearMonth40);
        int int45 = yearMonth30.compareTo((org.joda.time.ReadablePartial) yearMonth40);
        java.lang.Object obj46 = null;
        boolean boolean47 = yearMonth30.equals(obj46);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth16 = property4.addWrapFieldToCopy((int) '4');
        int int17 = property4.get();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        java.util.Locale locale10 = null;
        int int11 = property4.getMaximumShortTextLength(locale10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        org.joda.time.YearMonth yearMonth25 = yearMonth20.plusMonths((int) (byte) 10);
        int int26 = property16.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.YearMonth yearMonth27 = property16.getYearMonth();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        boolean boolean46 = yearMonth38.isAfter((org.joda.time.ReadablePartial) yearMonth42);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth.Property property51 = yearMonth50.monthOfYear();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology54);
        org.joda.time.YearMonth yearMonth57 = yearMonth55.minusYears((int) (short) 0);
        int int58 = yearMonth55.size();
        org.joda.time.YearMonth yearMonth60 = yearMonth55.plusMonths((int) (byte) 10);
        int int61 = property51.compareTo((org.joda.time.ReadablePartial) yearMonth55);
        org.joda.time.Chronology chronology62 = yearMonth55.getChronology();
        org.joda.time.YearMonth yearMonth63 = yearMonth42.withChronologyRetainFields(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.YearMonth yearMonth66 = yearMonth63.withPeriodAdded(readablePeriod64, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = null;
        int int68 = yearMonth66.indexOf(dateTimeFieldType67);
        boolean boolean69 = yearMonth31.isEqual((org.joda.time.ReadablePartial) yearMonth66);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.YearMonth yearMonth73 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology72);
        org.joda.time.YearMonth.Property property74 = yearMonth73.monthOfYear();
        int int75 = property74.getMaximumValue();
        java.lang.String str76 = property74.getAsShortText();
        java.util.Locale locale77 = null;
        java.lang.String str78 = property74.getAsShortText(locale77);
        org.joda.time.YearMonth yearMonth80 = property74.setCopy("October");
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = yearMonth80.toDateTime(readableInstant81);
        org.joda.time.DateTime dateTime83 = yearMonth66.toDateTime(readableInstant81);
        int int84 = property16.compareTo((org.joda.time.ReadableInstant) dateTime83);
        int int85 = property4.compareTo((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.YearMonth yearMonth86 = property4.getYearMonth();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 12 + "'", int75 == 12);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Oct" + "'", str76, "Oct");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Oct" + "'", str78, "Oct");
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(yearMonth86);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        int int26 = yearMonth3.getMonthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        int int37 = yearMonth30.indexOf(dateTimeFieldType36);
        org.joda.time.YearMonth yearMonth39 = yearMonth30.plusMonths((-1));
        org.joda.time.YearMonth yearMonth41 = yearMonth30.plusMonths((-1));
        org.joda.time.YearMonth.Property property42 = yearMonth41.monthOfYear();
        int int43 = property42.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property42.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = property42.getFieldType();
        org.joda.time.YearMonth.Property property46 = yearMonth3.property(dateTimeFieldType45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField48 = yearMonth3.getField(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth.Property property5 = yearMonth4.monthOfYear();
        int int6 = property5.getMaximumValue();
        java.util.Locale locale7 = null;
        int int8 = property5.getMaximumShortTextLength(locale7);
        java.util.Locale locale9 = null;
        int int10 = property5.getMaximumTextLength(locale9);
        java.lang.String str11 = property5.getName();
        org.joda.time.YearMonth yearMonth13 = property5.addWrapFieldToCopy(100);
        int int14 = yearMonth13.getMonthOfYear();
        org.joda.time.YearMonth.Property property15 = yearMonth13.year();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.YearMonth yearMonth28 = yearMonth19.plusMonths((-1));
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = yearMonth32.indexOf(dateTimeFieldType38);
        org.joda.time.Interval interval40 = yearMonth32.toInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        int int46 = property45.getMaximumValue();
        java.lang.String str47 = property45.getAsShortText();
        java.util.Locale locale48 = null;
        java.lang.String str49 = property45.getAsShortText(locale48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property45.getFieldType();
        int int51 = yearMonth32.get(dateTimeFieldType50);
        org.joda.time.YearMonth.Property property52 = yearMonth19.property(dateTimeFieldType50);
        org.joda.time.Chronology chronology53 = yearMonth19.getChronology();
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth(chronology53);
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology58);
        org.joda.time.YearMonth yearMonth61 = yearMonth59.minusYears((int) (short) 0);
        org.joda.time.Interval interval62 = yearMonth59.toInterval();
        org.joda.time.Chronology chronology63 = yearMonth59.getChronology();
        org.joda.time.YearMonth yearMonth64 = yearMonth55.withChronologyRetainFields(chronology63);
        org.joda.time.YearMonth yearMonth65 = new org.joda.time.YearMonth(chronology63);
        org.joda.time.YearMonth yearMonth66 = yearMonth54.withChronologyRetainFields(chronology63);
        org.joda.time.YearMonth yearMonth67 = yearMonth13.withChronologyRetainFields(chronology63);
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((long) (short) 0, chronology63);
        org.joda.time.Chronology chronology69 = yearMonth68.getChronology();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "monthOfYear" + "'", str11, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Oct" + "'", str47, "Oct");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Oct" + "'", str49, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertNotNull(chronology69);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.YearMonth yearMonth15 = yearMonth9.minus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth18 = yearMonth15.withPeriodAdded(readablePeriod16, (int) (short) 0);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        int int29 = yearMonth22.indexOf(dateTimeFieldType28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth yearMonth41 = yearMonth39.minusYears((int) (short) 0);
        int int42 = yearMonth39.size();
        boolean boolean43 = yearMonth35.isAfter((org.joda.time.ReadablePartial) yearMonth39);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology46);
        org.joda.time.YearMonth.Property property48 = yearMonth47.monthOfYear();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology51);
        org.joda.time.YearMonth yearMonth54 = yearMonth52.minusYears((int) (short) 0);
        int int55 = yearMonth52.size();
        org.joda.time.YearMonth yearMonth57 = yearMonth52.plusMonths((int) (byte) 10);
        int int58 = property48.compareTo((org.joda.time.ReadablePartial) yearMonth52);
        org.joda.time.Chronology chronology59 = yearMonth52.getChronology();
        org.joda.time.YearMonth yearMonth60 = yearMonth39.withChronologyRetainFields(chronology59);
        int int61 = yearMonth22.compareTo((org.joda.time.ReadablePartial) yearMonth39);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.YearMonth yearMonth65 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology64);
        org.joda.time.YearMonth.Property property66 = yearMonth65.monthOfYear();
        int int67 = property66.getMaximumValue();
        java.util.Locale locale68 = null;
        int int69 = property66.getMaximumShortTextLength(locale68);
        java.util.Locale locale70 = null;
        int int71 = property66.getMaximumTextLength(locale70);
        org.joda.time.DurationField durationField72 = property66.getRangeDurationField();
        java.util.Locale locale73 = null;
        java.lang.String str74 = property66.getAsShortText(locale73);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = property66.getFieldType();
        org.joda.time.YearMonth yearMonth77 = yearMonth22.withField(dateTimeFieldType75, 11);
        org.joda.time.DateTimeField[] dateTimeFieldArray78 = yearMonth22.getFields();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.YearMonth yearMonth82 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology81);
        org.joda.time.YearMonth.Property property83 = yearMonth82.monthOfYear();
        int int84 = property83.getMaximumValue();
        java.lang.String str85 = property83.getAsShortText();
        org.joda.time.YearMonth yearMonth87 = property83.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = property83.getFieldType();
        org.joda.time.YearMonth.Property property89 = yearMonth22.property(dateTimeFieldType88);
        boolean boolean90 = yearMonth18.equals((java.lang.Object) yearMonth22);
        org.joda.time.YearMonth.Property property91 = yearMonth18.year();
        java.lang.String str93 = yearMonth18.toString("0097-09");
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 12 + "'", int67 == 12);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 9 + "'", int71 == 9);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Oct" + "'", str74, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(yearMonth77);
        org.junit.Assert.assertNotNull(dateTimeFieldArray78);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 12 + "'", int84 == 12);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Oct" + "'", str85, "Oct");
        org.junit.Assert.assertNotNull(yearMonth87);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "0097-09" + "'", str93, "0097-09");
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.plusYears((int) '#');
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.YearMonth yearMonth41 = yearMonth37.minus(readablePeriod40);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        int int53 = yearMonth50.size();
        org.joda.time.YearMonth yearMonth55 = yearMonth50.plusMonths((int) (byte) 10);
        int int56 = property46.compareTo((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.YearMonth yearMonth57 = property46.getYearMonth();
        java.lang.String str58 = property46.getAsText();
        java.util.Locale locale59 = null;
        int int60 = property46.getMaximumShortTextLength(locale59);
        int int61 = property46.getMinimumValueOverall();
        org.joda.time.YearMonth yearMonth63 = property46.setCopy("October");
        int int64 = yearMonth41.compareTo((org.joda.time.ReadablePartial) yearMonth63);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "October" + "'", str58, "October");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        boolean boolean14 = yearMonth12.equals((java.lang.Object) 1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonth yearMonth16 = yearMonth12.minus(readablePeriod15);
        org.joda.time.YearMonth.Property property17 = yearMonth16.monthOfYear();
        int int18 = property17.get();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        int int8 = yearMonth5.size();
        org.joda.time.YearMonth yearMonth10 = yearMonth5.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonth5.indexOf(dateTimeFieldType11);
        org.joda.time.YearMonth yearMonth14 = yearMonth5.plusMonths((-1));
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.Interval interval26 = yearMonth18.toInterval();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        int int37 = yearMonth18.get(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth5.property(dateTimeFieldType36);
        org.joda.time.Chronology chronology39 = yearMonth5.getChronology();
        org.joda.time.YearMonth yearMonth40 = org.joda.time.YearMonth.now(chronology39);
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth(1, 3, chronology39);
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth(chronology39);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(yearMonth40);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minus(readablePeriod18);
        org.joda.time.Interval interval20 = yearMonth19.toInterval();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(interval20);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(11, (int) (byte) 10);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        org.joda.time.YearMonth yearMonth17 = yearMonth5.plusMonths((int) '4');
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        boolean boolean31 = yearMonth23.isAfter((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.YearMonth yearMonth33 = yearMonth27.minus(readablePeriod32);
        int int34 = yearMonth27.getMonthOfYear();
        boolean boolean35 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = yearMonth5.toString(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0097-10" + "'", str37, "0097-10");
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = yearMonth18.toString(dateTimeFormatter22);
        org.joda.time.Interval interval24 = yearMonth18.toInterval();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.YearMonth yearMonth27 = yearMonth18.withPeriodAdded(readablePeriod25, (int) (byte) -1);
        int[] intArray28 = yearMonth18.getValues();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0097-10" + "'", str23, "0097-10");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[97, 10]");
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth yearMonth17 = yearMonth3.minusMonths(0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth.Property property24 = yearMonth23.monthOfYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        int int31 = yearMonth28.size();
        org.joda.time.YearMonth yearMonth33 = yearMonth28.plusMonths((int) (byte) 10);
        int int34 = property24.compareTo((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.Chronology chronology35 = yearMonth28.getChronology();
        org.joda.time.YearMonth yearMonth36 = org.joda.time.YearMonth.now(chronology35);
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth(100, (int) (short) 1, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth3.withChronologyRetainFields(chronology35);
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3);
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.Interval interval43 = yearMonth41.toInterval(dateTimeZone42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = yearMonth41.getFieldType((int) (short) 1);
        boolean boolean46 = yearMonth3.isSupported(dateTimeFieldType45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        int int53 = yearMonth50.size();
        org.joda.time.YearMonth yearMonth55 = yearMonth50.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        int int57 = yearMonth50.indexOf(dateTimeFieldType56);
        org.joda.time.YearMonth yearMonth59 = yearMonth50.plusMonths((-1));
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth yearMonth65 = yearMonth63.minusYears((int) (short) 0);
        int int66 = yearMonth63.size();
        org.joda.time.YearMonth yearMonth68 = yearMonth63.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        int int70 = yearMonth63.indexOf(dateTimeFieldType69);
        org.joda.time.Interval interval71 = yearMonth63.toInterval();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.YearMonth yearMonth75 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology74);
        org.joda.time.YearMonth.Property property76 = yearMonth75.monthOfYear();
        int int77 = property76.getMaximumValue();
        java.lang.String str78 = property76.getAsShortText();
        java.util.Locale locale79 = null;
        java.lang.String str80 = property76.getAsShortText(locale79);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = property76.getFieldType();
        int int82 = yearMonth63.get(dateTimeFieldType81);
        org.joda.time.YearMonth.Property property83 = yearMonth50.property(dateTimeFieldType81);
        java.lang.String str84 = property83.getAsText();
        java.lang.String str85 = property83.getAsString();
        java.lang.String str86 = property83.getAsShortText();
        org.joda.time.YearMonth yearMonth88 = property83.addToCopy(0);
        org.joda.time.DurationField durationField89 = property83.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = property83.getFieldType();
        boolean boolean91 = yearMonth3.isSupported(dateTimeFieldType90);
        java.lang.Class<?> wildcardClass92 = dateTimeFieldType90.getClass();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 12 + "'", int77 == 12);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Oct" + "'", str78, "Oct");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Oct" + "'", str80, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "October" + "'", str84, "October");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "10" + "'", str85, "10");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Oct" + "'", str86, "Oct");
        org.junit.Assert.assertNotNull(yearMonth88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.Chronology chronology8 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth9 = yearMonth0.withChronologyRetainFields(chronology8);
        org.joda.time.YearMonth yearMonth10 = org.joda.time.YearMonth.now(chronology8);
        org.joda.time.YearMonth.Property property11 = yearMonth10.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Interval interval13 = yearMonth10.toInterval(dateTimeZone12);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval13);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.plusMonths(1);
        java.lang.String str21 = yearMonth20.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = yearMonth20.getValue((-292275054));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -292275054");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0097-11" + "'", str21, "0097-11");
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        org.joda.time.YearMonth yearMonth13 = property4.addToCopy(3);
        java.lang.String str14 = property4.getAsString();
        java.lang.String str15 = property4.getAsShortText();
        org.joda.time.DurationField durationField16 = property4.getDurationField();
        int int17 = property4.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((java.lang.Object) int17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Oct" + "'", str15, "Oct");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        int int26 = yearMonth3.getMonthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        int int37 = yearMonth30.indexOf(dateTimeFieldType36);
        org.joda.time.YearMonth yearMonth39 = yearMonth30.plusMonths((-1));
        org.joda.time.YearMonth yearMonth41 = yearMonth30.plusMonths((-1));
        org.joda.time.YearMonth.Property property42 = yearMonth41.monthOfYear();
        int int43 = property42.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property42.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = property42.getFieldType();
        org.joda.time.YearMonth.Property property46 = yearMonth3.property(dateTimeFieldType45);
        org.joda.time.YearMonth yearMonth48 = yearMonth3.plusYears((-1));
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(yearMonth48);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth.Property property14 = yearMonth9.year();
        java.lang.String str15 = property14.getAsText();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "97" + "'", str15, "97");
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        int int7 = yearMonth6.getYear();
        org.joda.time.YearMonth yearMonth9 = yearMonth6.plusMonths(2);
        org.joda.time.Chronology chronology10 = yearMonth6.getChronology();
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((long) (short) 1, chronology10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        int int29 = yearMonth26.size();
        boolean boolean30 = yearMonth22.isAfter((org.joda.time.ReadablePartial) yearMonth26);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth.Property property35 = yearMonth34.monthOfYear();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth yearMonth41 = yearMonth39.minusYears((int) (short) 0);
        int int42 = yearMonth39.size();
        org.joda.time.YearMonth yearMonth44 = yearMonth39.plusMonths((int) (byte) 10);
        int int45 = property35.compareTo((org.joda.time.ReadablePartial) yearMonth39);
        org.joda.time.Chronology chronology46 = yearMonth39.getChronology();
        org.joda.time.YearMonth yearMonth47 = yearMonth26.withChronologyRetainFields(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.YearMonth yearMonth50 = yearMonth47.withPeriodAdded(readablePeriod48, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        int int52 = yearMonth50.indexOf(dateTimeFieldType51);
        boolean boolean53 = yearMonth15.isEqual((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.YearMonth yearMonth57 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology56);
        org.joda.time.YearMonth.Property property58 = yearMonth57.monthOfYear();
        int int59 = property58.getMinimumValue();
        java.util.Locale locale60 = null;
        int int61 = property58.getMaximumShortTextLength(locale60);
        org.joda.time.YearMonth yearMonth63 = property58.addToCopy((int) (short) 1);
        boolean boolean64 = yearMonth15.equals((java.lang.Object) yearMonth63);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology67);
        org.joda.time.YearMonth yearMonth70 = yearMonth68.minusYears((int) (short) 0);
        int int71 = yearMonth68.size();
        org.joda.time.YearMonth yearMonth73 = yearMonth68.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        int int75 = yearMonth68.indexOf(dateTimeFieldType74);
        int int76 = yearMonth68.getYear();
        boolean boolean77 = yearMonth63.isBefore((org.joda.time.ReadablePartial) yearMonth68);
        org.joda.time.Interval interval78 = yearMonth68.toInterval();
        boolean boolean79 = yearMonth11.isEqual((org.joda.time.ReadablePartial) yearMonth68);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 97 + "'", int76 == 97);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonth yearMonth33 = yearMonth30.withPeriodAdded(readablePeriod31, (int) 'a');
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths(9);
        int int36 = yearMonth30.getYear();
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((java.lang.Object) yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth.Property property40 = yearMonth39.monthOfYear();
        int int41 = property40.getMaximumValue();
        java.lang.String str42 = property40.getAsShortText();
        org.joda.time.YearMonth yearMonth44 = property40.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = property40.getFieldType();
        int int46 = yearMonth32.get(dateTimeFieldType45);
        java.lang.String str48 = yearMonth32.toString("100");
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 12 + "'", int41 == 12);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Oct" + "'", str42, "Oct");
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "100" + "'", str48, "100");
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonth yearMonth29 = yearMonth27.plus(readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth.Property property34 = yearMonth33.monthOfYear();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth yearMonth40 = yearMonth38.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        int int47 = yearMonth44.size();
        boolean boolean48 = yearMonth40.isAfter((org.joda.time.ReadablePartial) yearMonth44);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology51);
        org.joda.time.YearMonth.Property property53 = yearMonth52.monthOfYear();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.YearMonth yearMonth57 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology56);
        org.joda.time.YearMonth yearMonth59 = yearMonth57.minusYears((int) (short) 0);
        int int60 = yearMonth57.size();
        org.joda.time.YearMonth yearMonth62 = yearMonth57.plusMonths((int) (byte) 10);
        int int63 = property53.compareTo((org.joda.time.ReadablePartial) yearMonth57);
        org.joda.time.Chronology chronology64 = yearMonth57.getChronology();
        org.joda.time.YearMonth yearMonth65 = yearMonth44.withChronologyRetainFields(chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.YearMonth yearMonth68 = yearMonth65.withPeriodAdded(readablePeriod66, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        int int70 = yearMonth68.indexOf(dateTimeFieldType69);
        boolean boolean71 = yearMonth33.isEqual((org.joda.time.ReadablePartial) yearMonth68);
        org.joda.time.YearMonth.Property property72 = yearMonth68.year();
        int int73 = yearMonth29.compareTo((org.joda.time.ReadablePartial) yearMonth68);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.Interval interval75 = yearMonth29.toInterval(dateTimeZone74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.YearMonth yearMonth77 = yearMonth29.plus(readablePeriod76);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(yearMonth77);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((long) (short) 1, chronology32);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth(chronology32);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = yearMonth36.toString(dateTimeFormatter37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonth yearMonth40 = yearMonth36.plus(readablePeriod39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.year();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        int int47 = property46.getMinimumValue();
        java.util.Locale locale48 = null;
        int int49 = property46.getMaximumShortTextLength(locale48);
        org.joda.time.YearMonth yearMonth51 = property46.addWrapFieldToCopy((int) (byte) 10);
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        org.joda.time.Interval interval59 = yearMonth56.toInterval();
        org.joda.time.Chronology chronology60 = yearMonth56.getChronology();
        org.joda.time.YearMonth yearMonth61 = yearMonth52.withChronologyRetainFields(chronology60);
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth(chronology60);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth yearMonth68 = yearMonth66.minusYears((int) (short) 0);
        int int69 = yearMonth66.size();
        org.joda.time.YearMonth yearMonth71 = yearMonth66.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        int int73 = yearMonth66.indexOf(dateTimeFieldType72);
        org.joda.time.YearMonth yearMonth75 = yearMonth66.plusMonths((-1));
        org.joda.time.YearMonth yearMonth77 = yearMonth66.plusMonths((-1));
        org.joda.time.YearMonth.Property property78 = yearMonth77.monthOfYear();
        int int79 = property78.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = property78.getFieldType();
        int int81 = yearMonth62.indexOf(dateTimeFieldType80);
        org.joda.time.YearMonth.Property property82 = yearMonth51.property(dateTimeFieldType80);
        boolean boolean83 = yearMonth40.isAfter((org.joda.time.ReadablePartial) yearMonth51);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0100-10" + "'", str38, "0100-10");
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(yearMonth75);
        org.junit.Assert.assertNotNull(yearMonth77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology15 = yearMonth8.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        org.joda.time.YearMonth.Property property37 = yearMonth19.property(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth8.property(dateTimeFieldType36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonth42.indexOf(dateTimeFieldType48);
        org.joda.time.YearMonth yearMonth51 = yearMonth42.plusMonths((-1));
        boolean boolean53 = yearMonth51.equals((java.lang.Object) 1);
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((long) 100);
        boolean boolean56 = yearMonth51.isBefore((org.joda.time.ReadablePartial) yearMonth55);
        int int57 = yearMonth8.compareTo((org.joda.time.ReadablePartial) yearMonth51);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.YearMonth yearMonth60 = yearMonth51.withPeriodAdded(readablePeriod58, (int) (byte) -1);
        int int61 = yearMonth51.size();
        org.joda.time.YearMonth yearMonth63 = yearMonth51.minusMonths((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth66 = yearMonth63.withFieldAdded(durationFieldType64, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(yearMonth63);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        java.lang.String str31 = yearMonth30.toString();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0097-10" + "'", str31, "0097-10");
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        int int15 = property4.getMaximumValueOverall();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property4.getAsText(locale16);
        org.joda.time.YearMonth yearMonth18 = property4.getYearMonth();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        int int31 = yearMonth28.size();
        boolean boolean32 = yearMonth24.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth.Property property37 = yearMonth36.monthOfYear();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth yearMonth43 = yearMonth41.minusYears((int) (short) 0);
        int int44 = yearMonth41.size();
        org.joda.time.YearMonth yearMonth46 = yearMonth41.plusMonths((int) (byte) 10);
        int int47 = property37.compareTo((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.Chronology chronology48 = yearMonth41.getChronology();
        org.joda.time.YearMonth yearMonth49 = yearMonth28.withChronologyRetainFields(chronology48);
        boolean boolean50 = property4.equals((java.lang.Object) yearMonth28);
        java.lang.String str51 = property4.getAsString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "October" + "'", str17, "October");
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "10" + "'", str51, "10");
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.lang.String str8 = property4.getAsString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth.Property property13 = yearMonth12.monthOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        org.joda.time.YearMonth yearMonth22 = yearMonth17.plusMonths((int) (byte) 10);
        int int23 = property13.compareTo((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        boolean boolean37 = yearMonth29.isAfter((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.YearMonth yearMonth39 = yearMonth33.minus(readablePeriod38);
        boolean boolean40 = property13.equals((java.lang.Object) yearMonth33);
        org.joda.time.YearMonth yearMonth41 = property13.getYearMonth();
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((long) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = yearMonth43.toString(dateTimeFormatter44);
        boolean boolean46 = yearMonth41.isAfter((org.joda.time.ReadablePartial) yearMonth43);
        org.joda.time.YearMonth yearMonth48 = yearMonth41.withYear((-292275054));
        boolean boolean49 = property4.equals((java.lang.Object) (-292275054));
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10" + "'", str8, "10");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01" + "'", str45, "1970-01");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        int int10 = property4.getMinimumValue();
        org.joda.time.DurationField durationField11 = property4.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth13 = property4.setCopy("0097-02");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0097-02\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Interval interval17 = yearMonth8.toInterval();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        int int24 = yearMonth21.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth21.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        int int28 = yearMonth21.indexOf(dateTimeFieldType27);
        org.joda.time.Interval interval29 = yearMonth21.toInterval();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth.Property property34 = yearMonth33.monthOfYear();
        int int35 = property34.getMaximumValue();
        java.lang.String str36 = property34.getAsShortText();
        java.util.Locale locale37 = null;
        java.lang.String str38 = property34.getAsShortText(locale37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property34.getFieldType();
        int int40 = yearMonth21.get(dateTimeFieldType39);
        org.joda.time.YearMonth.Property property41 = yearMonth8.property(dateTimeFieldType39);
        boolean boolean42 = yearMonth2.isSupported(dateTimeFieldType39);
        org.joda.time.YearMonth.Property property43 = yearMonth2.year();
        java.lang.String str44 = property43.toString();
        java.lang.String str45 = property43.getAsText();
        java.lang.String str46 = property43.getAsShortText();
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 12 + "'", int35 == 12);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Oct" + "'", str36, "Oct");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Oct" + "'", str38, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Property[year]" + "'", str44, "Property[year]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        java.lang.String str9 = property4.getAsShortText(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DurationField durationField11 = property4.getDurationField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Oct" + "'", str9, "Oct");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = yearMonth3.getFieldTypes();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.YearMonth yearMonth39 = yearMonth37.plus(readablePeriod38);
        org.joda.time.YearMonth.Property property40 = yearMonth37.monthOfYear();
        org.joda.time.DateTimeField dateTimeField41 = property40.getField();
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        boolean boolean28 = yearMonth20.isAfter((org.joda.time.ReadablePartial) yearMonth24);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.YearMonth yearMonth30 = yearMonth24.minus(readablePeriod29);
        boolean boolean31 = property4.equals((java.lang.Object) yearMonth24);
        org.joda.time.YearMonth yearMonth32 = property4.getYearMonth();
        java.util.Locale locale33 = null;
        int int34 = property4.getMaximumTextLength(locale33);
        int int35 = property4.getMaximumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth37 = property4.setCopy("0129-10");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0129-10\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 12 + "'", int35 == 12);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        int int18 = yearMonth8.getValue(0);
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth(1, 12);
        boolean boolean22 = yearMonth8.isEqual((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.YearMonth.Property property23 = yearMonth8.monthOfYear();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        boolean boolean22 = yearMonth14.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.YearMonth yearMonth24 = yearMonth18.minus(readablePeriod23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        int int31 = yearMonth28.size();
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth yearMonth40 = yearMonth38.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        int int47 = yearMonth44.size();
        boolean boolean48 = yearMonth40.isAfter((org.joda.time.ReadablePartial) yearMonth44);
        org.joda.time.Interval interval49 = yearMonth40.toInterval();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology52);
        org.joda.time.YearMonth yearMonth55 = yearMonth53.minusYears((int) (short) 0);
        int int56 = yearMonth53.size();
        org.joda.time.YearMonth yearMonth58 = yearMonth53.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        int int60 = yearMonth53.indexOf(dateTimeFieldType59);
        org.joda.time.Interval interval61 = yearMonth53.toInterval();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.YearMonth yearMonth65 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology64);
        org.joda.time.YearMonth.Property property66 = yearMonth65.monthOfYear();
        int int67 = property66.getMaximumValue();
        java.lang.String str68 = property66.getAsShortText();
        java.util.Locale locale69 = null;
        java.lang.String str70 = property66.getAsShortText(locale69);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property66.getFieldType();
        int int72 = yearMonth53.get(dateTimeFieldType71);
        org.joda.time.YearMonth.Property property73 = yearMonth40.property(dateTimeFieldType71);
        boolean boolean74 = yearMonth34.isSupported(dateTimeFieldType71);
        org.joda.time.YearMonth yearMonth76 = yearMonth28.withField(dateTimeFieldType71, (int) (short) 10);
        boolean boolean77 = yearMonth18.isSupported(dateTimeFieldType71);
        int int78 = yearMonth3.get(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 12 + "'", int67 == 12);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Oct" + "'", str68, "Oct");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Oct" + "'", str70, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(yearMonth76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addToCopy(1);
        java.lang.String str9 = property4.getName();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "monthOfYear" + "'", str9, "monthOfYear");
    }

    @Test
    @Ignore
  public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) (-1));
        org.joda.time.YearMonth.Property property2 = yearMonth1.monthOfYear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.YearMonth.Property property17 = yearMonth12.year();
        org.joda.time.YearMonth yearMonth19 = yearMonth12.minusMonths(97);
        int int20 = property2.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.plusYears((int) '#');
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.YearMonth yearMonth41 = yearMonth37.minus(readablePeriod40);
        org.joda.time.YearMonth.Property property42 = yearMonth37.year();
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    @Ignore
  public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(dateTimeZone0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.YearMonth yearMonth3 = yearMonth1.minus(readablePeriod2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = yearMonth1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth yearMonth17 = yearMonth15.minusYears((int) (short) 0);
        int int18 = yearMonth15.size();
        boolean boolean19 = yearMonth11.isAfter((org.joda.time.ReadablePartial) yearMonth15);
        org.joda.time.Interval interval20 = yearMonth11.toInterval();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        org.joda.time.YearMonth yearMonth29 = yearMonth24.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = yearMonth24.indexOf(dateTimeFieldType30);
        org.joda.time.Interval interval32 = yearMonth24.toInterval();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth.Property property37 = yearMonth36.monthOfYear();
        int int38 = property37.getMaximumValue();
        java.lang.String str39 = property37.getAsShortText();
        java.util.Locale locale40 = null;
        java.lang.String str41 = property37.getAsShortText(locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property37.getFieldType();
        int int43 = yearMonth24.get(dateTimeFieldType42);
        org.joda.time.YearMonth.Property property44 = yearMonth11.property(dateTimeFieldType42);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.YearMonth yearMonth46 = yearMonth11.minus(readablePeriod45);
        org.joda.time.YearMonth yearMonth48 = yearMonth11.minusYears((int) (byte) 100);
        int int49 = yearMonth1.compareTo((org.joda.time.ReadablePartial) yearMonth48);
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.YearMonth yearMonth54 = yearMonth52.withYear((int) (byte) 1);
        boolean boolean55 = yearMonth1.isAfter((org.joda.time.ReadablePartial) yearMonth52);
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2020-11" + "'", str5, "2020-11");
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 12 + "'", int38 == 12);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Oct" + "'", str39, "Oct");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Oct" + "'", str41, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1970, 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology1 = yearMonth0.getChronology();
        org.joda.time.YearMonth yearMonth3 = yearMonth0.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth0.getFieldTypes();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = yearMonth8.indexOf(dateTimeFieldType14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth.Property property20 = yearMonth19.monthOfYear();
        int int21 = property20.getMaximumValue();
        java.lang.String str22 = property20.getAsShortText();
        java.util.Locale locale23 = null;
        java.lang.String str24 = property20.getAsShortText(locale23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property20.getFieldType();
        org.joda.time.YearMonth.Property property26 = yearMonth8.property(dateTimeFieldType25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        boolean boolean40 = yearMonth32.isAfter((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth yearMonth51 = yearMonth49.minusYears((int) (short) 0);
        int int52 = yearMonth49.size();
        org.joda.time.YearMonth yearMonth54 = yearMonth49.plusMonths((int) (byte) 10);
        int int55 = property45.compareTo((org.joda.time.ReadablePartial) yearMonth49);
        org.joda.time.Chronology chronology56 = yearMonth49.getChronology();
        org.joda.time.YearMonth yearMonth57 = yearMonth36.withChronologyRetainFields(chronology56);
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((java.lang.Object) yearMonth8, chronology56);
        boolean boolean59 = yearMonth0.equals((java.lang.Object) yearMonth58);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 12 + "'", int21 == 12);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Oct" + "'", str22, "Oct");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Oct" + "'", str24, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = yearMonth8.indexOf(dateTimeFieldType14);
        org.joda.time.YearMonth yearMonth17 = yearMonth8.plusMonths((-1));
        int int18 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        org.joda.time.Interval interval26 = yearMonth23.toInterval();
        org.joda.time.Chronology chronology27 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth28 = yearMonth19.withChronologyRetainFields(chronology27);
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth(chronology27);
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth(chronology27);
        org.joda.time.YearMonth yearMonth31 = org.joda.time.YearMonth.now(chronology27);
        org.joda.time.YearMonth yearMonth32 = org.joda.time.YearMonth.now(chronology27);
        org.joda.time.YearMonth yearMonth33 = org.joda.time.YearMonth.now(chronology27);
        org.joda.time.YearMonth yearMonth34 = yearMonth17.withChronologyRetainFields(chronology27);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth(chronology27);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth.Property property40 = yearMonth39.monthOfYear();
        int int41 = property40.getMaximumValue();
        java.lang.String str42 = property40.getAsShortText();
        org.joda.time.YearMonth yearMonth44 = property40.addWrapFieldToCopy((int) (short) -1);
        int[] intArray45 = yearMonth44.getValues();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        int int60 = property50.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = yearMonth54.getChronology();
        org.joda.time.YearMonth yearMonth62 = org.joda.time.YearMonth.now(chronology61);
        org.joda.time.YearMonth yearMonth63 = yearMonth44.withChronologyRetainFields(chronology61);
        java.lang.String str64 = yearMonth44.toString();
        boolean boolean65 = yearMonth35.isEqual((org.joda.time.ReadablePartial) yearMonth44);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 12 + "'", int41 == 12);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Oct" + "'", str42, "Oct");
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[97, 9]");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0097-09" + "'", str64, "0097-09");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        boolean boolean24 = yearMonth16.isAfter((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        int int39 = property29.compareTo((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = yearMonth33.getChronology();
        org.joda.time.YearMonth yearMonth41 = yearMonth20.withChronologyRetainFields(chronology40);
        int int42 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        int int43 = yearMonth20.getYear();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Interval interval45 = yearMonth20.toInterval(dateTimeZone44);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertNotNull(interval45);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        org.joda.time.YearMonth yearMonth13 = property4.addToCopy(3);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.withYear((int) (short) 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth15);
    }

    @Test
    @Ignore
  public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth yearMonth17 = yearMonth3.minusMonths(0);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.Chronology chronology20 = yearMonth19.getChronology();
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth(chronology20);
        int int22 = yearMonth17.compareTo((org.joda.time.ReadablePartial) yearMonth21);
        int int23 = yearMonth21.getYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        int int34 = yearMonth27.indexOf(dateTimeFieldType33);
        org.joda.time.YearMonth yearMonth36 = yearMonth27.plusMonths((-1));
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minusYears((int) (short) 0);
        int int43 = yearMonth40.size();
        org.joda.time.YearMonth yearMonth45 = yearMonth40.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        int int47 = yearMonth40.indexOf(dateTimeFieldType46);
        org.joda.time.Interval interval48 = yearMonth40.toInterval();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology51);
        org.joda.time.YearMonth.Property property53 = yearMonth52.monthOfYear();
        int int54 = property53.getMaximumValue();
        java.lang.String str55 = property53.getAsShortText();
        java.util.Locale locale56 = null;
        java.lang.String str57 = property53.getAsShortText(locale56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property53.getFieldType();
        int int59 = yearMonth40.get(dateTimeFieldType58);
        org.joda.time.YearMonth.Property property60 = yearMonth27.property(dateTimeFieldType58);
        org.joda.time.Chronology chronology61 = yearMonth27.getChronology();
        int int63 = yearMonth27.getValue(0);
        org.joda.time.Interval interval64 = yearMonth27.toInterval();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology67);
        org.joda.time.YearMonth yearMonth70 = yearMonth68.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.YearMonth yearMonth74 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology73);
        org.joda.time.YearMonth yearMonth76 = yearMonth74.minusYears((int) (short) 0);
        int int77 = yearMonth74.size();
        boolean boolean78 = yearMonth70.isAfter((org.joda.time.ReadablePartial) yearMonth74);
        org.joda.time.YearMonth.Property property79 = yearMonth74.year();
        org.joda.time.YearMonth.Property property80 = yearMonth74.year();
        org.joda.time.YearMonth yearMonth82 = yearMonth74.plusMonths(97);
        boolean boolean83 = yearMonth27.isAfter((org.joda.time.ReadablePartial) yearMonth82);
        org.joda.time.DateTimeField[] dateTimeFieldArray84 = yearMonth27.getFields();
        org.joda.time.Chronology chronology85 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth86 = new org.joda.time.YearMonth((java.lang.Object) yearMonth21, chronology85);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2020 + "'", int23 == 2020);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 12 + "'", int54 == 12);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Oct" + "'", str55, "Oct");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Oct" + "'", str57, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertNotNull(yearMonth76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(yearMonth82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray84);
        org.junit.Assert.assertNotNull(chronology85);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) 100);
        org.joda.time.YearMonth.Property property2 = yearMonth1.monthOfYear();
        org.joda.time.YearMonth yearMonth4 = property2.addWrapFieldToCopy(0);
        int int5 = property2.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonth4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.util.Locale locale11 = null;
        int int12 = property4.getMaximumShortTextLength(locale11);
        org.joda.time.YearMonth yearMonth14 = property4.addToCopy(100);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.plusYears(12);
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((long) (-1));
        boolean boolean19 = yearMonth16.isEqual((org.joda.time.ReadablePartial) yearMonth18);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = yearMonth8.toString(dateTimeFormatter15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        int int22 = property21.getMinimumValue();
        java.util.Locale locale23 = null;
        int int24 = property21.getMaximumShortTextLength(locale23);
        org.joda.time.DurationField durationField25 = property21.getDurationField();
        boolean boolean26 = yearMonth8.equals((java.lang.Object) property21);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        int int37 = yearMonth30.indexOf(dateTimeFieldType36);
        org.joda.time.YearMonth yearMonth39 = yearMonth30.plusMonths((-1));
        boolean boolean41 = yearMonth39.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        int int53 = yearMonth50.size();
        org.joda.time.YearMonth yearMonth55 = yearMonth50.plusMonths((int) (byte) 10);
        int int56 = property46.compareTo((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.YearMonth yearMonth57 = property46.getYearMonth();
        java.lang.String str58 = property46.getAsText();
        org.joda.time.YearMonth yearMonth59 = property46.getYearMonth();
        boolean boolean60 = yearMonth39.isBefore((org.joda.time.ReadablePartial) yearMonth59);
        org.joda.time.YearMonth yearMonth62 = yearMonth39.minusYears(3);
        int int63 = yearMonth8.compareTo((org.joda.time.ReadablePartial) yearMonth39);
        org.joda.time.YearMonth yearMonth65 = yearMonth39.plusMonths(1);
        org.joda.time.YearMonth.Property property66 = yearMonth39.year();
        java.lang.String str67 = property66.toString();
        int int68 = property66.getMaximumValueOverall();
        java.lang.Class<?> wildcardClass69 = property66.getClass();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0097-10" + "'", str16, "0097-10");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "October" + "'", str58, "October");
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Property[year]" + "'", str67, "Property[year]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 292278993 + "'", int68 == 292278993);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = yearMonth18.toString(dateTimeFormatter22);
        org.joda.time.YearMonth.Property property24 = yearMonth18.year();
        org.joda.time.YearMonth yearMonth26 = property24.setCopy(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property24.getFieldType();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0097-10" + "'", str23, "0097-10");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.YearMonth yearMonth8 = property4.addToCopy((int) ' ');
        java.util.Locale locale10 = null;
        java.lang.String str11 = yearMonth8.toString("2015-01", locale10);
        java.lang.String str12 = yearMonth8.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2015-01" + "'", str11, "2015-01");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0100-06" + "'", str12, "0100-06");
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.lang.String str11 = property4.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property4.getFieldType();
        java.lang.String str13 = property4.toString();
        org.joda.time.YearMonth yearMonth15 = property4.setCopy("Jan");
        org.joda.time.DateTimeField dateTimeField16 = property4.getField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Property[monthOfYear]" + "'", str13, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        int int33 = property32.getMaximumValue();
        java.util.Locale locale34 = null;
        int int35 = property32.getMaximumShortTextLength(locale34);
        java.util.Locale locale36 = null;
        int int37 = property32.getMaximumTextLength(locale36);
        java.lang.String str38 = property32.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property32.getFieldType();
        boolean boolean40 = yearMonth27.isSupported(dateTimeFieldType39);
        java.lang.String str41 = yearMonth27.toString();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = yearMonth45.getFieldTypes();
        int[] intArray52 = yearMonth45.getValues();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth.Property property57 = yearMonth56.monthOfYear();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology60);
        org.joda.time.YearMonth yearMonth63 = yearMonth61.minusYears((int) (short) 0);
        int int64 = yearMonth61.size();
        org.joda.time.YearMonth yearMonth66 = yearMonth61.plusMonths((int) (byte) 10);
        int int67 = property57.compareTo((org.joda.time.ReadablePartial) yearMonth61);
        org.joda.time.Chronology chronology68 = yearMonth61.getChronology();
        org.joda.time.YearMonth yearMonth69 = org.joda.time.YearMonth.now(chronology68);
        org.joda.time.YearMonth yearMonth70 = org.joda.time.YearMonth.now(chronology68);
        org.joda.time.YearMonth yearMonth71 = new org.joda.time.YearMonth((java.lang.Object) yearMonth45, chronology68);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.YearMonth yearMonth75 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology74);
        org.joda.time.YearMonth.Property property76 = yearMonth75.monthOfYear();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.YearMonth yearMonth80 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology79);
        org.joda.time.YearMonth yearMonth82 = yearMonth80.minusYears((int) (short) 0);
        int int83 = yearMonth80.size();
        org.joda.time.YearMonth yearMonth85 = yearMonth80.plusMonths((int) (byte) 10);
        int int86 = property76.compareTo((org.joda.time.ReadablePartial) yearMonth80);
        org.joda.time.DateTimeZone dateTimeZone87 = null;
        org.joda.time.Interval interval88 = yearMonth80.toInterval(dateTimeZone87);
        org.joda.time.YearMonth yearMonth90 = yearMonth80.minusYears((int) (short) 0);
        boolean boolean91 = yearMonth71.isAfter((org.joda.time.ReadablePartial) yearMonth90);
        org.joda.time.YearMonth yearMonth93 = yearMonth90.plusYears(12);
        org.joda.time.ReadablePeriod readablePeriod94 = null;
        org.joda.time.YearMonth yearMonth96 = yearMonth90.withPeriodAdded(readablePeriod94, 11);
        int int97 = yearMonth27.compareTo((org.joda.time.ReadablePartial) yearMonth96);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Oct" + "'", str38, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0097-09" + "'", str41, "0097-09");
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[97, 10]");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(yearMonth82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(yearMonth85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(yearMonth90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(yearMonth93);
        org.junit.Assert.assertNotNull(yearMonth96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField11 = property4.getField();
        org.joda.time.DurationField durationField12 = property4.getDurationField();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property4.getAsShortText(locale13);
        java.lang.String str15 = property4.toString();
        java.util.Locale locale16 = null;
        int int17 = property4.getMaximumTextLength(locale16);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Oct" + "'", str14, "Oct");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[monthOfYear]" + "'", str15, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology15 = yearMonth8.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        org.joda.time.YearMonth.Property property37 = yearMonth19.property(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth8.property(dateTimeFieldType36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonth42.indexOf(dateTimeFieldType48);
        org.joda.time.YearMonth yearMonth51 = yearMonth42.plusMonths((-1));
        boolean boolean53 = yearMonth51.equals((java.lang.Object) 1);
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((long) 100);
        boolean boolean56 = yearMonth51.isBefore((org.joda.time.ReadablePartial) yearMonth55);
        int int57 = yearMonth8.compareTo((org.joda.time.ReadablePartial) yearMonth51);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.YearMonth yearMonth60 = yearMonth51.withPeriodAdded(readablePeriod58, (int) (byte) -1);
        int int61 = yearMonth51.size();
        org.joda.time.YearMonth yearMonth63 = yearMonth51.minusMonths((int) (byte) 100);
        java.util.Locale locale65 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = yearMonth51.toString("Sep", locale65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: p");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(yearMonth63);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.YearMonth yearMonth5 = property4.getYearMonth();
        int int6 = property4.getMinimumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property15.getAsShortText(locale17);
        org.joda.time.DurationField durationField19 = property15.getDurationField();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Sep" + "'", str18, "Sep");
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.YearMonth yearMonth19 = property4.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField20 = property4.getField();
        int int21 = property4.getMinimumValue();
        java.util.Locale locale23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth24 = property4.setCopy("", locale23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addWrapFieldToCopy((int) (byte) 10);
        org.joda.time.YearMonth yearMonth10 = property4.getYearMonth();
        int int11 = property4.get();
        java.lang.String str12 = property4.getAsString();
        org.joda.time.DateTimeField dateTimeField13 = property4.getField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "10" + "'", str12, "10");
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology1 = yearMonth0.getChronology();
        org.joda.time.YearMonth yearMonth3 = yearMonth0.withMonthOfYear((int) (short) 1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth.Property property8 = yearMonth7.monthOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        org.joda.time.YearMonth yearMonth17 = yearMonth12.plusMonths((int) (byte) 10);
        int int18 = property8.compareTo((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        boolean boolean25 = yearMonth12.isAfter((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        int int27 = yearMonth12.indexOf(dateTimeFieldType26);
        int int28 = yearMonth12.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = yearMonth12.getFieldTypes();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minusYears((int) (short) 0);
        int int43 = yearMonth40.size();
        boolean boolean44 = yearMonth36.isAfter((org.joda.time.ReadablePartial) yearMonth40);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology47);
        org.joda.time.YearMonth.Property property49 = yearMonth48.monthOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology52);
        org.joda.time.YearMonth yearMonth55 = yearMonth53.minusYears((int) (short) 0);
        int int56 = yearMonth53.size();
        org.joda.time.YearMonth yearMonth58 = yearMonth53.plusMonths((int) (byte) 10);
        int int59 = property49.compareTo((org.joda.time.ReadablePartial) yearMonth53);
        org.joda.time.Chronology chronology60 = yearMonth53.getChronology();
        org.joda.time.YearMonth yearMonth61 = yearMonth40.withChronologyRetainFields(chronology60);
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((long) (short) 1, chronology60);
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((java.lang.Object) yearMonth12, chronology60);
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((java.lang.Object) yearMonth63);
        int int65 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth64);
        org.joda.time.YearMonth.Property property66 = yearMonth64.monthOfYear();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(property66);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        java.lang.String str6 = yearMonth3.toString();
        java.lang.String str7 = yearMonth3.toString();
        org.joda.time.YearMonth yearMonth9 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        int int16 = yearMonth13.size();
        org.joda.time.YearMonth yearMonth18 = yearMonth13.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonth13.indexOf(dateTimeFieldType19);
        org.joda.time.YearMonth yearMonth22 = yearMonth13.plusMonths((-1));
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        int int29 = yearMonth26.size();
        org.joda.time.YearMonth yearMonth31 = yearMonth26.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = yearMonth26.indexOf(dateTimeFieldType32);
        org.joda.time.Interval interval34 = yearMonth26.toInterval();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth.Property property39 = yearMonth38.monthOfYear();
        int int40 = property39.getMaximumValue();
        java.lang.String str41 = property39.getAsShortText();
        java.util.Locale locale42 = null;
        java.lang.String str43 = property39.getAsShortText(locale42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property39.getFieldType();
        int int45 = yearMonth26.get(dateTimeFieldType44);
        org.joda.time.YearMonth.Property property46 = yearMonth13.property(dateTimeFieldType44);
        org.joda.time.Chronology chronology47 = yearMonth13.getChronology();
        int int49 = yearMonth13.getValue(0);
        org.joda.time.Interval interval50 = yearMonth13.toInterval();
        boolean boolean51 = yearMonth9.equals((java.lang.Object) yearMonth13);
        java.lang.String str53 = yearMonth9.toString("0097-09");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.YearMonth yearMonth57 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology56);
        org.joda.time.YearMonth.Property property58 = yearMonth57.monthOfYear();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology61);
        org.joda.time.YearMonth yearMonth64 = yearMonth62.minusYears((int) (short) 0);
        int int65 = yearMonth62.size();
        org.joda.time.YearMonth yearMonth67 = yearMonth62.plusMonths((int) (byte) 10);
        int int68 = property58.compareTo((org.joda.time.ReadablePartial) yearMonth62);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.YearMonth yearMonth72 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology71);
        org.joda.time.YearMonth yearMonth74 = yearMonth72.minusYears((int) (short) 0);
        boolean boolean75 = yearMonth62.isAfter((org.joda.time.ReadablePartial) yearMonth72);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = null;
        int int77 = yearMonth62.indexOf(dateTimeFieldType76);
        int int78 = yearMonth62.size();
        org.joda.time.YearMonth yearMonth80 = yearMonth62.minusMonths((int) (short) -1);
        org.joda.time.YearMonth.Property property81 = yearMonth80.monthOfYear();
        org.joda.time.YearMonth yearMonth82 = property81.getYearMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = property81.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth85 = yearMonth9.withField(dateTimeFieldType83, 98);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 98 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0097-10" + "'", str6, "0097-10");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0097-10" + "'", str7, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 12 + "'", int40 == 12);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Oct" + "'", str41, "Oct");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Oct" + "'", str43, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0097-09" + "'", str53, "0097-09");
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(yearMonth82);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
    }

    @Test
    @Ignore
  public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.Chronology chronology8 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth9 = yearMonth0.withChronologyRetainFields(chronology8);
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth12 = org.joda.time.YearMonth.now(chronology8);
        org.joda.time.YearMonth yearMonth13 = org.joda.time.YearMonth.now(chronology8);
        int int14 = yearMonth13.getYear();
        int int15 = yearMonth13.getYear();
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2020 + "'", int14 == 2020);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2020 + "'", int15 == 2020);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = yearMonth4.getFieldTypes();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        boolean boolean22 = yearMonth14.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth.Property property27 = yearMonth26.monthOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        org.joda.time.YearMonth yearMonth36 = yearMonth31.plusMonths((int) (byte) 10);
        int int37 = property27.compareTo((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology38 = yearMonth31.getChronology();
        org.joda.time.YearMonth yearMonth39 = yearMonth18.withChronologyRetainFields(chronology38);
        org.joda.time.YearMonth yearMonth40 = yearMonth4.withChronologyRetainFields(chronology38);
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((long) (short) -1, chronology38);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.Interval interval43 = yearMonth41.toInterval(dateTimeZone42);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = yearMonth41.getFieldTypes();
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("9");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = yearMonth1.toString(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(yearMonth1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0009-01" + "'", str3, "0009-01");
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        java.lang.String str6 = yearMonth3.toString();
        java.lang.String str7 = yearMonth3.toString();
        org.joda.time.YearMonth yearMonth9 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        int int16 = yearMonth13.size();
        org.joda.time.YearMonth yearMonth18 = yearMonth13.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonth13.indexOf(dateTimeFieldType19);
        org.joda.time.YearMonth yearMonth22 = yearMonth13.plusMonths((-1));
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        int int29 = yearMonth26.size();
        org.joda.time.YearMonth yearMonth31 = yearMonth26.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = yearMonth26.indexOf(dateTimeFieldType32);
        org.joda.time.Interval interval34 = yearMonth26.toInterval();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth.Property property39 = yearMonth38.monthOfYear();
        int int40 = property39.getMaximumValue();
        java.lang.String str41 = property39.getAsShortText();
        java.util.Locale locale42 = null;
        java.lang.String str43 = property39.getAsShortText(locale42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property39.getFieldType();
        int int45 = yearMonth26.get(dateTimeFieldType44);
        org.joda.time.YearMonth.Property property46 = yearMonth13.property(dateTimeFieldType44);
        org.joda.time.Chronology chronology47 = yearMonth13.getChronology();
        int int49 = yearMonth13.getValue(0);
        org.joda.time.Interval interval50 = yearMonth13.toInterval();
        boolean boolean51 = yearMonth9.equals((java.lang.Object) yearMonth13);
        java.lang.String str53 = yearMonth9.toString("0097-09");
        int int54 = yearMonth9.getMonthOfYear();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0097-10" + "'", str6, "0097-10");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0097-10" + "'", str7, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 12 + "'", int40 == 12);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Oct" + "'", str41, "Oct");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Oct" + "'", str43, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0097-09" + "'", str53, "0097-09");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth(chronology29);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((java.lang.Object) yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth3.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.YearMonth yearMonth11 = yearMonth3.minus(readablePeriod10);
        java.lang.String str12 = yearMonth11.toString();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0097-10" + "'", str12, "0097-10");
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = yearMonth3.getFields();
        org.joda.time.YearMonth yearMonth26 = yearMonth3.minusMonths((int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        int int38 = yearMonth35.size();
        org.joda.time.YearMonth yearMonth40 = yearMonth35.plusMonths((int) (byte) 10);
        int int41 = property31.compareTo((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.YearMonth yearMonth42 = property31.getYearMonth();
        java.lang.String str43 = property31.getAsText();
        org.joda.time.YearMonth yearMonth44 = property31.getYearMonth();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.YearMonth yearMonth47 = yearMonth44.withPeriodAdded(readablePeriod45, 98);
        boolean boolean48 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth44);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = yearMonth44.getFieldTypes();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "October" + "'", str43, "October");
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Interval interval31 = yearMonth23.toInterval(dateTimeZone30);
        org.joda.time.YearMonth yearMonth33 = yearMonth23.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth yearMonth45 = yearMonth43.minusYears((int) (short) 0);
        int int46 = yearMonth43.size();
        boolean boolean47 = yearMonth39.isAfter((org.joda.time.ReadablePartial) yearMonth43);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology50);
        org.joda.time.YearMonth.Property property52 = yearMonth51.monthOfYear();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        int int59 = yearMonth56.size();
        org.joda.time.YearMonth yearMonth61 = yearMonth56.plusMonths((int) (byte) 10);
        int int62 = property52.compareTo((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology63 = yearMonth56.getChronology();
        org.joda.time.YearMonth yearMonth64 = yearMonth43.withChronologyRetainFields(chronology63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.YearMonth yearMonth67 = yearMonth64.withPeriodAdded(readablePeriod65, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = null;
        int int69 = yearMonth67.indexOf(dateTimeFieldType68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.YearMonth yearMonth73 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology72);
        org.joda.time.YearMonth.Property property74 = yearMonth73.monthOfYear();
        int int75 = property74.getMaximumValue();
        java.lang.String str76 = property74.getAsShortText();
        java.util.Locale locale77 = null;
        java.lang.String str78 = property74.getAsShortText(locale77);
        org.joda.time.YearMonth yearMonth80 = property74.setCopy("October");
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = yearMonth80.toDateTime(readableInstant81);
        org.joda.time.DateTime dateTime83 = yearMonth67.toDateTime(readableInstant81);
        org.joda.time.DateTime dateTime84 = yearMonth23.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime85 = yearMonth14.toDateTime((org.joda.time.ReadableInstant) dateTime84);
        boolean boolean86 = yearMonth8.isEqual((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.YearMonth.Property property87 = yearMonth8.monthOfYear();
        java.util.Locale locale88 = null;
        java.lang.String str89 = property87.getAsShortText(locale88);
        java.lang.String str90 = property87.getName();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 12 + "'", int75 == 12);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Oct" + "'", str76, "Oct");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Oct" + "'", str78, "Oct");
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Sep" + "'", str89, "Sep");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "monthOfYear" + "'", str90, "monthOfYear");
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.parse("0129-10", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth yearMonth17 = yearMonth3.minusMonths(0);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.Chronology chronology20 = yearMonth19.getChronology();
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth(chronology20);
        int int22 = yearMonth17.compareTo((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        java.lang.String str29 = yearMonth26.toString();
        java.lang.String str30 = yearMonth26.toString();
        org.joda.time.YearMonth yearMonth32 = yearMonth26.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        org.joda.time.YearMonth yearMonth41 = yearMonth36.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        int int43 = yearMonth36.indexOf(dateTimeFieldType42);
        org.joda.time.YearMonth yearMonth45 = yearMonth36.plusMonths((-1));
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth yearMonth51 = yearMonth49.minusYears((int) (short) 0);
        int int52 = yearMonth49.size();
        org.joda.time.YearMonth yearMonth54 = yearMonth49.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        int int56 = yearMonth49.indexOf(dateTimeFieldType55);
        org.joda.time.Interval interval57 = yearMonth49.toInterval();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology60);
        org.joda.time.YearMonth.Property property62 = yearMonth61.monthOfYear();
        int int63 = property62.getMaximumValue();
        java.lang.String str64 = property62.getAsShortText();
        java.util.Locale locale65 = null;
        java.lang.String str66 = property62.getAsShortText(locale65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property62.getFieldType();
        int int68 = yearMonth49.get(dateTimeFieldType67);
        org.joda.time.YearMonth.Property property69 = yearMonth36.property(dateTimeFieldType67);
        org.joda.time.Chronology chronology70 = yearMonth36.getChronology();
        int int72 = yearMonth36.getValue(0);
        org.joda.time.Interval interval73 = yearMonth36.toInterval();
        boolean boolean74 = yearMonth32.equals((java.lang.Object) yearMonth36);
        boolean boolean75 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth36);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0097-10" + "'", str29, "0097-10");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0097-10" + "'", str30, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 12 + "'", int63 == 12);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Oct" + "'", str64, "Oct");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Oct" + "'", str66, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 97 + "'", int72 == 97);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = yearMonth8.indexOf(dateTimeFieldType14);
        org.joda.time.YearMonth yearMonth17 = yearMonth8.plusMonths((-1));
        int int18 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((java.lang.Object) yearMonth17);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = yearMonth18.toString(dateTimeFormatter22);
        org.joda.time.YearMonth.Property property24 = yearMonth18.year();
        org.joda.time.YearMonth yearMonth26 = property24.setCopy(0);
        java.lang.String str27 = property24.getAsShortText();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0097-10" + "'", str23, "0097-10");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "97" + "'", str27, "97");
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property4.getAsShortText(locale16);
        org.joda.time.YearMonth yearMonth18 = property4.getYearMonth();
        java.lang.String str19 = property4.getAsString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Oct" + "'", str17, "Oct");
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "10" + "'", str19, "10");
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth yearMonth11 = yearMonth3.withMonthOfYear((int) (short) 10);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(yearMonth11);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField11 = property4.getField();
        org.joda.time.DurationField durationField12 = property4.getDurationField();
        int int13 = property4.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = yearMonth3.toString(dateTimeFormatter6);
        org.joda.time.YearMonth.Property property8 = yearMonth3.year();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth.Property property13 = yearMonth12.monthOfYear();
        int int14 = property13.getMaximumValue();
        java.lang.String str15 = property13.getAsShortText();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property13.getAsShortText(locale16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property13.getFieldType();
        int int19 = property13.getMinimumValue();
        int int20 = property13.getMinimumValue();
        org.joda.time.YearMonth yearMonth22 = property13.addWrapFieldToCopy((int) 'a');
        boolean boolean23 = property8.equals((java.lang.Object) property13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((java.lang.Object) property13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.YearMonth$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0097-10" + "'", str7, "0097-10");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Oct" + "'", str15, "Oct");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Oct" + "'", str17, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        int int31 = yearMonth28.size();
        boolean boolean32 = yearMonth24.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth.Property property37 = yearMonth36.monthOfYear();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth yearMonth43 = yearMonth41.minusYears((int) (short) 0);
        int int44 = yearMonth41.size();
        org.joda.time.YearMonth yearMonth46 = yearMonth41.plusMonths((int) (byte) 10);
        int int47 = property37.compareTo((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.Chronology chronology48 = yearMonth41.getChronology();
        org.joda.time.YearMonth yearMonth49 = yearMonth28.withChronologyRetainFields(chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.YearMonth yearMonth52 = yearMonth49.withPeriodAdded(readablePeriod50, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        int int54 = yearMonth52.indexOf(dateTimeFieldType53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth.Property property59 = yearMonth58.monthOfYear();
        int int60 = property59.getMaximumValue();
        java.lang.String str61 = property59.getAsShortText();
        java.util.Locale locale62 = null;
        java.lang.String str63 = property59.getAsShortText(locale62);
        org.joda.time.YearMonth yearMonth65 = property59.setCopy("October");
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = yearMonth65.toDateTime(readableInstant66);
        org.joda.time.DateTime dateTime68 = yearMonth52.toDateTime(readableInstant66);
        org.joda.time.DateTime dateTime69 = yearMonth8.toDateTime((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.YearMonth yearMonth71 = yearMonth8.minusMonths((int) (short) 10);
        org.joda.time.YearMonth yearMonth73 = yearMonth8.minusYears((int) (short) 100);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 12 + "'", int60 == 12);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Oct" + "'", str61, "Oct");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Oct" + "'", str63, "Oct");
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertNotNull(yearMonth73);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        java.util.Locale locale15 = null;
        java.lang.String str16 = property4.getAsText(locale15);
        java.util.Locale locale17 = null;
        java.lang.String str18 = property4.getAsShortText(locale17);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.YearMonth yearMonth19 = property4.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusMonths((int) (short) 1);
        int[] intArray22 = yearMonth21.getValues();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[97, 8]");
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((long) (short) 1, chronology32);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth(chronology32);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology32);
        int int38 = yearMonth36.getValue((int) (short) 1);
        int int39 = yearMonth36.getYear();
        org.joda.time.YearMonth.Property property40 = yearMonth36.year();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        int int46 = property45.getMaximumValue();
        java.util.Locale locale47 = null;
        int int48 = property45.getMaximumShortTextLength(locale47);
        java.util.Locale locale49 = null;
        int int50 = property45.getMaximumTextLength(locale49);
        org.joda.time.DurationField durationField51 = property45.getRangeDurationField();
        java.lang.String str52 = property45.toString();
        boolean boolean53 = property40.equals((java.lang.Object) property45);
        int int54 = property40.getMinimumValue();
        java.util.Locale locale55 = null;
        int int56 = property40.getMaximumTextLength(locale55);
        int int57 = property40.getMaximumValue();
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Property[monthOfYear]" + "'", str52, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-292275054) + "'", int54 == (-292275054));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 292278993 + "'", int57 == 292278993);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        int int10 = property4.getMinimumValue();
        int int11 = property4.getMinimumValue();
        java.lang.String str12 = property4.getName();
        int int13 = property4.get();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "monthOfYear" + "'", str12, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) 11);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.YearMonth yearMonth3 = yearMonth1.plus(readablePeriod2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.YearMonth yearMonth5 = yearMonth3.plus(readablePeriod4);
        int int6 = yearMonth5.size();
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
    }

    @Test
    @Ignore
  public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        boolean boolean24 = yearMonth16.isAfter((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        int int39 = property29.compareTo((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = yearMonth33.getChronology();
        org.joda.time.YearMonth yearMonth41 = yearMonth20.withChronologyRetainFields(chronology40);
        int int42 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        int int48 = property47.getMaximumValue();
        java.util.Locale locale49 = null;
        int int50 = property47.getMaximumShortTextLength(locale49);
        java.util.Locale locale51 = null;
        int int52 = property47.getMaximumTextLength(locale51);
        org.joda.time.DurationField durationField53 = property47.getRangeDurationField();
        java.util.Locale locale54 = null;
        java.lang.String str55 = property47.getAsShortText(locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property47.getFieldType();
        org.joda.time.YearMonth yearMonth58 = yearMonth3.withField(dateTimeFieldType56, 11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = yearMonth58.getFieldTypes();
        org.joda.time.YearMonth yearMonth60 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology63);
        org.joda.time.YearMonth yearMonth66 = yearMonth64.minusYears((int) (short) 0);
        org.joda.time.Interval interval67 = yearMonth64.toInterval();
        org.joda.time.Chronology chronology68 = yearMonth64.getChronology();
        org.joda.time.YearMonth yearMonth69 = yearMonth60.withChronologyRetainFields(chronology68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.YearMonth yearMonth73 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology72);
        org.joda.time.YearMonth.Property property74 = yearMonth73.monthOfYear();
        int int75 = property74.getMaximumValue();
        java.util.Locale locale76 = null;
        int int77 = property74.getMaximumShortTextLength(locale76);
        java.util.Locale locale78 = null;
        int int79 = property74.getMaximumTextLength(locale78);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.YearMonth yearMonth83 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology82);
        org.joda.time.YearMonth.Property property84 = yearMonth83.monthOfYear();
        int int85 = property84.getMaximumValue();
        java.util.Locale locale86 = null;
        int int87 = property84.getMaximumShortTextLength(locale86);
        java.util.Locale locale88 = null;
        int int89 = property84.getMaximumTextLength(locale88);
        java.lang.String str90 = property84.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = property84.getFieldType();
        boolean boolean92 = property74.equals((java.lang.Object) property84);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = property84.getFieldType();
        int int94 = yearMonth69.get(dateTimeFieldType93);
        org.joda.time.YearMonth.Property property95 = yearMonth58.property(dateTimeFieldType93);
        int int96 = property95.getMaximumValue();
        org.joda.time.YearMonth yearMonth98 = property95.addToCopy(2020);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 12 + "'", int48 == 12);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Oct" + "'", str55, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 12 + "'", int75 == 12);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 12 + "'", int85 == 12);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 9 + "'", int89 == 9);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Oct" + "'", str90, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 11 + "'", int94 == 11);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 12 + "'", int96 == 12);
        org.junit.Assert.assertNotNull(yearMonth98);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.YearMonth yearMonth8 = property4.addToCopy((int) (short) 0);
        int int9 = property4.getMinimumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth11 = property4.setCopy("year");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"year\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        int int15 = property4.getMaximumValueOverall();
        int int16 = property4.getMaximumValueOverall();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property4.getAsShortText(locale17);
        java.lang.String str19 = property4.getName();
        int int20 = property4.getMaximumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "monthOfYear" + "'", str19, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonth yearMonth29 = yearMonth27.plus(readablePeriod28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonth yearMonth31 = yearMonth27.minus(readablePeriod30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth yearMonth43 = yearMonth41.minusYears((int) (short) 0);
        int int44 = yearMonth41.size();
        boolean boolean45 = yearMonth37.isAfter((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        int int60 = property50.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = yearMonth54.getChronology();
        org.joda.time.YearMonth yearMonth62 = yearMonth41.withChronologyRetainFields(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.YearMonth yearMonth65 = yearMonth62.withPeriodAdded(readablePeriod63, (int) 'a');
        org.joda.time.YearMonth yearMonth67 = yearMonth62.plusMonths(9);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.YearMonth yearMonth71 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology70);
        org.joda.time.YearMonth.Property property72 = yearMonth71.monthOfYear();
        int int73 = property72.getMaximumValue();
        java.lang.String str74 = property72.getAsShortText();
        java.util.Locale locale75 = null;
        java.lang.String str76 = property72.getAsShortText(locale75);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = property72.getFieldType();
        int int78 = yearMonth62.get(dateTimeFieldType77);
        int int79 = yearMonth27.get(dateTimeFieldType77);
        org.joda.time.Interval interval80 = yearMonth27.toInterval();
        org.joda.time.YearMonth.Property property81 = yearMonth27.monthOfYear();
        java.util.Locale locale82 = null;
        java.lang.String str83 = property81.getAsText(locale82);
        org.joda.time.YearMonth yearMonth84 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.YearMonth yearMonth88 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology87);
        org.joda.time.YearMonth yearMonth90 = yearMonth88.minusYears((int) (short) 0);
        org.joda.time.Interval interval91 = yearMonth88.toInterval();
        org.joda.time.Chronology chronology92 = yearMonth88.getChronology();
        org.joda.time.YearMonth yearMonth93 = yearMonth84.withChronologyRetainFields(chronology92);
        org.joda.time.YearMonth yearMonth94 = new org.joda.time.YearMonth(chronology92);
        org.joda.time.YearMonth yearMonth95 = new org.joda.time.YearMonth(chronology92);
        org.joda.time.YearMonth yearMonth96 = org.joda.time.YearMonth.now(chronology92);
        org.joda.time.YearMonth yearMonth97 = org.joda.time.YearMonth.now(chronology92);
        org.joda.time.YearMonth yearMonth98 = new org.joda.time.YearMonth((java.lang.Object) locale82, chronology92);
        org.joda.time.YearMonth yearMonth99 = new org.joda.time.YearMonth(chronology92);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 12 + "'", int73 == 12);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Oct" + "'", str74, "Oct");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Oct" + "'", str76, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "September" + "'", str83, "September");
        org.junit.Assert.assertNotNull(yearMonth90);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(yearMonth93);
        org.junit.Assert.assertNotNull(yearMonth96);
        org.junit.Assert.assertNotNull(yearMonth97);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = yearMonth18.toString(dateTimeFormatter22);
        org.joda.time.YearMonth.Property property24 = yearMonth18.year();
        java.lang.String str25 = property24.getAsShortText();
        int int26 = property24.getMinimumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0097-10" + "'", str23, "0097-10");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "97" + "'", str25, "97");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-292275054) + "'", int26 == (-292275054));
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("0009-01");
        org.junit.Assert.assertNotNull(yearMonth1);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = yearMonth8.getFields();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        int int16 = yearMonth13.size();
        org.joda.time.YearMonth yearMonth18 = yearMonth13.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonth13.indexOf(dateTimeFieldType19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth.Property property25 = yearMonth24.monthOfYear();
        int int26 = property25.getMaximumValue();
        java.lang.String str27 = property25.getAsShortText();
        java.util.Locale locale28 = null;
        java.lang.String str29 = property25.getAsShortText(locale28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property25.getFieldType();
        org.joda.time.YearMonth.Property property31 = yearMonth13.property(dateTimeFieldType30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth yearMonth43 = yearMonth41.minusYears((int) (short) 0);
        int int44 = yearMonth41.size();
        boolean boolean45 = yearMonth37.isAfter((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        int int60 = property50.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = yearMonth54.getChronology();
        org.joda.time.YearMonth yearMonth62 = yearMonth41.withChronologyRetainFields(chronology61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth yearMonth68 = yearMonth66.minusYears((int) (short) 0);
        int int69 = yearMonth66.size();
        org.joda.time.YearMonth yearMonth71 = yearMonth66.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        int int73 = yearMonth66.indexOf(dateTimeFieldType72);
        org.joda.time.Interval interval74 = yearMonth66.toInterval();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.YearMonth yearMonth78 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology77);
        org.joda.time.YearMonth.Property property79 = yearMonth78.monthOfYear();
        int int80 = property79.getMaximumValue();
        java.lang.String str81 = property79.getAsShortText();
        java.util.Locale locale82 = null;
        java.lang.String str83 = property79.getAsShortText(locale82);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = property79.getFieldType();
        int int85 = yearMonth66.get(dateTimeFieldType84);
        boolean boolean86 = yearMonth62.isSupported(dateTimeFieldType84);
        boolean boolean87 = yearMonth13.isSupported(dateTimeFieldType84);
        boolean boolean88 = yearMonth8.isSupported(dateTimeFieldType84);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.YearMonth yearMonth90 = yearMonth8.minus(readablePeriod89);
        org.joda.time.YearMonth yearMonth92 = yearMonth8.plusMonths(1970);
        org.joda.time.DateTimeZone dateTimeZone93 = null;
        org.joda.time.Interval interval94 = yearMonth92.toInterval(dateTimeZone93);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Oct" + "'", str27, "Oct");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Oct" + "'", str29, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 12 + "'", int80 == 12);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Oct" + "'", str81, "Oct");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Oct" + "'", str83, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(yearMonth90);
        org.junit.Assert.assertNotNull(yearMonth92);
        org.junit.Assert.assertNotNull(interval94);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = yearMonth18.toString(dateTimeFormatter22);
        org.joda.time.YearMonth.Property property24 = yearMonth18.year();
        org.joda.time.YearMonth yearMonth26 = property24.setCopy(0);
        org.joda.time.YearMonth.Property property27 = yearMonth26.monthOfYear();
        org.joda.time.DateTimeField dateTimeField28 = property27.getField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0097-10" + "'", str23, "0097-10");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((long) (short) 1, chronology32);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth(chronology32);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = yearMonth36.toString(dateTimeFormatter37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonth yearMonth40 = yearMonth36.plus(readablePeriod39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minus(readablePeriod41);
        org.joda.time.YearMonth yearMonth44 = yearMonth40.minusYears((int) (short) 0);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.plusYears((int) (short) 100);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0100-10" + "'", str38, "0100-10");
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertNotNull(yearMonth46);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.Chronology chronology8 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth9 = yearMonth0.withChronologyRetainFields(chronology8);
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth12 = org.joda.time.YearMonth.now(chronology8);
        org.joda.time.DurationFieldType durationFieldType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth15 = yearMonth12.withFieldAdded(durationFieldType13, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth12);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMinimumValueOverall();
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy((int) ' ');
        java.util.Locale locale13 = null;
        java.lang.String str14 = property4.getAsText(locale13);
        int int15 = property4.getMinimumValue();
        int int16 = property4.getMaximumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "October" + "'", str14, "October");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        int int9 = yearMonth6.size();
        org.joda.time.YearMonth yearMonth11 = yearMonth6.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = yearMonth6.indexOf(dateTimeFieldType12);
        org.joda.time.YearMonth yearMonth15 = yearMonth6.plusMonths((-1));
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.Interval interval27 = yearMonth19.toInterval();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        int int33 = property32.getMaximumValue();
        java.lang.String str34 = property32.getAsShortText();
        java.util.Locale locale35 = null;
        java.lang.String str36 = property32.getAsShortText(locale35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property32.getFieldType();
        int int38 = yearMonth19.get(dateTimeFieldType37);
        org.joda.time.YearMonth.Property property39 = yearMonth6.property(dateTimeFieldType37);
        org.joda.time.Chronology chronology40 = yearMonth6.getChronology();
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth(chronology40);
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        org.joda.time.Interval interval49 = yearMonth46.toInterval();
        org.joda.time.Chronology chronology50 = yearMonth46.getChronology();
        org.joda.time.YearMonth yearMonth51 = yearMonth42.withChronologyRetainFields(chronology50);
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth(chronology50);
        org.joda.time.YearMonth yearMonth53 = yearMonth41.withChronologyRetainFields(chronology50);
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((long) (short) 10, chronology50);
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth(chronology50);
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((long) 98, chronology50);
        org.joda.time.YearMonth yearMonth57 = org.joda.time.YearMonth.now(chronology50);
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((long) 6, chronology50);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Oct" + "'", str34, "Oct");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Oct" + "'", str36, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(yearMonth57);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth.Property property5 = yearMonth4.monthOfYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        org.joda.time.YearMonth yearMonth14 = yearMonth9.plusMonths((int) (byte) 10);
        int int15 = property5.compareTo((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = yearMonth9.getChronology();
        org.joda.time.YearMonth yearMonth17 = org.joda.time.YearMonth.now(chronology16);
        org.joda.time.YearMonth yearMonth18 = org.joda.time.YearMonth.now(chronology16);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((java.lang.Object) "0097-10", chronology16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = yearMonth19.toString(dateTimeFormatter20);
        int int22 = yearMonth19.getMonthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth.Property property27 = yearMonth26.monthOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        org.joda.time.YearMonth yearMonth36 = yearMonth31.plusMonths((int) (byte) 10);
        int int37 = property27.compareTo((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth yearMonth43 = yearMonth41.minusYears((int) (short) 0);
        boolean boolean44 = yearMonth31.isAfter((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        int int46 = yearMonth31.indexOf(dateTimeFieldType45);
        int int47 = yearMonth31.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = yearMonth31.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Interval interval50 = yearMonth31.toInterval(dateTimeZone49);
        int[] intArray51 = yearMonth31.getValues();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.YearMonth yearMonth53 = yearMonth31.minus(readablePeriod52);
        int int55 = yearMonth53.getValue((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.YearMonth yearMonth58 = yearMonth53.withPeriodAdded(readablePeriod56, (-292275054));
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology61);
        org.joda.time.YearMonth yearMonth64 = yearMonth62.minusYears((int) (short) 0);
        int int65 = yearMonth62.size();
        org.joda.time.YearMonth yearMonth67 = yearMonth62.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = null;
        int int69 = yearMonth62.indexOf(dateTimeFieldType68);
        org.joda.time.YearMonth yearMonth71 = yearMonth62.plusMonths((-1));
        org.joda.time.YearMonth yearMonth73 = yearMonth62.plusMonths((-1));
        org.joda.time.YearMonth.Property property74 = yearMonth73.monthOfYear();
        int int75 = property74.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = property74.getFieldType();
        int int77 = property74.getMaximumValueOverall();
        java.util.Locale locale78 = null;
        java.lang.String str79 = property74.getAsShortText(locale78);
        int int80 = property74.getMinimumValueOverall();
        org.joda.time.YearMonth yearMonth82 = property74.addToCopy((int) (byte) 100);
        java.lang.String str83 = property74.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = property74.getFieldType();
        int int85 = yearMonth58.indexOf(dateTimeFieldType84);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth87 = yearMonth19.withField(dateTimeFieldType84, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0097-10" + "'", str21, "0097-10");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[97, 10]");
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 12 + "'", int77 == 12);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Sep" + "'", str79, "Sep");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(yearMonth82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "9" + "'", str83, "9");
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth.Property property5 = yearMonth4.monthOfYear();
        int int6 = property5.getMaximumValue();
        java.lang.String str7 = property5.getAsShortText();
        java.util.Locale locale8 = null;
        java.lang.String str9 = property5.getAsShortText(locale8);
        int int10 = property5.getMaximumValue();
        int int11 = property5.getMinimumValueOverall();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property5.getAsText(locale12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        int int19 = property18.getMaximumValue();
        java.lang.String str20 = property18.getAsShortText();
        org.joda.time.DateTimeField dateTimeField21 = property18.getField();
        org.joda.time.YearMonth yearMonth23 = property18.setCopy("Oct");
        int int24 = property5.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        org.joda.time.YearMonth yearMonth33 = property29.addWrapFieldToCopy((int) (short) -1);
        int[] intArray34 = yearMonth33.getValues();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth.Property property39 = yearMonth38.monthOfYear();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth yearMonth45 = yearMonth43.minusYears((int) (short) 0);
        int int46 = yearMonth43.size();
        org.joda.time.YearMonth yearMonth48 = yearMonth43.plusMonths((int) (byte) 10);
        int int49 = property39.compareTo((org.joda.time.ReadablePartial) yearMonth43);
        org.joda.time.Chronology chronology50 = yearMonth43.getChronology();
        org.joda.time.YearMonth yearMonth51 = org.joda.time.YearMonth.now(chronology50);
        org.joda.time.YearMonth yearMonth52 = yearMonth33.withChronologyRetainFields(chronology50);
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth(chronology50);
        org.joda.time.YearMonth yearMonth54 = yearMonth23.withChronologyRetainFields(chronology50);
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((long) 11, chronology50);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Oct" + "'", str7, "Oct");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Oct" + "'", str9, "Oct");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "October" + "'", str13, "October");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[97, 9]");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertNotNull(yearMonth54);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth16 = yearMonth8.plusYears((int) (byte) 10);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth20 = yearMonth18.withMonthOfYear((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth18);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        org.joda.time.YearMonth yearMonth10 = property4.getYearMonth();
        org.joda.time.DurationField durationField11 = property4.getDurationField();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth yearMonth17 = yearMonth15.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        int int24 = yearMonth21.size();
        boolean boolean25 = yearMonth17.isAfter((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonth yearMonth27 = yearMonth21.minus(readablePeriod26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonth yearMonth30 = yearMonth27.withPeriodAdded(readablePeriod28, (int) (short) 0);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.plusYears((int) ' ');
        int int33 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.YearMonth.Property property34 = yearMonth30.monthOfYear();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        boolean boolean14 = yearMonth12.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        int int20 = property19.getMaximumValue();
        java.util.Locale locale21 = null;
        int int22 = property19.getMaximumShortTextLength(locale21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth.Property property27 = yearMonth26.monthOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        org.joda.time.YearMonth yearMonth36 = yearMonth31.plusMonths((int) (byte) 10);
        int int37 = property27.compareTo((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Interval interval39 = yearMonth31.toInterval(dateTimeZone38);
        org.joda.time.YearMonth yearMonth41 = yearMonth31.minusYears((int) (short) 0);
        java.lang.String str42 = yearMonth31.toString();
        org.joda.time.YearMonth yearMonth44 = yearMonth31.withMonthOfYear(11);
        boolean boolean45 = property19.equals((java.lang.Object) 11);
        int int46 = property19.getMinimumValueOverall();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        int int59 = yearMonth56.size();
        boolean boolean60 = yearMonth52.isAfter((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology63);
        org.joda.time.YearMonth.Property property65 = yearMonth64.monthOfYear();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.YearMonth yearMonth69 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology68);
        org.joda.time.YearMonth yearMonth71 = yearMonth69.minusYears((int) (short) 0);
        int int72 = yearMonth69.size();
        org.joda.time.YearMonth yearMonth74 = yearMonth69.plusMonths((int) (byte) 10);
        int int75 = property65.compareTo((org.joda.time.ReadablePartial) yearMonth69);
        org.joda.time.Chronology chronology76 = yearMonth69.getChronology();
        org.joda.time.YearMonth yearMonth77 = yearMonth56.withChronologyRetainFields(chronology76);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.YearMonth yearMonth81 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology80);
        org.joda.time.YearMonth yearMonth83 = yearMonth81.minusYears((int) (short) 0);
        int int84 = yearMonth81.size();
        org.joda.time.YearMonth yearMonth86 = yearMonth81.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = null;
        int int88 = yearMonth81.indexOf(dateTimeFieldType87);
        org.joda.time.YearMonth yearMonth90 = yearMonth81.plusMonths((-1));
        boolean boolean91 = yearMonth56.isEqual((org.joda.time.ReadablePartial) yearMonth90);
        org.joda.time.YearMonth yearMonth93 = yearMonth90.withYear((int) '4');
        int int94 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth90);
        boolean boolean95 = yearMonth12.isAfter((org.joda.time.ReadablePartial) yearMonth90);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0097-10" + "'", str42, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(yearMonth77);
        org.junit.Assert.assertNotNull(yearMonth83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(yearMonth86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(yearMonth90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(yearMonth93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField7 = property4.getField();
        org.joda.time.YearMonth yearMonth9 = property4.setCopy("Oct");
        org.joda.time.DurationField durationField10 = property4.getDurationField();
        int int11 = property4.get();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        org.joda.time.YearMonth yearMonth25 = yearMonth20.plusMonths((int) (byte) 10);
        int int26 = property16.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        boolean boolean33 = yearMonth20.isAfter((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = yearMonth30.toString(dateTimeFormatter34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth.Property property40 = yearMonth39.monthOfYear();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        int int47 = yearMonth44.size();
        org.joda.time.YearMonth yearMonth49 = yearMonth44.plusMonths((int) (byte) 10);
        int int50 = property40.compareTo((org.joda.time.ReadablePartial) yearMonth44);
        org.joda.time.Chronology chronology51 = yearMonth44.getChronology();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology54);
        org.joda.time.YearMonth yearMonth57 = yearMonth55.minusYears((int) (short) 0);
        int int58 = yearMonth55.size();
        org.joda.time.YearMonth yearMonth60 = yearMonth55.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        int int62 = yearMonth55.indexOf(dateTimeFieldType61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth.Property property67 = yearMonth66.monthOfYear();
        int int68 = property67.getMaximumValue();
        java.lang.String str69 = property67.getAsShortText();
        java.util.Locale locale70 = null;
        java.lang.String str71 = property67.getAsShortText(locale70);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = property67.getFieldType();
        org.joda.time.YearMonth.Property property73 = yearMonth55.property(dateTimeFieldType72);
        org.joda.time.YearMonth.Property property74 = yearMonth44.property(dateTimeFieldType72);
        boolean boolean75 = yearMonth30.equals((java.lang.Object) property74);
        java.lang.String str76 = property74.getAsText();
        org.joda.time.YearMonth yearMonth78 = property74.addToCopy(1980);
        boolean boolean79 = property4.equals((java.lang.Object) property74);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0097-10" + "'", str35, "0097-10");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 12 + "'", int68 == 12);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Oct" + "'", str69, "Oct");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Oct" + "'", str71, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "October" + "'", str76, "October");
        org.junit.Assert.assertNotNull(yearMonth78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.DurationField durationField8 = property4.getDurationField();
        java.util.Locale locale9 = null;
        int int10 = property4.getMaximumShortTextLength(locale9);
        org.joda.time.YearMonth yearMonth12 = property4.setCopy(12);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(yearMonth12);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.lang.String str11 = property4.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth yearMonth17 = yearMonth15.minusYears((int) (short) 0);
        int int18 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth17);
        java.util.Locale locale19 = null;
        int int20 = property4.getMaximumShortTextLength(locale19);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMinimumValueOverall();
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy((int) ' ');
        java.util.Locale locale13 = null;
        java.lang.String str14 = property4.getAsText(locale13);
        org.joda.time.DurationField durationField15 = property4.getRangeDurationField();
        java.lang.String str16 = property4.getAsString();
        int int17 = property4.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "October" + "'", str14, "October");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "10" + "'", str16, "10");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
    }

    @Test
    @Ignore
  public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        boolean boolean14 = yearMonth12.equals((java.lang.Object) 1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonth yearMonth16 = yearMonth12.minus(readablePeriod15);
        org.joda.time.YearMonth.Property property17 = yearMonth16.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = yearMonth16.toString(dateTimeFormatter18);
        org.joda.time.YearMonth yearMonth21 = yearMonth16.minusYears((int) (short) 1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth.Property property26 = yearMonth25.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        int int36 = property26.compareTo((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.YearMonth yearMonth37 = property26.getYearMonth();
        java.util.Locale locale38 = null;
        java.lang.String str39 = property26.getAsShortText(locale38);
        org.joda.time.YearMonth yearMonth40 = property26.getYearMonth();
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        org.joda.time.Interval interval48 = yearMonth45.toInterval();
        org.joda.time.Chronology chronology49 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth50 = yearMonth41.withChronologyRetainFields(chronology49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth.Property property55 = yearMonth54.monthOfYear();
        int int56 = property55.getMaximumValue();
        java.util.Locale locale57 = null;
        int int58 = property55.getMaximumShortTextLength(locale57);
        java.util.Locale locale59 = null;
        int int60 = property55.getMaximumTextLength(locale59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology63);
        org.joda.time.YearMonth.Property property65 = yearMonth64.monthOfYear();
        int int66 = property65.getMaximumValue();
        java.util.Locale locale67 = null;
        int int68 = property65.getMaximumShortTextLength(locale67);
        java.util.Locale locale69 = null;
        int int70 = property65.getMaximumTextLength(locale69);
        java.lang.String str71 = property65.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = property65.getFieldType();
        boolean boolean73 = property55.equals((java.lang.Object) property65);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = property65.getFieldType();
        int int75 = yearMonth50.get(dateTimeFieldType74);
        int int76 = yearMonth40.indexOf(dateTimeFieldType74);
        org.joda.time.YearMonth.Property property77 = yearMonth16.property(dateTimeFieldType74);
        org.joda.time.DateTimeField[] dateTimeFieldArray78 = yearMonth16.getFields();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0097-09" + "'", str19, "0097-09");
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Oct" + "'", str39, "Oct");
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 12 + "'", int56 == 12);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 12 + "'", int66 == 12);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Oct" + "'", str71, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 11 + "'", int75 == 11);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTimeFieldArray78);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        int int11 = property4.getMinimumValueOverall();
        int int12 = property4.getMinimumValue();
        java.lang.String str13 = property4.getName();
        int int14 = property4.get();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        int int47 = property46.getMinimumValue();
        java.util.Locale locale48 = null;
        int int49 = property46.getMaximumShortTextLength(locale48);
        org.joda.time.YearMonth yearMonth51 = property46.addToCopy((int) (short) 1);
        boolean boolean52 = yearMonth3.equals((java.lang.Object) yearMonth51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        int int59 = yearMonth56.size();
        org.joda.time.YearMonth yearMonth61 = yearMonth56.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        int int63 = yearMonth56.indexOf(dateTimeFieldType62);
        int int64 = yearMonth56.getYear();
        boolean boolean65 = yearMonth51.isBefore((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.YearMonth yearMonth67 = yearMonth56.minus(readablePeriod66);
        org.joda.time.YearMonth yearMonth70 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.YearMonth yearMonth72 = yearMonth70.withYear((int) (byte) 1);
        boolean boolean73 = yearMonth67.equals((java.lang.Object) yearMonth72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.YearMonth yearMonth77 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology76);
        org.joda.time.YearMonth.Property property78 = yearMonth77.monthOfYear();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.YearMonth yearMonth82 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology81);
        org.joda.time.YearMonth yearMonth84 = yearMonth82.minusYears((int) (short) 0);
        int int85 = yearMonth82.size();
        org.joda.time.YearMonth yearMonth87 = yearMonth82.plusMonths((int) (byte) 10);
        int int88 = property78.compareTo((org.joda.time.ReadablePartial) yearMonth82);
        org.joda.time.DateTimeZone dateTimeZone89 = null;
        org.joda.time.Interval interval90 = yearMonth82.toInterval(dateTimeZone89);
        org.joda.time.YearMonth yearMonth92 = yearMonth82.minusYears((int) (short) 0);
        java.lang.String str93 = yearMonth82.toString();
        org.joda.time.YearMonth yearMonth94 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology95 = yearMonth94.getChronology();
        org.joda.time.YearMonth yearMonth96 = yearMonth82.withChronologyRetainFields(chronology95);
        org.joda.time.YearMonth yearMonth97 = new org.joda.time.YearMonth((java.lang.Object) yearMonth72, chronology95);
        java.lang.String str98 = yearMonth97.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(yearMonth84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(yearMonth87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(yearMonth92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "0097-10" + "'", str93, "0097-10");
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertNotNull(yearMonth96);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "0001-12" + "'", str98, "0001-12");
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        java.lang.String str42 = yearMonth38.toString();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.YearMonth yearMonth44 = yearMonth38.minus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.YearMonth yearMonth46 = yearMonth38.minus(readablePeriod45);
        org.joda.time.YearMonth yearMonth48 = yearMonth38.plusYears(11);
        org.joda.time.YearMonth yearMonth50 = yearMonth48.withYear((int) ' ');
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0097-10" + "'", str42, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertNotNull(yearMonth50);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth.Property property14 = yearMonth9.year();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth yearMonth31 = yearMonth29.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        int int38 = yearMonth35.size();
        boolean boolean39 = yearMonth31.isAfter((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth.Property property44 = yearMonth43.monthOfYear();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology47);
        org.joda.time.YearMonth yearMonth50 = yearMonth48.minusYears((int) (short) 0);
        int int51 = yearMonth48.size();
        org.joda.time.YearMonth yearMonth53 = yearMonth48.plusMonths((int) (byte) 10);
        int int54 = property44.compareTo((org.joda.time.ReadablePartial) yearMonth48);
        org.joda.time.Chronology chronology55 = yearMonth48.getChronology();
        org.joda.time.YearMonth yearMonth56 = yearMonth35.withChronologyRetainFields(chronology55);
        int int57 = yearMonth18.compareTo((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology60);
        org.joda.time.YearMonth.Property property62 = yearMonth61.monthOfYear();
        int int63 = property62.getMaximumValue();
        java.util.Locale locale64 = null;
        int int65 = property62.getMaximumShortTextLength(locale64);
        java.util.Locale locale66 = null;
        int int67 = property62.getMaximumTextLength(locale66);
        org.joda.time.DurationField durationField68 = property62.getRangeDurationField();
        java.util.Locale locale69 = null;
        java.lang.String str70 = property62.getAsShortText(locale69);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property62.getFieldType();
        org.joda.time.YearMonth yearMonth73 = yearMonth18.withField(dateTimeFieldType71, 11);
        boolean boolean74 = yearMonth9.isSupported(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 12 + "'", int63 == 12);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Oct" + "'", str70, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.YearMonth yearMonth20 = yearMonth8.plus(readablePeriod19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth.Property property25 = yearMonth24.monthOfYear();
        int int26 = property25.getMaximumValue();
        java.util.Locale locale27 = null;
        int int28 = property25.getMaximumShortTextLength(locale27);
        java.util.Locale locale29 = null;
        int int30 = property25.getMaximumTextLength(locale29);
        org.joda.time.DurationField durationField31 = property25.getRangeDurationField();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property25.getAsShortText(locale32);
        int int34 = property25.getMinimumValueOverall();
        java.util.Locale locale36 = null;
        org.joda.time.YearMonth yearMonth37 = property25.setCopy("9", locale36);
        org.joda.time.YearMonth.Property property38 = yearMonth37.monthOfYear();
        java.util.Locale locale39 = null;
        int int40 = property38.getMaximumTextLength(locale39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property38.getFieldType();
        org.joda.time.YearMonth yearMonth43 = yearMonth20.withField(dateTimeFieldType41, 8);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(yearMonth43);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonth8.getFieldTypes();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        boolean boolean40 = yearMonth32.isAfter((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth yearMonth51 = yearMonth49.minusYears((int) (short) 0);
        int int52 = yearMonth49.size();
        org.joda.time.YearMonth yearMonth54 = yearMonth49.plusMonths((int) (byte) 10);
        int int55 = property45.compareTo((org.joda.time.ReadablePartial) yearMonth49);
        org.joda.time.Chronology chronology56 = yearMonth49.getChronology();
        org.joda.time.YearMonth yearMonth57 = yearMonth36.withChronologyRetainFields(chronology56);
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((long) (short) 1, chronology56);
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((java.lang.Object) yearMonth8, chronology56);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth yearMonth65 = yearMonth63.minusYears((int) (short) 0);
        int int66 = yearMonth63.size();
        org.joda.time.YearMonth yearMonth68 = yearMonth63.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        int int70 = yearMonth63.indexOf(dateTimeFieldType69);
        org.joda.time.YearMonth yearMonth72 = yearMonth63.plusMonths((-1));
        org.joda.time.YearMonth yearMonth74 = yearMonth72.withMonthOfYear((int) (byte) 10);
        org.joda.time.YearMonth yearMonth76 = yearMonth74.withYear((int) '4');
        org.joda.time.YearMonth yearMonth78 = yearMonth74.plusMonths(1970);
        boolean boolean79 = yearMonth8.isEqual((org.joda.time.ReadablePartial) yearMonth74);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertNotNull(yearMonth76);
        org.junit.Assert.assertNotNull(yearMonth78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addToCopy((int) (short) 10);
        int[] intArray13 = yearMonth12.getValues();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.YearMonth yearMonth15 = yearMonth12.plus(readablePeriod14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = yearMonth15.getFieldTypes();
        int int17 = yearMonth15.getYear();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[98, 8]");
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 98 + "'", int17 == 98);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        java.lang.String str9 = property4.getName();
        java.lang.String str10 = property4.getAsString();
        java.lang.String str11 = property4.getAsString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "monthOfYear" + "'", str9, "monthOfYear");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "10" + "'", str10, "10");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10" + "'", str11, "10");
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(97, (-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property4.getAsShortText(locale11);
        java.lang.String str13 = property4.getAsText();
        java.util.Locale locale14 = null;
        int int15 = property4.getMaximumTextLength(locale14);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Oct" + "'", str12, "Oct");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "October" + "'", str13, "October");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy(100);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth.Property property17 = yearMonth16.monthOfYear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        int int24 = yearMonth21.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth21.plusMonths((int) (byte) 10);
        int int27 = property17.compareTo((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        boolean boolean34 = yearMonth21.isAfter((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = yearMonth31.toString(dateTimeFormatter35);
        boolean boolean37 = property4.equals((java.lang.Object) str36);
        java.util.Locale locale38 = null;
        int int39 = property4.getMaximumTextLength(locale38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth.Property property44 = yearMonth43.monthOfYear();
        int int45 = property44.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField46 = property44.getField();
        java.util.Locale locale47 = null;
        int int48 = property44.getMaximumTextLength(locale47);
        org.joda.time.YearMonth yearMonth50 = property44.addToCopy(2020);
        boolean boolean51 = property4.equals((java.lang.Object) 2020);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0097-10" + "'", str36, "0097-10");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) (short) 100);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(2020, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField11 = property4.getField();
        int int12 = property4.getMaximumValue();
        org.joda.time.YearMonth yearMonth14 = property4.setCopy((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property4.getFieldType();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property4.getAsText(locale16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        int int23 = property22.getMaximumValue();
        java.util.Locale locale24 = null;
        int int25 = property22.getMaximumShortTextLength(locale24);
        java.util.Locale locale26 = null;
        int int27 = property22.getMaximumTextLength(locale26);
        java.util.Locale locale28 = null;
        int int29 = property22.getMaximumTextLength(locale28);
        java.lang.String str30 = property22.getAsText();
        boolean boolean31 = property4.equals((java.lang.Object) property22);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        int int38 = yearMonth35.size();
        org.joda.time.YearMonth yearMonth40 = yearMonth35.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = yearMonth35.getFieldTypes();
        int[] intArray42 = yearMonth35.getValues();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology50);
        org.joda.time.YearMonth yearMonth53 = yearMonth51.minusYears((int) (short) 0);
        int int54 = yearMonth51.size();
        org.joda.time.YearMonth yearMonth56 = yearMonth51.plusMonths((int) (byte) 10);
        int int57 = property47.compareTo((org.joda.time.ReadablePartial) yearMonth51);
        org.joda.time.Chronology chronology58 = yearMonth51.getChronology();
        org.joda.time.YearMonth yearMonth59 = org.joda.time.YearMonth.now(chronology58);
        org.joda.time.YearMonth yearMonth60 = org.joda.time.YearMonth.now(chronology58);
        org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth((java.lang.Object) yearMonth35, chronology58);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.YearMonth yearMonth65 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology64);
        org.joda.time.YearMonth yearMonth67 = yearMonth65.minusYears((int) (short) 0);
        int int68 = yearMonth65.size();
        org.joda.time.YearMonth yearMonth70 = yearMonth65.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = null;
        int int72 = yearMonth65.indexOf(dateTimeFieldType71);
        org.joda.time.YearMonth yearMonth74 = yearMonth65.plusMonths((-1));
        boolean boolean76 = yearMonth74.equals((java.lang.Object) 1);
        org.joda.time.YearMonth yearMonth78 = new org.joda.time.YearMonth((long) 100);
        boolean boolean79 = yearMonth74.isBefore((org.joda.time.ReadablePartial) yearMonth78);
        boolean boolean80 = yearMonth35.isAfter((org.joda.time.ReadablePartial) yearMonth78);
        org.joda.time.YearMonth yearMonth82 = yearMonth78.plusYears((int) ' ');
        int int83 = property22.compareTo((org.joda.time.ReadablePartial) yearMonth82);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 12 + "'", int12 == 12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "October" + "'", str17, "October");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "October" + "'", str30, "October");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 10]");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(yearMonth82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth.Property property14 = yearMonth9.year();
        int int15 = property14.getMinimumValue();
        org.joda.time.DurationField durationField16 = property14.getDurationField();
        java.lang.String str17 = property14.getAsShortText();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-292275054) + "'", int15 == (-292275054));
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "97" + "'", str17, "97");
    }

    @Test
    @Ignore
  public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        int int8 = yearMonth5.size();
        org.joda.time.YearMonth yearMonth10 = yearMonth5.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonth5.indexOf(dateTimeFieldType11);
        org.joda.time.YearMonth yearMonth14 = yearMonth5.plusMonths((-1));
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.Interval interval26 = yearMonth18.toInterval();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        int int37 = yearMonth18.get(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth5.property(dateTimeFieldType36);
        org.joda.time.Chronology chronology39 = yearMonth5.getChronology();
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth(chronology39);
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        org.joda.time.Interval interval48 = yearMonth45.toInterval();
        org.joda.time.Chronology chronology49 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth50 = yearMonth41.withChronologyRetainFields(chronology49);
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth(chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth40.withChronologyRetainFields(chronology49);
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((long) (short) 10, chronology49);
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth(chronology49);
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((long) 98, chronology49);
        org.joda.time.YearMonth yearMonth56 = org.joda.time.YearMonth.now(chronology49);
        int int57 = yearMonth56.getMonthOfYear();
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 11 + "'", int57 == 11);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        boolean boolean36 = yearMonth28.isAfter((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        int int51 = property41.compareTo((org.joda.time.ReadablePartial) yearMonth45);
        org.joda.time.Chronology chronology52 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth53 = yearMonth32.withChronologyRetainFields(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonth yearMonth56 = yearMonth53.withPeriodAdded(readablePeriod54, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = yearMonth56.indexOf(dateTimeFieldType57);
        boolean boolean59 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology67);
        org.joda.time.YearMonth yearMonth70 = yearMonth68.minusYears((int) (short) 0);
        int int71 = yearMonth68.size();
        org.joda.time.YearMonth yearMonth73 = yearMonth68.plusMonths((int) (byte) 10);
        int int74 = property64.compareTo((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean75 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean76 = yearMonth17.isAfter((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.YearMonth yearMonth78 = yearMonth17.plusMonths(2);
        int int79 = yearMonth78.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.Interval interval81 = yearMonth78.toInterval(dateTimeZone80);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = yearMonth78.getFieldType(1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(yearMonth78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 12 + "'", int79 == 12);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology15 = yearMonth8.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        org.joda.time.YearMonth.Property property37 = yearMonth19.property(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth8.property(dateTimeFieldType36);
        int int39 = property38.getMaximumValue();
        org.joda.time.YearMonth yearMonth41 = property38.addWrapFieldToCopy(12);
        org.joda.time.YearMonth yearMonth43 = property38.addToCopy((int) (short) 100);
        java.util.Locale locale44 = null;
        int int45 = property38.getMaximumTextLength(locale44);
        java.util.Locale locale46 = null;
        java.lang.String str47 = property38.getAsShortText(locale46);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Oct" + "'", str47, "Oct");
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonth yearMonth29 = yearMonth27.plus(readablePeriod28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonth yearMonth31 = yearMonth27.minus(readablePeriod30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth yearMonth43 = yearMonth41.minusYears((int) (short) 0);
        int int44 = yearMonth41.size();
        boolean boolean45 = yearMonth37.isAfter((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        int int60 = property50.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = yearMonth54.getChronology();
        org.joda.time.YearMonth yearMonth62 = yearMonth41.withChronologyRetainFields(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.YearMonth yearMonth65 = yearMonth62.withPeriodAdded(readablePeriod63, (int) 'a');
        org.joda.time.YearMonth yearMonth67 = yearMonth62.plusMonths(9);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.YearMonth yearMonth71 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology70);
        org.joda.time.YearMonth.Property property72 = yearMonth71.monthOfYear();
        int int73 = property72.getMaximumValue();
        java.lang.String str74 = property72.getAsShortText();
        java.util.Locale locale75 = null;
        java.lang.String str76 = property72.getAsShortText(locale75);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = property72.getFieldType();
        int int78 = yearMonth62.get(dateTimeFieldType77);
        int int79 = yearMonth27.get(dateTimeFieldType77);
        org.joda.time.Interval interval80 = yearMonth27.toInterval();
        int int82 = yearMonth27.getValue(1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 12 + "'", int73 == 12);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Oct" + "'", str74, "Oct");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Oct" + "'", str76, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 9 + "'", int82 == 9);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(10L);
        org.joda.time.YearMonth.Property property2 = yearMonth1.monthOfYear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth.Property property7 = yearMonth6.monthOfYear();
        int int8 = property7.getMaximumValue();
        java.util.Locale locale9 = null;
        int int10 = property7.getMaximumShortTextLength(locale9);
        java.util.Locale locale11 = null;
        int int12 = property7.getMaximumTextLength(locale11);
        java.lang.String str13 = property7.getName();
        org.joda.time.YearMonth yearMonth15 = property7.addWrapFieldToCopy(100);
        boolean boolean16 = yearMonth1.isEqual((org.joda.time.ReadablePartial) yearMonth15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.YearMonth yearMonth18 = yearMonth15.minus(readablePeriod17);
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        boolean boolean35 = yearMonth27.isAfter((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Interval interval36 = yearMonth27.toInterval();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minusYears((int) (short) 0);
        int int43 = yearMonth40.size();
        org.joda.time.YearMonth yearMonth45 = yearMonth40.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        int int47 = yearMonth40.indexOf(dateTimeFieldType46);
        org.joda.time.Interval interval48 = yearMonth40.toInterval();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology51);
        org.joda.time.YearMonth.Property property53 = yearMonth52.monthOfYear();
        int int54 = property53.getMaximumValue();
        java.lang.String str55 = property53.getAsShortText();
        java.util.Locale locale56 = null;
        java.lang.String str57 = property53.getAsShortText(locale56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property53.getFieldType();
        int int59 = yearMonth40.get(dateTimeFieldType58);
        org.joda.time.YearMonth.Property property60 = yearMonth27.property(dateTimeFieldType58);
        boolean boolean61 = yearMonth21.isSupported(dateTimeFieldType58);
        int int62 = yearMonth15.get(dateTimeFieldType58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField64 = yearMonth15.getField(9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 9");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 12 + "'", int54 == 12);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Oct" + "'", str55, "Oct");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Oct" + "'", str57, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) 1970);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.YearMonth yearMonth4 = yearMonth2.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        org.joda.time.YearMonth yearMonth15 = yearMonth10.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        int int17 = yearMonth10.indexOf(dateTimeFieldType16);
        org.joda.time.YearMonth yearMonth19 = yearMonth10.plusMonths((-1));
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        int int30 = yearMonth23.indexOf(dateTimeFieldType29);
        org.joda.time.Interval interval31 = yearMonth23.toInterval();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth.Property property36 = yearMonth35.monthOfYear();
        int int37 = property36.getMaximumValue();
        java.lang.String str38 = property36.getAsShortText();
        java.util.Locale locale39 = null;
        java.lang.String str40 = property36.getAsShortText(locale39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property36.getFieldType();
        int int42 = yearMonth23.get(dateTimeFieldType41);
        org.joda.time.YearMonth.Property property43 = yearMonth10.property(dateTimeFieldType41);
        org.joda.time.Chronology chronology44 = yearMonth10.getChronology();
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth(chronology44);
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        org.joda.time.Interval interval53 = yearMonth50.toInterval();
        org.joda.time.Chronology chronology54 = yearMonth50.getChronology();
        org.joda.time.YearMonth yearMonth55 = yearMonth46.withChronologyRetainFields(chronology54);
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth(chronology54);
        org.joda.time.YearMonth yearMonth57 = yearMonth45.withChronologyRetainFields(chronology54);
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((long) (short) 10, chronology54);
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth(chronology54);
        org.joda.time.YearMonth yearMonth60 = new org.joda.time.YearMonth((long) 98, chronology54);
        org.joda.time.YearMonth yearMonth61 = org.joda.time.YearMonth.now(chronology54);
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((java.lang.Object) yearMonth4, chronology54);
        org.junit.Assert.assertNotNull(yearMonth4);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 12 + "'", int37 == 12);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Oct" + "'", str38, "Oct");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Oct" + "'", str40, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertNotNull(yearMonth61);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addToCopy((int) (short) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        boolean boolean31 = yearMonth18.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = yearMonth28.toString(dateTimeFormatter32);
        int int34 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.YearMonth yearMonth35 = property4.getYearMonth();
        java.lang.String str36 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth38 = property4.addToCopy(0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0097-10" + "'", str33, "0097-10");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Oct" + "'", str36, "Oct");
        org.junit.Assert.assertNotNull(yearMonth38);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        java.lang.String str6 = yearMonth3.toString();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.minusYears(3);
        java.lang.String str9 = yearMonth8.toString();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0097-10" + "'", str6, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0094-10" + "'", str9, "0094-10");
    }

    @Test
    @Ignore
  public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth.Property property5 = yearMonth4.monthOfYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        org.joda.time.YearMonth yearMonth14 = yearMonth9.plusMonths((int) (byte) 10);
        int int15 = property5.compareTo((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth yearMonth16 = property5.getYearMonth();
        java.lang.String str17 = property5.getAsText();
        org.joda.time.YearMonth yearMonth18 = property5.getYearMonth();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        boolean boolean37 = yearMonth29.isAfter((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth.Property property42 = yearMonth41.monthOfYear();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        int int49 = yearMonth46.size();
        org.joda.time.YearMonth yearMonth51 = yearMonth46.plusMonths((int) (byte) 10);
        int int52 = property42.compareTo((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.Chronology chronology53 = yearMonth46.getChronology();
        org.joda.time.YearMonth yearMonth54 = yearMonth33.withChronologyRetainFields(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.YearMonth yearMonth57 = yearMonth54.withPeriodAdded(readablePeriod55, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        int int59 = yearMonth57.indexOf(dateTimeFieldType58);
        boolean boolean60 = yearMonth22.isEqual((org.joda.time.ReadablePartial) yearMonth57);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology63);
        org.joda.time.YearMonth.Property property65 = yearMonth64.monthOfYear();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.YearMonth yearMonth69 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology68);
        org.joda.time.YearMonth yearMonth71 = yearMonth69.minusYears((int) (short) 0);
        int int72 = yearMonth69.size();
        org.joda.time.YearMonth yearMonth74 = yearMonth69.plusMonths((int) (byte) 10);
        int int75 = property65.compareTo((org.joda.time.ReadablePartial) yearMonth69);
        boolean boolean76 = yearMonth22.isEqual((org.joda.time.ReadablePartial) yearMonth69);
        boolean boolean77 = yearMonth18.isAfter((org.joda.time.ReadablePartial) yearMonth22);
        boolean boolean78 = yearMonth0.isEqual((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.YearMonth yearMonth80 = yearMonth0.plus(readablePeriod79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.YearMonth yearMonth82 = yearMonth0.minus(readablePeriod81);
        org.joda.time.YearMonth yearMonth84 = yearMonth0.minusYears((int) (short) -1);
        int[] intArray85 = yearMonth84.getValues();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "October" + "'", str17, "October");
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertNotNull(yearMonth82);
        org.junit.Assert.assertNotNull(yearMonth84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[2021, 11]");
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 8);
        int int3 = node1.getIntProp(15);
        node1.detachChildren();
        java.lang.String str5 = node1.toStringTree();
        boolean boolean6 = node1.isDelProp();
        boolean boolean7 = node1.isInc();
        boolean boolean8 = node1.isHook();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 8.0\n" + "'", str5, "NUMBER 8.0\n");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isObjectLit();
        boolean boolean5 = node3.isFunction();
        boolean boolean6 = node3.wasEmptyNode();
        boolean boolean7 = node3.isTypeOf();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node28 = node10.useSourceInfoFrom(node24);
        boolean boolean29 = node28.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isReturn();
        boolean boolean40 = node36.isNE();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(4095, node28, node31, node36, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node44 = null;
        int int45 = node28.getIndexOfChild(node44);
        boolean boolean46 = node28.isNE();
        com.google.javascript.rhino.Node node47 = node3.srcrefTree(node28);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        node1.setVarArgs(false);
        boolean boolean8 = node1.isFromExterns();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        node1.setSourceFileForTesting("STRING ");
        boolean boolean17 = node1.isAssign();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 49, 39, (int) '#');
        com.google.javascript.rhino.Node node22 = node21.getLastSibling();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean27 = node26.isObjectLit();
        boolean boolean28 = node26.isFunction();
        boolean boolean29 = node26.wasEmptyNode();
        boolean boolean30 = node26.isTypeOf();
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildrenAfter(node22, node26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        boolean boolean14 = node1.isIn();
        boolean boolean15 = node1.isNE();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.Node node5 = node1.getLastSibling();
        node1.setVarArgs(true);
        boolean boolean8 = node1.isExprResult();
        boolean boolean9 = node1.isLocalResultCall();
        // The following exception was thrown during execution in test generation
        try {
            node1.setDouble(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  0 [var_args_name: 1] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("");
        boolean boolean72 = node71.isOnlyModifiesThisCall();
        boolean boolean73 = node71.isEmpty();
        boolean boolean74 = node71.isArrayLit();
        com.google.javascript.rhino.Node node75 = node57.useSourceInfoFrom(node71);
        boolean boolean76 = node71.hasChildren();
        com.google.javascript.rhino.Node node77 = node32.copyInformationFrom(node71);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("");
        boolean boolean80 = node79.isOnlyModifiesThisCall();
        boolean boolean81 = node79.isEmpty();
        boolean boolean82 = node79.isArrayLit();
        boolean boolean83 = node79.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node84 = node71.srcref(node79);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node85 = node71.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(41);
        boolean boolean2 = node1.isTypeOf();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        node8.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node20 = node8.getAncestor(0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node20.siblings();
        node20.putIntProp(12, 43);
        node20.setSourceFileForTesting("Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeIterable21);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        int int25 = node22.getLength();
        node22.addSuppression("STRING ");
        boolean boolean28 = node22.isDec();
        node22.setType(41);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isRegExp();
        java.lang.String str6 = node1.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable7 = node1.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor8 = ancestorIterable7.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator9 = ancestorIterable7.spliterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor10 = ancestorIterable7.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor11 = ancestorIterable7.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator12 = ancestorIterable7.spliterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "STRING \n" + "'", str6, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable7);
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertNotNull(nodeSpliterator9);
        org.junit.Assert.assertNotNull(nodeItor10);
        org.junit.Assert.assertNotNull(nodeItor11);
        org.junit.Assert.assertNotNull(nodeSpliterator12);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isCatch();
        java.lang.String str5 = node1.getSourceFileName();
        node1.setType((int) ' ');
        node1.setSourceFileForTesting("TYPEOF 0\n    STRING \n");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        node11.setVarArgs(false);
        boolean boolean18 = node11.isFromExterns();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node11.setDirectives((java.util.Set<java.lang.String>) strSet22);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet22);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        boolean boolean47 = node36.isGetElem();
        boolean boolean48 = node36.isCall();
        com.google.javascript.rhino.Node node49 = node36.cloneTree();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("STRING  0");
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100, node52, 54, 35);
        java.lang.String str59 = node55.toString(false, false, true);
        com.google.javascript.rhino.Node node60 = node49.useSourceInfoIfMissingFromForTree(node55);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "OR" + "'", str59, "OR");
        org.junit.Assert.assertNotNull(node60);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable2 = node1.getAncestors();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(ancestorIterable2);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node22.isRegExp();
        com.google.javascript.rhino.Node node41 = node22.getLastSibling();
        boolean boolean42 = node22.isSwitch();
        boolean boolean43 = node22.isCatch();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (short) 10, 44, (int) (byte) 10);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        boolean boolean11 = node7.isDebugger();
        boolean boolean12 = node7.isName();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable13 = node7.getAncestors();
        com.google.javascript.rhino.Node node14 = null;
        // The following exception was thrown during execution in test generation
        try {
            node7.addChildrenToBack(node14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(ancestorIterable13);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node15.hasChildren();
        boolean boolean21 = node15.isNumber();
        boolean boolean22 = node15.isTry();
        com.google.javascript.rhino.Node node23 = node15.cloneTree();
        com.google.javascript.rhino.Node node24 = node15.cloneNode();
        java.lang.Appendable appendable25 = null;
        // The following exception was thrown during execution in test generation
        try {
            node15.appendStringTree(appendable25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = null;
        node8.setJSDocInfo(jSDocInfo14);
        boolean boolean16 = node8.isWhile();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        node19.setSourceEncodedPosition(4095);
        boolean boolean22 = node19.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node19.getStaticSourceFile();
        boolean boolean24 = node19.isAssignAdd();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        node26.setSourceEncodedPosition(4095);
        boolean boolean29 = node26.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node26.getStaticSourceFile();
        com.google.javascript.rhino.Node node31 = node19.copyInformationFromForTree(node26);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        boolean boolean34 = node33.isOnlyModifiesThisCall();
        boolean boolean35 = node33.isEmpty();
        boolean boolean36 = node33.isArrayLit();
        com.google.javascript.rhino.Node node37 = node19.useSourceInfoFrom(node33);
        boolean boolean38 = node37.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        boolean boolean41 = node40.isOnlyModifiesThisCall();
        boolean boolean42 = node40.isEmpty();
        boolean boolean43 = node40.isArrayLit();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        boolean boolean46 = node45.isOnlyModifiesThisCall();
        boolean boolean47 = node45.isEmpty();
        boolean boolean48 = node45.isReturn();
        boolean boolean49 = node45.isNE();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(4095, node37, node40, node45, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node53 = null;
        int int54 = node37.getIndexOfChild(node53);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node58 = node37.clonePropsFrom(node56);
        node56.setQuotedString();
        java.lang.String[] strArray62 = new java.lang.String[] { "STRING ", "Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nTYPEOF 0\n    STRING \n\n\nSubtree1: STRING \n\n\nSubtree2: TYPEOF 0\n    STRING \n" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        node56.setDirectives((java.util.Set<java.lang.String>) strSet63);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet63);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(staticSourceFile30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isDelProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        boolean boolean65 = node23.isNumber();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        boolean boolean58 = node56.isEmpty();
        boolean boolean59 = node56.isArrayLit();
        com.google.javascript.rhino.Node node60 = node42.useSourceInfoFrom(node56);
        java.lang.String str61 = node39.checkTreeEquals(node42);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        boolean boolean64 = node63.isOnlyModifiesThisCall();
        boolean boolean65 = node63.isEmpty();
        boolean boolean66 = node63.isReturn();
        boolean boolean67 = node63.isEmpty();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node63.siblings();
        com.google.javascript.rhino.Node node69 = node39.clonePropsFrom(node63);
        node63.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node72 = node63.getParent();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING \n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING \n" + "'", str61, "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING \n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node72);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        boolean boolean58 = node56.isEmpty();
        boolean boolean59 = node56.isArrayLit();
        com.google.javascript.rhino.Node node60 = node42.useSourceInfoFrom(node56);
        boolean boolean61 = node60.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        boolean boolean64 = node63.isOnlyModifiesThisCall();
        boolean boolean65 = node63.isEmpty();
        boolean boolean66 = node63.isArrayLit();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        boolean boolean69 = node68.isOnlyModifiesThisCall();
        boolean boolean70 = node68.isEmpty();
        boolean boolean71 = node68.isReturn();
        boolean boolean72 = node68.isNE();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(4095, node60, node63, node68, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        node77.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(36, node75, node77, node84);
        java.lang.String str86 = node77.toString();
        com.google.javascript.rhino.Node node87 = node37.useSourceInfoFrom(node77);
        node37.setLength(409700);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "STRING  0" + "'", str86, "STRING  0");
        org.junit.Assert.assertNotNull(node87);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("STRING  0");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, node2, 54, 35);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean10 = node9.isTypeOf();
        boolean boolean11 = node9.isInc();
        com.google.javascript.rhino.Node node12 = node9.cloneTree();
        com.google.javascript.rhino.Node node13 = node2.copyInformationFrom(node12);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        boolean boolean23 = node18.isAssignAdd();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        com.google.javascript.rhino.Node node30 = node18.copyInformationFromForTree(node25);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = node32.isOnlyModifiesThisCall();
        boolean boolean34 = node32.isEmpty();
        boolean boolean35 = node32.isArrayLit();
        com.google.javascript.rhino.Node node36 = node18.useSourceInfoFrom(node32);
        boolean boolean37 = node36.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("");
        boolean boolean45 = node44.isOnlyModifiesThisCall();
        boolean boolean46 = node44.isEmpty();
        boolean boolean47 = node44.isReturn();
        boolean boolean48 = node44.isNE();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(4095, node36, node39, node44, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node52 = node15.useSourceInfoIfMissingFrom(node51);
        boolean boolean53 = node52.isNull();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("");
        boolean boolean56 = node55.isOnlyModifiesThisCall();
        boolean boolean57 = node55.isEmpty();
        boolean boolean58 = node55.isReturn();
        boolean boolean59 = node55.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType60 = node55.getJSType();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        node62.setSourceEncodedPosition(4095);
        boolean boolean65 = node62.isNot();
        boolean boolean66 = node62.isBreak();
        boolean boolean67 = node62.isTypeOf();
        boolean boolean68 = node62.isInc();
        boolean boolean69 = node62.isWhile();
        node62.setSourceEncodedPosition((-1));
        boolean boolean72 = node55.hasChild(node62);
        com.google.javascript.rhino.Node node73 = node52.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node74 = node12.srcrefTree(node52);
        boolean boolean75 = node74.isFor();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        boolean boolean7 = node1.isDec();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        boolean boolean14 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node9.copyInformationFromForTree(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node27 = node9.useSourceInfoFrom(node23);
        boolean boolean28 = node27.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node29 = node1.useSourceInfoFromForTree(node27);
        node1.setSourceEncodedPositionForTree(51);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        com.google.javascript.rhino.Node node28 = node8.getLastChild();
        boolean boolean29 = node8.isInstanceOf();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        node31.setSourceEncodedPosition(4095);
        boolean boolean34 = node31.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node31.getStaticSourceFile();
        boolean boolean36 = node31.isAssignAdd();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        boolean boolean41 = node38.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = node38.getStaticSourceFile();
        com.google.javascript.rhino.Node node43 = node31.copyInformationFromForTree(node38);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        boolean boolean46 = node45.isOnlyModifiesThisCall();
        boolean boolean47 = node45.isEmpty();
        boolean boolean48 = node45.isArrayLit();
        com.google.javascript.rhino.Node node49 = node31.useSourceInfoFrom(node45);
        boolean boolean50 = node31.isVarArgs();
        int int51 = node31.getType();
        node8.addChildToBack(node31);
        java.lang.Class<?> wildcardClass53 = node8.getClass();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(staticSourceFile42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 40 + "'", int51 == 40);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node39.isLabelName();
        boolean boolean41 = node39.isName();
        boolean boolean42 = node39.isFromExterns();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node4.isAnd();
        node4.setLength(4095);
        boolean boolean78 = node4.isDec();
        int int79 = node4.getType();
        boolean boolean80 = node4.isVoid();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 29 + "'", int79 == 29);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node4.isAnd();
        com.google.javascript.rhino.jstype.JSType jSType76 = node4.getJSType();
        boolean boolean77 = node4.isFalse();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 4, 32);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isTypeOf();
        int int12 = node6.getCharno();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        boolean boolean15 = node14.isOnlyModifiesThisCall();
        int int16 = node14.getSourceOffset();
        boolean boolean17 = node14.isExprResult();
        com.google.javascript.rhino.Node node18 = node6.srcref(node14);
        boolean boolean19 = node18.isNE();
        java.lang.String str20 = node18.toStringTree();
        com.google.javascript.rhino.Node node21 = node4.srcref(node18);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(40, node4, 30, 0);
        java.lang.Appendable appendable25 = null;
        // The following exception was thrown during execution in test generation
        try {
            node4.appendStringTree(appendable25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4095 + "'", int12 == 4095);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "STRING \n" + "'", str20, "STRING \n");
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        boolean boolean65 = node64.isExprResult();
        com.google.javascript.rhino.Node node66 = node64.removeFirstChild();
        node66.setCharno((int) (byte) -1);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable69 = node66.siblings();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(nodeIterable69);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 37.0 100\n");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable2 = node1.siblings();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(nodeIterable2);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        boolean boolean14 = node1.isNE();
        boolean boolean15 = node1.isThrow();
        boolean boolean16 = node1.isFor();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        com.google.javascript.rhino.Node node27 = node26.getLastSibling();
        boolean boolean28 = node27.isIf();
        com.google.javascript.rhino.Node node29 = node1.clonePropsFrom(node27);
        int int30 = node29.getCharno();
        int int31 = node29.getSourceOffset();
        boolean boolean32 = node29.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4095 + "'", int30 == 4095);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        boolean boolean7 = node1.isStringKey();
        boolean boolean8 = node1.isDec();
        node1.addSuppression("Node tree inequality:\nTree1:\nSTRING  [quoted: 1]\n\n\nTree2:\nNUMBER 37.0 100\n\n\nSubtree1: STRING  [quoted: 1]\n\n\nSubtree2: NUMBER 37.0 100\n");
        com.google.javascript.rhino.Node node11 = node1.getParent();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = node11.isSyntheticBlock();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node19.isUnscopedQualifiedName();
        boolean boolean21 = node19.isWhile();
        boolean boolean22 = node19.isComma();
        boolean boolean23 = node19.isTypeOf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesGlobalState();
        boolean boolean7 = sideEffectFlags0.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.Node node5 = node1.getLastSibling();
        node1.setVarArgs(true);
        node1.setCharno(49);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        com.google.javascript.rhino.Node node75 = node13.getFirstChild();
        boolean boolean76 = node13.isLabelName();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        node24.removeProp(53);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags32 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags32.setMutatesArguments();
        sideEffectFlags32.setReturnsTainted();
        sideEffectFlags32.setMutatesArguments();
        // The following exception was thrown during execution in test generation
        try {
            node24.setSideEffectFlags(sideEffectFlags32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        boolean boolean29 = node24.isAdd();
        // The following exception was thrown during execution in test generation
        try {
            double double30 = node24.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        node1.putBooleanProp(45, true);
        java.lang.Class<?> wildcardClass10 = node1.getClass();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node2 = node1.getLastSibling();
        java.lang.Appendable appendable3 = null;
        // The following exception was thrown during execution in test generation
        try {
            node2.appendStringTree(appendable3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray3, 12, 100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(53, nodeArray3);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(41, nodeArray3, (int) (byte) -1, 31);
        boolean boolean11 = node10.isFalse();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        boolean boolean6 = node1.isContinue();
        boolean boolean7 = node1.isSwitch();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        boolean boolean11 = node9.isEmpty();
        boolean boolean12 = node9.isReturn();
        boolean boolean13 = node9.isRegExp();
        java.lang.String str14 = node9.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable15 = node9.getAncestors();
        com.google.javascript.rhino.Node node16 = node1.copyInformationFromForTree(node9);
        boolean boolean17 = node1.isName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "STRING \n" + "'", str14, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        com.google.javascript.rhino.Node node4 = node1.removeFirstChild();
        boolean boolean5 = node1.isIf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        com.google.javascript.rhino.Node node11 = node1.srcrefTree(node7);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node26 = node20.removeFirstChild();
        boolean boolean27 = node20.isAnd();
        node20.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node32 = node20.getAncestor(0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node32.siblings();
        node32.putIntProp(12, 43);
        com.google.javascript.rhino.Node node37 = node11.useSourceInfoFromForTree(node32);
        com.google.javascript.rhino.Node node38 = node32.getNext();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node39 = node38.cloneNode();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        com.google.javascript.rhino.Node node4 = node1.removeFirstChild();
        boolean boolean5 = node1.isIf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        com.google.javascript.rhino.Node node11 = node1.srcrefTree(node7);
        boolean boolean12 = node1.isContinue();
        boolean boolean13 = node1.isFunction();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        boolean boolean22 = node1.isReturn();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node2.new FileLevelJsDocBuilder();
        boolean boolean22 = node2.isDefaultCase();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, (int) ' ', 53);
        node2.removeProp((int) (byte) -1);
        boolean boolean28 = node2.isLocalResultCall();
        boolean boolean29 = node2.isLabel();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node28 = node10.useSourceInfoFrom(node24);
        boolean boolean29 = node28.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isReturn();
        boolean boolean40 = node36.isNE();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(4095, node28, node31, node36, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node44 = node7.useSourceInfoIfMissingFrom(node43);
        node1.addChildrenToBack(node7);
        java.lang.String str46 = node7.getQualifiedName();
        boolean boolean47 = node7.isVoid();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable48 = node7.children();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeIterable48);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node2.new FileLevelJsDocBuilder();
        boolean boolean22 = node2.isDefaultCase();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, (int) ' ', 53);
        boolean boolean26 = node2.isQuotedString();
        boolean boolean27 = node2.isBreak();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isRegExp();
        boolean boolean34 = node2.hasChild(node29);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        boolean boolean41 = node33.isNE();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        boolean boolean44 = node43.isOnlyModifiesThisCall();
        boolean boolean45 = node43.isEmpty();
        boolean boolean46 = node43.isReturn();
        boolean boolean47 = node43.isRegExp();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(52, node33, node43);
        boolean boolean49 = node33.isSyntheticBlock();
        boolean boolean50 = node33.isInstanceOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.jstype.JSType jSType14 = node13.getJSType();
        node13.removeProp(0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(jSType14);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node39.isLabelName();
        boolean boolean41 = node39.isBlock();
        java.lang.String str45 = node39.toString(true, true, true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "TYPEOF 0" + "'", str45, "TYPEOF 0");
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node1.new FileLevelJsDocBuilder();
        boolean boolean21 = node1.isDefaultCase();
        boolean boolean22 = node1.isFalse();
        boolean boolean23 = node1.hasOneChild();
        boolean boolean24 = node1.wasEmptyNode();
        boolean boolean25 = node1.isCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        int int3 = node1.getSourceOffset();
        boolean boolean4 = node1.isNumber();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.clearAllFlags();
        boolean boolean5 = sideEffectFlags0.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node4.isAnd();
        node4.setLength(4095);
        node4.setLength(54);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean84 = node83.isTypeOf();
        boolean boolean85 = node83.isInc();
        com.google.javascript.rhino.Node node86 = node4.useSourceInfoIfMissingFrom(node83);
        boolean boolean87 = node86.isIn();
        int int88 = node86.getLength();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 54 + "'", int88 == 54);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        boolean boolean47 = node36.isGetElem();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        boolean boolean53 = node49.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node54 = node36.srcref(node49);
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        node54.setJSType(jSType55);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        boolean boolean59 = node58.isExprResult();
        boolean boolean60 = node58.isArrayLit();
        boolean boolean61 = node58.isThrow();
        boolean boolean62 = node54.isEquivalentTo(node58);
        // The following exception was thrown during execution in test generation
        try {
            node54.setSideEffectFlags((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 4095");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray5, 12, 100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(53, nodeArray5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100, nodeArray5);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(36, nodeArray5, (int) ' ', (int) (byte) 100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(46, nodeArray5, 1, (int) (short) 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isReturn();
        boolean boolean22 = node18.isRegExp();
        java.lang.String str23 = node18.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable24 = node18.getAncestors();
        boolean boolean25 = node18.isScript();
        boolean boolean26 = node18.isCatch();
        int int27 = node16.getIndexOfChild(node18);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "STRING \n" + "'", str23, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.Node node5 = node1.getLastSibling();
        com.google.javascript.rhino.Node node6 = node1.cloneNode();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        boolean boolean11 = node8.isReturn();
        boolean boolean12 = node8.isRegExp();
        com.google.javascript.rhino.Node node13 = node8.getLastSibling();
        boolean boolean14 = node13.isIn();
        boolean boolean15 = node13.isCatch();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        node19.setSourceEncodedPosition(4095);
        boolean boolean22 = node19.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node19.getStaticSourceFile();
        boolean boolean24 = node19.isAssignAdd();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        node26.setSourceEncodedPosition(4095);
        boolean boolean29 = node26.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node26.getStaticSourceFile();
        com.google.javascript.rhino.Node node31 = node19.copyInformationFromForTree(node26);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        boolean boolean34 = node33.isOnlyModifiesThisCall();
        boolean boolean35 = node33.isEmpty();
        boolean boolean36 = node33.isArrayLit();
        com.google.javascript.rhino.Node node37 = node19.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] { node19 };
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(32, nodeArray38);
        int int41 = node39.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        boolean boolean44 = node43.isOnlyModifiesThisCall();
        boolean boolean45 = node43.isEmpty();
        boolean boolean46 = node43.isReturn();
        boolean boolean47 = node43.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        boolean boolean53 = node49.isBreak();
        boolean boolean54 = node49.isIn();
        com.google.javascript.rhino.Node node55 = node43.useSourceInfoIfMissingFromForTree(node49);
        com.google.javascript.rhino.Node node56 = node39.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node58.getStaticSourceFile();
        boolean boolean63 = node58.isAssignAdd();
        java.util.Set<java.lang.String> strSet64 = node58.getDirectives();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("");
        node66.setSourceEncodedPosition(4095);
        boolean boolean69 = node66.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile70 = node66.getStaticSourceFile();
        node66.setVarArgs(false);
        boolean boolean73 = node66.isFromExterns();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("");
        node75.setSourceEncodedPosition(4095);
        boolean boolean78 = node75.isNot();
        com.google.javascript.rhino.Node node79 = node75.getLastSibling();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(37, node39, node58, node66, node79);
        boolean boolean81 = node79.isExprResult();
        // The following exception was thrown during execution in test generation
        try {
            node6.addChildBefore(node13, node79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(staticSourceFile30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(strSet64);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(staticSourceFile70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        boolean boolean17 = node8.isThrow();
        boolean boolean18 = node8.isCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        com.google.javascript.rhino.Node node28 = node8.getLastChild();
        boolean boolean29 = node8.isInstanceOf();
        boolean boolean30 = node8.hasOneChild();
        node8.setLength((int) (short) 10);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setReturnsTainted();
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isSetterDef();
        com.google.javascript.rhino.Node node5 = node1.getAncestor((int) (short) 0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder6 = node5.new FileLevelJsDocBuilder();
        boolean boolean7 = node5.isTrue();
        node5.setLineno(409700);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = node5.getExistingIntProp(4095);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 4095");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        boolean boolean11 = node10.isIf();
        boolean boolean12 = node10.hasMoreThanOneChild();
        node10.setVarArgs(true);
        java.lang.Appendable appendable15 = null;
        // The following exception was thrown during execution in test generation
        try {
            node10.appendStringTree(appendable15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        int int15 = node1.getIntProp(40);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isReturn();
        boolean boolean6 = node2.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        boolean boolean12 = node8.isBreak();
        boolean boolean13 = node8.isIn();
        com.google.javascript.rhino.Node node14 = node2.useSourceInfoIfMissingFromForTree(node8);
        node8.setSourceEncodedPositionForTree(39);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isReturn();
        boolean boolean22 = node18.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        boolean boolean28 = node24.isBreak();
        boolean boolean29 = node24.isIn();
        com.google.javascript.rhino.Node node30 = node18.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        boolean boolean45 = node32.isNE();
        boolean boolean46 = node32.isThrow();
        boolean boolean47 = node32.isFor();
        com.google.javascript.rhino.Node node48 = node24.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(0.0d);
        node50.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        boolean boolean55 = node54.isOnlyModifiesThisCall();
        boolean boolean56 = node54.isEmpty();
        boolean boolean57 = node54.isCatch();
        int int58 = node54.getSourceOffset();
        boolean boolean59 = node54.isHook();
        node50.addChildToBack(node54);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        node63.setSourceEncodedPosition(4095);
        boolean boolean66 = node63.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile67 = node63.getStaticSourceFile();
        boolean boolean68 = node63.isAssignAdd();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("");
        node70.setSourceEncodedPosition(4095);
        boolean boolean73 = node70.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = node70.getStaticSourceFile();
        com.google.javascript.rhino.Node node75 = node63.copyInformationFromForTree(node70);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        boolean boolean78 = node77.isOnlyModifiesThisCall();
        boolean boolean79 = node77.isEmpty();
        boolean boolean80 = node77.isArrayLit();
        com.google.javascript.rhino.Node node81 = node63.useSourceInfoFrom(node77);
        com.google.javascript.rhino.Node[] nodeArray82 = new com.google.javascript.rhino.Node[] { node63 };
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(32, nodeArray82);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("");
        boolean boolean86 = node85.isOnlyModifiesThisCall();
        boolean boolean87 = node85.isEmpty();
        boolean boolean88 = node85.isReturn();
        com.google.javascript.rhino.Node node89 = node83.useSourceInfoFromForTree(node85);
        boolean boolean90 = node85.isAdd();
        node85.putBooleanProp(38, false);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((int) (short) 10, node8, node48, node50, node85);
        double double95 = node50.getDouble();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable96 = node50.children();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(staticSourceFile67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(staticSourceFile74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(nodeArray82);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNotNull(nodeIterable96);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        node21.setVarArgs(false);
        boolean boolean28 = node21.isFromExterns();
        boolean boolean29 = node21.isNull();
        boolean boolean30 = node21.isFalse();
        boolean boolean31 = node15.hasChild(node21);
        com.google.javascript.rhino.jstype.JSType jSType32 = node15.getJSType();
        boolean boolean33 = node15.isOr();
        boolean boolean34 = node15.isQuotedString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        node21.setVarArgs(false);
        boolean boolean28 = node21.isFromExterns();
        boolean boolean29 = node21.isNull();
        boolean boolean30 = node21.isFalse();
        boolean boolean31 = node15.hasChild(node21);
        boolean boolean32 = node21.isAssignAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        boolean boolean11 = node7.isDebugger();
        boolean boolean12 = node7.isName();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("STRING  0");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100, node16, 54, 35);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean24 = node23.isTypeOf();
        boolean boolean25 = node23.isInc();
        com.google.javascript.rhino.Node node26 = node23.cloneTree();
        com.google.javascript.rhino.Node node27 = node16.copyInformationFrom(node26);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node50 = node32.useSourceInfoFrom(node46);
        boolean boolean51 = node50.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        boolean boolean54 = node53.isOnlyModifiesThisCall();
        boolean boolean55 = node53.isEmpty();
        boolean boolean56 = node53.isArrayLit();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        boolean boolean59 = node58.isOnlyModifiesThisCall();
        boolean boolean60 = node58.isEmpty();
        boolean boolean61 = node58.isReturn();
        boolean boolean62 = node58.isNE();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(4095, node50, node53, node58, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node66 = node29.useSourceInfoIfMissingFrom(node65);
        boolean boolean67 = node66.isNull();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("");
        boolean boolean70 = node69.isOnlyModifiesThisCall();
        boolean boolean71 = node69.isEmpty();
        boolean boolean72 = node69.isReturn();
        boolean boolean73 = node69.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType74 = node69.getJSType();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("");
        node76.setSourceEncodedPosition(4095);
        boolean boolean79 = node76.isNot();
        boolean boolean80 = node76.isBreak();
        boolean boolean81 = node76.isTypeOf();
        boolean boolean82 = node76.isInc();
        boolean boolean83 = node76.isWhile();
        node76.setSourceEncodedPosition((-1));
        boolean boolean86 = node69.hasChild(node76);
        com.google.javascript.rhino.Node node87 = node66.copyInformationFrom(node76);
        com.google.javascript.rhino.Node node88 = node26.srcrefTree(node66);
        node7.putProp(49, (java.lang.Object) node66);
        com.google.javascript.rhino.Node node90 = node66.getNext();
        // The following exception was thrown during execution in test generation
        try {
            int int91 = node90.getLength();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(jSType74);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNull(node90);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        boolean boolean28 = node8.isVar();
        node8.setString("Node tree inequality:\nTree1:\nNUMBER 37.0 100\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: NUMBER 37.0 100\n\n\nSubtree2: STRING  0\n");
        boolean boolean31 = node8.isNoSideEffectsCall();
        com.google.javascript.rhino.InputId inputId32 = node8.getInputId();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(inputId32);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        node1.setVarArgs(false);
        com.google.javascript.rhino.Node node8 = node1.getParent();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node1.getStaticSourceFile();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(35, "STRING  4\n");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node15.getStaticSourceFile();
        boolean boolean20 = node15.isAssignAdd();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        node22.setSourceEncodedPosition(4095);
        boolean boolean25 = node22.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node22.getStaticSourceFile();
        com.google.javascript.rhino.Node node27 = node15.copyInformationFromForTree(node22);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isArrayLit();
        com.google.javascript.rhino.Node node33 = node15.useSourceInfoFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] { node15 };
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(32, nodeArray34);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        boolean boolean38 = node37.isOnlyModifiesThisCall();
        boolean boolean39 = node37.isEmpty();
        boolean boolean40 = node37.isReturn();
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoFromForTree(node37);
        boolean boolean42 = node35.isCall();
        com.google.javascript.rhino.Node node43 = node35.getLastChild();
        com.google.javascript.rhino.Node node44 = node43.cloneNode();
        boolean boolean45 = node44.isNew();
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildrenAfter(node12, node44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        boolean boolean6 = node1.isRegExp();
        com.google.javascript.rhino.Node node7 = node1.cloneNode();
        node7.setCharno(32);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING  0\n    NUMBER 0.0 [synthetic: 1]\n");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        boolean boolean28 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        node30.setSourceEncodedPosition(4095);
        boolean boolean33 = node30.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node30.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node23.copyInformationFromForTree(node30);
        com.google.javascript.rhino.Node node36 = node30.removeFirstChild();
        boolean boolean37 = node30.isAnd();
        boolean boolean38 = node30.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        boolean boolean41 = node40.isOnlyModifiesThisCall();
        boolean boolean42 = node40.isEmpty();
        boolean boolean43 = node40.isArrayLit();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        boolean boolean46 = node45.isOnlyModifiesThisCall();
        boolean boolean47 = node45.isSetterDef();
        com.google.javascript.rhino.Node node48 = node40.srcref(node45);
        node30.addChildToFront(node40);
        com.google.javascript.rhino.Node node50 = node30.getLastChild();
        boolean boolean51 = node30.isInstanceOf();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node53.getStaticSourceFile();
        boolean boolean58 = node53.isAssignAdd();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        boolean boolean63 = node60.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = node60.getStaticSourceFile();
        com.google.javascript.rhino.Node node65 = node53.copyInformationFromForTree(node60);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isArrayLit();
        com.google.javascript.rhino.Node node71 = node53.useSourceInfoFrom(node67);
        boolean boolean72 = node53.isVarArgs();
        int int73 = node53.getType();
        node30.addChildToBack(node53);
        int int75 = node1.getIndexOfChild(node53);
        boolean boolean76 = node1.isFalse();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(staticSourceFile64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 40 + "'", int73 == 40);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        boolean boolean6 = node1.isAssign();
        boolean boolean7 = node1.isArrayLit();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        com.google.javascript.rhino.Node node9 = node1.cloneTree();
        boolean boolean10 = node9.isLabel();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        java.util.Set<java.lang.String> strSet7 = node1.getDirectives();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node10 = node1.copyInformationFrom(node9);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        boolean boolean13 = node12.isOnlyModifiesThisCall();
        int int14 = node12.getSourceOffset();
        com.google.javascript.rhino.Node node16 = node12.getChildAtIndex((int) (byte) 0);
        java.lang.String str17 = node10.checkTreeEquals(node12);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        node19.setSourceEncodedPosition(4095);
        boolean boolean22 = node19.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node19.getStaticSourceFile();
        boolean boolean24 = node19.isAssignAdd();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        node26.setSourceEncodedPosition(4095);
        boolean boolean29 = node26.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node26.getStaticSourceFile();
        com.google.javascript.rhino.Node node31 = node19.copyInformationFromForTree(node26);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        boolean boolean34 = node33.isOnlyModifiesThisCall();
        boolean boolean35 = node33.isEmpty();
        boolean boolean36 = node33.isArrayLit();
        com.google.javascript.rhino.Node node37 = node19.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        node39.setVarArgs(false);
        boolean boolean46 = node39.isFromExterns();
        boolean boolean47 = node39.isNull();
        boolean boolean48 = node39.isFalse();
        boolean boolean49 = node33.hasChild(node39);
        boolean boolean50 = node39.isWith();
        java.lang.String str51 = node12.checkTreeEquals(node39);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(staticSourceFile30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        boolean boolean17 = node8.isThrow();
        boolean boolean18 = node8.isVoid();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        boolean boolean7 = node1.isDec();
        boolean boolean8 = node1.isInstanceOf();
        boolean boolean9 = node1.isName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isRegExp();
        com.google.javascript.rhino.Node node6 = node1.getLastSibling();
        java.util.Set<java.lang.String> strSet7 = node1.getDirectives();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(strSet7);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        node1.putBooleanProp((int) (byte) 10, false);
        boolean boolean11 = node1.isCall();
        boolean boolean12 = node1.isTrue();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        boolean boolean47 = node36.isGetElem();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        boolean boolean53 = node49.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node54 = node36.srcref(node49);
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        node54.setJSType(jSType55);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        boolean boolean59 = node58.isExprResult();
        boolean boolean60 = node58.isArrayLit();
        boolean boolean61 = node58.isThrow();
        boolean boolean62 = node54.isEquivalentTo(node58);
        boolean boolean63 = node54.isNew();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray4, 12, 100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(53, nodeArray4);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) '#', nodeArray4, (int) 'a', (int) (byte) 0);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(46, nodeArray4);
        org.junit.Assert.assertNotNull(nodeArray4);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        node1.putBooleanProp((int) (byte) 10, false);
        boolean boolean11 = node1.isBreak();
        boolean boolean12 = node1.hasMoreThanOneChild();
        boolean boolean13 = node1.isTrue();
        boolean boolean14 = node1.isInc();
        com.google.javascript.rhino.Node node15 = node1.getLastSibling();
        boolean boolean16 = node1.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node17 = node1.removeFirstChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        boolean boolean14 = node1.isThis();
        int int15 = node1.getCharno();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        boolean boolean22 = node17.isAssignAdd();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node29 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node35 = node17.useSourceInfoFrom(node31);
        boolean boolean36 = node17.isVarArgs();
        int int37 = node17.getType();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("");
        boolean boolean56 = node55.isOnlyModifiesThisCall();
        boolean boolean57 = node55.isEmpty();
        boolean boolean58 = node55.isArrayLit();
        com.google.javascript.rhino.Node node59 = node41.useSourceInfoFrom(node55);
        boolean boolean60 = node59.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        boolean boolean63 = node62.isOnlyModifiesThisCall();
        boolean boolean64 = node62.isEmpty();
        boolean boolean65 = node62.isArrayLit();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isReturn();
        boolean boolean71 = node67.isNE();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(4095, node59, node62, node67, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("");
        node76.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(36, node74, node76, node83);
        boolean boolean85 = node83.isTypeOf();
        boolean boolean86 = node83.isGetterDef();
        boolean boolean87 = node83.isFor();
        boolean boolean88 = node17.isEquivalentToTyped(node83);
        com.google.javascript.rhino.Node node89 = node1.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.Node node91 = com.google.javascript.rhino.Node.newString("");
        node91.setSourceEncodedPosition(4095);
        boolean boolean94 = node91.isNot();
        boolean boolean95 = node91.isBreak();
        com.google.javascript.rhino.Node node96 = node91.removeFirstChild();
        boolean boolean98 = node91.getBooleanProp(39);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node99 = node1.removeChildAfter(node91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4095 + "'", int15 == 4095);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 40 + "'", int37 == 40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(node96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 54, 38, 24);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        boolean boolean30 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node25.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node43 = node25.useSourceInfoFrom(node39);
        boolean boolean44 = node43.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isReturn();
        boolean boolean55 = node51.isNE();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node43, node46, node51, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(36, node58, node60, node67);
        boolean boolean69 = node67.isTypeOf();
        boolean boolean70 = node67.isGetterDef();
        boolean boolean71 = node67.isFor();
        boolean boolean72 = node1.isEquivalentToTyped(node67);
        java.lang.Object obj74 = node1.getProp(0);
        boolean boolean75 = node1.isSyntheticBlock();
        node1.setLength(35);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("");
        boolean boolean80 = node79.isOnlyModifiesThisCall();
        boolean boolean81 = node79.isEmpty();
        com.google.javascript.rhino.Node node82 = node79.removeFirstChild();
        boolean boolean83 = node79.isCall();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable84 = node79.siblings();
        boolean boolean85 = node79.isGetProp();
        com.google.javascript.rhino.Node node86 = node1.useSourceInfoIfMissingFromForTree(node79);
        boolean boolean87 = node1.isComma();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(nodeIterable84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER 37.0 100\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: NUMBER 37.0 100\n\n\nSubtree2: STRING  0\n");
        boolean boolean2 = node1.isIf();
        boolean boolean3 = node1.isDefaultCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        boolean boolean11 = node1.isFromExterns();
        boolean boolean12 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        node1.setStaticSourceFile(staticSourceFile13);
        java.util.Set<java.lang.String> strSet15 = node1.getDirectives();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node1.getJSDocInfo();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNull(jSDocInfo16);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        java.util.Set<java.lang.String> strSet7 = node1.getDirectives();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node10 = node1.copyInformationFrom(node9);
        node10.setCharno(48);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isInstanceOf();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        node2.putProp((int) '4', (java.lang.Object) node8);
        boolean boolean12 = node8.isDebugger();
        boolean boolean13 = node8.isVar();
        node8.setString("STRING ");
        com.google.javascript.rhino.Node node16 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 0, node8, node16, 42, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node72.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("");
        node78.setSourceEncodedPosition(4095);
        boolean boolean81 = node78.isNot();
        java.lang.String str85 = node78.toString(true, true, false);
        boolean boolean86 = node78.isWith();
        node78.putIntProp((int) (byte) 10, 0);
        node78.setSourceEncodedPositionForTree(409700);
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node((int) (byte) 100, node78);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node93 = node72.removeChildAfter(node92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "STRING  0" + "'", str85, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node16.hasChildren();
        boolean boolean22 = node16.isNumber();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        boolean boolean29 = node24.isAssignAdd();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        node31.setSourceEncodedPosition(4095);
        boolean boolean34 = node31.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node31.getStaticSourceFile();
        com.google.javascript.rhino.Node node36 = node24.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node37 = node31.removeFirstChild();
        boolean boolean38 = node31.isAnd();
        boolean boolean39 = node31.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        boolean boolean42 = node41.isOnlyModifiesThisCall();
        boolean boolean43 = node41.isEmpty();
        boolean boolean44 = node41.isArrayLit();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isSetterDef();
        com.google.javascript.rhino.Node node49 = node41.srcref(node46);
        node31.addChildToFront(node41);
        com.google.javascript.rhino.Node node51 = node31.getLastChild();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        boolean boolean57 = node53.isBreak();
        boolean boolean58 = node53.isTypeOf();
        int int59 = node53.getCharno();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("");
        boolean boolean62 = node61.isOnlyModifiesThisCall();
        int int63 = node61.getSourceOffset();
        boolean boolean64 = node61.isExprResult();
        com.google.javascript.rhino.Node node65 = node53.srcref(node61);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        node67.setSourceEncodedPosition(4095);
        boolean boolean70 = node67.isCall();
        boolean boolean71 = node53.isEquivalentTo(node67);
        node53.setIsSyntheticBlock(true);
        node53.setSourceFileForTesting("STRING \n");
        boolean boolean76 = node53.isSwitch();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("");
        node78.setSourceEncodedPosition(4095);
        boolean boolean81 = node78.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile82 = node78.getStaticSourceFile();
        boolean boolean83 = node78.isAssignAdd();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("");
        node85.setSourceEncodedPosition(4095);
        boolean boolean88 = node85.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile89 = node85.getStaticSourceFile();
        com.google.javascript.rhino.Node node90 = node78.copyInformationFromForTree(node85);
        boolean boolean91 = node78.isNE();
        boolean boolean92 = node78.isThrow();
        boolean boolean93 = node78.wasEmptyNode();
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node(50, node16, node31, node53, node78);
        java.lang.String str95 = node78.getQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4095 + "'", int59 == 4095);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(staticSourceFile82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(staticSourceFile89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str95);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING  0");
        boolean boolean2 = node1.isDefaultCase();
        node1.addSuppression("STRING \n");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node6.getStaticSourceFile();
        boolean boolean11 = node6.isAssignAdd();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        com.google.javascript.rhino.Node node18 = node6.copyInformationFromForTree(node13);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        boolean boolean21 = node20.isOnlyModifiesThisCall();
        boolean boolean22 = node20.isEmpty();
        boolean boolean23 = node20.isArrayLit();
        com.google.javascript.rhino.Node node24 = node6.useSourceInfoFrom(node20);
        boolean boolean25 = node24.isUnscopedQualifiedName();
        boolean boolean26 = node24.isWhile();
        boolean boolean27 = node24.isComma();
        int int28 = node24.getLineno();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        node30.setSourceEncodedPosition(4095);
        boolean boolean33 = node30.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node30.getStaticSourceFile();
        boolean boolean35 = node30.isAssignAdd();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        node37.setSourceEncodedPosition(4095);
        boolean boolean40 = node37.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = node37.getStaticSourceFile();
        com.google.javascript.rhino.Node node42 = node30.copyInformationFromForTree(node37);
        boolean boolean43 = node30.isNE();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(16, 30, 0);
        node30.addChildToFront(node47);
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildAfter(node24, node47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(staticSourceFile41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 4, 32);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        node5.setSourceEncodedPosition(4095);
        boolean boolean8 = node5.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node5.getStaticSourceFile();
        node5.setVarArgs(false);
        boolean boolean12 = node5.isFromExterns();
        boolean boolean13 = node5.isNull();
        node5.setIsSyntheticBlock(false);
        boolean boolean16 = node3.hasChild(node5);
        node5.removeProp((int) (byte) 1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isDec();
        int int17 = node8.getType();
        java.lang.String str18 = node8.toString();
        boolean boolean19 = node8.isAnd();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        boolean boolean25 = node24.isAnd();
        node8.addChildToFront(node24);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        node29.setSourceEncodedPosition(4095);
        boolean boolean32 = node29.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = node29.getStaticSourceFile();
        boolean boolean34 = node29.isAssignAdd();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        node36.setSourceEncodedPosition(4095);
        boolean boolean39 = node36.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = node36.getStaticSourceFile();
        com.google.javascript.rhino.Node node41 = node29.copyInformationFromForTree(node36);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        boolean boolean44 = node43.isOnlyModifiesThisCall();
        boolean boolean45 = node43.isEmpty();
        boolean boolean46 = node43.isArrayLit();
        com.google.javascript.rhino.Node node47 = node29.useSourceInfoFrom(node43);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder48 = node29.new FileLevelJsDocBuilder();
        boolean boolean49 = node29.isDefaultCase();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) 0, node29, (int) ' ', 53);
        node29.removeProp((int) (byte) -1);
        java.lang.String str58 = node29.toString(false, true, false);
        boolean boolean59 = node29.isInc();
        int int60 = node24.getIndexOfChild(node29);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 40 + "'", int17 == 40);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "STRING  0" + "'", str18, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(staticSourceFile33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(staticSourceFile40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "STRING " + "'", str58, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        node8.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node20 = node8.getAncestor(0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node20.siblings();
        int int22 = node20.getLength();
        node20.removeProp((int) (short) 0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isCall();
        boolean boolean5 = node1.isAssign();
        boolean boolean6 = node1.hasOneChild();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        boolean boolean11 = node8.isReturn();
        boolean boolean12 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        boolean boolean18 = node14.isBreak();
        boolean boolean19 = node14.isIn();
        com.google.javascript.rhino.Node node20 = node8.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node20.cloneNode();
        com.google.javascript.rhino.Node node22 = node1.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        boolean boolean29 = node24.isAssignAdd();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        node31.setSourceEncodedPosition(4095);
        boolean boolean34 = node31.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node31.getStaticSourceFile();
        com.google.javascript.rhino.Node node36 = node24.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node37 = node31.removeFirstChild();
        boolean boolean38 = node31.isAnd();
        node31.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node43 = node31.getAncestor(0);
        com.google.javascript.rhino.Node node44 = node22.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean45 = node44.isAdd();
        boolean boolean46 = node44.isName();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        node51.setSourceEncodedPosition(4095);
        boolean boolean54 = node51.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = node51.getStaticSourceFile();
        boolean boolean56 = node51.isAssignAdd();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node58.getStaticSourceFile();
        com.google.javascript.rhino.Node node63 = node51.copyInformationFromForTree(node58);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        boolean boolean66 = node65.isOnlyModifiesThisCall();
        boolean boolean67 = node65.isEmpty();
        boolean boolean68 = node65.isArrayLit();
        com.google.javascript.rhino.Node node69 = node51.useSourceInfoFrom(node65);
        boolean boolean70 = node69.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        boolean boolean73 = node72.isOnlyModifiesThisCall();
        boolean boolean74 = node72.isEmpty();
        boolean boolean75 = node72.isArrayLit();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        boolean boolean78 = node77.isOnlyModifiesThisCall();
        boolean boolean79 = node77.isEmpty();
        boolean boolean80 = node77.isReturn();
        boolean boolean81 = node77.isNE();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(4095, node69, node72, node77, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node85 = node48.useSourceInfoIfMissingFrom(node84);
        boolean boolean86 = node85.isOptionalArg();
        com.google.javascript.rhino.Node node87 = node44.srcref(node85);
        node85.setVarArgs(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(staticSourceFile55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(52);
        com.google.javascript.rhino.jstype.JSType jSType2 = node1.getJSType();
        org.junit.Assert.assertNull(jSType2);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        boolean boolean39 = node38.isNull();
        node38.setLineno(0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        boolean boolean44 = node43.isOnlyModifiesThisCall();
        boolean boolean45 = node43.isEmpty();
        boolean boolean46 = node43.isReturn();
        boolean boolean47 = node43.isNE();
        boolean boolean48 = node43.isContinue();
        boolean boolean49 = node43.isSwitch();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isReturn();
        boolean boolean55 = node51.isRegExp();
        java.lang.String str56 = node51.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable57 = node51.getAncestors();
        com.google.javascript.rhino.Node node58 = node43.copyInformationFromForTree(node51);
        node38.addChildToBack(node43);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "STRING \n" + "'", str56, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable57);
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setReturnsTainted();
        int int6 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setThrows();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node19.isUnscopedQualifiedName();
        boolean boolean21 = node19.isWhile();
        boolean boolean22 = node19.isComma();
        boolean boolean23 = node19.isDefaultCase();
        int int24 = node19.getSourcePosition();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(12, "STRING  0");
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(36);
        boolean boolean12 = node11.isFromExterns();
        boolean boolean13 = node11.isComma();
        com.google.javascript.rhino.Node node14 = node9.useSourceInfoFromForTree(node11);
        java.lang.String str15 = node1.checkTreeEquals(node9);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0\n\n\nTree2:\nEQ STRING  0\n\n\nSubtree1: STRING  0\n\n\nSubtree2: EQ STRING  0\n" + "'", str15, "Node tree inequality:\nTree1:\nSTRING  0\n\n\nTree2:\nEQ STRING  0\n\n\nSubtree1: STRING  0\n\n\nSubtree2: EQ STRING  0\n");
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        boolean boolean30 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node25.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node43 = node25.useSourceInfoFrom(node39);
        boolean boolean44 = node43.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isReturn();
        boolean boolean55 = node51.isNE();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node43, node46, node51, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(36, node58, node60, node67);
        boolean boolean69 = node67.isTypeOf();
        boolean boolean70 = node67.isGetterDef();
        boolean boolean71 = node67.isFor();
        boolean boolean72 = node1.isEquivalentToTyped(node67);
        java.lang.Object obj74 = node1.getProp(0);
        boolean boolean75 = node1.isSyntheticBlock();
        node1.setLength(35);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("");
        boolean boolean80 = node79.isOnlyModifiesThisCall();
        boolean boolean81 = node79.isEmpty();
        com.google.javascript.rhino.Node node82 = node79.removeFirstChild();
        boolean boolean83 = node79.isCall();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable84 = node79.siblings();
        boolean boolean85 = node79.isGetProp();
        com.google.javascript.rhino.Node node86 = node1.useSourceInfoIfMissingFromForTree(node79);
        boolean boolean87 = node86.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(nodeIterable84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node41 = node20.clonePropsFrom(node39);
        boolean boolean42 = node39.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        boolean boolean6 = node1.isRegExp();
        node1.setLength((int) '#');
        com.google.javascript.rhino.Node node9 = node1.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node10 = node9.getNext();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        boolean boolean47 = node36.isGetElem();
        boolean boolean48 = node36.isCall();
        com.google.javascript.rhino.Node node49 = node36.cloneTree();
        boolean boolean50 = node36.isInstanceOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.Node node5 = node1.getLastSibling();
        boolean boolean6 = node5.isCase();
        node5.setQuotedString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(48);
        sideEffectFlags1.clearAllFlags();
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesArguments();
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        boolean boolean6 = node1.isRegExp();
        node1.setLength((int) '#');
        boolean boolean9 = node1.isDefaultCase();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node10 = node1.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        node1.setString("STRING \n");
        boolean boolean6 = node1.isUnscopedQualifiedName();
        boolean boolean8 = node1.getBooleanProp(15);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100);
        boolean boolean2 = node1.isFromExterns();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isTypeOf();
        boolean boolean5 = node3.isInc();
        com.google.javascript.rhino.Node node6 = node3.cloneTree();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder7 = node6.new FileLevelJsDocBuilder();
        int int8 = node6.getSourceOffset();
        boolean boolean9 = node6.isIf();
        boolean boolean10 = node6.isName();
        boolean boolean11 = node6.isReturn();
        boolean boolean12 = node6.isVarArgs();
        boolean boolean13 = node6.isSwitch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        boolean boolean55 = node42.isWith();
        node33.addChildToFront(node42);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node58.getStaticSourceFile();
        boolean boolean63 = node58.isAssignAdd();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = node65.getStaticSourceFile();
        com.google.javascript.rhino.Node node70 = node58.copyInformationFromForTree(node65);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        boolean boolean73 = node72.isOnlyModifiesThisCall();
        boolean boolean74 = node72.isEmpty();
        boolean boolean75 = node72.isArrayLit();
        com.google.javascript.rhino.Node node76 = node58.useSourceInfoFrom(node72);
        boolean boolean77 = node72.hasChildren();
        com.google.javascript.rhino.Node node78 = node33.copyInformationFrom(node72);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("");
        node80.setSourceEncodedPosition(4095);
        boolean boolean83 = node80.isNot();
        boolean boolean84 = node80.isBreak();
        boolean boolean85 = node80.isTypeOf();
        boolean boolean86 = node80.isInc();
        boolean boolean87 = node80.isWhile();
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newString("");
        node89.setSourceEncodedPosition(4095);
        boolean boolean92 = node89.isNot();
        boolean boolean93 = node89.isBreak();
        boolean boolean94 = node89.isIn();
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node((int) 'a', node78, node80, node89);
        boolean boolean96 = node80.isSetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(staticSourceFile69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        node1.setVarArgs(false);
        boolean boolean8 = node1.isFromExterns();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        node1.setSourceFileForTesting("STRING ");
        boolean boolean17 = node1.isAdd();
        boolean boolean18 = node1.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "STRING ");
        node1.addChildrenToBack(node21);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable23 = node21.getAncestors();
        boolean boolean24 = node21.isGetElem();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(ancestorIterable23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 'a');
        int int3 = node1.getIntProp(32);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isObjectLit();
        com.google.javascript.rhino.Node node5 = node3.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = node5.isAssignAdd();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        node9.detachChildren();
        int int11 = node9.getSourcePosition();
        node9.setLength(31);
        boolean boolean14 = node9.isStringKey();
        com.google.javascript.rhino.InputId inputId15 = node9.getInputId();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(inputId15);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 16, (int) (byte) -1, 0);
        boolean boolean4 = node3.isWhile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        boolean boolean58 = node56.isEmpty();
        boolean boolean59 = node56.isArrayLit();
        com.google.javascript.rhino.Node node60 = node42.useSourceInfoFrom(node56);
        boolean boolean61 = node60.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        boolean boolean64 = node63.isOnlyModifiesThisCall();
        boolean boolean65 = node63.isEmpty();
        boolean boolean66 = node63.isArrayLit();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        boolean boolean69 = node68.isOnlyModifiesThisCall();
        boolean boolean70 = node68.isEmpty();
        boolean boolean71 = node68.isReturn();
        boolean boolean72 = node68.isNE();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(4095, node60, node63, node68, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        node77.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(36, node75, node77, node84);
        java.lang.String str86 = node77.toString();
        com.google.javascript.rhino.Node node87 = node37.useSourceInfoFrom(node77);
        boolean boolean88 = node87.isBlock();
        boolean boolean89 = node87.isSetterDef();
        boolean boolean90 = node87.hasOneChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "STRING  0" + "'", str86, "STRING  0");
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        boolean boolean6 = node1.isRegExp();
        node1.setLength((int) '#');
        boolean boolean9 = node1.isDefaultCase();
        boolean boolean10 = node1.isGetterDef();
        com.google.javascript.rhino.InputId inputId11 = null;
        node1.setInputId(inputId11);
        com.google.javascript.rhino.Node node13 = node1.getNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        node1.setVarArgs(false);
        boolean boolean8 = node1.isFromExterns();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        node1.setSourceFileForTesting("STRING ");
        boolean boolean17 = node1.isAdd();
        boolean boolean18 = node1.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "STRING ");
        node1.addChildrenToBack(node21);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable23 = node21.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor24 = ancestorIterable23.iterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(ancestorIterable23);
        org.junit.Assert.assertNotNull(nodeItor24);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        node1.setString("STRING \n");
        int int6 = node1.getSourceOffset();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        boolean boolean15 = node2.isNE();
        node2.setVarArgs(false);
        boolean boolean18 = node2.isStringKey();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "TYPEOF", "STRING \n", "Node tree inequality:\nTree1:\nSTRING  [quoted: 1]\n\n\nTree2:\nNUMBER 37.0 100\n\n\nSubtree1: STRING  [quoted: 1]\n\n\nSubtree2: NUMBER 37.0 100\n" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet25);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 8);
        int int31 = node29.getIntProp(15);
        node29.setSourceEncodedPositionForTree(35);
        boolean boolean34 = node29.isSwitch();
        boolean boolean35 = node29.isVoid();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        boolean boolean38 = node37.isOnlyModifiesThisCall();
        boolean boolean39 = node37.isWhile();
        com.google.javascript.rhino.Node node40 = node37.getNext();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = node37.getStaticSourceFile();
        com.google.javascript.rhino.Node node42 = node37.cloneNode();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("");
        boolean boolean45 = node44.isOnlyModifiesThisCall();
        boolean boolean46 = node44.isEmpty();
        boolean boolean47 = node44.isReturn();
        boolean boolean48 = node44.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        boolean boolean54 = node50.isBreak();
        boolean boolean55 = node50.isIn();
        com.google.javascript.rhino.Node node56 = node44.useSourceInfoIfMissingFromForTree(node50);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node58.getStaticSourceFile();
        boolean boolean63 = node58.isAssignAdd();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = node65.getStaticSourceFile();
        com.google.javascript.rhino.Node node70 = node58.copyInformationFromForTree(node65);
        boolean boolean71 = node58.isNE();
        boolean boolean72 = node58.isThrow();
        boolean boolean73 = node58.isFor();
        com.google.javascript.rhino.Node node74 = node50.useSourceInfoFrom(node58);
        boolean boolean75 = node50.isOptionalArg();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (byte) 100, node2, node29, node42, node50, 32, 39);
        com.google.javascript.rhino.Node node79 = node2.detachFromParent();
        node79.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(staticSourceFile41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(staticSourceFile69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 8);
        int int3 = node1.getIntProp(15);
        node1.detachChildren();
        java.lang.String str5 = node1.toStringTree();
        boolean boolean6 = node1.isDelProp();
        int int7 = node1.getType();
        com.google.javascript.rhino.Node node8 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node9 = node1.copyInformationFromForTree(node8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 8.0\n" + "'", str5, "NUMBER 8.0\n");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 39 + "'", int7 == 39);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        boolean boolean11 = node10.isIf();
        boolean boolean12 = node10.isArrayLit();
        boolean boolean13 = node10.isObjectLit();
        boolean boolean14 = node10.wasEmptyNode();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        boolean boolean20 = node16.isBreak();
        boolean boolean21 = node16.isTypeOf();
        boolean boolean22 = node16.isDec();
        boolean boolean23 = node16.isInstanceOf();
        com.google.javascript.rhino.Node node24 = node10.clonePropsFrom(node16);
        java.lang.String str25 = node16.toString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "STRING  0" + "'", str25, "STRING  0");
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("");
        boolean boolean72 = node71.isOnlyModifiesThisCall();
        boolean boolean73 = node71.isEmpty();
        boolean boolean74 = node71.isArrayLit();
        com.google.javascript.rhino.Node node75 = node57.useSourceInfoFrom(node71);
        boolean boolean76 = node71.hasChildren();
        com.google.javascript.rhino.Node node77 = node32.copyInformationFrom(node71);
        boolean boolean78 = node32.isThis();
        boolean boolean79 = node32.isLabelName();
        java.lang.String str80 = node32.getString();
        com.google.javascript.rhino.Node node81 = node32.cloneTree();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(node81);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        boolean boolean47 = node36.isGetElem();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        boolean boolean53 = node49.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node54 = node36.srcref(node49);
        boolean boolean55 = node54.isAssign();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(41);
        boolean boolean2 = node1.isTry();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node7.getStaticSourceFile();
        boolean boolean12 = node7.isAssignAdd();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node19 = node7.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        boolean boolean22 = node21.isOnlyModifiesThisCall();
        boolean boolean23 = node21.isEmpty();
        boolean boolean24 = node21.isArrayLit();
        com.google.javascript.rhino.Node node25 = node7.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] { node7 };
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(32, nodeArray26);
        int int29 = node27.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isReturn();
        boolean boolean35 = node31.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        node37.setSourceEncodedPosition(4095);
        boolean boolean40 = node37.isNot();
        boolean boolean41 = node37.isBreak();
        boolean boolean42 = node37.isIn();
        com.google.javascript.rhino.Node node43 = node31.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.Node node44 = node27.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        boolean boolean49 = node46.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node46.getStaticSourceFile();
        boolean boolean51 = node46.isAssignAdd();
        java.util.Set<java.lang.String> strSet52 = node46.getDirectives();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        node54.setSourceEncodedPosition(4095);
        boolean boolean57 = node54.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = node54.getStaticSourceFile();
        node54.setVarArgs(false);
        boolean boolean61 = node54.isFromExterns();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        node63.setSourceEncodedPosition(4095);
        boolean boolean66 = node63.isNot();
        com.google.javascript.rhino.Node node67 = node63.getLastSibling();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(37, node27, node46, node54, node67);
        boolean boolean69 = node68.isExprResult();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(49, node68, (int) (byte) 10, (int) (short) 10);
        boolean boolean73 = node72.isAssign();
        com.google.javascript.rhino.Node node75 = node72.getAncestor(0);
        boolean boolean76 = node1.isEquivalentToTyped(node75);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(45);
        com.google.javascript.rhino.Node node79 = node75.srcref(node78);
        boolean boolean80 = node79.isNull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(staticSourceFile58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isDec();
        int int17 = node8.getType();
        java.lang.String str18 = node8.toString();
        java.lang.Object obj20 = node8.getProp(4095);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 40 + "'", int17 == 40);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "STRING  0" + "'", str18, "STRING  0");
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        boolean boolean21 = node1.isCase();
        boolean boolean22 = node1.isWith();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        node16.setVarArgs(false);
        boolean boolean23 = node16.isFromExterns();
        boolean boolean24 = node16.isNull();
        boolean boolean25 = node16.isFalse();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        node27.setSourceEncodedPosition(4095);
        boolean boolean30 = node27.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node27.getStaticSourceFile();
        boolean boolean32 = node27.isAssignAdd();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("");
        node34.setSourceEncodedPosition(4095);
        boolean boolean37 = node34.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = node34.getStaticSourceFile();
        com.google.javascript.rhino.Node node39 = node27.copyInformationFromForTree(node34);
        com.google.javascript.rhino.Node node40 = node34.removeFirstChild();
        com.google.javascript.rhino.Node node41 = node16.useSourceInfoIfMissingFrom(node34);
        com.google.javascript.rhino.Node node42 = node14.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(45, node42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = node43.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SHEQ is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(staticSourceFile31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(staticSourceFile38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        com.google.javascript.rhino.Node[] nodeArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(41, nodeArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        node8.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node20 = node8.getAncestor(0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node20.siblings();
        node20.putIntProp(12, 43);
        java.lang.String str28 = node20.toString(true, false, true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "STRING  0" + "'", str28, "STRING  0");
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearSideEffectFlags();
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        boolean boolean65 = node42.isScript();
        boolean boolean66 = node42.isGetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isReturn();
        com.google.javascript.rhino.Node node29 = node23.useSourceInfoFromForTree(node25);
        boolean boolean30 = node25.isAdd();
        node25.putBooleanProp(38, false);
        boolean boolean34 = node25.isThis();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d);
        node36.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        boolean boolean41 = node40.isOnlyModifiesThisCall();
        boolean boolean42 = node40.isEmpty();
        boolean boolean43 = node40.isCatch();
        int int44 = node40.getSourceOffset();
        boolean boolean45 = node40.isHook();
        node36.addChildToBack(node40);
        boolean boolean47 = node36.isCase();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isReturn();
        boolean boolean53 = node49.isNE();
        boolean boolean54 = node49.isAssign();
        boolean boolean55 = node49.isArrayLit();
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = node49.getJSDocInfo();
        com.google.javascript.rhino.Node node57 = node49.cloneTree();
        boolean boolean58 = node49.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(43, node25, node36, node49, 53, (int) (short) 10);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(jSDocInfo56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        boolean boolean14 = node1.isAssign();
        int int15 = node1.getType();
        int int16 = node1.getSourcePosition();
        boolean boolean17 = node1.isGetterDef();
        boolean boolean18 = node1.isLabel();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        boolean boolean26 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        node28.setSourceEncodedPosition(4095);
        boolean boolean31 = node28.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = node28.getStaticSourceFile();
        com.google.javascript.rhino.Node node33 = node21.copyInformationFromForTree(node28);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        boolean boolean36 = node35.isOnlyModifiesThisCall();
        boolean boolean37 = node35.isEmpty();
        boolean boolean38 = node35.isArrayLit();
        com.google.javascript.rhino.Node node39 = node21.useSourceInfoFrom(node35);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] { node21 };
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(32, nodeArray40);
        int int43 = node41.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        boolean boolean46 = node45.isOnlyModifiesThisCall();
        boolean boolean47 = node45.isEmpty();
        boolean boolean48 = node45.isReturn();
        boolean boolean49 = node45.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        node51.setSourceEncodedPosition(4095);
        boolean boolean54 = node51.isNot();
        boolean boolean55 = node51.isBreak();
        boolean boolean56 = node51.isIn();
        com.google.javascript.rhino.Node node57 = node45.useSourceInfoIfMissingFromForTree(node51);
        com.google.javascript.rhino.Node node58 = node41.useSourceInfoFrom(node51);
        node58.putIntProp((int) (short) 10, 16);
        boolean boolean62 = node58.isCase();
        com.google.javascript.rhino.Node node63 = node58.getLastChild();
        com.google.javascript.rhino.Node node64 = node1.srcrefTree(node63);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(staticSourceFile32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        boolean boolean57 = node56.isNoSideEffectsCall();
        node56.setType(24);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node15.getStaticSourceFile();
        boolean boolean20 = node15.isAssignAdd();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        node22.setSourceEncodedPosition(4095);
        boolean boolean25 = node22.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node22.getStaticSourceFile();
        com.google.javascript.rhino.Node node27 = node15.copyInformationFromForTree(node22);
        boolean boolean28 = node15.isNE();
        boolean boolean29 = node15.isThrow();
        boolean boolean30 = node15.isFor();
        com.google.javascript.rhino.Node node31 = node7.useSourceInfoFrom(node15);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node65.isNE();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("");
        boolean boolean76 = node75.isOnlyModifiesThisCall();
        boolean boolean77 = node75.isEmpty();
        boolean boolean78 = node75.isReturn();
        boolean boolean79 = node75.isRegExp();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(52, node65, node75);
        com.google.javascript.rhino.Node node81 = node31.useSourceInfoIfMissingFrom(node65);
        com.google.javascript.rhino.Node node83 = node81.getAncestor(29);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(node83);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node39.hasMoreThanOneChild();
        boolean boolean41 = node39.isFor();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isFor();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        boolean boolean14 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node9.copyInformationFromForTree(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node27 = node9.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] { node9 };
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(32, nodeArray28);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isReturn();
        com.google.javascript.rhino.Node node35 = node29.useSourceInfoFromForTree(node31);
        boolean boolean36 = node31.isAdd();
        node31.putBooleanProp(38, false);
        java.lang.String str40 = node1.checkTreeEquals(node31);
        java.util.Set<java.lang.String> strSet41 = node1.getDirectives();
        int int42 = node1.getChildCount();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        boolean boolean62 = node58.isBreak();
        boolean boolean63 = node58.isTypeOf();
        int int64 = node58.getCharno();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("");
        boolean boolean67 = node66.isOnlyModifiesThisCall();
        int int68 = node66.getSourceOffset();
        boolean boolean69 = node66.isExprResult();
        com.google.javascript.rhino.Node node70 = node58.srcref(node66);
        boolean boolean71 = node70.isNE();
        com.google.javascript.rhino.Node node72 = node56.srcrefTree(node70);
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = node70.getJSDocInfo();
        boolean boolean74 = node70.isCase();
        node70.setLength(0);
        boolean boolean77 = node70.isWith();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4095 + "'", int64 == 4095);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        com.google.javascript.rhino.Node node4 = node1.removeFirstChild();
        boolean boolean5 = node1.isIf();
        boolean boolean6 = node1.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray5, 12, 100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(53, nodeArray5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100, nodeArray5);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(36, nodeArray5, (int) ' ', (int) (byte) 100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(54, nodeArray5, 4, 39);
        boolean boolean17 = node16.isSwitch();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        boolean boolean28 = node8.isBreak();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        boolean boolean36 = node23.isCase();
        boolean boolean37 = node23.isCase();
        boolean boolean38 = node23.isFalse();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        node40.setSourceEncodedPosition(4095);
        boolean boolean43 = node40.isNot();
        boolean boolean44 = node40.isBreak();
        boolean boolean45 = node40.isIn();
        boolean boolean46 = node40.isLabel();
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray52, 12, 100);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(53, nodeArray52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100, nodeArray52);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(36, nodeArray52, (int) ' ', (int) (byte) 100);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(54, nodeArray52, 4, 39);
        // The following exception was thrown during execution in test generation
        try {
            node23.addChildAfter(node40, node63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeArray52);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        boolean boolean29 = node22.isCall();
        boolean boolean30 = node22.isScript();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray4, 12, 100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(53, nodeArray4);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) '#', nodeArray4, (int) 'a', (int) (byte) 0);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(40, nodeArray4, (int) '4', 10);
        org.junit.Assert.assertNotNull(nodeArray4);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node1.new FileLevelJsDocBuilder();
        boolean boolean21 = node1.isDefaultCase();
        boolean boolean22 = node1.isFalse();
        boolean boolean23 = node1.isDec();
        com.google.javascript.rhino.Node node24 = node1.removeChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        int int65 = node23.getSideEffectFlags();
        boolean boolean66 = node23.isFromExterns();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        boolean boolean69 = node68.isOnlyModifiesThisCall();
        boolean boolean70 = node68.isEmpty();
        com.google.javascript.rhino.Node node71 = node68.removeFirstChild();
        com.google.javascript.rhino.Node node72 = node23.useSourceInfoFrom(node68);
        boolean boolean73 = node72.isFunction();
        boolean boolean74 = node72.isOptionalArg();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node32.isNE();
        boolean boolean41 = node32.isNE();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        boolean boolean44 = node43.isOnlyModifiesThisCall();
        boolean boolean45 = node43.isEmpty();
        boolean boolean46 = node43.isReturn();
        boolean boolean47 = node43.isNE();
        boolean boolean48 = node43.isContinue();
        boolean boolean49 = node43.isSwitch();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isReturn();
        boolean boolean55 = node51.isRegExp();
        java.lang.String str56 = node51.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable57 = node51.getAncestors();
        com.google.javascript.rhino.Node node58 = node43.copyInformationFromForTree(node51);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        boolean boolean63 = node60.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = node60.getStaticSourceFile();
        node60.setVarArgs(false);
        boolean boolean67 = node60.isFromExterns();
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        node60.setDirectives((java.util.Set<java.lang.String>) strSet71);
        com.google.javascript.rhino.Node node74 = node51.useSourceInfoFromForTree(node60);
        java.lang.Object obj76 = node60.getProp(37);
        com.google.javascript.rhino.Node node77 = node32.copyInformationFrom(node60);
        java.lang.String str78 = node32.getSourceFileName();
        boolean boolean79 = node32.isQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            node32.setDouble((double) 50);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "STRING \n" + "'", str56, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(staticSourceFile64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.InputId inputId6 = node1.getInputId();
        boolean boolean7 = node1.isIf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder40 = node32.new FileLevelJsDocBuilder();
        boolean boolean41 = node32.isComma();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(49);
        sideEffectFlags1.setThrows();
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        node1.setVarArgs(false);
        boolean boolean8 = node1.isFromExterns();
        boolean boolean9 = node1.isNull();
        boolean boolean10 = node1.isFalse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        boolean boolean17 = node12.isAssignAdd();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        node19.setSourceEncodedPosition(4095);
        boolean boolean22 = node19.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node19.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node12.copyInformationFromForTree(node19);
        com.google.javascript.rhino.Node node25 = node19.removeFirstChild();
        com.google.javascript.rhino.Node node26 = node1.useSourceInfoIfMissingFrom(node19);
        boolean boolean27 = node26.isNumber();
        boolean boolean28 = node26.isLocalResultCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        int int3 = node1.getSourceOffset();
        boolean boolean4 = node1.isLabel();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isEmpty();
        boolean boolean9 = node6.isArrayLit();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        boolean boolean12 = node11.isOnlyModifiesThisCall();
        boolean boolean13 = node11.isSetterDef();
        com.google.javascript.rhino.Node node14 = node6.srcref(node11);
        com.google.javascript.rhino.Node node15 = node14.getLastSibling();
        boolean boolean16 = node15.isIf();
        node15.setLength(4);
        boolean boolean19 = node15.isFunction();
        com.google.javascript.rhino.Node node20 = node1.useSourceInfoIfMissingFromForTree(node15);
        node15.putIntProp((int) (short) 0, 2);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags24 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags24.setMutatesGlobalState();
        sideEffectFlags24.setMutatesThis();
        sideEffectFlags24.setMutatesArguments();
        // The following exception was thrown during execution in test generation
        try {
            node15.setSideEffectFlags(sideEffectFlags24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean5 = node4.isBlock();
        boolean boolean6 = node4.isNE();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.Node node12 = node8.getLastSibling();
        node8.setVarArgs(true);
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node8.setJSType(jSType15);
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node8);
        boolean boolean18 = node4.isHook();
        boolean boolean19 = node4.isLabelName();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(46, node4);
        boolean boolean21 = node20.isTypeOf();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        com.google.javascript.rhino.Node node4 = node1.removeFirstChild();
        boolean boolean5 = node1.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = null;
        node1.setStaticSourceFile(staticSourceFile6);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        boolean boolean14 = node1.isThis();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node1.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        boolean boolean36 = node23.isCase();
        boolean boolean37 = node23.isCase();
        boolean boolean38 = node23.isFalse();
        boolean boolean39 = node23.isOr();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        boolean boolean38 = node20.hasChildren();
        node20.detachChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        java.lang.String str10 = node1.getQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 8);
        com.google.javascript.rhino.Node node2 = node1.getLastSibling();
        com.google.javascript.rhino.Node node3 = null;
        com.google.javascript.rhino.Node node4 = node1.getChildBefore(node3);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node15.hasChildren();
        boolean boolean21 = node15.isNumber();
        boolean boolean22 = node15.isTry();
        com.google.javascript.rhino.Node node23 = node15.cloneTree();
        boolean boolean24 = node23.isInc();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        boolean boolean65 = node64.isExprResult();
        boolean boolean66 = node64.isAdd();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile67 = node64.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(staticSourceFile67);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node15.hasChildren();
        boolean boolean21 = node15.isNumber();
        boolean boolean22 = node15.isTry();
        com.google.javascript.rhino.Node node23 = node15.cloneTree();
        com.google.javascript.rhino.Node node24 = node15.cloneNode();
        boolean boolean25 = node15.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray8, 12, 100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(53, nodeArray8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100, nodeArray8);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray8);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(409700, nodeArray8, 53, 2);
        node17.setLength(32);
        boolean boolean20 = node1.isEquivalentToTyped(node17);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        boolean boolean46 = node43.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        boolean boolean48 = node43.isAssignAdd();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        com.google.javascript.rhino.Node node55 = node43.copyInformationFromForTree(node50);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        boolean boolean58 = node57.isOnlyModifiesThisCall();
        boolean boolean59 = node57.isEmpty();
        boolean boolean60 = node57.isArrayLit();
        com.google.javascript.rhino.Node node61 = node43.useSourceInfoFrom(node57);
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] { node43 };
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(32, nodeArray62);
        int int65 = node63.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isReturn();
        boolean boolean71 = node67.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("");
        node73.setSourceEncodedPosition(4095);
        boolean boolean76 = node73.isNot();
        boolean boolean77 = node73.isBreak();
        boolean boolean78 = node73.isIn();
        com.google.javascript.rhino.Node node79 = node67.useSourceInfoIfMissingFromForTree(node73);
        com.google.javascript.rhino.Node node80 = node63.useSourceInfoFrom(node73);
        boolean boolean81 = node73.isNE();
        java.lang.String str82 = node39.checkTreeEquals(node73);
        boolean boolean83 = node39.isComma();
        java.lang.String str84 = node39.toStringTree();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n" + "'", str82, "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "TYPEOF 0\n    STRING \n" + "'", str84, "TYPEOF 0\n    STRING \n");
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        int int3 = node1.getSourceOffset();
        boolean boolean4 = node1.isLabel();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isEmpty();
        boolean boolean9 = node6.isArrayLit();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        boolean boolean12 = node11.isOnlyModifiesThisCall();
        boolean boolean13 = node11.isSetterDef();
        com.google.javascript.rhino.Node node14 = node6.srcref(node11);
        com.google.javascript.rhino.Node node15 = node14.getLastSibling();
        boolean boolean16 = node15.isIf();
        node15.setLength(4);
        boolean boolean19 = node15.isFunction();
        com.google.javascript.rhino.Node node20 = node1.useSourceInfoIfMissingFromForTree(node15);
        node15.putIntProp((int) (short) 0, 2);
        node15.setSourceEncodedPosition((int) (byte) 0);
        boolean boolean26 = node15.isBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType6 = node1.getJSType();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        boolean boolean12 = node8.isBreak();
        boolean boolean13 = node8.isTypeOf();
        boolean boolean14 = node8.isInc();
        boolean boolean15 = node8.isWhile();
        node8.setSourceEncodedPosition((-1));
        boolean boolean18 = node1.hasChild(node8);
        boolean boolean19 = node1.isAssign();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        boolean boolean28 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        node30.setSourceEncodedPosition(4095);
        boolean boolean33 = node30.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node30.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node23.copyInformationFromForTree(node30);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        boolean boolean38 = node37.isOnlyModifiesThisCall();
        boolean boolean39 = node37.isEmpty();
        boolean boolean40 = node37.isArrayLit();
        com.google.javascript.rhino.Node node41 = node23.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] { node23 };
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(32, nodeArray42);
        int int45 = node43.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        boolean boolean48 = node47.isOnlyModifiesThisCall();
        boolean boolean49 = node47.isEmpty();
        boolean boolean50 = node47.isReturn();
        boolean boolean51 = node47.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        boolean boolean57 = node53.isBreak();
        boolean boolean58 = node53.isIn();
        com.google.javascript.rhino.Node node59 = node47.useSourceInfoIfMissingFromForTree(node53);
        com.google.javascript.rhino.Node node60 = node43.useSourceInfoFrom(node53);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        node62.setSourceEncodedPosition(4095);
        boolean boolean65 = node62.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = node62.getStaticSourceFile();
        boolean boolean67 = node62.isAssignAdd();
        java.util.Set<java.lang.String> strSet68 = node62.getDirectives();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("");
        node70.setSourceEncodedPosition(4095);
        boolean boolean73 = node70.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = node70.getStaticSourceFile();
        node70.setVarArgs(false);
        boolean boolean77 = node70.isFromExterns();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("");
        node79.setSourceEncodedPosition(4095);
        boolean boolean82 = node79.isNot();
        com.google.javascript.rhino.Node node83 = node79.getLastSibling();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(37, node43, node62, node70, node83);
        boolean boolean85 = node84.isExprResult();
        boolean boolean86 = node1.isEquivalentToTyped(node84);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(staticSourceFile66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(strSet68);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(staticSourceFile74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        node2.setVarArgs(false);
        boolean boolean9 = node2.isFromExterns();
        boolean boolean10 = node2.isNull();
        boolean boolean11 = node2.isFalse();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node26 = node20.removeFirstChild();
        boolean boolean27 = node20.isAnd();
        boolean boolean28 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isArrayLit();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        boolean boolean36 = node35.isOnlyModifiesThisCall();
        boolean boolean37 = node35.isSetterDef();
        com.google.javascript.rhino.Node node38 = node30.srcref(node35);
        node20.addChildToFront(node30);
        com.google.javascript.rhino.Node node40 = node20.getLastChild();
        boolean boolean41 = node20.isInstanceOf();
        boolean boolean42 = node20.isSwitch();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(44, node2, node20, 100, 36);
        boolean boolean46 = node2.isQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        boolean boolean29 = node22.isCall();
        com.google.javascript.rhino.Node node30 = node22.getLastChild();
        boolean boolean32 = node22.getBooleanProp(10);
        java.lang.String str33 = node22.getQualifiedName();
        node22.setSourceEncodedPosition(15);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isThis();
        com.google.javascript.rhino.InputId inputId17 = null;
        node8.setInputId(inputId17);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node8.setStaticSourceFile(staticSourceFile19);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray26, 12, 100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(53, nodeArray26);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100, nodeArray26);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray26);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) 'a', nodeArray26);
        int int35 = node33.getIntProp(8);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node36 = node8.getChildBefore(node33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isCall();
        boolean boolean19 = node1.isEquivalentTo(node15);
        node1.setIsSyntheticBlock(true);
        boolean boolean22 = node1.isDec();
        boolean boolean23 = node1.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        boolean boolean47 = node36.isGetElem();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        boolean boolean53 = node49.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node54 = node36.srcref(node49);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder55 = node54.getJsDocBuilderForNode();
        boolean boolean56 = node54.isComma();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isReturn();
        boolean boolean6 = node2.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        boolean boolean12 = node8.isBreak();
        boolean boolean13 = node8.isIn();
        com.google.javascript.rhino.Node node14 = node2.useSourceInfoIfMissingFromForTree(node8);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        boolean boolean21 = node16.isAssignAdd();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        com.google.javascript.rhino.Node node28 = node16.copyInformationFromForTree(node23);
        boolean boolean29 = node16.isNE();
        boolean boolean30 = node16.isThrow();
        boolean boolean31 = node16.isFor();
        com.google.javascript.rhino.Node node32 = node8.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(0, node32, 46, 42);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        node1.setVarArgs(false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = null;
        node1.setJSDocInfo(jSDocInfo8);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        boolean boolean41 = node33.isNE();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        boolean boolean44 = node43.isOnlyModifiesThisCall();
        boolean boolean45 = node43.isEmpty();
        boolean boolean46 = node43.isReturn();
        boolean boolean47 = node43.isRegExp();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(52, node33, node43);
        boolean boolean49 = node43.isInstanceOf();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        node51.setSourceEncodedPosition(4095);
        boolean boolean54 = node51.isNot();
        boolean boolean55 = node51.isBreak();
        boolean boolean56 = node51.isTypeOf();
        int int57 = node51.getCharno();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        int int61 = node59.getSourceOffset();
        boolean boolean62 = node59.isExprResult();
        com.google.javascript.rhino.Node node63 = node51.srcref(node59);
        com.google.javascript.rhino.InputId inputId64 = null;
        node63.setInputId(inputId64);
        boolean boolean66 = node63.isBlock();
        node43.addChildrenToBack(node63);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4095 + "'", int57 == 4095);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING  0\n", (int) (byte) 1, (int) (byte) 0);
        boolean boolean4 = node3.isWhile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setThrows();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        int int8 = node2.getLineno();
        node2.setSourceFileForTesting("STRING ");
        boolean boolean11 = node2.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        boolean boolean26 = node20.isFromExterns();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        node28.setSourceEncodedPosition(4095);
        boolean boolean31 = node28.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = node28.getStaticSourceFile();
        boolean boolean33 = node28.isAssignAdd();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        com.google.javascript.rhino.Node node40 = node28.copyInformationFromForTree(node35);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        boolean boolean43 = node42.isOnlyModifiesThisCall();
        boolean boolean44 = node42.isEmpty();
        boolean boolean45 = node42.isArrayLit();
        com.google.javascript.rhino.Node node46 = node28.useSourceInfoFrom(node42);
        boolean boolean47 = node42.hasChildren();
        boolean boolean48 = node42.isNumber();
        boolean boolean49 = node42.isVarArgs();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node55 = node54.cloneTree();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(50, node2, node20, node42, node55, 32, 29);
        node42.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(staticSourceFile32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        boolean boolean14 = node1.isWith();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        boolean boolean22 = node17.isAssignAdd();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node29 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node35 = node17.useSourceInfoFrom(node31);
        boolean boolean36 = node35.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        boolean boolean39 = node38.isOnlyModifiesThisCall();
        boolean boolean40 = node38.isEmpty();
        boolean boolean41 = node38.isArrayLit();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        boolean boolean44 = node43.isOnlyModifiesThisCall();
        boolean boolean45 = node43.isEmpty();
        boolean boolean46 = node43.isReturn();
        boolean boolean47 = node43.isNE();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(4095, node35, node38, node43, (int) (byte) 10, 32);
        boolean boolean51 = node1.isEquivalentTo(node43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = null;
        node1.setJSDocInfo(jSDocInfo52);
        com.google.javascript.rhino.Node node54 = node1.cloneNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node54);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        boolean boolean7 = node1.isDec();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        boolean boolean14 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node9.copyInformationFromForTree(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node27 = node9.useSourceInfoFrom(node23);
        boolean boolean28 = node27.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node29 = node1.useSourceInfoFromForTree(node27);
        boolean boolean30 = node29.isStringKey();
        boolean boolean31 = node29.isOptionalArg();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        node36.setSourceEncodedPosition(4095);
        boolean boolean39 = node36.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = node36.getStaticSourceFile();
        boolean boolean41 = node36.isAssignAdd();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        boolean boolean46 = node43.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        com.google.javascript.rhino.Node node48 = node36.copyInformationFromForTree(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        boolean boolean51 = node50.isOnlyModifiesThisCall();
        boolean boolean52 = node50.isEmpty();
        boolean boolean53 = node50.isArrayLit();
        com.google.javascript.rhino.Node node54 = node36.useSourceInfoFrom(node50);
        boolean boolean55 = node54.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        boolean boolean58 = node57.isOnlyModifiesThisCall();
        boolean boolean59 = node57.isEmpty();
        boolean boolean60 = node57.isArrayLit();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        boolean boolean63 = node62.isOnlyModifiesThisCall();
        boolean boolean64 = node62.isEmpty();
        boolean boolean65 = node62.isReturn();
        boolean boolean66 = node62.isNE();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(4095, node54, node57, node62, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node70 = node33.useSourceInfoIfMissingFrom(node69);
        boolean boolean71 = node70.isNull();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("");
        boolean boolean74 = node73.isOnlyModifiesThisCall();
        boolean boolean75 = node73.isEmpty();
        boolean boolean76 = node73.isReturn();
        boolean boolean77 = node73.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType78 = node73.getJSType();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("");
        node80.setSourceEncodedPosition(4095);
        boolean boolean83 = node80.isNot();
        boolean boolean84 = node80.isBreak();
        boolean boolean85 = node80.isTypeOf();
        boolean boolean86 = node80.isInc();
        boolean boolean87 = node80.isWhile();
        node80.setSourceEncodedPosition((-1));
        boolean boolean90 = node73.hasChild(node80);
        com.google.javascript.rhino.Node node91 = node70.copyInformationFrom(node80);
        com.google.javascript.rhino.Node node92 = node29.useSourceInfoFromForTree(node80);
        node80.setSourceEncodedPosition(52);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(staticSourceFile40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(jSType78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        node24.removeProp(53);
        java.util.Set<java.lang.String> strSet31 = node24.getDirectives();
        boolean boolean32 = node24.isTrue();
        com.google.javascript.rhino.Node node33 = null;
        // The following exception was thrown during execution in test generation
        try {
            node24.removeChild(node33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        node1.setVarArgs(false);
        boolean boolean8 = node1.isFromExterns();
        boolean boolean9 = node1.isNull();
        boolean boolean10 = node1.isFalse();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean15 = node14.isTypeOf();
        boolean boolean16 = node14.isInc();
        boolean boolean17 = node14.isSwitch();
        boolean boolean18 = node1.hasChild(node14);
        boolean boolean19 = node14.isWhile();
        boolean boolean20 = node14.isArrayLit();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node28 = node10.useSourceInfoFrom(node24);
        boolean boolean29 = node28.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isReturn();
        boolean boolean40 = node36.isNE();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(4095, node28, node31, node36, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node44 = node7.useSourceInfoIfMissingFrom(node43);
        node1.addChildrenToBack(node7);
        java.lang.String str46 = node7.getQualifiedName();
        java.util.Set<java.lang.String> strSet47 = node7.getDirectives();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(strSet47);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        boolean boolean14 = node13.isCall();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        boolean boolean22 = node17.isAssignAdd();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node29 = node17.copyInformationFromForTree(node24);
        boolean boolean30 = node17.isNE();
        node17.setVarArgs(false);
        boolean boolean33 = node17.isStringKey();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "TYPEOF", "STRING \n", "Node tree inequality:\nTree1:\nSTRING  [quoted: 1]\n\n\nTree2:\nNUMBER 37.0 100\n\n\nSubtree1: STRING  [quoted: 1]\n\n\nSubtree2: NUMBER 37.0 100\n" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet40);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 8);
        int int46 = node44.getIntProp(15);
        node44.setSourceEncodedPositionForTree(35);
        boolean boolean49 = node44.isSwitch();
        boolean boolean50 = node44.isVoid();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("");
        boolean boolean53 = node52.isOnlyModifiesThisCall();
        boolean boolean54 = node52.isWhile();
        com.google.javascript.rhino.Node node55 = node52.getNext();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = node52.getStaticSourceFile();
        com.google.javascript.rhino.Node node57 = node52.cloneNode();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("");
        node73.setSourceEncodedPosition(4095);
        boolean boolean76 = node73.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile77 = node73.getStaticSourceFile();
        boolean boolean78 = node73.isAssignAdd();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("");
        node80.setSourceEncodedPosition(4095);
        boolean boolean83 = node80.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile84 = node80.getStaticSourceFile();
        com.google.javascript.rhino.Node node85 = node73.copyInformationFromForTree(node80);
        boolean boolean86 = node73.isNE();
        boolean boolean87 = node73.isThrow();
        boolean boolean88 = node73.isFor();
        com.google.javascript.rhino.Node node89 = node65.useSourceInfoFrom(node73);
        boolean boolean90 = node65.isOptionalArg();
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node((int) (byte) 100, node17, node44, node57, node65, 32, 39);
        com.google.javascript.rhino.Node node94 = node17.detachFromParent();
        boolean boolean95 = node13.hasChild(node17);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(staticSourceFile56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(staticSourceFile77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(staticSourceFile84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isSetterDef();
        com.google.javascript.rhino.Node node5 = node1.getAncestor((int) (short) 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        com.google.javascript.rhino.Node node10 = node7.removeFirstChild();
        boolean boolean11 = node7.isIf();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.Node node17 = node7.srcrefTree(node13);
        boolean boolean18 = node7.isContinue();
        com.google.javascript.rhino.Node node19 = node1.srcrefTree(node7);
        com.google.javascript.rhino.Node node21 = node7.getAncestor(0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("");
        boolean boolean72 = node71.isOnlyModifiesThisCall();
        boolean boolean73 = node71.isEmpty();
        boolean boolean74 = node71.isArrayLit();
        com.google.javascript.rhino.Node node75 = node57.useSourceInfoFrom(node71);
        boolean boolean76 = node71.hasChildren();
        com.google.javascript.rhino.Node node77 = node32.copyInformationFrom(node71);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("");
        boolean boolean80 = node79.isOnlyModifiesThisCall();
        boolean boolean81 = node79.isEmpty();
        boolean boolean82 = node79.isArrayLit();
        boolean boolean83 = node79.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node84 = node71.srcref(node79);
        node71.setWasEmptyNode(true);
        boolean boolean87 = node71.isVarArgs();
        boolean boolean88 = node71.isAssign();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        int int65 = node23.getSideEffectFlags();
        boolean boolean66 = node23.isFromExterns();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        boolean boolean69 = node68.isOnlyModifiesThisCall();
        boolean boolean70 = node68.isEmpty();
        com.google.javascript.rhino.Node node71 = node68.removeFirstChild();
        com.google.javascript.rhino.Node node72 = node23.useSourceInfoFrom(node68);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("");
        boolean boolean75 = node74.isOnlyModifiesThisCall();
        boolean boolean76 = node74.isEmpty();
        boolean boolean77 = node74.isReturn();
        boolean boolean78 = node74.isEmpty();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable79 = node74.siblings();
        com.google.javascript.rhino.Node node80 = node72.copyInformationFrom(node74);
        node80.setLineno(31);
        int int83 = node80.getLineno();
        boolean boolean84 = node80.isDelProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(nodeIterable79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 31 + "'", int83 == 31);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isCall();
        boolean boolean19 = node1.isEquivalentTo(node15);
        node1.setIsSyntheticBlock(true);
        node1.setSourceFileForTesting("STRING \n");
        boolean boolean24 = node1.isSwitch();
        node1.addSuppression("TYPEOF");
        boolean boolean27 = node1.wasEmptyNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        boolean boolean14 = node1.isNE();
        boolean boolean15 = node1.isThrow();
        boolean boolean16 = node1.isFor();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        com.google.javascript.rhino.Node node27 = node26.getLastSibling();
        boolean boolean28 = node27.isIf();
        com.google.javascript.rhino.Node node29 = node1.clonePropsFrom(node27);
        node1.setSourceEncodedPositionForTree(40992);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        boolean boolean11 = node8.isReturn();
        boolean boolean12 = node8.isRegExp();
        int int13 = node8.getLength();
        boolean boolean14 = node8.isNumber();
        boolean boolean16 = node8.getBooleanProp(12);
        int int17 = node1.getIndexOfChild(node8);
        boolean boolean18 = node1.isDo();
        com.google.javascript.rhino.InputId inputId19 = node1.getInputId();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(inputId19);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        node16.setVarArgs(false);
        boolean boolean23 = node16.isFromExterns();
        boolean boolean24 = node16.isNull();
        boolean boolean25 = node16.isFalse();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        node27.setSourceEncodedPosition(4095);
        boolean boolean30 = node27.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node27.getStaticSourceFile();
        boolean boolean32 = node27.isAssignAdd();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("");
        node34.setSourceEncodedPosition(4095);
        boolean boolean37 = node34.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = node34.getStaticSourceFile();
        com.google.javascript.rhino.Node node39 = node27.copyInformationFromForTree(node34);
        com.google.javascript.rhino.Node node40 = node34.removeFirstChild();
        com.google.javascript.rhino.Node node41 = node16.useSourceInfoIfMissingFrom(node34);
        com.google.javascript.rhino.Node node42 = node14.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(45, node42);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        boolean boolean49 = node46.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node46.getStaticSourceFile();
        boolean boolean51 = node46.isAssignAdd();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node53.getStaticSourceFile();
        com.google.javascript.rhino.Node node58 = node46.copyInformationFromForTree(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        boolean boolean61 = node60.isOnlyModifiesThisCall();
        boolean boolean62 = node60.isEmpty();
        boolean boolean63 = node60.isArrayLit();
        com.google.javascript.rhino.Node node64 = node46.useSourceInfoFrom(node60);
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] { node46 };
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(32, nodeArray65);
        int int68 = node66.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("");
        boolean boolean71 = node70.isOnlyModifiesThisCall();
        boolean boolean72 = node70.isEmpty();
        boolean boolean73 = node70.isReturn();
        boolean boolean74 = node70.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("");
        node76.setSourceEncodedPosition(4095);
        boolean boolean79 = node76.isNot();
        boolean boolean80 = node76.isBreak();
        boolean boolean81 = node76.isIn();
        com.google.javascript.rhino.Node node82 = node70.useSourceInfoIfMissingFromForTree(node76);
        com.google.javascript.rhino.Node node83 = node66.useSourceInfoFrom(node76);
        boolean boolean84 = node83.isLabelName();
        boolean boolean85 = node83.isName();
        node42.addChildrenToFront(node83);
        boolean boolean87 = node83.isEmpty();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(staticSourceFile31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(staticSourceFile38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        boolean boolean14 = node13.isCall();
        boolean boolean15 = node13.isParamList();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.Node node5 = node1.getLastSibling();
        node1.setVarArgs(true);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        node1.setJSType(jSType8);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable10 = node1.getAncestors();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        boolean boolean17 = node12.isAssignAdd();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        node19.setSourceEncodedPosition(4095);
        boolean boolean22 = node19.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node19.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node12.copyInformationFromForTree(node19);
        com.google.javascript.rhino.Node node25 = node19.removeFirstChild();
        boolean boolean26 = node19.isAnd();
        boolean boolean27 = node19.isDec();
        int int28 = node19.getType();
        java.lang.String str29 = node19.toString();
        int int31 = node19.getIntProp(409700);
        java.lang.String str32 = node1.checkTreeEquals(node19);
        boolean boolean33 = node1.isAssignAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(ancestorIterable10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 40 + "'", int28 == 40);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "STRING  0" + "'", str29, "STRING  0");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        node2.removeProp(12);
        boolean boolean7 = node2.isParamList();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        boolean boolean16 = node11.isAssignAdd();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node23 = node11.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node29 = node11.useSourceInfoFrom(node25);
        boolean boolean30 = node29.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = node32.isOnlyModifiesThisCall();
        boolean boolean34 = node32.isEmpty();
        boolean boolean35 = node32.isArrayLit();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        boolean boolean38 = node37.isOnlyModifiesThisCall();
        boolean boolean39 = node37.isEmpty();
        boolean boolean40 = node37.isReturn();
        boolean boolean41 = node37.isNE();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(4095, node29, node32, node37, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(36, node44, node46, node53);
        boolean boolean55 = node44.isGetElem();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        boolean boolean58 = node57.isOnlyModifiesThisCall();
        boolean boolean59 = node57.isEmpty();
        boolean boolean60 = node57.isArrayLit();
        boolean boolean61 = node57.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node62 = node44.srcref(node57);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        boolean boolean69 = node64.isAssignAdd();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("");
        node71.setSourceEncodedPosition(4095);
        boolean boolean74 = node71.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile75 = node71.getStaticSourceFile();
        com.google.javascript.rhino.Node node76 = node64.copyInformationFromForTree(node71);
        com.google.javascript.rhino.Node node77 = node71.removeFirstChild();
        boolean boolean78 = node71.isAnd();
        node71.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node83 = node71.getAncestor(0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable84 = node83.siblings();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(15, node2, node57, node83, 43, (int) (short) 10);
        int int88 = node2.getSourceOffset();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(staticSourceFile75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(nodeIterable84);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        boolean boolean62 = node58.isBreak();
        boolean boolean63 = node58.isTypeOf();
        int int64 = node58.getCharno();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("");
        boolean boolean67 = node66.isOnlyModifiesThisCall();
        int int68 = node66.getSourceOffset();
        boolean boolean69 = node66.isExprResult();
        com.google.javascript.rhino.Node node70 = node58.srcref(node66);
        boolean boolean71 = node70.isNE();
        com.google.javascript.rhino.Node node72 = node56.srcrefTree(node70);
        int int73 = node56.getLength();
        java.lang.String str74 = node56.toStringTree();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable75 = node56.children();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4095 + "'", int64 == 4095);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "STRING \n    STRING \n" + "'", str74, "STRING \n    STRING \n");
        org.junit.Assert.assertNotNull(nodeIterable75);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = node14.isBreak();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray5, 12, 100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(53, nodeArray5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 0, nodeArray5);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(43, nodeArray5);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(40992, nodeArray5, (int) (byte) 0, 2);
        org.junit.Assert.assertNotNull(nodeArray5);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        node21.setVarArgs(false);
        boolean boolean28 = node21.isFromExterns();
        boolean boolean29 = node21.isNull();
        boolean boolean30 = node21.isFalse();
        boolean boolean31 = node15.hasChild(node21);
        boolean boolean32 = node21.isDelProp();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean37 = node36.isBlock();
        boolean boolean38 = node36.isNE();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        node40.setSourceEncodedPosition(4095);
        boolean boolean43 = node40.isNot();
        com.google.javascript.rhino.Node node44 = node40.getLastSibling();
        node40.setVarArgs(true);
        com.google.javascript.rhino.jstype.JSType jSType47 = null;
        node40.setJSType(jSType47);
        com.google.javascript.rhino.Node node49 = node36.copyInformationFrom(node40);
        node21.addChildToFront(node40);
        com.google.javascript.rhino.Node node51 = node21.cloneTree();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        boolean boolean55 = node42.isWith();
        node33.addChildToFront(node42);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node58.getStaticSourceFile();
        boolean boolean63 = node58.isAssignAdd();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = node65.getStaticSourceFile();
        com.google.javascript.rhino.Node node70 = node58.copyInformationFromForTree(node65);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        boolean boolean73 = node72.isOnlyModifiesThisCall();
        boolean boolean74 = node72.isEmpty();
        boolean boolean75 = node72.isArrayLit();
        com.google.javascript.rhino.Node node76 = node58.useSourceInfoFrom(node72);
        boolean boolean77 = node72.hasChildren();
        com.google.javascript.rhino.Node node78 = node33.copyInformationFrom(node72);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("");
        node80.setSourceEncodedPosition(4095);
        boolean boolean83 = node80.isNot();
        boolean boolean84 = node80.isBreak();
        boolean boolean85 = node80.isTypeOf();
        boolean boolean86 = node80.isInc();
        boolean boolean87 = node80.isWhile();
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newString("");
        node89.setSourceEncodedPosition(4095);
        boolean boolean92 = node89.isNot();
        boolean boolean93 = node89.isBreak();
        boolean boolean94 = node89.isIn();
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node((int) 'a', node78, node80, node89);
        node78.detachChildren();
        int int97 = node78.getChildCount();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(staticSourceFile69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isObjectLit();
        boolean boolean5 = node3.isFunction();
        boolean boolean6 = node3.wasEmptyNode();
        boolean boolean7 = node3.isTypeOf();
        boolean boolean8 = node3.wasEmptyNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100);
        int int2 = node1.getSideEffectFlags();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder3 = node1.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder3);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node19.isUnscopedQualifiedName();
        boolean boolean21 = node19.isWhile();
        boolean boolean22 = node19.isComma();
        int int23 = node19.getLineno();
        int int24 = node19.getCharno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        boolean boolean14 = node1.isNE();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(16, 30, 0);
        node1.addChildToFront(node18);
        boolean boolean20 = node18.isStringKey();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        boolean boolean29 = node24.isAssignAdd();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        node31.setSourceEncodedPosition(4095);
        boolean boolean34 = node31.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node31.getStaticSourceFile();
        com.google.javascript.rhino.Node node36 = node24.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        boolean boolean39 = node38.isOnlyModifiesThisCall();
        boolean boolean40 = node38.isEmpty();
        boolean boolean41 = node38.isArrayLit();
        com.google.javascript.rhino.Node node42 = node24.useSourceInfoFrom(node38);
        boolean boolean43 = node42.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        boolean boolean46 = node45.isOnlyModifiesThisCall();
        boolean boolean47 = node45.isEmpty();
        boolean boolean48 = node45.isArrayLit();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        boolean boolean51 = node50.isOnlyModifiesThisCall();
        boolean boolean52 = node50.isEmpty();
        boolean boolean53 = node50.isReturn();
        boolean boolean54 = node50.isNE();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(4095, node42, node45, node50, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(36, node57, node59, node66);
        int int68 = node57.getSideEffectFlags();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("");
        node70.setSourceEncodedPosition(4095);
        boolean boolean73 = node70.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = node70.getStaticSourceFile();
        node70.setVarArgs(false);
        boolean boolean77 = node70.isFromExterns();
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet81 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet81, strArray80);
        node70.setDirectives((java.util.Set<java.lang.String>) strSet81);
        node57.setDirectives((java.util.Set<java.lang.String>) strSet81);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet81);
        java.lang.String str86 = node18.toString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(staticSourceFile74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "GT 30 [directives: [hi!, ]]" + "'", str86, "GT 30 [directives: [hi!, ]]");
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) '4');
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 36, 16, (int) (byte) -1);
        com.google.javascript.rhino.Node node25 = node1.srcref(node24);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node22.isName();
        boolean boolean41 = node22.isCatch();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        com.google.javascript.rhino.Node node10 = node1.getFirstChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        node5.setSourceEncodedPosition(4095);
        boolean boolean8 = node5.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node5.getStaticSourceFile();
        boolean boolean10 = node5.isAssignAdd();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        com.google.javascript.rhino.Node node17 = node5.copyInformationFromForTree(node12);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        boolean boolean20 = node19.isOnlyModifiesThisCall();
        boolean boolean21 = node19.isEmpty();
        boolean boolean22 = node19.isArrayLit();
        com.google.javascript.rhino.Node node23 = node5.useSourceInfoFrom(node19);
        boolean boolean24 = node23.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isArrayLit();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isReturn();
        boolean boolean35 = node31.isNE();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(4095, node23, node26, node31, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoIfMissingFrom(node38);
        boolean boolean40 = node39.isNull();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        boolean boolean43 = node42.isOnlyModifiesThisCall();
        boolean boolean44 = node42.isEmpty();
        boolean boolean45 = node42.isReturn();
        boolean boolean46 = node42.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType47 = node42.getJSType();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        boolean boolean53 = node49.isBreak();
        boolean boolean54 = node49.isTypeOf();
        boolean boolean55 = node49.isInc();
        boolean boolean56 = node49.isWhile();
        node49.setSourceEncodedPosition((-1));
        boolean boolean59 = node42.hasChild(node49);
        com.google.javascript.rhino.Node node60 = node39.copyInformationFrom(node49);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) 10, node49, 54, (int) (byte) 100);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSType47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(staticSourceFile61);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isBlock();
        boolean boolean5 = node3.isNE();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        com.google.javascript.rhino.Node node11 = node7.getLastSibling();
        node7.setVarArgs(true);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node7.setJSType(jSType14);
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node7);
        boolean boolean17 = node3.isHook();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        boolean boolean20 = node19.isOnlyModifiesThisCall();
        boolean boolean21 = node19.isEmpty();
        node19.removeProp(12);
        boolean boolean24 = node3.isEquivalentToTyped(node19);
        com.google.javascript.rhino.Node node25 = null;
        boolean boolean26 = node19.hasChild(node25);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        node40.setSourceEncodedPosition(4095);
        boolean boolean43 = node40.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = node40.getStaticSourceFile();
        boolean boolean45 = node40.isAssignAdd();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        node47.setSourceEncodedPosition(4095);
        boolean boolean50 = node47.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = node47.getStaticSourceFile();
        com.google.javascript.rhino.Node node52 = node40.copyInformationFromForTree(node47);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        boolean boolean55 = node54.isOnlyModifiesThisCall();
        boolean boolean56 = node54.isEmpty();
        boolean boolean57 = node54.isArrayLit();
        com.google.javascript.rhino.Node node58 = node40.useSourceInfoFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] { node40 };
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(32, nodeArray59);
        node20.addChildrenToFront(node60);
        com.google.javascript.rhino.Node node62 = node20.detachFromParent();
        int int63 = node20.getChildCount();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("");
        node66.setSourceEncodedPosition(4095);
        boolean boolean69 = node66.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile70 = node66.getStaticSourceFile();
        boolean boolean71 = node66.isAssignAdd();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("");
        node73.setSourceEncodedPosition(4095);
        boolean boolean76 = node73.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile77 = node73.getStaticSourceFile();
        com.google.javascript.rhino.Node node78 = node66.copyInformationFromForTree(node73);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("");
        boolean boolean81 = node80.isOnlyModifiesThisCall();
        boolean boolean82 = node80.isEmpty();
        boolean boolean83 = node80.isArrayLit();
        com.google.javascript.rhino.Node node84 = node66.useSourceInfoFrom(node80);
        com.google.javascript.rhino.Node[] nodeArray85 = new com.google.javascript.rhino.Node[] { node66 };
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(32, nodeArray85);
        com.google.javascript.rhino.Node node88 = com.google.javascript.rhino.Node.newString("");
        boolean boolean89 = node88.isOnlyModifiesThisCall();
        boolean boolean90 = node88.isEmpty();
        boolean boolean91 = node88.isReturn();
        com.google.javascript.rhino.Node node92 = node86.useSourceInfoFromForTree(node88);
        node88.removeProp(53);
        java.util.Set<java.lang.String> strSet95 = node88.getDirectives();
        boolean boolean96 = node88.isQualifiedName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder97 = node88.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node98 = node20.copyInformationFromForTree(node88);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(staticSourceFile44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(staticSourceFile51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(staticSourceFile70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(staticSourceFile77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(nodeArray85);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNull(strSet95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(node98);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isDec();
        int int17 = node8.getType();
        boolean boolean18 = node8.isInc();
        int int19 = node8.getCharno();
        node8.setCharno((int) (short) 10);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 40 + "'", int17 == 40);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4095 + "'", int19 == 4095);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        int int65 = node23.getSideEffectFlags();
        boolean boolean66 = node23.isDefaultCase();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable67 = node23.siblings();
        boolean boolean68 = node23.isInc();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = null;
        node23.setStaticSourceFile(staticSourceFile69);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(nodeIterable67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isCall();
        boolean boolean5 = node1.isAssign();
        boolean boolean6 = node1.hasOneChild();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        boolean boolean11 = node8.isReturn();
        boolean boolean12 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        boolean boolean18 = node14.isBreak();
        boolean boolean19 = node14.isIn();
        com.google.javascript.rhino.Node node20 = node8.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node20.cloneNode();
        com.google.javascript.rhino.Node node22 = node1.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        boolean boolean29 = node24.isAssignAdd();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        node31.setSourceEncodedPosition(4095);
        boolean boolean34 = node31.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node31.getStaticSourceFile();
        com.google.javascript.rhino.Node node36 = node24.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node37 = node31.removeFirstChild();
        boolean boolean38 = node31.isAnd();
        node31.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node43 = node31.getAncestor(0);
        com.google.javascript.rhino.Node node44 = node22.useSourceInfoIfMissingFromForTree(node31);
        int int45 = node44.getCharno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4095 + "'", int45 == 4095);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        node24.removeProp(53);
        java.util.Set<java.lang.String> strSet31 = node24.getDirectives();
        boolean boolean32 = node24.isQualifiedName();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("");
        node34.setSourceEncodedPosition(4095);
        boolean boolean37 = node34.isNot();
        boolean boolean38 = node34.isBreak();
        boolean boolean39 = node34.isTypeOf();
        int int40 = node34.getCharno();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("");
        node44.setSourceEncodedPosition(4095);
        boolean boolean47 = node44.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = node44.getStaticSourceFile();
        boolean boolean49 = node44.isAssignAdd();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        node51.setSourceEncodedPosition(4095);
        boolean boolean54 = node51.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = node51.getStaticSourceFile();
        com.google.javascript.rhino.Node node56 = node44.copyInformationFromForTree(node51);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        boolean boolean59 = node58.isOnlyModifiesThisCall();
        boolean boolean60 = node58.isEmpty();
        boolean boolean61 = node58.isArrayLit();
        com.google.javascript.rhino.Node node62 = node44.useSourceInfoFrom(node58);
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] { node44 };
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(32, nodeArray63);
        int int66 = node64.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        boolean boolean69 = node68.isOnlyModifiesThisCall();
        boolean boolean70 = node68.isEmpty();
        boolean boolean71 = node68.isReturn();
        boolean boolean72 = node68.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("");
        node74.setSourceEncodedPosition(4095);
        boolean boolean77 = node74.isNot();
        boolean boolean78 = node74.isBreak();
        boolean boolean79 = node74.isIn();
        com.google.javascript.rhino.Node node80 = node68.useSourceInfoIfMissingFromForTree(node74);
        com.google.javascript.rhino.Node node81 = node64.useSourceInfoFrom(node74);
        boolean boolean82 = node74.isNE();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("");
        boolean boolean85 = node84.isOnlyModifiesThisCall();
        boolean boolean86 = node84.isEmpty();
        boolean boolean87 = node84.isReturn();
        boolean boolean88 = node84.isRegExp();
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(52, node74, node84);
        boolean boolean90 = node84.isInstanceOf();
        boolean boolean91 = node34.isEquivalentTo(node84);
        com.google.javascript.rhino.Node node92 = node24.srcref(node34);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile93 = null;
        node24.setStaticSourceFile(staticSourceFile93);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4095 + "'", int40 == 4095);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(staticSourceFile48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(staticSourceFile55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(node92);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        node7.setSourceEncodedPositionForTree(39);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = node7.getExistingIntProp(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 0");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isCall();
        boolean boolean5 = node1.isAssign();
        boolean boolean6 = node1.hasOneChild();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        boolean boolean11 = node8.isReturn();
        boolean boolean12 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        boolean boolean18 = node14.isBreak();
        boolean boolean19 = node14.isIn();
        com.google.javascript.rhino.Node node20 = node8.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node20.cloneNode();
        com.google.javascript.rhino.Node node22 = node1.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        boolean boolean29 = node24.isAssignAdd();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        node31.setSourceEncodedPosition(4095);
        boolean boolean34 = node31.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node31.getStaticSourceFile();
        com.google.javascript.rhino.Node node36 = node24.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node37 = node31.removeFirstChild();
        boolean boolean38 = node31.isAnd();
        node31.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node43 = node31.getAncestor(0);
        com.google.javascript.rhino.Node node44 = node22.useSourceInfoIfMissingFromForTree(node31);
        int int45 = node44.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node16.hasChildren();
        boolean boolean22 = node16.isNumber();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        boolean boolean29 = node24.isAssignAdd();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        node31.setSourceEncodedPosition(4095);
        boolean boolean34 = node31.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node31.getStaticSourceFile();
        com.google.javascript.rhino.Node node36 = node24.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node37 = node31.removeFirstChild();
        boolean boolean38 = node31.isAnd();
        boolean boolean39 = node31.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        boolean boolean42 = node41.isOnlyModifiesThisCall();
        boolean boolean43 = node41.isEmpty();
        boolean boolean44 = node41.isArrayLit();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isSetterDef();
        com.google.javascript.rhino.Node node49 = node41.srcref(node46);
        node31.addChildToFront(node41);
        com.google.javascript.rhino.Node node51 = node31.getLastChild();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        boolean boolean57 = node53.isBreak();
        boolean boolean58 = node53.isTypeOf();
        int int59 = node53.getCharno();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("");
        boolean boolean62 = node61.isOnlyModifiesThisCall();
        int int63 = node61.getSourceOffset();
        boolean boolean64 = node61.isExprResult();
        com.google.javascript.rhino.Node node65 = node53.srcref(node61);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        node67.setSourceEncodedPosition(4095);
        boolean boolean70 = node67.isCall();
        boolean boolean71 = node53.isEquivalentTo(node67);
        node53.setIsSyntheticBlock(true);
        node53.setSourceFileForTesting("STRING \n");
        boolean boolean76 = node53.isSwitch();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("");
        node78.setSourceEncodedPosition(4095);
        boolean boolean81 = node78.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile82 = node78.getStaticSourceFile();
        boolean boolean83 = node78.isAssignAdd();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("");
        node85.setSourceEncodedPosition(4095);
        boolean boolean88 = node85.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile89 = node85.getStaticSourceFile();
        com.google.javascript.rhino.Node node90 = node78.copyInformationFromForTree(node85);
        boolean boolean91 = node78.isNE();
        boolean boolean92 = node78.isThrow();
        boolean boolean93 = node78.wasEmptyNode();
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node(50, node16, node31, node53, node78);
        boolean boolean95 = node53.isWith();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4095 + "'", int59 == 4095);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(staticSourceFile82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(staticSourceFile89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        java.lang.String str47 = node38.toString();
        node38.setSourceEncodedPositionForTree(31);
        boolean boolean50 = node38.isAssignAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "STRING  0" + "'", str47, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(41);
        boolean boolean2 = node1.isTry();
        java.lang.String str3 = node1.toStringTree();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "NULL\n" + "'", str3, "NULL\n");
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NULL\n");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node14 = node13.cloneNode();
        com.google.javascript.rhino.Node node15 = node13.getNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        boolean boolean55 = node42.isWith();
        node33.addChildToFront(node42);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node58.getStaticSourceFile();
        boolean boolean63 = node58.isAssignAdd();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = node65.getStaticSourceFile();
        com.google.javascript.rhino.Node node70 = node58.copyInformationFromForTree(node65);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        boolean boolean73 = node72.isOnlyModifiesThisCall();
        boolean boolean74 = node72.isEmpty();
        boolean boolean75 = node72.isArrayLit();
        com.google.javascript.rhino.Node node76 = node58.useSourceInfoFrom(node72);
        boolean boolean77 = node72.hasChildren();
        com.google.javascript.rhino.Node node78 = node33.copyInformationFrom(node72);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("");
        node80.setSourceEncodedPosition(4095);
        boolean boolean83 = node80.isNot();
        boolean boolean84 = node80.isBreak();
        boolean boolean85 = node80.isTypeOf();
        boolean boolean86 = node80.isInc();
        boolean boolean87 = node80.isWhile();
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newString("");
        node89.setSourceEncodedPosition(4095);
        boolean boolean92 = node89.isNot();
        boolean boolean93 = node89.isBreak();
        boolean boolean94 = node89.isIn();
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node((int) 'a', node78, node80, node89);
        boolean boolean96 = node95.isGetElem();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable97 = node95.children();
        boolean boolean98 = node95.isDebugger();
        java.lang.String str99 = node95.toString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(staticSourceFile69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(nodeIterable97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "ASSIGN_MOD" + "'", str99, "ASSIGN_MOD");
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        node28.setLineno((int) (short) 100);
        boolean boolean31 = node28.isDec();
        boolean boolean32 = node28.isNumber();
        boolean boolean33 = node28.isGetterDef();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node32.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 12, (int) (short) -1);
        com.google.javascript.rhino.Node node45 = node32.copyInformationFromForTree(node44);
        node45.setCharno(45);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        com.google.javascript.rhino.Node node4 = node1.removeFirstChild();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        boolean boolean14 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node9.copyInformationFromForTree(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node27 = node9.useSourceInfoFrom(node23);
        boolean boolean28 = node27.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isArrayLit();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        boolean boolean36 = node35.isOnlyModifiesThisCall();
        boolean boolean37 = node35.isEmpty();
        boolean boolean38 = node35.isReturn();
        boolean boolean39 = node35.isNE();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(4095, node27, node30, node35, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("");
        node44.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(36, node42, node44, node51);
        node1.putProp(12, (java.lang.Object) node44);
        node44.setSourceFileForTesting("STRING  0");
        boolean boolean56 = node44.isParamList();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        boolean boolean6 = node1.isRegExp();
        node1.detachChildren();
        com.google.javascript.rhino.Node node8 = node1.getFirstChild();
        node1.setLength((int) (short) 100);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node28 = node10.useSourceInfoFrom(node24);
        boolean boolean29 = node28.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isReturn();
        boolean boolean40 = node36.isNE();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(4095, node28, node31, node36, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node44 = node7.useSourceInfoIfMissingFrom(node43);
        node1.addChildrenToBack(node7);
        com.google.javascript.rhino.Node node46 = node1.removeChildren();
        boolean boolean47 = node1.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isThis();
        com.google.javascript.rhino.InputId inputId17 = null;
        node8.setInputId(inputId17);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node8.setStaticSourceFile(staticSourceFile19);
        int int22 = node8.getIntProp((int) '4');
        boolean boolean23 = node8.isAnd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        boolean boolean29 = node24.isAdd();
        node24.setQuotedString();
        boolean boolean31 = node24.isThrow();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        boolean boolean34 = node33.isOnlyModifiesThisCall();
        boolean boolean35 = node33.isEmpty();
        boolean boolean36 = node33.isReturn();
        boolean boolean37 = node33.hasMoreThanOneChild();
        boolean boolean38 = node33.isRegExp();
        com.google.javascript.rhino.Node node39 = node33.cloneNode();
        boolean boolean40 = node24.isEquivalentTo(node33);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        node1.setVarArgs(false);
        boolean boolean8 = node1.isFromExterns();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        node1.setSourceFileForTesting("STRING ");
        boolean boolean17 = node1.isAdd();
        boolean boolean18 = node1.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "STRING ");
        node1.addChildrenToBack(node21);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        boolean boolean30 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node25.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node43 = node25.useSourceInfoFrom(node39);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder44 = node25.new FileLevelJsDocBuilder();
        boolean boolean45 = node25.isDefaultCase();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) 0, node25, (int) ' ', 53);
        boolean boolean49 = node25.isQuotedString();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        node51.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node54 = node51.getLastSibling();
        node51.setSourceFileForTesting("");
        node25.addChildrenToFront(node51);
        int int58 = node51.getLength();
        com.google.javascript.rhino.Node node59 = node21.srcref(node51);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node59);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(24, 29, (int) (byte) 1);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        boolean boolean30 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node25.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node43 = node25.useSourceInfoFrom(node39);
        boolean boolean44 = node43.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isReturn();
        boolean boolean55 = node51.isNE();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node43, node46, node51, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(36, node58, node60, node67);
        boolean boolean69 = node67.isTypeOf();
        boolean boolean70 = node67.isGetterDef();
        boolean boolean71 = node67.isFor();
        boolean boolean72 = node1.isEquivalentToTyped(node67);
        boolean boolean73 = node67.isWhile();
        boolean boolean74 = node67.isCase();
        boolean boolean75 = node67.isLabelName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        node1.setVarArgs(false);
        com.google.javascript.rhino.Node node8 = node1.getParent();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node1.getStaticSourceFile();
        node1.setCharno(49);
        com.google.javascript.rhino.Node node12 = node1.cloneTree();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertNotNull(node12);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        boolean boolean39 = node38.isNull();
        boolean boolean40 = node38.isFromExterns();
        java.util.Set<java.lang.String> strSet41 = node38.getDirectives();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(strSet41);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        int int3 = node1.getSourceOffset();
        boolean boolean4 = node1.isLabel();
        boolean boolean5 = node1.isOptionalArg();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(45, 52, (int) 'a');
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) '4');
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] { node4 };
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(32, nodeArray23);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoFromForTree(node26);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node30.getStaticSourceFile();
        java.lang.String str35 = node30.toString(true, true, true);
        node1.addChildrenToBack(node30);
        boolean boolean37 = node30.isNot();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(staticSourceFile31);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "TYPEOF" + "'", str35, "TYPEOF");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isInstanceOf();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        node2.putProp((int) '4', (java.lang.Object) node8);
        boolean boolean12 = node8.isDebugger();
        boolean boolean13 = node8.isName();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("STRING  0");
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100, node17, 54, 35);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean25 = node24.isTypeOf();
        boolean boolean26 = node24.isInc();
        com.google.javascript.rhino.Node node27 = node24.cloneTree();
        com.google.javascript.rhino.Node node28 = node17.copyInformationFrom(node27);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = node33.getStaticSourceFile();
        boolean boolean38 = node33.isAssignAdd();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        node40.setSourceEncodedPosition(4095);
        boolean boolean43 = node40.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = node40.getStaticSourceFile();
        com.google.javascript.rhino.Node node45 = node33.copyInformationFromForTree(node40);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        boolean boolean48 = node47.isOnlyModifiesThisCall();
        boolean boolean49 = node47.isEmpty();
        boolean boolean50 = node47.isArrayLit();
        com.google.javascript.rhino.Node node51 = node33.useSourceInfoFrom(node47);
        boolean boolean52 = node51.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        boolean boolean55 = node54.isOnlyModifiesThisCall();
        boolean boolean56 = node54.isEmpty();
        boolean boolean57 = node54.isArrayLit();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.isNE();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(4095, node51, node54, node59, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node67 = node30.useSourceInfoIfMissingFrom(node66);
        boolean boolean68 = node67.isNull();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("");
        boolean boolean71 = node70.isOnlyModifiesThisCall();
        boolean boolean72 = node70.isEmpty();
        boolean boolean73 = node70.isReturn();
        boolean boolean74 = node70.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType75 = node70.getJSType();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        node77.setSourceEncodedPosition(4095);
        boolean boolean80 = node77.isNot();
        boolean boolean81 = node77.isBreak();
        boolean boolean82 = node77.isTypeOf();
        boolean boolean83 = node77.isInc();
        boolean boolean84 = node77.isWhile();
        node77.setSourceEncodedPosition((-1));
        boolean boolean87 = node70.hasChild(node77);
        com.google.javascript.rhino.Node node88 = node67.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node89 = node27.srcrefTree(node67);
        node8.putProp(49, (java.lang.Object) node67);
        com.google.javascript.rhino.Node node92 = com.google.javascript.rhino.Node.newString("");
        boolean boolean93 = node92.isOnlyModifiesThisCall();
        boolean boolean94 = node92.isEmpty();
        boolean boolean95 = node92.isReturn();
        com.google.javascript.rhino.Node node96 = node92.getLastSibling();
        com.google.javascript.rhino.Node node97 = new com.google.javascript.rhino.Node((int) 'a', node67, node92);
        boolean boolean98 = node67.isThis();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(staticSourceFile37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(staticSourceFile44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSType75);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesArguments();
        boolean boolean5 = sideEffectFlags0.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 8);
        int int3 = node1.getIntProp(15);
        node1.detachChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node6.getStaticSourceFile();
        node6.setVarArgs(false);
        boolean boolean13 = node6.isFromExterns();
        boolean boolean14 = node6.isNull();
        boolean boolean15 = node6.isFalse();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        boolean boolean22 = node17.isAssignAdd();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node29 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node30 = node24.removeFirstChild();
        com.google.javascript.rhino.Node node31 = node6.useSourceInfoIfMissingFrom(node24);
        boolean boolean32 = node1.hasChild(node6);
        node1.setLineno((int) (byte) 100);
        boolean boolean35 = node1.isQualifiedName();
        boolean boolean36 = node1.isGetElem();
        node1.setLineno(409700);
        boolean boolean39 = node1.isOnlyModifiesThisCall();
        boolean boolean40 = node1.isRegExp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isObjectLit();
        boolean boolean5 = node3.isFunction();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        boolean boolean14 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node9.copyInformationFromForTree(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node27 = node9.useSourceInfoFrom(node23);
        boolean boolean28 = node27.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isArrayLit();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        boolean boolean36 = node35.isOnlyModifiesThisCall();
        boolean boolean37 = node35.isEmpty();
        boolean boolean38 = node35.isReturn();
        boolean boolean39 = node35.isNE();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(4095, node27, node30, node35, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("");
        node44.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(36, node42, node44, node51);
        com.google.javascript.rhino.Node node53 = node3.copyInformationFromForTree(node44);
        node53.putBooleanProp(45, true);
        boolean boolean57 = node53.isFromExterns();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        boolean boolean36 = node28.isComma();
        boolean boolean37 = node28.isSwitch();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node19.isUnscopedQualifiedName();
        node19.putIntProp((int) (short) 0, 42);
        boolean boolean24 = node19.isObjectLit();
        com.google.javascript.rhino.Node node25 = node19.cloneNode();
        boolean boolean26 = node19.isOptionalArg();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node28 = node10.useSourceInfoFrom(node24);
        boolean boolean29 = node28.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isReturn();
        boolean boolean40 = node36.isNE();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(4095, node28, node31, node36, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node44 = node7.useSourceInfoIfMissingFrom(node43);
        node1.addChildrenToBack(node7);
        com.google.javascript.rhino.Node node46 = node1.cloneNode();
        boolean boolean47 = node46.isOptionalArg();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        node1.putBooleanProp((int) (byte) 10, false);
        boolean boolean11 = node1.isBreak();
        boolean boolean12 = node1.hasMoreThanOneChild();
        boolean boolean13 = node1.isTrue();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node1.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder14.append("TYPEOF 0\n    STRING \n");
        fileLevelJsDocBuilder14.append("hi!");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isTypeOf();
        boolean boolean5 = node3.isInc();
        boolean boolean6 = node3.isSwitch();
        node3.setDouble((double) (-1));
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node41 = node20.clonePropsFrom(node39);
        node39.setQuotedString();
        java.lang.String[] strArray45 = new java.lang.String[] { "STRING ", "Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nTYPEOF 0\n    STRING \n\n\nSubtree1: STRING \n\n\nSubtree2: TYPEOF 0\n    STRING \n" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet46);
        boolean boolean49 = node39.isCase();
        boolean boolean50 = node39.isScript();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isBlock();
        boolean boolean5 = node3.isNE();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = null;
        node3.setStaticSourceFile(staticSourceFile6);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node16.hasChildren();
        boolean boolean22 = node16.isNumber();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        boolean boolean29 = node24.isAssignAdd();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        node31.setSourceEncodedPosition(4095);
        boolean boolean34 = node31.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node31.getStaticSourceFile();
        com.google.javascript.rhino.Node node36 = node24.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node37 = node31.removeFirstChild();
        boolean boolean38 = node31.isAnd();
        boolean boolean39 = node31.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        boolean boolean42 = node41.isOnlyModifiesThisCall();
        boolean boolean43 = node41.isEmpty();
        boolean boolean44 = node41.isArrayLit();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isSetterDef();
        com.google.javascript.rhino.Node node49 = node41.srcref(node46);
        node31.addChildToFront(node41);
        com.google.javascript.rhino.Node node51 = node31.getLastChild();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        boolean boolean57 = node53.isBreak();
        boolean boolean58 = node53.isTypeOf();
        int int59 = node53.getCharno();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("");
        boolean boolean62 = node61.isOnlyModifiesThisCall();
        int int63 = node61.getSourceOffset();
        boolean boolean64 = node61.isExprResult();
        com.google.javascript.rhino.Node node65 = node53.srcref(node61);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        node67.setSourceEncodedPosition(4095);
        boolean boolean70 = node67.isCall();
        boolean boolean71 = node53.isEquivalentTo(node67);
        node53.setIsSyntheticBlock(true);
        node53.setSourceFileForTesting("STRING \n");
        boolean boolean76 = node53.isSwitch();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("");
        node78.setSourceEncodedPosition(4095);
        boolean boolean81 = node78.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile82 = node78.getStaticSourceFile();
        boolean boolean83 = node78.isAssignAdd();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("");
        node85.setSourceEncodedPosition(4095);
        boolean boolean88 = node85.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile89 = node85.getStaticSourceFile();
        com.google.javascript.rhino.Node node90 = node78.copyInformationFromForTree(node85);
        boolean boolean91 = node78.isNE();
        boolean boolean92 = node78.isThrow();
        boolean boolean93 = node78.wasEmptyNode();
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node(50, node16, node31, node53, node78);
        boolean boolean95 = node53.hasMoreThanOneChild();
        boolean boolean96 = node53.isComma();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4095 + "'", int59 == 4095);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(staticSourceFile82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(staticSourceFile89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isDec();
        int int17 = node8.getType();
        boolean boolean18 = node8.isInc();
        boolean boolean19 = node8.isInc();
        com.google.javascript.rhino.Node node21 = node8.getAncestor(4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = null;
        // The following exception was thrown during execution in test generation
        try {
            node21.setStaticSourceFile(staticSourceFile22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 40 + "'", int17 == 40);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(node21);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isEmpty();
        boolean boolean6 = node1.isRegExp();
        boolean boolean7 = node1.isWith();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        boolean boolean11 = node9.isEmpty();
        boolean boolean12 = node9.isArrayLit();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        boolean boolean15 = node14.isOnlyModifiesThisCall();
        boolean boolean16 = node14.isSetterDef();
        com.google.javascript.rhino.Node node17 = node9.srcref(node14);
        com.google.javascript.rhino.Node node18 = node17.getLastSibling();
        boolean boolean19 = node18.isIf();
        boolean boolean20 = node18.hasMoreThanOneChild();
        node18.setVarArgs(true);
        boolean boolean23 = node18.isDo();
        boolean boolean24 = node18.isDefaultCase();
        boolean boolean25 = node18.isThis();
        node1.addChildToBack(node18);
        node18.addSuppression("hi!");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        java.lang.String str8 = node1.toString(true, true, false);
        boolean boolean9 = node1.isWith();
        node1.putIntProp((int) (byte) 10, 0);
        boolean boolean13 = node1.isAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        boolean boolean28 = node8.isGetElem();
        boolean boolean29 = node8.isReturn();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray35, 12, 100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(53, nodeArray35);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100, nodeArray35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray35);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(409700, nodeArray35, 53, 2);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("STRING  0\n");
        node44.addChildrenToFront(node46);
        com.google.javascript.rhino.Node node48 = node8.useSourceInfoFromForTree(node44);
        com.google.javascript.rhino.Node node49 = node8.getNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node49);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        boolean boolean65 = node63.isOr();
        boolean boolean66 = node63.isNumber();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        node16.setVarArgs(false);
        boolean boolean23 = node16.isFromExterns();
        boolean boolean24 = node16.isNull();
        boolean boolean25 = node16.isFalse();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        node27.setSourceEncodedPosition(4095);
        boolean boolean30 = node27.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node27.getStaticSourceFile();
        boolean boolean32 = node27.isAssignAdd();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("");
        node34.setSourceEncodedPosition(4095);
        boolean boolean37 = node34.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = node34.getStaticSourceFile();
        com.google.javascript.rhino.Node node39 = node27.copyInformationFromForTree(node34);
        com.google.javascript.rhino.Node node40 = node34.removeFirstChild();
        com.google.javascript.rhino.Node node41 = node16.useSourceInfoIfMissingFrom(node34);
        com.google.javascript.rhino.Node node42 = node14.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(45, node42);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable44 = node42.children();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(staticSourceFile31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(staticSourceFile38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(nodeIterable44);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        com.google.javascript.rhino.Node node4 = node1.removeFirstChild();
        boolean boolean5 = node1.isFalse();
        boolean boolean6 = node1.isNumber();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        java.lang.String str6 = node1.toStringTree();
        com.google.javascript.rhino.Node node7 = node1.getLastChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "STRING  0\n" + "'", str6, "STRING  0\n");
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        java.lang.String str7 = node2.toStringTree();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(42);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(31, node2, node9);
        int int11 = node9.getChildCount();
        boolean boolean12 = node9.isBreak();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "STRING  0\n" + "'", str7, "STRING  0\n");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 8);
        boolean boolean2 = node1.isStringKey();
        boolean boolean3 = node1.isQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        node22.setWasEmptyNode(true);
        boolean boolean27 = node22.isAdd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("TYPEOF");
        boolean boolean2 = node1.isSyntheticBlock();
        int int3 = node1.getType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 40 + "'", int3 == 40);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 8);
        com.google.javascript.rhino.Node node2 = node1.getLastSibling();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node6.getStaticSourceFile();
        boolean boolean11 = node6.isAssignAdd();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        com.google.javascript.rhino.Node node18 = node6.copyInformationFromForTree(node13);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        boolean boolean21 = node20.isOnlyModifiesThisCall();
        boolean boolean22 = node20.isEmpty();
        boolean boolean23 = node20.isArrayLit();
        com.google.javascript.rhino.Node node24 = node6.useSourceInfoFrom(node20);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] { node6 };
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(32, nodeArray25);
        int int28 = node26.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        node36.setSourceEncodedPosition(4095);
        boolean boolean39 = node36.isNot();
        boolean boolean40 = node36.isBreak();
        boolean boolean41 = node36.isIn();
        com.google.javascript.rhino.Node node42 = node30.useSourceInfoIfMissingFromForTree(node36);
        com.google.javascript.rhino.Node node43 = node26.useSourceInfoFrom(node36);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        node45.setSourceEncodedPosition(4095);
        boolean boolean48 = node45.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = node45.getStaticSourceFile();
        boolean boolean50 = node45.isAssignAdd();
        java.util.Set<java.lang.String> strSet51 = node45.getDirectives();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node53.getStaticSourceFile();
        node53.setVarArgs(false);
        boolean boolean60 = node53.isFromExterns();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        node62.setSourceEncodedPosition(4095);
        boolean boolean65 = node62.isNot();
        com.google.javascript.rhino.Node node66 = node62.getLastSibling();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(37, node26, node45, node53, node66);
        boolean boolean68 = node67.isExprResult();
        com.google.javascript.rhino.Node node69 = node67.removeFirstChild();
        boolean boolean70 = node2.isEquivalentTo(node67);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(staticSourceFile49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(strSet51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        boolean boolean6 = node1.isAssign();
        boolean boolean7 = node1.isArrayLit();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        com.google.javascript.rhino.Node node9 = node1.cloneTree();
        boolean boolean10 = node9.isArrayLit();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable11 = node9.getAncestors();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(ancestorIterable11);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING  0");
        boolean boolean2 = node1.isDefaultCase();
        boolean boolean3 = node1.isDec();
        boolean boolean4 = node1.isNew();
        boolean boolean5 = node1.isNull();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(49);
        sideEffectFlags1.clearSideEffectFlags();
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.clearSideEffectFlags();
        int int3 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setAllFlags();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 47 + "'", int3 == 47);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int4 = node3.getLength();
        boolean boolean5 = node3.isStringKey();
        int int6 = node3.getSourcePosition();
        boolean boolean7 = node3.isExprResult();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 409700 + "'", int6 == 409700);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        node1.putBooleanProp((int) (byte) 10, false);
        com.google.javascript.rhino.Node node11 = node1.getFirstChild();
        boolean boolean12 = node1.isFalse();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        java.lang.String str21 = node14.toString(true, true, false);
        boolean boolean22 = node14.isWith();
        node14.putIntProp((int) (byte) 10, 0);
        boolean boolean26 = node14.isContinue();
        boolean boolean27 = node14.hasOneChild();
        boolean boolean28 = node14.isCatch();
        node1.addChildToBack(node14);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "STRING  0" + "'", str21, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(12, "STRING  0");
        com.google.javascript.rhino.InputId inputId3 = node2.getInputId();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(inputId3);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.clearSideEffectFlags();
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesGlobalState();
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isTypeOf();
        boolean boolean5 = node3.isInc();
        com.google.javascript.rhino.Node node6 = node3.cloneTree();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder7 = node6.new FileLevelJsDocBuilder();
        int int8 = node6.getSourceOffset();
        boolean boolean9 = node6.isIf();
        boolean boolean10 = node6.isName();
        boolean boolean11 = node6.isReturn();
        boolean boolean12 = node6.isVarArgs();
        boolean boolean13 = node6.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder22 = node3.new FileLevelJsDocBuilder();
        boolean boolean23 = node3.isDefaultCase();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) 0, node3, (int) ' ', 53);
        boolean boolean27 = node3.isQuotedString();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        node29.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node32 = node29.getLastSibling();
        node29.setSourceFileForTesting("");
        node3.addChildrenToFront(node29);
        boolean boolean36 = node29.isBreak();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (short) 0, 32, 40);
        boolean boolean41 = node40.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node42 = node40.getParent();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(0, node29, node42, 52, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(node42);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 1, "", (int) (short) -1, 36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node4.children();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(nodeIterable5);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        boolean boolean28 = node18.isCatch();
        int int29 = node18.getLength();
        boolean boolean30 = node18.isThrow();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node19.isUnscopedQualifiedName();
        com.google.javascript.rhino.InputId inputId21 = node19.getInputId();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(inputId21);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        boolean boolean14 = node1.isAssign();
        int int15 = node1.getType();
        boolean boolean16 = node1.isReturn();
        boolean boolean17 = node1.isString();
        boolean boolean18 = node1.isDefaultCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        boolean boolean30 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node25.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node43 = node25.useSourceInfoFrom(node39);
        boolean boolean44 = node43.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isReturn();
        boolean boolean55 = node51.isNE();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node43, node46, node51, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(36, node58, node60, node67);
        boolean boolean69 = node67.isTypeOf();
        boolean boolean70 = node67.isGetterDef();
        boolean boolean71 = node67.isFor();
        boolean boolean72 = node1.isEquivalentToTyped(node67);
        java.lang.Object obj74 = node1.getProp(0);
        boolean boolean75 = node1.isSyntheticBlock();
        boolean boolean76 = node1.isIf();
        node1.putBooleanProp(42, true);
        boolean boolean80 = node1.isNot();
        boolean boolean81 = node1.isWith();
        int int82 = node1.getChildCount();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node4 = node1.getLastSibling();
        boolean boolean5 = node1.isExprResult();
        boolean boolean6 = node1.hasChildren();
        boolean boolean7 = node1.isTrue();
        java.util.Set<java.lang.String> strSet8 = node1.getDirectives();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node node40 = node37.getAncestor(38);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node40);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (short) 0, 32, 40);
        boolean boolean4 = node3.isOnlyModifiesThisCall();
        boolean boolean5 = node3.isIf();
        boolean boolean6 = node3.isCatch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node4.isAnd();
        node4.setLength(4095);
        node4.setLength(54);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean84 = node83.isTypeOf();
        boolean boolean85 = node83.isInc();
        com.google.javascript.rhino.Node node86 = node4.useSourceInfoIfMissingFrom(node83);
        boolean boolean88 = node83.getBooleanProp(0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        boolean boolean53 = node48.isAssignAdd();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("");
        node55.setSourceEncodedPosition(4095);
        boolean boolean58 = node55.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile59 = node55.getStaticSourceFile();
        com.google.javascript.rhino.Node node60 = node48.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        boolean boolean63 = node62.isOnlyModifiesThisCall();
        boolean boolean64 = node62.isEmpty();
        boolean boolean65 = node62.isArrayLit();
        com.google.javascript.rhino.Node node66 = node48.useSourceInfoFrom(node62);
        boolean boolean67 = node62.hasChildren();
        boolean boolean68 = node62.isNumber();
        boolean boolean69 = node62.isTry();
        com.google.javascript.rhino.Node node70 = node62.cloneTree();
        com.google.javascript.rhino.Node node71 = node38.srcrefTree(node70);
        boolean boolean72 = node71.isReturn();
        boolean boolean73 = node71.isObjectLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(staticSourceFile59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        com.google.javascript.rhino.Node node28 = node18.getLastChild();
        boolean boolean29 = node18.isNumber();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        node18.setStaticSourceFile(staticSourceFile30);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isReturn();
        boolean boolean6 = node2.isRegExp();
        int int7 = node2.getLength();
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 8);
        int int12 = node10.getIntProp(15);
        node10.detachChildren();
        java.lang.String str14 = node10.toStringTree();
        int int15 = node10.getLength();
        java.lang.Object obj17 = node10.getProp((int) (short) 1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        boolean boolean28 = node24.isBreak();
        boolean boolean29 = node24.isIn();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        node31.setSourceEncodedPosition(4095);
        boolean boolean34 = node31.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node31.getStaticSourceFile();
        boolean boolean36 = node31.isAssignAdd();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        boolean boolean41 = node38.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = node38.getStaticSourceFile();
        com.google.javascript.rhino.Node node43 = node31.copyInformationFromForTree(node38);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        boolean boolean46 = node45.isOnlyModifiesThisCall();
        boolean boolean47 = node45.isEmpty();
        boolean boolean48 = node45.isArrayLit();
        com.google.javascript.rhino.Node node49 = node31.useSourceInfoFrom(node45);
        boolean boolean50 = node31.isInc();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node53.getStaticSourceFile();
        boolean boolean58 = node53.isAssignAdd();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        boolean boolean63 = node60.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = node60.getStaticSourceFile();
        com.google.javascript.rhino.Node node65 = node53.copyInformationFromForTree(node60);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isArrayLit();
        com.google.javascript.rhino.Node node71 = node53.useSourceInfoFrom(node67);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] { node53 };
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(32, nodeArray72);
        int int75 = node73.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        boolean boolean78 = node77.isOnlyModifiesThisCall();
        boolean boolean79 = node77.isEmpty();
        boolean boolean80 = node77.isReturn();
        boolean boolean81 = node77.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("");
        node83.setSourceEncodedPosition(4095);
        boolean boolean86 = node83.isNot();
        boolean boolean87 = node83.isBreak();
        boolean boolean88 = node83.isIn();
        com.google.javascript.rhino.Node node89 = node77.useSourceInfoIfMissingFromForTree(node83);
        com.google.javascript.rhino.Node node90 = node73.useSourceInfoFrom(node83);
        boolean boolean91 = node90.isLabelName();
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node(29, node22, node24, node31, node90);
        boolean boolean93 = node90.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node94 = node90.getParent();
        boolean boolean96 = node90.getBooleanProp(1);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node99 = new com.google.javascript.rhino.Node(4095, node2, node8, node10, node90, 31, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER 8.0\n" + "'", str14, "NUMBER 8.0\n");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(staticSourceFile42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(staticSourceFile64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isReturn();
        boolean boolean6 = node2.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType7 = node2.getJSType();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        boolean boolean13 = node9.isBreak();
        boolean boolean14 = node9.isTypeOf();
        boolean boolean15 = node9.isInc();
        boolean boolean16 = node9.isWhile();
        node9.setSourceEncodedPosition((-1));
        boolean boolean19 = node2.hasChild(node9);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(37, node9, 10, 48);
        node9.setSourceEncodedPositionForTree(30);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        boolean boolean19 = node15.isVarArgs();
        node15.setSourceFileForTesting("Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nTYPEOF 0\n    STRING \n\n\nSubtree1: STRING \n\n\nSubtree2: TYPEOF 0\n    STRING \n");
        com.google.javascript.rhino.Node node22 = node8.copyInformationFromForTree(node15);
        boolean boolean23 = node8.isScript();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node29 = node8.copyInformationFromForTree(node28);
        boolean boolean30 = node29.isNew();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        int int3 = node1.getSourceOffset();
        boolean boolean4 = node1.isLabel();
        boolean boolean5 = node1.isStringKey();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        int int3 = node1.getSourceOffset();
        boolean boolean4 = node1.isLabel();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isEmpty();
        boolean boolean9 = node6.isArrayLit();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        boolean boolean12 = node11.isOnlyModifiesThisCall();
        boolean boolean13 = node11.isSetterDef();
        com.google.javascript.rhino.Node node14 = node6.srcref(node11);
        com.google.javascript.rhino.Node node15 = node14.getLastSibling();
        boolean boolean16 = node15.isIf();
        node15.setLength(4);
        boolean boolean19 = node15.isFunction();
        com.google.javascript.rhino.Node node20 = node1.useSourceInfoIfMissingFromForTree(node15);
        node15.putIntProp((int) (short) 0, 2);
        node15.setSourceEncodedPosition((int) (byte) 0);
        java.lang.String str26 = node15.getString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setThrows();
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 8);
        int int3 = node1.getIntProp(15);
        node1.detachChildren();
        boolean boolean5 = node1.isInstanceOf();
        boolean boolean6 = node1.isFalse();
        boolean boolean7 = node1.isName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        com.google.javascript.rhino.InputId inputId14 = null;
        node13.setInputId(inputId14);
        boolean boolean16 = node13.isBlock();
        boolean boolean17 = node13.isInstanceOf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(29, "STRING  0");
        boolean boolean3 = node2.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setMutatesThis();
        int int4 = sideEffectFlags0.valueOf();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n", 10, (int) (short) 10);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(52);
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node16.hasChildren();
        boolean boolean22 = node16.isNumber();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        boolean boolean29 = node24.isAssignAdd();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        node31.setSourceEncodedPosition(4095);
        boolean boolean34 = node31.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node31.getStaticSourceFile();
        com.google.javascript.rhino.Node node36 = node24.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node37 = node31.removeFirstChild();
        boolean boolean38 = node31.isAnd();
        boolean boolean39 = node31.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        boolean boolean42 = node41.isOnlyModifiesThisCall();
        boolean boolean43 = node41.isEmpty();
        boolean boolean44 = node41.isArrayLit();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isSetterDef();
        com.google.javascript.rhino.Node node49 = node41.srcref(node46);
        node31.addChildToFront(node41);
        com.google.javascript.rhino.Node node51 = node31.getLastChild();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        boolean boolean57 = node53.isBreak();
        boolean boolean58 = node53.isTypeOf();
        int int59 = node53.getCharno();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("");
        boolean boolean62 = node61.isOnlyModifiesThisCall();
        int int63 = node61.getSourceOffset();
        boolean boolean64 = node61.isExprResult();
        com.google.javascript.rhino.Node node65 = node53.srcref(node61);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        node67.setSourceEncodedPosition(4095);
        boolean boolean70 = node67.isCall();
        boolean boolean71 = node53.isEquivalentTo(node67);
        node53.setIsSyntheticBlock(true);
        node53.setSourceFileForTesting("STRING \n");
        boolean boolean76 = node53.isSwitch();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("");
        node78.setSourceEncodedPosition(4095);
        boolean boolean81 = node78.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile82 = node78.getStaticSourceFile();
        boolean boolean83 = node78.isAssignAdd();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("");
        node85.setSourceEncodedPosition(4095);
        boolean boolean88 = node85.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile89 = node85.getStaticSourceFile();
        com.google.javascript.rhino.Node node90 = node78.copyInformationFromForTree(node85);
        boolean boolean91 = node78.isNE();
        boolean boolean92 = node78.isThrow();
        boolean boolean93 = node78.wasEmptyNode();
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node(50, node16, node31, node53, node78);
        com.google.javascript.rhino.Node node95 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node96 = node53.srcref(node95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4095 + "'", int59 == 4095);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(staticSourceFile82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(staticSourceFile89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 49, 39, (int) '#');
        com.google.javascript.rhino.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        com.google.javascript.rhino.Node node6 = node5.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = node6.isInc();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        int int11 = node7.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node14.getStaticSourceFile();
        boolean boolean19 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        com.google.javascript.rhino.Node node26 = node14.copyInformationFromForTree(node21);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isArrayLit();
        com.google.javascript.rhino.Node node32 = node14.useSourceInfoFrom(node28);
        boolean boolean33 = node32.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        boolean boolean36 = node35.isOnlyModifiesThisCall();
        boolean boolean37 = node35.isEmpty();
        boolean boolean38 = node35.isArrayLit();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        boolean boolean41 = node40.isOnlyModifiesThisCall();
        boolean boolean42 = node40.isEmpty();
        boolean boolean43 = node40.isReturn();
        boolean boolean44 = node40.isNE();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(4095, node32, node35, node40, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node48 = null;
        int int49 = node32.getIndexOfChild(node48);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node53 = node32.clonePropsFrom(node51);
        int int54 = node51.getSideEffectFlags();
        node7.addChildToBack(node51);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        boolean boolean58 = node57.isOnlyModifiesThisCall();
        boolean boolean59 = node57.isEmpty();
        boolean boolean60 = node57.isReturn();
        boolean boolean61 = node57.isRegExp();
        java.lang.String str62 = node57.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable63 = node57.getAncestors();
        boolean boolean64 = node57.isScript();
        boolean boolean65 = node7.isEquivalentTo(node57);
        int int66 = node7.getLength();
        boolean boolean67 = node7.isRegExp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "STRING \n" + "'", str62, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        node5.setSourceEncodedPosition(4095);
        boolean boolean8 = node5.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node5.getStaticSourceFile();
        boolean boolean10 = node5.isAssignAdd();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        com.google.javascript.rhino.Node node17 = node5.copyInformationFromForTree(node12);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        boolean boolean20 = node19.isOnlyModifiesThisCall();
        boolean boolean21 = node19.isEmpty();
        boolean boolean22 = node19.isArrayLit();
        com.google.javascript.rhino.Node node23 = node5.useSourceInfoFrom(node19);
        boolean boolean24 = node23.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isArrayLit();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isReturn();
        boolean boolean35 = node31.isNE();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(4095, node23, node26, node31, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoIfMissingFrom(node38);
        boolean boolean40 = node39.isNull();
        boolean boolean41 = node39.isFromExterns();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        boolean boolean46 = node43.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        boolean boolean48 = node43.isAssignAdd();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        com.google.javascript.rhino.Node node55 = node43.copyInformationFromForTree(node50);
        com.google.javascript.rhino.Node node56 = node50.removeFirstChild();
        boolean boolean57 = node50.isAnd();
        boolean boolean58 = node50.isThis();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(0, node39, node50);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("");
        node61.setSourceEncodedPosition(4095);
        boolean boolean64 = node61.isNot();
        boolean boolean65 = node61.isBreak();
        boolean boolean66 = node61.isTypeOf();
        int int67 = node61.getCharno();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("");
        boolean boolean70 = node69.isOnlyModifiesThisCall();
        int int71 = node69.getSourceOffset();
        boolean boolean72 = node69.isExprResult();
        com.google.javascript.rhino.Node node73 = node61.srcref(node69);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("");
        boolean boolean76 = node75.isOnlyModifiesThisCall();
        boolean boolean77 = node75.isSetterDef();
        com.google.javascript.rhino.Node node79 = node75.getAncestor((int) (short) 0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder80 = node79.new FileLevelJsDocBuilder();
        boolean boolean81 = node79.isTrue();
        node79.setLineno(409700);
        boolean boolean84 = node79.isTrue();
        // The following exception was thrown during execution in test generation
        try {
            node50.addChildBefore(node61, node79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4095 + "'", int67 == 4095);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        node2.removeProp(12);
        boolean boolean7 = node2.isParamList();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        boolean boolean16 = node11.isAssignAdd();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node23 = node11.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node29 = node11.useSourceInfoFrom(node25);
        boolean boolean30 = node29.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = node32.isOnlyModifiesThisCall();
        boolean boolean34 = node32.isEmpty();
        boolean boolean35 = node32.isArrayLit();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        boolean boolean38 = node37.isOnlyModifiesThisCall();
        boolean boolean39 = node37.isEmpty();
        boolean boolean40 = node37.isReturn();
        boolean boolean41 = node37.isNE();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(4095, node29, node32, node37, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(36, node44, node46, node53);
        boolean boolean55 = node44.isGetElem();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        boolean boolean58 = node57.isOnlyModifiesThisCall();
        boolean boolean59 = node57.isEmpty();
        boolean boolean60 = node57.isArrayLit();
        boolean boolean61 = node57.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node62 = node44.srcref(node57);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        boolean boolean69 = node64.isAssignAdd();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("");
        node71.setSourceEncodedPosition(4095);
        boolean boolean74 = node71.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile75 = node71.getStaticSourceFile();
        com.google.javascript.rhino.Node node76 = node64.copyInformationFromForTree(node71);
        com.google.javascript.rhino.Node node77 = node71.removeFirstChild();
        boolean boolean78 = node71.isAnd();
        node71.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node83 = node71.getAncestor(0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable84 = node83.siblings();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(15, node2, node57, node83, 43, (int) (short) 10);
        int int89 = node87.getIntProp(1);
        boolean boolean90 = node87.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(staticSourceFile75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(nodeIterable84);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        java.lang.String str7 = node2.toStringTree();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(42);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(31, node2, node9);
        int int11 = node9.getChildCount();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isCall();
        boolean boolean17 = node13.isAssign();
        boolean boolean18 = node13.hasOneChild();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        boolean boolean21 = node20.isOnlyModifiesThisCall();
        boolean boolean22 = node20.isEmpty();
        boolean boolean23 = node20.isReturn();
        boolean boolean24 = node20.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        node26.setSourceEncodedPosition(4095);
        boolean boolean29 = node26.isNot();
        boolean boolean30 = node26.isBreak();
        boolean boolean31 = node26.isIn();
        com.google.javascript.rhino.Node node32 = node20.useSourceInfoIfMissingFromForTree(node26);
        com.google.javascript.rhino.Node node33 = node32.cloneNode();
        com.google.javascript.rhino.Node node34 = node13.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        node36.setSourceEncodedPosition(4095);
        boolean boolean39 = node36.isNot();
        boolean boolean40 = node36.isBreak();
        boolean boolean41 = node36.isTypeOf();
        boolean boolean42 = node36.isInc();
        boolean boolean43 = node36.isWhile();
        node36.setSourceEncodedPosition((-1));
        com.google.javascript.rhino.Node node46 = node36.getNext();
        boolean boolean47 = node36.isCall();
        node33.addChildrenToFront(node36);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        node51.setSourceEncodedPosition(4095);
        boolean boolean54 = node51.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = node51.getStaticSourceFile();
        boolean boolean56 = node51.isAssignAdd();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node58.getStaticSourceFile();
        com.google.javascript.rhino.Node node63 = node51.copyInformationFromForTree(node58);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        boolean boolean66 = node65.isOnlyModifiesThisCall();
        boolean boolean67 = node65.isEmpty();
        boolean boolean68 = node65.isArrayLit();
        com.google.javascript.rhino.Node node69 = node51.useSourceInfoFrom(node65);
        boolean boolean70 = node69.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        boolean boolean73 = node72.isOnlyModifiesThisCall();
        boolean boolean74 = node72.isEmpty();
        boolean boolean75 = node72.isArrayLit();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        boolean boolean78 = node77.isOnlyModifiesThisCall();
        boolean boolean79 = node77.isEmpty();
        boolean boolean80 = node77.isReturn();
        boolean boolean81 = node77.isNE();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(4095, node69, node72, node77, (int) (byte) 10, 32);
        boolean boolean85 = node77.isOptionalArg();
        com.google.javascript.rhino.Node node86 = node77.getLastSibling();
        boolean boolean87 = node77.isFalse();
        // The following exception was thrown during execution in test generation
        try {
            node9.addChildrenAfter(node36, node77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "STRING  0\n" + "'", str7, "STRING  0\n");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(staticSourceFile55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        boolean boolean11 = node10.isIf();
        boolean boolean12 = node10.isArrayLit();
        boolean boolean13 = node10.isSyntheticBlock();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        boolean boolean24 = node20.isBreak();
        boolean boolean25 = node20.isIn();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        node27.setSourceEncodedPosition(4095);
        boolean boolean30 = node27.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node27.getStaticSourceFile();
        boolean boolean32 = node27.isAssignAdd();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("");
        node34.setSourceEncodedPosition(4095);
        boolean boolean37 = node34.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = node34.getStaticSourceFile();
        com.google.javascript.rhino.Node node39 = node27.copyInformationFromForTree(node34);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        boolean boolean42 = node41.isOnlyModifiesThisCall();
        boolean boolean43 = node41.isEmpty();
        boolean boolean44 = node41.isArrayLit();
        com.google.javascript.rhino.Node node45 = node27.useSourceInfoFrom(node41);
        boolean boolean46 = node27.isInc();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        boolean boolean54 = node49.isAssignAdd();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        node56.setSourceEncodedPosition(4095);
        boolean boolean59 = node56.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile60 = node56.getStaticSourceFile();
        com.google.javascript.rhino.Node node61 = node49.copyInformationFromForTree(node56);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        boolean boolean64 = node63.isOnlyModifiesThisCall();
        boolean boolean65 = node63.isEmpty();
        boolean boolean66 = node63.isArrayLit();
        com.google.javascript.rhino.Node node67 = node49.useSourceInfoFrom(node63);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] { node49 };
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(32, nodeArray68);
        int int71 = node69.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("");
        boolean boolean74 = node73.isOnlyModifiesThisCall();
        boolean boolean75 = node73.isEmpty();
        boolean boolean76 = node73.isReturn();
        boolean boolean77 = node73.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("");
        node79.setSourceEncodedPosition(4095);
        boolean boolean82 = node79.isNot();
        boolean boolean83 = node79.isBreak();
        boolean boolean84 = node79.isIn();
        com.google.javascript.rhino.Node node85 = node73.useSourceInfoIfMissingFromForTree(node79);
        com.google.javascript.rhino.Node node86 = node69.useSourceInfoFrom(node79);
        boolean boolean87 = node86.isLabelName();
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(29, node18, node20, node27, node86);
        node10.addChildrenToBack(node88);
        boolean boolean90 = node10.isNew();
        com.google.javascript.rhino.Node node94 = com.google.javascript.rhino.Node.newString(52, "");
        node10.putProp((int) (short) -1, (java.lang.Object) node94);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(staticSourceFile31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(staticSourceFile38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(staticSourceFile60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node94);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node41 = node20.clonePropsFrom(node39);
        boolean boolean42 = node39.isVar();
        com.google.javascript.rhino.Node node43 = node39.getLastSibling();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isArrayLit();
        boolean boolean6 = node2.isVarArgs();
        boolean boolean7 = node2.isObjectLit();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        boolean boolean13 = node9.isBreak();
        boolean boolean14 = node9.isIn();
        boolean boolean15 = node9.isLabel();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        boolean boolean23 = node18.isAssignAdd();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        com.google.javascript.rhino.Node node30 = node18.copyInformationFromForTree(node25);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = node32.isOnlyModifiesThisCall();
        boolean boolean34 = node32.isEmpty();
        boolean boolean35 = node32.isArrayLit();
        com.google.javascript.rhino.Node node36 = node18.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] { node18 };
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(32, nodeArray37);
        int int40 = node38.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        boolean boolean43 = node42.isOnlyModifiesThisCall();
        boolean boolean44 = node42.isEmpty();
        boolean boolean45 = node42.isReturn();
        boolean boolean46 = node42.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        boolean boolean52 = node48.isBreak();
        boolean boolean53 = node48.isIn();
        com.google.javascript.rhino.Node node54 = node42.useSourceInfoIfMissingFromForTree(node48);
        com.google.javascript.rhino.Node node55 = node38.useSourceInfoFrom(node48);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        boolean boolean70 = node57.isWith();
        node48.addChildToFront(node57);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("");
        node73.setSourceEncodedPosition(4095);
        boolean boolean76 = node73.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile77 = node73.getStaticSourceFile();
        boolean boolean78 = node73.isAssignAdd();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("");
        node80.setSourceEncodedPosition(4095);
        boolean boolean83 = node80.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile84 = node80.getStaticSourceFile();
        com.google.javascript.rhino.Node node85 = node73.copyInformationFromForTree(node80);
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString("");
        boolean boolean88 = node87.isOnlyModifiesThisCall();
        boolean boolean89 = node87.isEmpty();
        boolean boolean90 = node87.isArrayLit();
        com.google.javascript.rhino.Node node91 = node73.useSourceInfoFrom(node87);
        boolean boolean92 = node87.hasChildren();
        com.google.javascript.rhino.Node node93 = node48.copyInformationFrom(node87);
        boolean boolean94 = node48.isThis();
        com.google.javascript.rhino.Node node97 = new com.google.javascript.rhino.Node(37, node2, node9, node48, 53, 37);
        boolean boolean98 = node9.isOptionalArg();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable99 = node9.children();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(staticSourceFile77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(staticSourceFile84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(nodeIterable99);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        int int65 = node23.getSideEffectFlags();
        boolean boolean66 = node23.isDefaultCase();
        com.google.javascript.rhino.Node node67 = node23.getLastSibling();
        java.lang.String str71 = node23.toString(false, true, false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "TYPEOF" + "'", str71, "TYPEOF");
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node4.isVarArgs();
        boolean boolean76 = node4.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        boolean boolean11 = node10.isIf();
        boolean boolean12 = node10.isArrayLit();
        boolean boolean13 = node10.isDebugger();
        com.google.javascript.rhino.Node node14 = node10.getFirstChild();
        com.google.javascript.rhino.Node node15 = node10.cloneNode();
        int int17 = node10.getIntProp(52);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(0);
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.clearAllFlags();
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(41);
        boolean boolean2 = node1.isNE();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node15.hasChildren();
        boolean boolean21 = node15.isName();
        node15.putIntProp(43, (int) (short) 0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        int int14 = node13.getSideEffectFlags();
        node13.setVarArgs(true);
        boolean boolean17 = node13.isContinue();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isIn();
        boolean boolean7 = node1.isOptionalArg();
        com.google.javascript.rhino.Node node8 = node1.getNext();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = node8.isStringKey();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isRegExp();
        java.lang.String str6 = node1.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable7 = node1.getAncestors();
        int int8 = node1.getCharno();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node1.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "STRING \n" + "'", str6, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(staticSourceFile9);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        java.lang.String str7 = node2.toStringTree();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(42);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(31, node2, node9);
        com.google.javascript.rhino.Node node11 = node2.removeFirstChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "STRING  0\n" + "'", str7, "STRING  0\n");
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(12, "GT 0\n");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        com.google.javascript.rhino.Node node28 = node8.getLastChild();
        boolean boolean29 = node8.isInstanceOf();
        boolean boolean30 = node8.isSwitch();
        boolean boolean31 = node8.isVar();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        boolean boolean14 = node1.isThis();
        int int15 = node1.getCharno();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        boolean boolean22 = node17.isAssignAdd();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node29 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node35 = node17.useSourceInfoFrom(node31);
        boolean boolean36 = node17.isVarArgs();
        int int37 = node17.getType();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("");
        boolean boolean56 = node55.isOnlyModifiesThisCall();
        boolean boolean57 = node55.isEmpty();
        boolean boolean58 = node55.isArrayLit();
        com.google.javascript.rhino.Node node59 = node41.useSourceInfoFrom(node55);
        boolean boolean60 = node59.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        boolean boolean63 = node62.isOnlyModifiesThisCall();
        boolean boolean64 = node62.isEmpty();
        boolean boolean65 = node62.isArrayLit();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isReturn();
        boolean boolean71 = node67.isNE();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(4095, node59, node62, node67, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("");
        node76.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(36, node74, node76, node83);
        boolean boolean85 = node83.isTypeOf();
        boolean boolean86 = node83.isGetterDef();
        boolean boolean87 = node83.isFor();
        boolean boolean88 = node17.isEquivalentToTyped(node83);
        com.google.javascript.rhino.Node node89 = node1.useSourceInfoIfMissingFrom(node17);
        boolean boolean90 = node1.isSwitch();
        node1.setCharno(38);
        com.google.javascript.rhino.jstype.JSType jSType93 = null;
        node1.setJSType(jSType93);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4095 + "'", int15 == 4095);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 40 + "'", int37 == 40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        int int7 = node1.getLineno();
        node1.setSourceFileForTesting("STRING ");
        boolean boolean10 = node1.isStringKey();
        java.lang.Object obj12 = node1.getProp((int) (short) 1);
        boolean boolean13 = node1.isBreak();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        boolean boolean14 = node1.isNE();
        boolean boolean15 = node1.isThrow();
        boolean boolean16 = node1.isFor();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        com.google.javascript.rhino.Node node27 = node26.getLastSibling();
        boolean boolean28 = node27.isIf();
        com.google.javascript.rhino.Node node29 = node1.clonePropsFrom(node27);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node50 = node32.useSourceInfoFrom(node46);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder51 = node32.new FileLevelJsDocBuilder();
        boolean boolean52 = node32.isDefaultCase();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (byte) 0, node32, (int) ' ', 53);
        boolean boolean56 = node32.isQuotedString();
        boolean boolean57 = node32.isDelProp();
        int int58 = node27.getIndexOfChild(node32);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        node7.setSourceEncodedPositionForTree(39);
        boolean boolean16 = node7.isIf();
        int int17 = node7.getSourceOffset();
        int int18 = node7.getSourceOffset();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] { node4 };
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(32, nodeArray23);
        int int26 = node24.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("");
        node34.setSourceEncodedPosition(4095);
        boolean boolean37 = node34.isNot();
        boolean boolean38 = node34.isBreak();
        boolean boolean39 = node34.isIn();
        com.google.javascript.rhino.Node node40 = node28.useSourceInfoIfMissingFromForTree(node34);
        com.google.javascript.rhino.Node node41 = node24.useSourceInfoFrom(node34);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        boolean boolean46 = node43.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        boolean boolean48 = node43.isAssignAdd();
        java.util.Set<java.lang.String> strSet49 = node43.getDirectives();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        node51.setSourceEncodedPosition(4095);
        boolean boolean54 = node51.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = node51.getStaticSourceFile();
        node51.setVarArgs(false);
        boolean boolean58 = node51.isFromExterns();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        boolean boolean63 = node60.isNot();
        com.google.javascript.rhino.Node node64 = node60.getLastSibling();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(37, node24, node43, node51, node64);
        boolean boolean66 = node65.isExprResult();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(49, node65, (int) (byte) 10, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            node69.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(strSet49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(staticSourceFile55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        boolean boolean65 = node42.isScript();
        boolean boolean66 = node42.isOr();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        boolean boolean7 = node1.isDec();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        boolean boolean14 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node9.copyInformationFromForTree(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node27 = node9.useSourceInfoFrom(node23);
        boolean boolean28 = node27.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node29 = node1.useSourceInfoFromForTree(node27);
        boolean boolean30 = node29.isStringKey();
        boolean boolean31 = node29.isNumber();
        boolean boolean32 = node29.isVarArgs();
        boolean boolean33 = node29.isDec();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags34 = null;
        // The following exception was thrown during execution in test generation
        try {
            node29.setSideEffectFlags(sideEffectFlags34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        boolean boolean30 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node25.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node43 = node25.useSourceInfoFrom(node39);
        boolean boolean44 = node43.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isReturn();
        boolean boolean55 = node51.isNE();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node43, node46, node51, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(36, node58, node60, node67);
        boolean boolean69 = node67.isTypeOf();
        boolean boolean70 = node67.isGetterDef();
        boolean boolean71 = node67.isFor();
        boolean boolean72 = node1.isEquivalentToTyped(node67);
        java.lang.Object obj74 = node1.getProp(0);
        boolean boolean75 = node1.isSyntheticBlock();
        node1.setLength(35);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("");
        boolean boolean80 = node79.isOnlyModifiesThisCall();
        boolean boolean81 = node79.isEmpty();
        com.google.javascript.rhino.Node node82 = node79.removeFirstChild();
        boolean boolean83 = node79.isCall();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable84 = node79.siblings();
        boolean boolean85 = node79.isGetProp();
        com.google.javascript.rhino.Node node86 = node1.useSourceInfoIfMissingFromForTree(node79);
        boolean boolean87 = node86.isThrow();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(nodeIterable84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        boolean boolean14 = node8.isLocalResultCall();
        boolean boolean15 = node8.isIf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        boolean boolean7 = node1.isDec();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(0);
        node1.addChildrenToBack(node9);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 12, (int) (short) -1);
        boolean boolean4 = node3.isAssign();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        int int11 = node7.getSideEffectFlags();
        node7.setVarArgs(true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        node39.putIntProp((int) (short) 10, 16);
        boolean boolean43 = node39.isCase();
        com.google.javascript.rhino.Node node44 = node39.getLastChild();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        boolean boolean49 = node46.isNot();
        boolean boolean50 = node46.isBreak();
        boolean boolean51 = node46.isTypeOf();
        int int52 = node46.getCharno();
        boolean boolean54 = node46.getBooleanProp(45);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        node56.setSourceEncodedPosition(4095);
        boolean boolean59 = node56.isNot();
        boolean boolean60 = node56.isBreak();
        boolean boolean61 = node56.isTypeOf();
        node56.setVarArgs(false);
        boolean boolean64 = node46.hasChild(node56);
        java.lang.String str65 = node46.toString();
        boolean boolean66 = node39.isEquivalentToTyped(node46);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4095 + "'", int52 == 4095);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "STRING  0" + "'", str65, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        boolean boolean6 = node2.isBreak();
        boolean boolean7 = node2.isTypeOf();
        int int8 = node2.getCharno();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        boolean boolean11 = node10.isOnlyModifiesThisCall();
        int int12 = node10.getSourceOffset();
        boolean boolean13 = node10.isExprResult();
        com.google.javascript.rhino.Node node14 = node2.srcref(node10);
        boolean boolean15 = node2.isAssign();
        int int16 = node2.getType();
        int int17 = node2.getSourcePosition();
        boolean boolean18 = node2.isGetterDef();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        boolean boolean25 = node20.isAssignAdd();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.isRegExp();
        int int32 = node27.getLength();
        boolean boolean33 = node27.isNumber();
        boolean boolean35 = node27.getBooleanProp(12);
        int int36 = node20.getIndexOfChild(node27);
        com.google.javascript.rhino.Node node37 = node2.copyInformationFrom(node27);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(35, node37, 41, 24);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4095 + "'", int8 == 4095);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 40 + "'", int16 == 40);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node37);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        boolean boolean7 = node1.isStringKey();
        boolean boolean8 = node1.isIf();
        boolean boolean9 = node1.isComma();
        boolean boolean10 = node1.isWhile();
        boolean boolean11 = node1.isExprResult();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 409700, 41, 46);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING NUMBER 8.0\n", 37, 40992);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        boolean boolean14 = node1.isAssign();
        int int15 = node1.getType();
        boolean boolean16 = node1.isFor();
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        node1.setJSType(jSType17);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        node28.setLineno((int) (short) 100);
        boolean boolean31 = node28.isVar();
        boolean boolean32 = node28.isParamList();
        boolean boolean33 = node28.isWhile();
        boolean boolean34 = node28.isThis();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node41 = node20.clonePropsFrom(node39);
        node39.setQuotedString();
        java.lang.String[] strArray45 = new java.lang.String[] { "STRING ", "Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nTYPEOF 0\n    STRING \n\n\nSubtree1: STRING \n\n\nSubtree2: TYPEOF 0\n    STRING \n" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet46);
        boolean boolean49 = node39.isNumber();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        boolean boolean14 = node13.isNE();
        boolean boolean15 = node13.isContinue();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        boolean boolean23 = node22.isOnlyModifiesThisCall();
        boolean boolean24 = node22.isSetterDef();
        com.google.javascript.rhino.Node node25 = node17.srcref(node22);
        node25.detachChildren();
        java.lang.String str27 = node25.getQualifiedName();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        node29.setSourceEncodedPosition(4095);
        boolean boolean32 = node29.isInstanceOf();
        com.google.javascript.rhino.Node node33 = node29.getNext();
        com.google.javascript.rhino.Node node34 = node25.copyInformationFromForTree(node29);
        boolean boolean35 = node13.isEquivalentTo(node34);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        boolean boolean6 = node1.isAssign();
        boolean boolean7 = node1.isArrayLit();
        com.google.javascript.rhino.Node node8 = node1.cloneTree();
        boolean boolean9 = node1.hasOneChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int4 = node3.getLength();
        java.util.Set<java.lang.String> strSet5 = node3.getDirectives();
        boolean boolean6 = node3.isThrow();
        boolean boolean7 = node3.isIf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        int int65 = node23.getSideEffectFlags();
        boolean boolean66 = node23.isFromExterns();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        boolean boolean69 = node68.isOnlyModifiesThisCall();
        boolean boolean70 = node68.isEmpty();
        com.google.javascript.rhino.Node node71 = node68.removeFirstChild();
        com.google.javascript.rhino.Node node72 = node23.useSourceInfoFrom(node68);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("");
        boolean boolean75 = node74.isOnlyModifiesThisCall();
        boolean boolean76 = node74.isEmpty();
        boolean boolean77 = node74.isReturn();
        boolean boolean78 = node74.isEmpty();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable79 = node74.siblings();
        com.google.javascript.rhino.Node node80 = node72.copyInformationFrom(node74);
        boolean boolean81 = node74.wasEmptyNode();
        boolean boolean82 = node74.isOptionalArg();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(nodeIterable79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isCall();
        boolean boolean5 = node1.isAssign();
        boolean boolean6 = node1.hasOneChild();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        boolean boolean11 = node8.isReturn();
        boolean boolean12 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        boolean boolean18 = node14.isBreak();
        boolean boolean19 = node14.isIn();
        com.google.javascript.rhino.Node node20 = node8.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node20.cloneNode();
        com.google.javascript.rhino.Node node22 = node1.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        boolean boolean29 = node24.isAssignAdd();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        node31.setSourceEncodedPosition(4095);
        boolean boolean34 = node31.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node31.getStaticSourceFile();
        com.google.javascript.rhino.Node node36 = node24.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node37 = node31.removeFirstChild();
        boolean boolean38 = node31.isAnd();
        node31.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node43 = node31.getAncestor(0);
        com.google.javascript.rhino.Node node44 = node22.useSourceInfoIfMissingFromForTree(node31);
        java.lang.String str45 = node31.getQualifiedName();
        boolean boolean46 = node31.isFor();
        boolean boolean47 = node31.isHook();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        boolean boolean14 = node1.isAssign();
        int int15 = node1.getType();
        boolean boolean16 = node1.isFor();
        boolean boolean17 = node1.isSetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isCall();
        boolean boolean5 = node1.isAssign();
        boolean boolean6 = node1.hasOneChild();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        boolean boolean11 = node8.isReturn();
        boolean boolean12 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        boolean boolean18 = node14.isBreak();
        boolean boolean19 = node14.isIn();
        com.google.javascript.rhino.Node node20 = node8.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node20.cloneNode();
        com.google.javascript.rhino.Node node22 = node1.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        boolean boolean29 = node24.isAssignAdd();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        node31.setSourceEncodedPosition(4095);
        boolean boolean34 = node31.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node31.getStaticSourceFile();
        com.google.javascript.rhino.Node node36 = node24.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node37 = node31.removeFirstChild();
        boolean boolean38 = node31.isAnd();
        node31.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node43 = node31.getAncestor(0);
        com.google.javascript.rhino.Node node44 = node22.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean45 = node44.isAdd();
        boolean boolean46 = node44.isName();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        node51.setSourceEncodedPosition(4095);
        boolean boolean54 = node51.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = node51.getStaticSourceFile();
        boolean boolean56 = node51.isAssignAdd();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node58.getStaticSourceFile();
        com.google.javascript.rhino.Node node63 = node51.copyInformationFromForTree(node58);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        boolean boolean66 = node65.isOnlyModifiesThisCall();
        boolean boolean67 = node65.isEmpty();
        boolean boolean68 = node65.isArrayLit();
        com.google.javascript.rhino.Node node69 = node51.useSourceInfoFrom(node65);
        boolean boolean70 = node69.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        boolean boolean73 = node72.isOnlyModifiesThisCall();
        boolean boolean74 = node72.isEmpty();
        boolean boolean75 = node72.isArrayLit();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        boolean boolean78 = node77.isOnlyModifiesThisCall();
        boolean boolean79 = node77.isEmpty();
        boolean boolean80 = node77.isReturn();
        boolean boolean81 = node77.isNE();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(4095, node69, node72, node77, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node85 = node48.useSourceInfoIfMissingFrom(node84);
        boolean boolean86 = node85.isOptionalArg();
        com.google.javascript.rhino.Node node87 = node44.srcref(node85);
        int int88 = node85.getCharno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(staticSourceFile55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 32 + "'", int88 == 32);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("");
        boolean boolean72 = node71.isOnlyModifiesThisCall();
        boolean boolean73 = node71.isEmpty();
        boolean boolean74 = node71.isArrayLit();
        com.google.javascript.rhino.Node node75 = node57.useSourceInfoFrom(node71);
        boolean boolean76 = node71.hasChildren();
        com.google.javascript.rhino.Node node77 = node32.copyInformationFrom(node71);
        boolean boolean78 = node32.hasChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = node32.getJSDocInfo();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node80 = node32.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNull(jSDocInfo79);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        boolean boolean29 = node22.isCall();
        com.google.javascript.rhino.Node node30 = node22.getLastChild();
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        boolean boolean32 = node31.isNew();
        int int33 = node31.getCharno();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean39 = node38.isBlock();
        boolean boolean40 = node38.isNE();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.Node node46 = node42.getLastSibling();
        node42.setVarArgs(true);
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        node42.setJSType(jSType49);
        com.google.javascript.rhino.Node node51 = node38.copyInformationFrom(node42);
        boolean boolean52 = node38.isHook();
        com.google.javascript.rhino.Node node53 = node38.getFirstChild();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        node56.setSourceEncodedPosition(4095);
        boolean boolean59 = node56.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile60 = node56.getStaticSourceFile();
        boolean boolean61 = node56.isAssignAdd();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        node63.setSourceEncodedPosition(4095);
        boolean boolean66 = node63.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile67 = node63.getStaticSourceFile();
        com.google.javascript.rhino.Node node68 = node56.copyInformationFromForTree(node63);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("");
        boolean boolean71 = node70.isOnlyModifiesThisCall();
        boolean boolean72 = node70.isEmpty();
        boolean boolean73 = node70.isArrayLit();
        com.google.javascript.rhino.Node node74 = node56.useSourceInfoFrom(node70);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] { node56 };
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(32, nodeArray75);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("");
        boolean boolean79 = node78.isOnlyModifiesThisCall();
        boolean boolean80 = node78.isEmpty();
        boolean boolean81 = node78.isReturn();
        com.google.javascript.rhino.Node node82 = node76.useSourceInfoFromForTree(node78);
        boolean boolean83 = node76.isCall();
        com.google.javascript.rhino.Node node84 = node76.getLastChild();
        node84.setQuotedString();
        int int86 = node84.getType();
        com.google.javascript.rhino.Node node87 = node38.srcref(node84);
        node31.putProp(12, (java.lang.Object) node84);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(staticSourceFile60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(staticSourceFile67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 40 + "'", int86 == 40);
        org.junit.Assert.assertNotNull(node87);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        int int8 = node2.getLineno();
        node2.setSourceFileForTesting("STRING ");
        boolean boolean11 = node2.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        boolean boolean26 = node20.isFromExterns();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        node28.setSourceEncodedPosition(4095);
        boolean boolean31 = node28.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = node28.getStaticSourceFile();
        boolean boolean33 = node28.isAssignAdd();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        com.google.javascript.rhino.Node node40 = node28.copyInformationFromForTree(node35);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        boolean boolean43 = node42.isOnlyModifiesThisCall();
        boolean boolean44 = node42.isEmpty();
        boolean boolean45 = node42.isArrayLit();
        com.google.javascript.rhino.Node node46 = node28.useSourceInfoFrom(node42);
        boolean boolean47 = node42.hasChildren();
        boolean boolean48 = node42.isNumber();
        boolean boolean49 = node42.isVarArgs();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node55 = node54.cloneTree();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(50, node2, node20, node42, node55, 32, 29);
        node2.setCharno(1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(staticSourceFile32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        boolean boolean7 = node1.isStringKey();
        boolean boolean8 = node1.isIf();
        int int9 = node1.getLength();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        boolean boolean15 = node11.isBreak();
        boolean boolean16 = node11.isTypeOf();
        int int17 = node11.getCharno();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        boolean boolean20 = node19.isOnlyModifiesThisCall();
        int int21 = node19.getSourceOffset();
        boolean boolean22 = node19.isExprResult();
        com.google.javascript.rhino.Node node23 = node11.srcref(node19);
        boolean boolean24 = node23.isNE();
        java.lang.String str25 = node23.toStringTree();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        node27.setSourceEncodedPosition(4095);
        boolean boolean30 = node27.isNot();
        boolean boolean31 = node27.isBreak();
        boolean boolean32 = node27.isTypeOf();
        boolean boolean33 = node27.isInc();
        boolean boolean34 = node27.isWhile();
        node27.setSourceEncodedPosition((-1));
        com.google.javascript.rhino.Node node37 = node27.getNext();
        boolean boolean38 = node27.isCall();
        com.google.javascript.rhino.Node node39 = node23.useSourceInfoIfMissingFromForTree(node27);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node40 = node1.removeChildAfter(node39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4095 + "'", int17 == 4095);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "STRING \n" + "'", str25, "STRING \n");
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isTypeOf();
        boolean boolean5 = node3.isInc();
        com.google.javascript.rhino.Node node6 = node3.cloneTree();
        boolean boolean7 = node3.wasEmptyNode();
        boolean boolean8 = node3.isWith();
        com.google.javascript.rhino.Node node9 = node3.removeFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        boolean boolean47 = node45.isTypeOf();
        boolean boolean48 = node45.isGetterDef();
        boolean boolean49 = node45.isFor();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node45.setJSType(jSType50);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        boolean boolean54 = node53.isOnlyModifiesThisCall();
        boolean boolean55 = node53.isEmpty();
        boolean boolean56 = node53.isArrayLit();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        boolean boolean59 = node58.isOnlyModifiesThisCall();
        boolean boolean60 = node58.isSetterDef();
        com.google.javascript.rhino.Node node61 = node53.srcref(node58);
        com.google.javascript.rhino.Node node62 = node61.getLastSibling();
        boolean boolean63 = node62.isIf();
        node45.addChildToFront(node62);
        boolean boolean65 = node62.isNull();
        node62.setSourceEncodedPositionForTree((int) (short) 1);
        com.google.javascript.rhino.Node node68 = node62.cloneNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node68);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isFor();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        boolean boolean14 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node9.copyInformationFromForTree(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node27 = node9.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] { node9 };
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(32, nodeArray28);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isReturn();
        com.google.javascript.rhino.Node node35 = node29.useSourceInfoFromForTree(node31);
        boolean boolean36 = node31.isAdd();
        node31.putBooleanProp(38, false);
        java.lang.String str40 = node1.checkTreeEquals(node31);
        boolean boolean41 = node31.isComma();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        boolean boolean44 = node43.isOnlyModifiesThisCall();
        boolean boolean45 = node43.isEmpty();
        com.google.javascript.rhino.Node node46 = node43.removeFirstChild();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        node51.setSourceEncodedPosition(4095);
        boolean boolean54 = node51.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = node51.getStaticSourceFile();
        boolean boolean56 = node51.isAssignAdd();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node58.getStaticSourceFile();
        com.google.javascript.rhino.Node node63 = node51.copyInformationFromForTree(node58);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        boolean boolean66 = node65.isOnlyModifiesThisCall();
        boolean boolean67 = node65.isEmpty();
        boolean boolean68 = node65.isArrayLit();
        com.google.javascript.rhino.Node node69 = node51.useSourceInfoFrom(node65);
        boolean boolean70 = node69.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        boolean boolean73 = node72.isOnlyModifiesThisCall();
        boolean boolean74 = node72.isEmpty();
        boolean boolean75 = node72.isArrayLit();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        boolean boolean78 = node77.isOnlyModifiesThisCall();
        boolean boolean79 = node77.isEmpty();
        boolean boolean80 = node77.isReturn();
        boolean boolean81 = node77.isNE();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(4095, node69, node72, node77, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString("");
        node86.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node93 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node(36, node84, node86, node93);
        node43.putProp(12, (java.lang.Object) node86);
        com.google.javascript.rhino.Node node96 = node31.copyInformationFromForTree(node86);
        boolean boolean97 = node96.isDec();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(staticSourceFile55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node1.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder20.append("hi!");
        fileLevelJsDocBuilder20.append("STRING  0\n    NUMBER 0.0 [synthetic: 1]\n");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node15.hasChildren();
        boolean boolean21 = node15.isNumber();
        boolean boolean22 = node15.isVarArgs();
        boolean boolean23 = node15.isInstanceOf();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        node26.setSourceEncodedPosition(4095);
        boolean boolean29 = node26.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node26.getStaticSourceFile();
        boolean boolean31 = node26.isAssignAdd();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = node33.getStaticSourceFile();
        com.google.javascript.rhino.Node node38 = node26.copyInformationFromForTree(node33);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        boolean boolean41 = node40.isOnlyModifiesThisCall();
        boolean boolean42 = node40.isEmpty();
        boolean boolean43 = node40.isArrayLit();
        com.google.javascript.rhino.Node node44 = node26.useSourceInfoFrom(node40);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] { node26 };
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(32, nodeArray45);
        int int48 = node46.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        boolean boolean51 = node50.isOnlyModifiesThisCall();
        boolean boolean52 = node50.isEmpty();
        boolean boolean53 = node50.isReturn();
        boolean boolean54 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        node56.setSourceEncodedPosition(4095);
        boolean boolean59 = node56.isNot();
        boolean boolean60 = node56.isBreak();
        boolean boolean61 = node56.isIn();
        com.google.javascript.rhino.Node node62 = node50.useSourceInfoIfMissingFromForTree(node56);
        com.google.javascript.rhino.Node node63 = node46.useSourceInfoFrom(node56);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder64 = node56.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        node68.setSourceEncodedPosition(4095);
        boolean boolean71 = node68.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile72 = node68.getStaticSourceFile();
        boolean boolean73 = node68.isAssignAdd();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("");
        node75.setSourceEncodedPosition(4095);
        boolean boolean78 = node75.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile79 = node75.getStaticSourceFile();
        com.google.javascript.rhino.Node node80 = node68.copyInformationFromForTree(node75);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("");
        boolean boolean83 = node82.isOnlyModifiesThisCall();
        boolean boolean84 = node82.isEmpty();
        boolean boolean85 = node82.isArrayLit();
        com.google.javascript.rhino.Node node86 = node68.useSourceInfoFrom(node82);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder87 = node68.new FileLevelJsDocBuilder();
        boolean boolean88 = node68.isDefaultCase();
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((int) (byte) 0, node68, (int) ' ', 53);
        boolean boolean92 = node68.isQuotedString();
        node56.putProp(409700, (java.lang.Object) boolean92);
        com.google.javascript.rhino.Node node95 = node56.getAncestor(36);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node96 = node15.removeChildAfter(node56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(staticSourceFile30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(staticSourceFile37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(staticSourceFile72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(staticSourceFile79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(node95);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        boolean boolean14 = node1.isAssign();
        int int15 = node1.getType();
        int int16 = node1.getSourcePosition();
        boolean boolean17 = node1.isGetterDef();
        boolean boolean18 = node1.isIf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 8);
        int int3 = node1.getIntProp(15);
        node1.detachChildren();
        java.lang.String str5 = node1.toStringTree();
        boolean boolean6 = node1.isDelProp();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        boolean boolean14 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node9.copyInformationFromForTree(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node27 = node9.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] { node9 };
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(32, nodeArray28);
        int int31 = node29.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        boolean boolean34 = node33.isOnlyModifiesThisCall();
        boolean boolean35 = node33.isEmpty();
        boolean boolean36 = node33.isReturn();
        boolean boolean37 = node33.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        boolean boolean43 = node39.isBreak();
        boolean boolean44 = node39.isIn();
        com.google.javascript.rhino.Node node45 = node33.useSourceInfoIfMissingFromForTree(node39);
        com.google.javascript.rhino.Node node46 = node29.useSourceInfoFrom(node39);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        boolean boolean53 = node48.isAssignAdd();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("");
        node55.setSourceEncodedPosition(4095);
        boolean boolean58 = node55.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile59 = node55.getStaticSourceFile();
        com.google.javascript.rhino.Node node60 = node48.copyInformationFromForTree(node55);
        boolean boolean61 = node48.isWith();
        node39.addChildToFront(node48);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node39.children();
        com.google.javascript.rhino.Node node64 = node1.srcrefTree(node39);
        boolean boolean65 = node1.isCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 8.0\n" + "'", str5, "NUMBER 8.0\n");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(staticSourceFile59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        int int65 = node23.getSideEffectFlags();
        boolean boolean66 = node23.isFromExterns();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        boolean boolean69 = node68.isOnlyModifiesThisCall();
        boolean boolean70 = node68.isEmpty();
        com.google.javascript.rhino.Node node71 = node68.removeFirstChild();
        com.google.javascript.rhino.Node node72 = node23.useSourceInfoFrom(node68);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("");
        boolean boolean75 = node74.isOnlyModifiesThisCall();
        boolean boolean76 = node74.isEmpty();
        boolean boolean77 = node74.isReturn();
        boolean boolean78 = node74.isEmpty();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable79 = node74.siblings();
        com.google.javascript.rhino.Node node80 = node72.copyInformationFrom(node74);
        boolean boolean81 = node74.isAnd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(nodeIterable79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        boolean boolean47 = node36.isGetElem();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        boolean boolean53 = node49.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node54 = node36.srcref(node49);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder55 = node54.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        boolean boolean70 = node57.isNE();
        node57.setVarArgs(false);
        boolean boolean73 = node57.isStringKey();
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!", "", "TYPEOF", "STRING \n", "Node tree inequality:\nTree1:\nSTRING  [quoted: 1]\n\n\nTree2:\nNUMBER 37.0 100\n\n\nSubtree1: STRING  [quoted: 1]\n\n\nSubtree2: NUMBER 37.0 100\n" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        node57.setDirectives((java.util.Set<java.lang.String>) strSet80);
        node54.addChildrenToBack(node57);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        int int65 = node23.getSideEffectFlags();
        boolean boolean66 = node23.isFromExterns();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        boolean boolean69 = node68.isOnlyModifiesThisCall();
        boolean boolean70 = node68.isEmpty();
        com.google.javascript.rhino.Node node71 = node68.removeFirstChild();
        com.google.javascript.rhino.Node node72 = node23.useSourceInfoFrom(node68);
        boolean boolean73 = node23.isEmpty();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("");
        node75.setSourceEncodedPosition(4095);
        boolean boolean78 = node75.isNot();
        boolean boolean79 = node75.isBreak();
        boolean boolean80 = node75.isTypeOf();
        node75.putBooleanProp(45, true);
        node23.addChildrenToBack(node75);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable85 = node23.getAncestors();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(ancestorIterable85);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        boolean boolean58 = node56.isEmpty();
        boolean boolean59 = node56.isArrayLit();
        com.google.javascript.rhino.Node node60 = node42.useSourceInfoFrom(node56);
        boolean boolean61 = node60.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        boolean boolean64 = node63.isOnlyModifiesThisCall();
        boolean boolean65 = node63.isEmpty();
        boolean boolean66 = node63.isArrayLit();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        boolean boolean69 = node68.isOnlyModifiesThisCall();
        boolean boolean70 = node68.isEmpty();
        boolean boolean71 = node68.isReturn();
        boolean boolean72 = node68.isNE();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(4095, node60, node63, node68, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        node77.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(36, node75, node77, node84);
        java.lang.String str86 = node77.toString();
        com.google.javascript.rhino.Node node87 = node37.useSourceInfoFrom(node77);
        boolean boolean88 = node87.isFor();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "STRING  0" + "'", str86, "STRING  0");
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node4.isAnd();
        node4.setLength(4095);
        boolean boolean78 = node4.isComma();
        boolean boolean79 = node4.isGetElem();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int4 = node3.getLength();
        boolean boolean5 = node3.isStringKey();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        boolean boolean13 = node8.isAssignAdd();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node15.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node8.copyInformationFromForTree(node15);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        boolean boolean23 = node22.isOnlyModifiesThisCall();
        boolean boolean24 = node22.isEmpty();
        boolean boolean25 = node22.isArrayLit();
        com.google.javascript.rhino.Node node26 = node8.useSourceInfoFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] { node8 };
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, nodeArray27);
        int int30 = node28.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = node32.isOnlyModifiesThisCall();
        boolean boolean34 = node32.isEmpty();
        boolean boolean35 = node32.isReturn();
        boolean boolean36 = node32.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        boolean boolean41 = node38.isNot();
        boolean boolean42 = node38.isBreak();
        boolean boolean43 = node38.isIn();
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        com.google.javascript.rhino.Node node45 = node28.useSourceInfoFrom(node38);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        node47.setSourceEncodedPosition(4095);
        boolean boolean50 = node47.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = node47.getStaticSourceFile();
        boolean boolean52 = node47.isAssignAdd();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        node54.setSourceEncodedPosition(4095);
        boolean boolean57 = node54.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = node54.getStaticSourceFile();
        com.google.javascript.rhino.Node node59 = node47.copyInformationFromForTree(node54);
        boolean boolean60 = node47.isWith();
        node38.addChildToFront(node47);
        com.google.javascript.rhino.Node node62 = node38.getLastSibling();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        boolean boolean68 = node64.isBreak();
        boolean boolean69 = node64.isTypeOf();
        int int70 = node64.getCharno();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        boolean boolean73 = node72.isOnlyModifiesThisCall();
        int int74 = node72.getSourceOffset();
        boolean boolean75 = node72.isExprResult();
        com.google.javascript.rhino.Node node76 = node64.srcref(node72);
        boolean boolean77 = node76.isNE();
        com.google.javascript.rhino.Node node78 = node62.srcrefTree(node76);
        com.google.javascript.rhino.Node node79 = node3.useSourceInfoFromForTree(node62);
        node3.addSuppression("STRING  0\n    NUMBER 0.0 [synthetic: 1]\n");
        java.util.Set<java.lang.String> strSet82 = node3.getDirectives();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(staticSourceFile51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(staticSourceFile58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4095 + "'", int70 == 4095);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(strSet82);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 48, 43, 2);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node2.new FileLevelJsDocBuilder();
        boolean boolean22 = node2.isDefaultCase();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, (int) ' ', 53);
        boolean boolean26 = node2.isQuotedString();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        node28.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node31 = node28.getLastSibling();
        node28.setSourceFileForTesting("");
        node2.addChildrenToFront(node28);
        int int35 = node28.getLength();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = node28.getJSDocInfo();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(jSDocInfo36);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(2, 4, 39);
        node3.setSourceEncodedPositionForTree(16);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = null;
        node1.setStaticSourceFile(staticSourceFile10);
        node1.setSourceEncodedPosition(37);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        com.google.javascript.rhino.Node node5 = node1.getLastSibling();
        boolean boolean6 = node1.isWith();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] { node4 };
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(32, nodeArray23);
        int int26 = node24.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("");
        node34.setSourceEncodedPosition(4095);
        boolean boolean37 = node34.isNot();
        boolean boolean38 = node34.isBreak();
        boolean boolean39 = node34.isIn();
        com.google.javascript.rhino.Node node40 = node28.useSourceInfoIfMissingFromForTree(node34);
        com.google.javascript.rhino.Node node41 = node24.useSourceInfoFrom(node34);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        boolean boolean46 = node43.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        boolean boolean48 = node43.isAssignAdd();
        java.util.Set<java.lang.String> strSet49 = node43.getDirectives();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        node51.setSourceEncodedPosition(4095);
        boolean boolean54 = node51.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = node51.getStaticSourceFile();
        node51.setVarArgs(false);
        boolean boolean58 = node51.isFromExterns();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        boolean boolean63 = node60.isNot();
        com.google.javascript.rhino.Node node64 = node60.getLastSibling();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(37, node24, node43, node51, node64);
        int int66 = node24.getSideEffectFlags();
        boolean boolean67 = node24.isFromExterns();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("");
        boolean boolean70 = node69.isOnlyModifiesThisCall();
        boolean boolean71 = node69.isEmpty();
        com.google.javascript.rhino.Node node72 = node69.removeFirstChild();
        com.google.javascript.rhino.Node node73 = node24.useSourceInfoFrom(node69);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("");
        boolean boolean76 = node75.isOnlyModifiesThisCall();
        boolean boolean77 = node75.isEmpty();
        boolean boolean78 = node75.isReturn();
        boolean boolean79 = node75.isEmpty();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable80 = node75.siblings();
        com.google.javascript.rhino.Node node81 = node73.copyInformationFrom(node75);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("");
        boolean boolean84 = node83.isOnlyModifiesThisCall();
        boolean boolean85 = node83.isEmpty();
        boolean boolean86 = node83.isCatch();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(48, node75, node83);
        boolean boolean88 = node83.isCatch();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(strSet49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(staticSourceFile55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(nodeIterable80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        boolean boolean47 = node36.isGetElem();
        boolean boolean48 = node36.isCall();
        com.google.javascript.rhino.Node node49 = node36.cloneTree();
        boolean boolean50 = node49.isGetProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        boolean boolean14 = node1.isNE();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(16, 30, 0);
        node1.addChildToFront(node18);
        boolean boolean20 = node18.isStringKey();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        boolean boolean29 = node24.isAssignAdd();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        node31.setSourceEncodedPosition(4095);
        boolean boolean34 = node31.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node31.getStaticSourceFile();
        com.google.javascript.rhino.Node node36 = node24.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        boolean boolean39 = node38.isOnlyModifiesThisCall();
        boolean boolean40 = node38.isEmpty();
        boolean boolean41 = node38.isArrayLit();
        com.google.javascript.rhino.Node node42 = node24.useSourceInfoFrom(node38);
        boolean boolean43 = node42.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        boolean boolean46 = node45.isOnlyModifiesThisCall();
        boolean boolean47 = node45.isEmpty();
        boolean boolean48 = node45.isArrayLit();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        boolean boolean51 = node50.isOnlyModifiesThisCall();
        boolean boolean52 = node50.isEmpty();
        boolean boolean53 = node50.isReturn();
        boolean boolean54 = node50.isNE();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(4095, node42, node45, node50, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(36, node57, node59, node66);
        int int68 = node57.getSideEffectFlags();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("");
        node70.setSourceEncodedPosition(4095);
        boolean boolean73 = node70.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = node70.getStaticSourceFile();
        node70.setVarArgs(false);
        boolean boolean77 = node70.isFromExterns();
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet81 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet81, strArray80);
        node70.setDirectives((java.util.Set<java.lang.String>) strSet81);
        node57.setDirectives((java.util.Set<java.lang.String>) strSet81);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet81);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable86 = node18.children();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(staticSourceFile74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(nodeIterable86);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isBlock();
        boolean boolean5 = node3.isNE();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        com.google.javascript.rhino.Node node11 = node7.getLastSibling();
        node7.setVarArgs(true);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node7.setJSType(jSType14);
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node7);
        boolean boolean17 = node3.isVar();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        boolean boolean26 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        node28.setSourceEncodedPosition(4095);
        boolean boolean31 = node28.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = node28.getStaticSourceFile();
        com.google.javascript.rhino.Node node33 = node21.copyInformationFromForTree(node28);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        boolean boolean36 = node35.isOnlyModifiesThisCall();
        boolean boolean37 = node35.isEmpty();
        boolean boolean38 = node35.isArrayLit();
        com.google.javascript.rhino.Node node39 = node21.useSourceInfoFrom(node35);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] { node21 };
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(32, nodeArray40);
        int int43 = node41.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        boolean boolean46 = node45.isOnlyModifiesThisCall();
        boolean boolean47 = node45.isEmpty();
        boolean boolean48 = node45.isReturn();
        boolean boolean49 = node45.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        node51.setSourceEncodedPosition(4095);
        boolean boolean54 = node51.isNot();
        boolean boolean55 = node51.isBreak();
        boolean boolean56 = node51.isIn();
        com.google.javascript.rhino.Node node57 = node45.useSourceInfoIfMissingFromForTree(node51);
        com.google.javascript.rhino.Node node58 = node41.useSourceInfoFrom(node51);
        boolean boolean59 = node51.isNE();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("");
        boolean boolean62 = node61.isOnlyModifiesThisCall();
        boolean boolean63 = node61.isEmpty();
        boolean boolean64 = node61.isReturn();
        boolean boolean65 = node61.isRegExp();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(52, node51, node61);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        node68.setSourceEncodedPosition(4095);
        boolean boolean71 = node68.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile72 = node68.getStaticSourceFile();
        node68.setVarArgs(false);
        boolean boolean75 = node68.isFromExterns();
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        node68.setDirectives((java.util.Set<java.lang.String>) strSet79);
        node51.setDirectives((java.util.Set<java.lang.String>) strSet79);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet79);
        boolean boolean84 = node3.isNE();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(staticSourceFile32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(staticSourceFile72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        boolean boolean23 = node22.isThis();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node41 = node20.clonePropsFrom(node39);
        node39.setQuotedString();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean47 = node46.isObjectLit();
        boolean boolean48 = node46.isFunction();
        java.lang.String str49 = node39.checkTreeEquals(node46);
        boolean boolean50 = node39.isFalse();
        boolean boolean51 = node39.isAssignAdd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  [quoted: 1]\n\n\nTree2:\nNUMBER 37.0 100\n\n\nSubtree1: STRING  [quoted: 1]\n\n\nSubtree2: NUMBER 37.0 100\n" + "'", str49, "Node tree inequality:\nTree1:\nSTRING  [quoted: 1]\n\n\nTree2:\nNUMBER 37.0 100\n\n\nSubtree1: STRING  [quoted: 1]\n\n\nSubtree2: NUMBER 37.0 100\n");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        int int7 = node1.getLineno();
        node1.setSourceFileForTesting("STRING ");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        boolean boolean16 = node11.isAssignAdd();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node23 = node11.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node29 = node11.useSourceInfoFrom(node25);
        boolean boolean30 = node11.isVarArgs();
        int int31 = node11.getType();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        boolean boolean54 = node53.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        boolean boolean58 = node56.isEmpty();
        boolean boolean59 = node56.isArrayLit();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("");
        boolean boolean62 = node61.isOnlyModifiesThisCall();
        boolean boolean63 = node61.isEmpty();
        boolean boolean64 = node61.isReturn();
        boolean boolean65 = node61.isNE();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(4095, node53, node56, node61, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("");
        node70.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(36, node68, node70, node77);
        boolean boolean79 = node77.isTypeOf();
        boolean boolean80 = node77.isGetterDef();
        boolean boolean81 = node77.isFor();
        boolean boolean82 = node11.isEquivalentToTyped(node77);
        boolean boolean83 = node1.hasChild(node77);
        boolean boolean84 = node1.isReturn();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 40 + "'", int31 == 40);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node5 = node4.cloneTree();
        boolean boolean6 = node5.isWhile();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        node1.putBooleanProp((int) (byte) 10, false);
        boolean boolean11 = node1.isBreak();
        boolean boolean12 = node1.hasMoreThanOneChild();
        boolean boolean13 = node1.isTrue();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node1.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder14.append("STRING  0\n");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node15.getStaticSourceFile();
        boolean boolean20 = node15.isAssignAdd();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        node22.setSourceEncodedPosition(4095);
        boolean boolean25 = node22.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node22.getStaticSourceFile();
        com.google.javascript.rhino.Node node27 = node15.copyInformationFromForTree(node22);
        boolean boolean28 = node15.isNE();
        boolean boolean29 = node15.isThrow();
        boolean boolean30 = node15.isFor();
        com.google.javascript.rhino.Node node31 = node7.useSourceInfoFrom(node15);
        com.google.javascript.rhino.Node node32 = node15.cloneNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(16, 30, 0);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        node5.setSourceEncodedPosition(4095);
        boolean boolean8 = node5.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node5.getStaticSourceFile();
        boolean boolean10 = node5.isAssignAdd();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        com.google.javascript.rhino.Node node17 = node5.copyInformationFromForTree(node12);
        com.google.javascript.rhino.Node node18 = node12.removeFirstChild();
        boolean boolean19 = node12.isAnd();
        boolean boolean20 = node12.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        boolean boolean23 = node22.isOnlyModifiesThisCall();
        boolean boolean24 = node22.isEmpty();
        boolean boolean25 = node22.isArrayLit();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isSetterDef();
        com.google.javascript.rhino.Node node30 = node22.srcref(node27);
        node12.addChildToFront(node22);
        com.google.javascript.rhino.Node node32 = node12.getLastChild();
        com.google.javascript.rhino.Node node33 = node3.useSourceInfoIfMissingFromForTree(node12);
        boolean boolean34 = node12.isDelProp();
        boolean boolean35 = node12.isNot();
        int int36 = node12.getType();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 40 + "'", int36 == 40);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) '4', "", (int) (short) -1, 16);
        boolean boolean6 = node5.isInstanceOf();
        boolean boolean7 = node5.hasOneChild();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(43, node5, 8, (int) (short) 100);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        boolean boolean14 = node1.isNE();
        boolean boolean15 = node1.isThrow();
        boolean boolean16 = node1.isNumber();
        boolean boolean17 = node1.wasEmptyNode();
        node1.putBooleanProp((int) '#', false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        boolean boolean29 = node22.isCall();
        com.google.javascript.rhino.Node node30 = node22.getLastChild();
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("");
        node34.setSourceEncodedPosition(4095);
        boolean boolean37 = node34.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = node34.getStaticSourceFile();
        boolean boolean39 = node34.isAssignAdd();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        com.google.javascript.rhino.Node node46 = node34.copyInformationFromForTree(node41);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        boolean boolean49 = node48.isOnlyModifiesThisCall();
        boolean boolean50 = node48.isEmpty();
        boolean boolean51 = node48.isArrayLit();
        com.google.javascript.rhino.Node node52 = node34.useSourceInfoFrom(node48);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] { node34 };
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(32, nodeArray53);
        java.lang.String str55 = node31.checkTreeEquals(node54);
        boolean boolean56 = node54.isAdd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(staticSourceFile38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nTYPEOF 0\n    STRING \n\n\nSubtree1: STRING \n\n\nSubtree2: TYPEOF 0\n    STRING \n" + "'", str55, "Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nTYPEOF 0\n    STRING \n\n\nSubtree1: STRING \n\n\nSubtree2: TYPEOF 0\n    STRING \n");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        boolean boolean30 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node25.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node43 = node25.useSourceInfoFrom(node39);
        boolean boolean44 = node43.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isReturn();
        boolean boolean55 = node51.isNE();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node43, node46, node51, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(36, node58, node60, node67);
        boolean boolean69 = node67.isTypeOf();
        boolean boolean70 = node67.isGetterDef();
        boolean boolean71 = node67.isFor();
        boolean boolean72 = node1.isEquivalentToTyped(node67);
        int int73 = node67.getLineno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 53 + "'", int73 == 53);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType6 = node1.getJSType();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        boolean boolean12 = node8.isBreak();
        boolean boolean13 = node8.isTypeOf();
        boolean boolean14 = node8.isInc();
        boolean boolean15 = node8.isWhile();
        node8.setSourceEncodedPosition((-1));
        boolean boolean18 = node1.hasChild(node8);
        boolean boolean19 = node1.isAssign();
        int int20 = node1.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        boolean boolean7 = node1.isStringKey();
        boolean boolean8 = node1.isDec();
        node1.addSuppression("Node tree inequality:\nTree1:\nSTRING  [quoted: 1]\n\n\nTree2:\nNUMBER 37.0 100\n\n\nSubtree1: STRING  [quoted: 1]\n\n\nSubtree2: NUMBER 37.0 100\n");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNew();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isSetterDef();
        com.google.javascript.rhino.Node node21 = node17.getAncestor((int) (short) 0);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        com.google.javascript.rhino.Node node26 = node23.removeFirstChild();
        boolean boolean27 = node23.isIf();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        node29.setSourceEncodedPosition(4095);
        boolean boolean32 = node29.isNot();
        com.google.javascript.rhino.Node node33 = node23.srcrefTree(node29);
        boolean boolean34 = node23.isContinue();
        com.google.javascript.rhino.Node node35 = node17.srcrefTree(node23);
        boolean boolean36 = node12.isEquivalentTo(node35);
        node1.addChildrenToBack(node12);
        boolean boolean38 = node12.hasChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node2.new FileLevelJsDocBuilder();
        boolean boolean22 = node2.isDefaultCase();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, (int) ' ', 53);
        boolean boolean26 = node2.isQuotedString();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        node28.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node31 = node28.getLastSibling();
        node28.setSourceFileForTesting("");
        node2.addChildrenToFront(node28);
        node28.setSourceFileForTesting("LE 43\n    STRING \n    STRING \n    STRING  0 [is_namespace: 45]\n");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile65 = null;
        node42.setStaticSourceFile(staticSourceFile65);
        boolean boolean67 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean72 = node71.isObjectLit();
        boolean boolean73 = node71.isName();
        // The following exception was thrown during execution in test generation
        try {
            node42.removeChild(node71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        int int11 = node7.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node14.getStaticSourceFile();
        boolean boolean19 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        com.google.javascript.rhino.Node node26 = node14.copyInformationFromForTree(node21);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isArrayLit();
        com.google.javascript.rhino.Node node32 = node14.useSourceInfoFrom(node28);
        boolean boolean33 = node32.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        boolean boolean36 = node35.isOnlyModifiesThisCall();
        boolean boolean37 = node35.isEmpty();
        boolean boolean38 = node35.isArrayLit();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        boolean boolean41 = node40.isOnlyModifiesThisCall();
        boolean boolean42 = node40.isEmpty();
        boolean boolean43 = node40.isReturn();
        boolean boolean44 = node40.isNE();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(4095, node32, node35, node40, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node48 = null;
        int int49 = node32.getIndexOfChild(node48);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node53 = node32.clonePropsFrom(node51);
        int int54 = node51.getSideEffectFlags();
        node7.addChildToBack(node51);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        boolean boolean58 = node57.isOnlyModifiesThisCall();
        boolean boolean59 = node57.isEmpty();
        boolean boolean60 = node57.isReturn();
        boolean boolean61 = node57.isRegExp();
        java.lang.String str62 = node57.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable63 = node57.getAncestors();
        boolean boolean64 = node57.isScript();
        boolean boolean65 = node7.isEquivalentTo(node57);
        boolean boolean66 = node7.isAssignAdd();
        node7.setOptionalArg(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "STRING \n" + "'", str62, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("LE 43\n    STRING \n    STRING \n    STRING  0 [is_namespace: 45]\n", 53, (int) (byte) 10);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node4.isAnd();
        boolean boolean76 = node4.isRegExp();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 8);
        int int3 = node1.getIntProp(15);
        node1.detachChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node6.getStaticSourceFile();
        node6.setVarArgs(false);
        boolean boolean13 = node6.isFromExterns();
        boolean boolean14 = node6.isNull();
        boolean boolean15 = node6.isFalse();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        boolean boolean22 = node17.isAssignAdd();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node29 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node30 = node24.removeFirstChild();
        com.google.javascript.rhino.Node node31 = node6.useSourceInfoIfMissingFrom(node24);
        boolean boolean32 = node1.hasChild(node6);
        node1.setLineno((int) (byte) 100);
        boolean boolean35 = node1.isQualifiedName();
        boolean boolean36 = node1.isGetElem();
        java.lang.Object obj38 = node1.getProp(47);
        boolean boolean39 = node1.isOr();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags1.setThrows();
        int int3 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        node2.setVarArgs(false);
        boolean boolean9 = node2.isFromExterns();
        boolean boolean10 = node2.isNull();
        boolean boolean11 = node2.isFalse();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node26 = node20.removeFirstChild();
        com.google.javascript.rhino.Node node27 = node2.useSourceInfoIfMissingFrom(node20);
        boolean boolean28 = node27.isNumber();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(0, node27, 100, 31);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isArrayLit();
        boolean boolean6 = node2.isVarArgs();
        boolean boolean7 = node2.isObjectLit();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        boolean boolean13 = node9.isBreak();
        boolean boolean14 = node9.isIn();
        boolean boolean15 = node9.isLabel();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        boolean boolean23 = node18.isAssignAdd();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        com.google.javascript.rhino.Node node30 = node18.copyInformationFromForTree(node25);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = node32.isOnlyModifiesThisCall();
        boolean boolean34 = node32.isEmpty();
        boolean boolean35 = node32.isArrayLit();
        com.google.javascript.rhino.Node node36 = node18.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] { node18 };
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(32, nodeArray37);
        int int40 = node38.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        boolean boolean43 = node42.isOnlyModifiesThisCall();
        boolean boolean44 = node42.isEmpty();
        boolean boolean45 = node42.isReturn();
        boolean boolean46 = node42.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        boolean boolean52 = node48.isBreak();
        boolean boolean53 = node48.isIn();
        com.google.javascript.rhino.Node node54 = node42.useSourceInfoIfMissingFromForTree(node48);
        com.google.javascript.rhino.Node node55 = node38.useSourceInfoFrom(node48);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        boolean boolean70 = node57.isWith();
        node48.addChildToFront(node57);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("");
        node73.setSourceEncodedPosition(4095);
        boolean boolean76 = node73.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile77 = node73.getStaticSourceFile();
        boolean boolean78 = node73.isAssignAdd();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("");
        node80.setSourceEncodedPosition(4095);
        boolean boolean83 = node80.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile84 = node80.getStaticSourceFile();
        com.google.javascript.rhino.Node node85 = node73.copyInformationFromForTree(node80);
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString("");
        boolean boolean88 = node87.isOnlyModifiesThisCall();
        boolean boolean89 = node87.isEmpty();
        boolean boolean90 = node87.isArrayLit();
        com.google.javascript.rhino.Node node91 = node73.useSourceInfoFrom(node87);
        boolean boolean92 = node87.hasChildren();
        com.google.javascript.rhino.Node node93 = node48.copyInformationFrom(node87);
        boolean boolean94 = node48.isThis();
        com.google.javascript.rhino.Node node97 = new com.google.javascript.rhino.Node(37, node2, node9, node48, 53, 37);
        boolean boolean98 = node48.isObjectLit();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(staticSourceFile77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(staticSourceFile84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        boolean boolean21 = node1.isLabel();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        com.google.javascript.rhino.Node node26 = node23.removeFirstChild();
        boolean boolean27 = node23.isIf();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        node29.setSourceEncodedPosition(4095);
        boolean boolean32 = node29.isNot();
        com.google.javascript.rhino.Node node33 = node23.srcrefTree(node29);
        boolean boolean34 = node33.isFromExterns();
        node1.addChildrenToFront(node33);
        boolean boolean36 = node33.isThis();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        boolean boolean36 = node28.isOptionalArg();
        node28.setCharno(0);
        boolean boolean39 = node28.hasChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearAllFlags();
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        boolean boolean28 = node8.isVar();
        boolean boolean29 = node8.isIf();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node50 = node32.useSourceInfoFrom(node46);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] { node32 };
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(32, nodeArray51);
        int int54 = node52.getIntProp((int) (byte) 100);
        boolean boolean56 = node52.getBooleanProp(0);
        com.google.javascript.rhino.Node node57 = node8.useSourceInfoIfMissingFromForTree(node52);
        boolean boolean58 = node52.isOptionalArg();
        boolean boolean59 = node52.isAssignAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) ' ', 42, 12);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        boolean boolean58 = node56.isEmpty();
        boolean boolean59 = node56.isArrayLit();
        com.google.javascript.rhino.Node node60 = node42.useSourceInfoFrom(node56);
        boolean boolean61 = node60.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        boolean boolean64 = node63.isOnlyModifiesThisCall();
        boolean boolean65 = node63.isEmpty();
        boolean boolean66 = node63.isArrayLit();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        boolean boolean69 = node68.isOnlyModifiesThisCall();
        boolean boolean70 = node68.isEmpty();
        boolean boolean71 = node68.isReturn();
        boolean boolean72 = node68.isNE();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(4095, node60, node63, node68, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        node77.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(36, node75, node77, node84);
        java.lang.String str86 = node77.toString();
        com.google.javascript.rhino.Node node87 = node37.useSourceInfoFrom(node77);
        boolean boolean89 = node37.getBooleanProp(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable90 = node37.getAncestors();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "STRING  0" + "'", str86, "STRING  0");
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(ancestorIterable90);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 8);
        boolean boolean58 = node57.isStringKey();
        node32.addChildrenToFront(node57);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("");
        boolean boolean62 = node61.isOnlyModifiesThisCall();
        boolean boolean63 = node61.isEmpty();
        boolean boolean64 = node61.isReturn();
        boolean boolean65 = node61.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        node67.setSourceEncodedPosition(4095);
        boolean boolean70 = node67.isNot();
        boolean boolean71 = node67.isBreak();
        boolean boolean72 = node67.isIn();
        com.google.javascript.rhino.Node node73 = node61.useSourceInfoIfMissingFromForTree(node67);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("");
        node75.setSourceEncodedPosition(4095);
        boolean boolean78 = node75.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile79 = node75.getStaticSourceFile();
        boolean boolean80 = node75.isAssignAdd();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("");
        node82.setSourceEncodedPosition(4095);
        boolean boolean85 = node82.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile86 = node82.getStaticSourceFile();
        com.google.javascript.rhino.Node node87 = node75.copyInformationFromForTree(node82);
        boolean boolean88 = node75.isNE();
        boolean boolean89 = node75.isThrow();
        boolean boolean90 = node75.isFor();
        com.google.javascript.rhino.Node node91 = node67.useSourceInfoFrom(node75);
        java.lang.String str92 = node32.checkTreeEquals(node67);
        node67.setLineno(409700);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(staticSourceFile79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(staticSourceFile86);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0\n    NUMBER 8.0\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: STRING  0\n    NUMBER 8.0\n    STRING  0\n\n\nSubtree2: STRING  0\n" + "'", str92, "Node tree inequality:\nTree1:\nSTRING  0\n    NUMBER 8.0\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: STRING  0\n    NUMBER 8.0\n    STRING  0\n\n\nSubtree2: STRING  0\n");
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        com.google.javascript.rhino.InputId inputId10 = null;
        node9.setInputId(inputId10);
        java.util.Set<java.lang.String> strSet12 = node9.getDirectives();
        boolean boolean13 = node9.isGetProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        boolean boolean57 = node56.isName();
        int int58 = node56.getSourceOffset();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable39 = node38.getAncestors();
        boolean boolean40 = node38.isVoid();
        com.google.javascript.rhino.Node node42 = node38.getChildAtIndex((int) (short) 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(ancestorIterable39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(node42);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        boolean boolean7 = node1.isDec();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        boolean boolean14 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node9.copyInformationFromForTree(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node27 = node9.useSourceInfoFrom(node23);
        boolean boolean28 = node27.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node29 = node1.useSourceInfoFromForTree(node27);
        boolean boolean30 = node27.isFromExterns();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isWhile();
        node1.setSourceFileForTesting("");
        boolean boolean6 = node1.isCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        boolean boolean57 = node56.isNoSideEffectsCall();
        // The following exception was thrown during execution in test generation
        try {
            int int59 = node56.getExistingIntProp(50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 50");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        boolean boolean14 = node1.isNE();
        boolean boolean15 = node1.isThrow();
        boolean boolean16 = node1.isFor();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        com.google.javascript.rhino.Node node27 = node26.getLastSibling();
        boolean boolean28 = node27.isIf();
        com.google.javascript.rhino.Node node29 = node1.clonePropsFrom(node27);
        node29.addSuppression("NUMBER 8.0\n");
        int int32 = node29.getSourcePosition();
        java.lang.String str33 = node29.getSourceFileName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4095 + "'", int32 == 4095);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        boolean boolean55 = node42.isWith();
        node33.addChildToFront(node42);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node58.getStaticSourceFile();
        boolean boolean63 = node58.isAssignAdd();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = node65.getStaticSourceFile();
        com.google.javascript.rhino.Node node70 = node58.copyInformationFromForTree(node65);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        boolean boolean73 = node72.isOnlyModifiesThisCall();
        boolean boolean74 = node72.isEmpty();
        boolean boolean75 = node72.isArrayLit();
        com.google.javascript.rhino.Node node76 = node58.useSourceInfoFrom(node72);
        boolean boolean77 = node72.hasChildren();
        com.google.javascript.rhino.Node node78 = node33.copyInformationFrom(node72);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("");
        node80.setSourceEncodedPosition(4095);
        boolean boolean83 = node80.isNot();
        boolean boolean84 = node80.isBreak();
        boolean boolean85 = node80.isTypeOf();
        boolean boolean86 = node80.isInc();
        boolean boolean87 = node80.isWhile();
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newString("");
        node89.setSourceEncodedPosition(4095);
        boolean boolean92 = node89.isNot();
        boolean boolean93 = node89.isBreak();
        boolean boolean94 = node89.isIn();
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node((int) 'a', node78, node80, node89);
        // The following exception was thrown during execution in test generation
        try {
            node95.setSideEffectFlags(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got ASSIGN_MOD");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(staticSourceFile69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node16.hasChildren();
        boolean boolean22 = node16.isNumber();
        boolean boolean23 = node16.isTry();
        node16.setLineno((int) (short) 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        node28.setSourceEncodedPosition(4095);
        boolean boolean31 = node28.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = node28.getStaticSourceFile();
        boolean boolean33 = node28.isAssignAdd();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        com.google.javascript.rhino.Node node40 = node28.copyInformationFromForTree(node35);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        boolean boolean43 = node42.isOnlyModifiesThisCall();
        boolean boolean44 = node42.isEmpty();
        boolean boolean45 = node42.isArrayLit();
        com.google.javascript.rhino.Node node46 = node28.useSourceInfoFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] { node28 };
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(32, nodeArray47);
        int int50 = node48.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("");
        boolean boolean53 = node52.isOnlyModifiesThisCall();
        boolean boolean54 = node52.isEmpty();
        boolean boolean55 = node52.isReturn();
        boolean boolean56 = node52.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        boolean boolean62 = node58.isBreak();
        boolean boolean63 = node58.isIn();
        com.google.javascript.rhino.Node node64 = node52.useSourceInfoIfMissingFromForTree(node58);
        com.google.javascript.rhino.Node node65 = node48.useSourceInfoFrom(node58);
        boolean boolean66 = node48.isRegExp();
        com.google.javascript.rhino.Node node67 = node48.getLastChild();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(47, node16, node48);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(staticSourceFile32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        com.google.javascript.rhino.Node[] nodeArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(46, nodeArray1, 51, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        boolean boolean7 = node1.isStringKey();
        int int8 = node1.getChildCount();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        boolean boolean11 = node10.isOnlyModifiesThisCall();
        boolean boolean12 = node10.isEmpty();
        boolean boolean13 = node10.isReturn();
        boolean boolean14 = node10.isEmpty();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        boolean boolean22 = node17.isAssignAdd();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node29 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node35 = node17.useSourceInfoFrom(node31);
        boolean boolean36 = node35.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        boolean boolean39 = node38.isOnlyModifiesThisCall();
        boolean boolean40 = node38.isEmpty();
        boolean boolean41 = node38.isArrayLit();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        boolean boolean44 = node43.isOnlyModifiesThisCall();
        boolean boolean45 = node43.isEmpty();
        boolean boolean46 = node43.isReturn();
        boolean boolean47 = node43.isNE();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(4095, node35, node38, node43, (int) (byte) 10, 32);
        boolean boolean51 = node43.isCase();
        com.google.javascript.rhino.Node node52 = node10.srcref(node43);
        java.lang.String str53 = node1.checkTreeEquals(node52);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder54 = node52.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 8);
        int int3 = node1.getIntProp(15);
        node1.detachChildren();
        boolean boolean5 = node1.isInstanceOf();
        boolean boolean6 = node1.isFalse();
        boolean boolean7 = node1.isNot();
        node1.putBooleanProp(4, false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        boolean boolean14 = node1.isThis();
        int int15 = node1.getCharno();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        boolean boolean22 = node17.isAssignAdd();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node29 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node35 = node17.useSourceInfoFrom(node31);
        boolean boolean36 = node17.isVarArgs();
        int int37 = node17.getType();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("");
        boolean boolean56 = node55.isOnlyModifiesThisCall();
        boolean boolean57 = node55.isEmpty();
        boolean boolean58 = node55.isArrayLit();
        com.google.javascript.rhino.Node node59 = node41.useSourceInfoFrom(node55);
        boolean boolean60 = node59.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        boolean boolean63 = node62.isOnlyModifiesThisCall();
        boolean boolean64 = node62.isEmpty();
        boolean boolean65 = node62.isArrayLit();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isReturn();
        boolean boolean71 = node67.isNE();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(4095, node59, node62, node67, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("");
        node76.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(36, node74, node76, node83);
        boolean boolean85 = node83.isTypeOf();
        boolean boolean86 = node83.isGetterDef();
        boolean boolean87 = node83.isFor();
        boolean boolean88 = node17.isEquivalentToTyped(node83);
        com.google.javascript.rhino.Node node89 = node1.useSourceInfoIfMissingFrom(node17);
        int int90 = node17.getChildCount();
        boolean boolean91 = node17.isVoid();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4095 + "'", int15 == 4095);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 40 + "'", int37 == 40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        node1.putBooleanProp((int) (byte) 10, false);
        boolean boolean11 = node1.isBreak();
        node1.setCharno(0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        boolean boolean47 = node36.isGetElem();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        boolean boolean53 = node49.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node54 = node36.srcref(node49);
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        node54.setJSType(jSType55);
        boolean boolean57 = node54.isTry();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node15.hasChildren();
        node15.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isBlock();
        boolean boolean5 = node3.isNE();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        com.google.javascript.rhino.Node node11 = node7.getLastSibling();
        node7.setVarArgs(true);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node7.setJSType(jSType14);
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node7);
        boolean boolean17 = node3.isVar();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        boolean boolean26 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        node28.setSourceEncodedPosition(4095);
        boolean boolean31 = node28.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = node28.getStaticSourceFile();
        com.google.javascript.rhino.Node node33 = node21.copyInformationFromForTree(node28);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        boolean boolean36 = node35.isOnlyModifiesThisCall();
        boolean boolean37 = node35.isEmpty();
        boolean boolean38 = node35.isArrayLit();
        com.google.javascript.rhino.Node node39 = node21.useSourceInfoFrom(node35);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] { node21 };
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(32, nodeArray40);
        int int43 = node41.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        boolean boolean46 = node45.isOnlyModifiesThisCall();
        boolean boolean47 = node45.isEmpty();
        boolean boolean48 = node45.isReturn();
        boolean boolean49 = node45.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        node51.setSourceEncodedPosition(4095);
        boolean boolean54 = node51.isNot();
        boolean boolean55 = node51.isBreak();
        boolean boolean56 = node51.isIn();
        com.google.javascript.rhino.Node node57 = node45.useSourceInfoIfMissingFromForTree(node51);
        com.google.javascript.rhino.Node node58 = node41.useSourceInfoFrom(node51);
        boolean boolean59 = node51.isNE();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("");
        boolean boolean62 = node61.isOnlyModifiesThisCall();
        boolean boolean63 = node61.isEmpty();
        boolean boolean64 = node61.isReturn();
        boolean boolean65 = node61.isRegExp();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(52, node51, node61);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        node68.setSourceEncodedPosition(4095);
        boolean boolean71 = node68.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile72 = node68.getStaticSourceFile();
        node68.setVarArgs(false);
        boolean boolean75 = node68.isFromExterns();
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        node68.setDirectives((java.util.Set<java.lang.String>) strSet79);
        node51.setDirectives((java.util.Set<java.lang.String>) strSet79);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet79);
        boolean boolean84 = node3.isArrayLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(staticSourceFile32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(staticSourceFile72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(39, "Node tree inequality:\nTree1:\nSTRING  [quoted: 1]\n\n\nTree2:\nNUMBER 37.0 100\n\n\nSubtree1: STRING  [quoted: 1]\n\n\nSubtree2: NUMBER 37.0 100\n", 36, 0);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(31, node5, node7, 44, 4);
        java.lang.Class<?> wildcardClass11 = node5.getClass();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        boolean boolean36 = node28.isOptionalArg();
        java.lang.String str37 = node28.getSourceFileName();
        node28.setIsSyntheticBlock(true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isReturn();
        boolean boolean6 = node2.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        boolean boolean12 = node8.isBreak();
        boolean boolean13 = node8.isIn();
        com.google.javascript.rhino.Node node14 = node2.useSourceInfoIfMissingFromForTree(node8);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        boolean boolean21 = node16.isAssignAdd();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        com.google.javascript.rhino.Node node28 = node16.copyInformationFromForTree(node23);
        boolean boolean29 = node16.isNE();
        boolean boolean30 = node16.isThrow();
        boolean boolean31 = node16.isFor();
        com.google.javascript.rhino.Node node32 = node8.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        node36.setSourceEncodedPosition(4095);
        boolean boolean39 = node36.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = node36.getStaticSourceFile();
        boolean boolean41 = node36.isAssignAdd();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        boolean boolean46 = node43.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        com.google.javascript.rhino.Node node48 = node36.copyInformationFromForTree(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        boolean boolean51 = node50.isOnlyModifiesThisCall();
        boolean boolean52 = node50.isEmpty();
        boolean boolean53 = node50.isArrayLit();
        com.google.javascript.rhino.Node node54 = node36.useSourceInfoFrom(node50);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] { node36 };
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(32, nodeArray55);
        int int58 = node56.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        boolean boolean61 = node60.isOnlyModifiesThisCall();
        boolean boolean62 = node60.isEmpty();
        boolean boolean63 = node60.isReturn();
        boolean boolean64 = node60.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("");
        node66.setSourceEncodedPosition(4095);
        boolean boolean69 = node66.isNot();
        boolean boolean70 = node66.isBreak();
        boolean boolean71 = node66.isIn();
        com.google.javascript.rhino.Node node72 = node60.useSourceInfoIfMissingFromForTree(node66);
        com.google.javascript.rhino.Node node73 = node56.useSourceInfoFrom(node66);
        boolean boolean74 = node66.isNE();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("");
        boolean boolean77 = node76.isOnlyModifiesThisCall();
        boolean boolean78 = node76.isEmpty();
        boolean boolean79 = node76.isReturn();
        boolean boolean80 = node76.isRegExp();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(52, node66, node76);
        com.google.javascript.rhino.Node node82 = node32.useSourceInfoIfMissingFrom(node66);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(29, node82, (int) (short) 100, 37);
        node82.removeProp((int) (short) -1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(staticSourceFile40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 4, 32);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        node5.setSourceEncodedPosition(4095);
        boolean boolean8 = node5.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node5.getStaticSourceFile();
        node5.setVarArgs(false);
        boolean boolean12 = node5.isFromExterns();
        boolean boolean13 = node5.isNull();
        node5.setIsSyntheticBlock(false);
        boolean boolean16 = node3.hasChild(node5);
        com.google.javascript.rhino.Node node17 = node3.cloneNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(36);
        sideEffectFlags1.setMutatesThis();
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        node8.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node20 = node8.getAncestor(0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node20.siblings();
        node20.setQuotedString();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder23 = node20.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeIterable21);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        boolean boolean5 = node1.isVarArgs();
        boolean boolean6 = node1.isIf();
        boolean boolean7 = node1.hasMoreThanOneChild();
        node1.setLineno((int) (short) -1);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags10 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean11 = sideEffectFlags10.areAllFlagsSet();
        sideEffectFlags10.setMutatesThis();
        sideEffectFlags10.setMutatesGlobalState();
        sideEffectFlags10.setAllFlags();
        sideEffectFlags10.setReturnsTainted();
        int int16 = sideEffectFlags10.valueOf();
        sideEffectFlags10.setReturnsTainted();
        // The following exception was thrown during execution in test generation
        try {
            node1.setSideEffectFlags(sideEffectFlags10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        boolean boolean65 = node64.isExprResult();
        com.google.javascript.rhino.Node node66 = node64.removeFirstChild();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean71 = node70.isTypeOf();
        boolean boolean72 = node70.isInc();
        com.google.javascript.rhino.Node node73 = node70.cloneTree();
        node66.addChildToBack(node70);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("");
        boolean boolean77 = node76.isOnlyModifiesThisCall();
        int int78 = node76.getSourceOffset();
        boolean boolean79 = node76.isLabel();
        boolean boolean80 = node76.isExprResult();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node81 = node66.getChildBefore(node76);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        boolean boolean19 = node15.isVarArgs();
        node15.setSourceFileForTesting("Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nTYPEOF 0\n    STRING \n\n\nSubtree1: STRING \n\n\nSubtree2: TYPEOF 0\n    STRING \n");
        com.google.javascript.rhino.Node node22 = node8.copyInformationFromForTree(node15);
        boolean boolean23 = node8.isScript();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node29 = node8.copyInformationFromForTree(node28);
        int int30 = node8.getCharno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isIn();
        boolean boolean7 = node1.isLabel();
        boolean boolean8 = node1.wasEmptyNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node15.hasChildren();
        boolean boolean21 = node15.isNumber();
        boolean boolean22 = node15.isTry();
        node15.setQuotedString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        node21.setVarArgs(false);
        boolean boolean28 = node21.isFromExterns();
        boolean boolean29 = node21.isNull();
        boolean boolean30 = node21.isFalse();
        boolean boolean31 = node15.hasChild(node21);
        boolean boolean32 = node21.isDelProp();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean37 = node36.isBlock();
        boolean boolean38 = node36.isNE();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        node40.setSourceEncodedPosition(4095);
        boolean boolean43 = node40.isNot();
        com.google.javascript.rhino.Node node44 = node40.getLastSibling();
        node40.setVarArgs(true);
        com.google.javascript.rhino.jstype.JSType jSType47 = null;
        node40.setJSType(jSType47);
        com.google.javascript.rhino.Node node49 = node36.copyInformationFrom(node40);
        node21.addChildToFront(node40);
        node40.removeProp(15);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node49);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isInstanceOf();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        node2.putProp((int) '4', (java.lang.Object) node8);
        boolean boolean12 = node8.isDebugger();
        boolean boolean13 = node8.isVar();
        node8.setString("STRING ");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        boolean boolean23 = node22.isOnlyModifiesThisCall();
        boolean boolean24 = node22.isSetterDef();
        com.google.javascript.rhino.Node node25 = node17.srcref(node22);
        com.google.javascript.rhino.Node node26 = node25.getLastSibling();
        boolean boolean27 = node26.isIf();
        node26.setLength(4);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        boolean boolean49 = node46.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node46.getStaticSourceFile();
        node46.setVarArgs(false);
        boolean boolean53 = node46.isFromExterns();
        boolean boolean54 = node46.isNull();
        boolean boolean55 = node46.isFalse();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node70 = node64.removeFirstChild();
        com.google.javascript.rhino.Node node71 = node46.useSourceInfoIfMissingFrom(node64);
        com.google.javascript.rhino.Node node72 = node44.useSourceInfoFromForTree(node71);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(45, node72);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(44, node8, node26, node73);
        node73.putBooleanProp(45, false);
        com.google.javascript.rhino.InputId inputId78 = null;
        node73.setInputId(inputId78);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) 1);
        boolean boolean2 = node1.isCatch();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int4 = node3.getLength();
        boolean boolean5 = node3.isStringKey();
        com.google.javascript.rhino.Node node6 = node3.removeFirstChild();
        boolean boolean7 = node3.isGetterDef();
        boolean boolean8 = node3.isSyntheticBlock();
        boolean boolean9 = node3.isQuotedString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        boolean boolean11 = node10.isIf();
        boolean boolean12 = node10.hasMoreThanOneChild();
        node10.setVarArgs(true);
        boolean boolean15 = node10.isAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        boolean boolean38 = node20.isNE();
        boolean boolean39 = node20.isEmpty();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isInstanceOf();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        node2.putProp((int) '4', (java.lang.Object) node8);
        boolean boolean12 = node8.isDebugger();
        boolean boolean13 = node8.isVar();
        node8.setString("STRING ");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        boolean boolean23 = node22.isOnlyModifiesThisCall();
        boolean boolean24 = node22.isSetterDef();
        com.google.javascript.rhino.Node node25 = node17.srcref(node22);
        com.google.javascript.rhino.Node node26 = node25.getLastSibling();
        boolean boolean27 = node26.isIf();
        node26.setLength(4);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        boolean boolean49 = node46.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node46.getStaticSourceFile();
        node46.setVarArgs(false);
        boolean boolean53 = node46.isFromExterns();
        boolean boolean54 = node46.isNull();
        boolean boolean55 = node46.isFalse();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node70 = node64.removeFirstChild();
        com.google.javascript.rhino.Node node71 = node46.useSourceInfoIfMissingFrom(node64);
        com.google.javascript.rhino.Node node72 = node44.useSourceInfoFromForTree(node71);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(45, node72);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(44, node8, node26, node73);
        node73.putBooleanProp(45, false);
        boolean boolean78 = node73.isDefaultCase();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        boolean boolean41 = node33.isNE();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        boolean boolean44 = node43.isOnlyModifiesThisCall();
        boolean boolean45 = node43.isEmpty();
        boolean boolean46 = node43.isReturn();
        boolean boolean47 = node43.isRegExp();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(52, node33, node43);
        boolean boolean49 = node43.isExprResult();
        node43.detachChildren();
        // The following exception was thrown during execution in test generation
        try {
            double double51 = node43.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1L), 1, 39);
        node3.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isRegExp();
        java.lang.String str6 = node1.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable7 = node1.getAncestors();
        java.lang.String str8 = node1.getSourceFileName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "STRING \n" + "'", str6, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isCall();
        boolean boolean19 = node1.isEquivalentTo(node15);
        node1.setIsSyntheticBlock(true);
        node1.setVarArgs(false);
        node1.setCharno(0);
        node1.setQuotedString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        boolean boolean9 = node1.getBooleanProp(45);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        boolean boolean15 = node11.isBreak();
        boolean boolean16 = node11.isTypeOf();
        node11.setVarArgs(false);
        boolean boolean19 = node1.hasChild(node11);
        java.lang.String str20 = node1.toString();
        boolean boolean21 = node1.isThis();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean26 = node25.isTypeOf();
        boolean boolean27 = node25.isInc();
        com.google.javascript.rhino.Node node28 = node25.cloneTree();
        com.google.javascript.rhino.Node node29 = node28.getLastChild();
        node1.addChildToBack(node28);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "STRING  0" + "'", str20, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        int int65 = node23.getSideEffectFlags();
        boolean boolean66 = node23.isFromExterns();
        boolean boolean67 = node23.isThis();
        boolean boolean68 = node23.isOr();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        node9.detachChildren();
        int int11 = node9.getSourcePosition();
        node9.setSourceFileForTesting("hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        boolean boolean21 = node16.isAssignAdd();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        com.google.javascript.rhino.Node node28 = node16.copyInformationFromForTree(node23);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isArrayLit();
        com.google.javascript.rhino.Node node34 = node16.useSourceInfoFrom(node30);
        boolean boolean35 = node34.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        boolean boolean38 = node37.isOnlyModifiesThisCall();
        boolean boolean39 = node37.isEmpty();
        boolean boolean40 = node37.isArrayLit();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        boolean boolean43 = node42.isOnlyModifiesThisCall();
        boolean boolean44 = node42.isEmpty();
        boolean boolean45 = node42.isReturn();
        boolean boolean46 = node42.isNE();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(4095, node34, node37, node42, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node50 = null;
        int int51 = node34.getIndexOfChild(node50);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        boolean boolean54 = node53.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node55 = node34.clonePropsFrom(node53);
        boolean boolean56 = node53.isVar();
        boolean boolean57 = node9.hasChild(node53);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node58 = node9.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        boolean boolean21 = node1.isLabel();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        com.google.javascript.rhino.Node node26 = node23.removeFirstChild();
        boolean boolean27 = node23.isIf();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        node29.setSourceEncodedPosition(4095);
        boolean boolean32 = node29.isNot();
        com.google.javascript.rhino.Node node33 = node23.srcrefTree(node29);
        boolean boolean34 = node33.isFromExterns();
        node1.addChildrenToFront(node33);
        boolean boolean36 = node33.isComma();
        boolean boolean37 = node33.isEmpty();
        boolean boolean38 = node33.isLocalResultCall();
        boolean boolean39 = node33.isThrow();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        boolean boolean7 = node1.isStringKey();
        boolean boolean8 = node1.isIf();
        boolean boolean9 = node1.isComma();
        com.google.javascript.rhino.Node node10 = node1.getLastSibling();
        int int12 = node10.getIntProp(36);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("STRING  0");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, node2, 54, 35);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean10 = node9.isTypeOf();
        boolean boolean11 = node9.isInc();
        com.google.javascript.rhino.Node node12 = node9.cloneTree();
        com.google.javascript.rhino.Node node13 = node2.copyInformationFrom(node12);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        node22.setSourceEncodedPosition(4095);
        boolean boolean25 = node22.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node22.getStaticSourceFile();
        boolean boolean27 = node22.isAssignAdd();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        node29.setSourceEncodedPosition(4095);
        boolean boolean32 = node29.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = node29.getStaticSourceFile();
        com.google.javascript.rhino.Node node34 = node22.copyInformationFromForTree(node29);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isArrayLit();
        com.google.javascript.rhino.Node node40 = node22.useSourceInfoFrom(node36);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] { node22 };
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(32, nodeArray41);
        int int44 = node42.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isReturn();
        boolean boolean50 = node46.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("");
        node52.setSourceEncodedPosition(4095);
        boolean boolean55 = node52.isNot();
        boolean boolean56 = node52.isBreak();
        boolean boolean57 = node52.isIn();
        com.google.javascript.rhino.Node node58 = node46.useSourceInfoIfMissingFromForTree(node52);
        com.google.javascript.rhino.Node node59 = node42.useSourceInfoFrom(node52);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("");
        node61.setSourceEncodedPosition(4095);
        boolean boolean64 = node61.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile65 = node61.getStaticSourceFile();
        boolean boolean66 = node61.isAssignAdd();
        java.util.Set<java.lang.String> strSet67 = node61.getDirectives();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("");
        node69.setSourceEncodedPosition(4095);
        boolean boolean72 = node69.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile73 = node69.getStaticSourceFile();
        node69.setVarArgs(false);
        boolean boolean76 = node69.isFromExterns();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("");
        node78.setSourceEncodedPosition(4095);
        boolean boolean81 = node78.isNot();
        com.google.javascript.rhino.Node node82 = node78.getLastSibling();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(37, node42, node61, node69, node82);
        boolean boolean84 = node82.isOr();
        int int86 = node82.getIntProp(42);
        com.google.javascript.rhino.Node node87 = node15.copyInformationFromForTree(node82);
        com.google.javascript.rhino.Node node88 = node12.useSourceInfoIfMissingFrom(node15);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(staticSourceFile33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(staticSourceFile65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(strSet67);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(staticSourceFile73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) 100, "hi!", 32, 37);
        boolean boolean5 = node4.isNE();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isTypeOf();
        boolean boolean5 = node3.isInc();
        com.google.javascript.rhino.Node node6 = node3.cloneTree();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder7 = node6.new FileLevelJsDocBuilder();
        int int8 = node6.getSourceOffset();
        boolean boolean9 = node6.isIf();
        boolean boolean10 = node6.isName();
        node6.setSourceEncodedPositionForTree(32);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        boolean boolean46 = node43.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        boolean boolean48 = node43.isAssignAdd();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        com.google.javascript.rhino.Node node55 = node43.copyInformationFromForTree(node50);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        boolean boolean58 = node57.isOnlyModifiesThisCall();
        boolean boolean59 = node57.isEmpty();
        boolean boolean60 = node57.isArrayLit();
        com.google.javascript.rhino.Node node61 = node43.useSourceInfoFrom(node57);
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] { node43 };
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(32, nodeArray62);
        int int65 = node63.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isReturn();
        boolean boolean71 = node67.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("");
        node73.setSourceEncodedPosition(4095);
        boolean boolean76 = node73.isNot();
        boolean boolean77 = node73.isBreak();
        boolean boolean78 = node73.isIn();
        com.google.javascript.rhino.Node node79 = node67.useSourceInfoIfMissingFromForTree(node73);
        com.google.javascript.rhino.Node node80 = node63.useSourceInfoFrom(node73);
        boolean boolean81 = node73.isNE();
        java.lang.String str82 = node39.checkTreeEquals(node73);
        boolean boolean83 = node39.isComma();
        node39.removeProp(48);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n" + "'", str82, "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isBlock();
        boolean boolean5 = node3.isNE();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        com.google.javascript.rhino.Node node11 = node7.getLastSibling();
        node7.setVarArgs(true);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node7.setJSType(jSType14);
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node7);
        boolean boolean17 = node3.isHook();
        com.google.javascript.rhino.Node node18 = node3.getFirstChild();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        boolean boolean26 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        node28.setSourceEncodedPosition(4095);
        boolean boolean31 = node28.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = node28.getStaticSourceFile();
        com.google.javascript.rhino.Node node33 = node21.copyInformationFromForTree(node28);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        boolean boolean36 = node35.isOnlyModifiesThisCall();
        boolean boolean37 = node35.isEmpty();
        boolean boolean38 = node35.isArrayLit();
        com.google.javascript.rhino.Node node39 = node21.useSourceInfoFrom(node35);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] { node21 };
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(32, nodeArray40);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        boolean boolean44 = node43.isOnlyModifiesThisCall();
        boolean boolean45 = node43.isEmpty();
        boolean boolean46 = node43.isReturn();
        com.google.javascript.rhino.Node node47 = node41.useSourceInfoFromForTree(node43);
        boolean boolean48 = node41.isCall();
        com.google.javascript.rhino.Node node49 = node41.getLastChild();
        node49.setQuotedString();
        int int51 = node49.getType();
        com.google.javascript.rhino.Node node52 = node3.srcref(node49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = node52.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 37.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(staticSourceFile32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 40 + "'", int51 == 40);
        org.junit.Assert.assertNotNull(node52);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isReturn();
        com.google.javascript.rhino.Node node29 = node23.useSourceInfoFromForTree(node25);
        node25.removeProp(53);
        java.util.Set<java.lang.String> strSet32 = node25.getDirectives();
        boolean boolean33 = node25.isQualifiedName();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean38 = node37.isTypeOf();
        boolean boolean39 = node37.isInc();
        com.google.javascript.rhino.Node node40 = node37.cloneTree();
        boolean boolean41 = node37.isNot();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((-1), node25, node37);
        int int43 = node37.getCharno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        boolean boolean53 = node48.isAssignAdd();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("");
        node55.setSourceEncodedPosition(4095);
        boolean boolean58 = node55.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile59 = node55.getStaticSourceFile();
        com.google.javascript.rhino.Node node60 = node48.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        boolean boolean63 = node62.isOnlyModifiesThisCall();
        boolean boolean64 = node62.isEmpty();
        boolean boolean65 = node62.isArrayLit();
        com.google.javascript.rhino.Node node66 = node48.useSourceInfoFrom(node62);
        boolean boolean67 = node62.hasChildren();
        boolean boolean68 = node62.isNumber();
        boolean boolean69 = node62.isTry();
        com.google.javascript.rhino.Node node70 = node62.cloneTree();
        com.google.javascript.rhino.Node node71 = node38.srcrefTree(node70);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 39, 24, 31);
        com.google.javascript.rhino.Node node76 = node71.clonePropsFrom(node75);
        boolean boolean77 = node76.isNE();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(staticSourceFile59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        node28.setSourceEncodedPositionForTree(43);
        java.lang.String str38 = node28.toString();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(10, 42, (int) (byte) 1);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("");
        boolean boolean45 = node44.isOnlyModifiesThisCall();
        boolean boolean46 = node44.isEmpty();
        boolean boolean47 = node44.isArrayLit();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isSetterDef();
        com.google.javascript.rhino.Node node52 = node44.srcref(node49);
        com.google.javascript.rhino.Node node53 = node52.getLastSibling();
        boolean boolean54 = node53.isSetterDef();
        com.google.javascript.rhino.Node node55 = node42.clonePropsFrom(node53);
        int int56 = node42.getSourceOffset();
        node28.addChildrenToFront(node42);
        com.google.javascript.rhino.Node node58 = node28.removeFirstChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "STRING  0" + "'", str38, "STRING  0");
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        node40.setSourceEncodedPosition(4095);
        boolean boolean43 = node40.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = node40.getStaticSourceFile();
        boolean boolean45 = node40.isAssignAdd();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        node47.setSourceEncodedPosition(4095);
        boolean boolean50 = node47.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = node47.getStaticSourceFile();
        com.google.javascript.rhino.Node node52 = node40.copyInformationFromForTree(node47);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        boolean boolean55 = node54.isOnlyModifiesThisCall();
        boolean boolean56 = node54.isEmpty();
        boolean boolean57 = node54.isArrayLit();
        com.google.javascript.rhino.Node node58 = node40.useSourceInfoFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] { node40 };
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(32, nodeArray59);
        node20.addChildrenToFront(node60);
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = null;
        node20.setJSDocInfo(jSDocInfo62);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(staticSourceFile44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(staticSourceFile51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(nodeArray59);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("STRING  0");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, node2, 54, 35);
        java.lang.String str6 = node2.getSourceFileName();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = node2.getExistingIntProp(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 2");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        boolean boolean57 = node56.isNoSideEffectsCall();
        int int58 = node56.getType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 40 + "'", int58 == 40);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        com.google.javascript.rhino.Node node5 = node1.getLastSibling();
        node1.setSourceEncodedPosition((int) (short) -1);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        java.util.Set<java.lang.String> strSet7 = node1.getDirectives();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node10 = node1.copyInformationFrom(node9);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        boolean boolean13 = node12.isOnlyModifiesThisCall();
        int int14 = node12.getSourceOffset();
        com.google.javascript.rhino.Node node16 = node12.getChildAtIndex((int) (byte) 0);
        java.lang.String str17 = node10.checkTreeEquals(node12);
        node10.setType(1);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        boolean boolean38 = node20.isNE();
        node20.putBooleanProp((-1), false);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(49, 31, (int) (byte) 10);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("STRING  0");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, node2, 54, 35);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean10 = node9.isTypeOf();
        boolean boolean11 = node9.isInc();
        com.google.javascript.rhino.Node node12 = node9.cloneTree();
        com.google.javascript.rhino.Node node13 = node2.copyInformationFrom(node12);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        boolean boolean23 = node18.isAssignAdd();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        com.google.javascript.rhino.Node node30 = node18.copyInformationFromForTree(node25);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = node32.isOnlyModifiesThisCall();
        boolean boolean34 = node32.isEmpty();
        boolean boolean35 = node32.isArrayLit();
        com.google.javascript.rhino.Node node36 = node18.useSourceInfoFrom(node32);
        boolean boolean37 = node36.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("");
        boolean boolean45 = node44.isOnlyModifiesThisCall();
        boolean boolean46 = node44.isEmpty();
        boolean boolean47 = node44.isReturn();
        boolean boolean48 = node44.isNE();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(4095, node36, node39, node44, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node52 = node15.useSourceInfoIfMissingFrom(node51);
        boolean boolean53 = node52.isNull();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("");
        boolean boolean56 = node55.isOnlyModifiesThisCall();
        boolean boolean57 = node55.isEmpty();
        boolean boolean58 = node55.isReturn();
        boolean boolean59 = node55.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType60 = node55.getJSType();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        node62.setSourceEncodedPosition(4095);
        boolean boolean65 = node62.isNot();
        boolean boolean66 = node62.isBreak();
        boolean boolean67 = node62.isTypeOf();
        boolean boolean68 = node62.isInc();
        boolean boolean69 = node62.isWhile();
        node62.setSourceEncodedPosition((-1));
        boolean boolean72 = node55.hasChild(node62);
        com.google.javascript.rhino.Node node73 = node52.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node74 = node12.srcrefTree(node52);
        node74.setIsSyntheticBlock(false);
        boolean boolean77 = node74.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        boolean boolean28 = node8.isGetElem();
        boolean boolean29 = node8.isLocalResultCall();
        // The following exception was thrown during execution in test generation
        try {
            double double30 = node8.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  0 is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder11 = node1.getJsDocBuilderForNode();
        fileLevelJsDocBuilder11.append("Node tree inequality:\nTree1:\nSTRING  0\n    NUMBER 8.0\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: STRING  0\n    NUMBER 8.0\n    STRING  0\n\n\nSubtree2: STRING  0\n");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder11);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) '4');
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] { node4 };
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(32, nodeArray23);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoFromForTree(node26);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node30.getStaticSourceFile();
        java.lang.String str35 = node30.toString(true, true, true);
        node1.addChildrenToBack(node30);
        node1.setCharno(53);
        boolean boolean39 = node1.isAnd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(staticSourceFile31);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "TYPEOF" + "'", str35, "TYPEOF");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        boolean boolean28 = node8.isVar();
        boolean boolean29 = node8.isIf();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node50 = node32.useSourceInfoFrom(node46);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] { node32 };
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(32, nodeArray51);
        int int54 = node52.getIntProp((int) (byte) 100);
        boolean boolean56 = node52.getBooleanProp(0);
        com.google.javascript.rhino.Node node57 = node8.useSourceInfoIfMissingFromForTree(node52);
        boolean boolean58 = node52.isReturn();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        boolean boolean65 = node64.isExprResult();
        com.google.javascript.rhino.Node node66 = node64.removeFirstChild();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        node68.setSourceEncodedPosition(4095);
        boolean boolean71 = node68.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile72 = node68.getStaticSourceFile();
        boolean boolean73 = node68.isAssignAdd();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("");
        node75.setSourceEncodedPosition(4095);
        boolean boolean78 = node75.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile79 = node75.getStaticSourceFile();
        com.google.javascript.rhino.Node node80 = node68.copyInformationFromForTree(node75);
        boolean boolean81 = node68.isNE();
        boolean boolean82 = node68.isThrow();
        boolean boolean83 = node68.wasEmptyNode();
        java.lang.String str84 = node68.getSourceFileName();
        com.google.javascript.rhino.Node node85 = node66.srcref(node68);
        boolean boolean86 = node68.isSyntheticBlock();
        int int87 = node68.getSourcePosition();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(staticSourceFile72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(staticSourceFile79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4095 + "'", int87 == 4095);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER 37.0 100\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: NUMBER 37.0 100\n\n\nSubtree2: STRING  0\n", (int) (short) 100, 31);
        boolean boolean4 = node3.isNumber();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        boolean boolean9 = node1.getBooleanProp(45);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        boolean boolean15 = node11.isBreak();
        boolean boolean16 = node11.isTypeOf();
        node11.setVarArgs(false);
        boolean boolean19 = node1.hasChild(node11);
        int int21 = node1.getIntProp(0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        boolean boolean6 = node1.isFromExterns();
        java.lang.String str7 = node1.getSourceFileName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        boolean boolean21 = node1.isCase();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = node1.getExistingIntProp(35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 35");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        boolean boolean28 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        node30.setSourceEncodedPosition(4095);
        boolean boolean33 = node30.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node30.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node23.copyInformationFromForTree(node30);
        com.google.javascript.rhino.Node node36 = node30.removeFirstChild();
        boolean boolean37 = node30.isAnd();
        boolean boolean38 = node30.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        boolean boolean41 = node40.isOnlyModifiesThisCall();
        boolean boolean42 = node40.isEmpty();
        boolean boolean43 = node40.isArrayLit();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        boolean boolean46 = node45.isOnlyModifiesThisCall();
        boolean boolean47 = node45.isSetterDef();
        com.google.javascript.rhino.Node node48 = node40.srcref(node45);
        node30.addChildToFront(node40);
        com.google.javascript.rhino.Node node50 = node30.getLastChild();
        boolean boolean51 = node30.isInstanceOf();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node53.getStaticSourceFile();
        boolean boolean58 = node53.isAssignAdd();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        boolean boolean63 = node60.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = node60.getStaticSourceFile();
        com.google.javascript.rhino.Node node65 = node53.copyInformationFromForTree(node60);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isArrayLit();
        com.google.javascript.rhino.Node node71 = node53.useSourceInfoFrom(node67);
        boolean boolean72 = node53.isVarArgs();
        int int73 = node53.getType();
        node30.addChildToBack(node53);
        int int75 = node1.getIndexOfChild(node53);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int80 = node79.getLength();
        boolean boolean81 = node79.isStringKey();
        com.google.javascript.rhino.Node node82 = node79.removeFirstChild();
        boolean boolean83 = node79.isGetterDef();
        com.google.javascript.rhino.Node node84 = node1.clonePropsFrom(node79);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder85 = node1.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder85.append("");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(staticSourceFile64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 40 + "'", int73 == 40);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isTypeOf();
        java.lang.String str5 = node3.toString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 37.0 100" + "'", str5, "NUMBER 37.0 100");
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isRegExp();
        int int6 = node1.getLength();
        boolean boolean7 = node1.isNumber();
        boolean boolean8 = node1.isWhile();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.Node node5 = node1.getLastSibling();
        int int6 = node1.getType();
        boolean boolean7 = node1.isFalse();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        boolean boolean16 = node11.isAssignAdd();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node23 = node11.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node29 = node11.useSourceInfoFrom(node25);
        boolean boolean30 = node29.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = node32.isOnlyModifiesThisCall();
        boolean boolean34 = node32.isEmpty();
        boolean boolean35 = node32.isArrayLit();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        boolean boolean38 = node37.isOnlyModifiesThisCall();
        boolean boolean39 = node37.isEmpty();
        boolean boolean40 = node37.isReturn();
        boolean boolean41 = node37.isNE();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(4095, node29, node32, node37, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(36, node44, node46, node53);
        boolean boolean55 = node44.isGetElem();
        boolean boolean56 = node44.isCall();
        com.google.javascript.rhino.Node node57 = node44.cloneTree();
        boolean boolean58 = node1.isEquivalentTo(node44);
        com.google.javascript.rhino.Node node59 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node60 = node1.copyInformationFrom(node59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 40 + "'", int6 == 40);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        java.lang.String str47 = node38.toString();
        boolean boolean48 = node38.isVoid();
        com.google.javascript.rhino.Node node50 = node38.getAncestor(4);
        node38.setType(43);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "STRING  0" + "'", str47, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(node50);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(8, "hi!", (int) (short) -1, 40);
        boolean boolean5 = node4.hasOneChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isReturn();
        boolean boolean6 = node2.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        boolean boolean12 = node8.isBreak();
        boolean boolean13 = node8.isIn();
        com.google.javascript.rhino.Node node14 = node2.useSourceInfoIfMissingFromForTree(node8);
        node8.setSourceEncodedPositionForTree(39);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isReturn();
        boolean boolean22 = node18.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        boolean boolean28 = node24.isBreak();
        boolean boolean29 = node24.isIn();
        com.google.javascript.rhino.Node node30 = node18.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        boolean boolean45 = node32.isNE();
        boolean boolean46 = node32.isThrow();
        boolean boolean47 = node32.isFor();
        com.google.javascript.rhino.Node node48 = node24.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(0.0d);
        node50.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        boolean boolean55 = node54.isOnlyModifiesThisCall();
        boolean boolean56 = node54.isEmpty();
        boolean boolean57 = node54.isCatch();
        int int58 = node54.getSourceOffset();
        boolean boolean59 = node54.isHook();
        node50.addChildToBack(node54);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        node63.setSourceEncodedPosition(4095);
        boolean boolean66 = node63.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile67 = node63.getStaticSourceFile();
        boolean boolean68 = node63.isAssignAdd();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("");
        node70.setSourceEncodedPosition(4095);
        boolean boolean73 = node70.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = node70.getStaticSourceFile();
        com.google.javascript.rhino.Node node75 = node63.copyInformationFromForTree(node70);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        boolean boolean78 = node77.isOnlyModifiesThisCall();
        boolean boolean79 = node77.isEmpty();
        boolean boolean80 = node77.isArrayLit();
        com.google.javascript.rhino.Node node81 = node63.useSourceInfoFrom(node77);
        com.google.javascript.rhino.Node[] nodeArray82 = new com.google.javascript.rhino.Node[] { node63 };
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(32, nodeArray82);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("");
        boolean boolean86 = node85.isOnlyModifiesThisCall();
        boolean boolean87 = node85.isEmpty();
        boolean boolean88 = node85.isReturn();
        com.google.javascript.rhino.Node node89 = node83.useSourceInfoFromForTree(node85);
        boolean boolean90 = node85.isAdd();
        node85.putBooleanProp(38, false);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((int) (short) 10, node8, node48, node50, node85);
        com.google.javascript.rhino.Node node95 = node94.getLastSibling();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(staticSourceFile67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(staticSourceFile74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(nodeArray82);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node95);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node15.getStaticSourceFile();
        boolean boolean20 = node15.isAssignAdd();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        node22.setSourceEncodedPosition(4095);
        boolean boolean25 = node22.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node22.getStaticSourceFile();
        com.google.javascript.rhino.Node node27 = node15.copyInformationFromForTree(node22);
        boolean boolean28 = node15.isNE();
        boolean boolean29 = node15.isThrow();
        boolean boolean30 = node15.isFor();
        com.google.javascript.rhino.Node node31 = node7.useSourceInfoFrom(node15);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node65.isNE();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("");
        boolean boolean76 = node75.isOnlyModifiesThisCall();
        boolean boolean77 = node75.isEmpty();
        boolean boolean78 = node75.isReturn();
        boolean boolean79 = node75.isRegExp();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(52, node65, node75);
        com.google.javascript.rhino.Node node81 = node31.useSourceInfoIfMissingFrom(node65);
        java.util.Set<java.lang.String> strSet82 = node81.getDirectives();
        com.google.javascript.rhino.jstype.JSType jSType83 = null;
        node81.setJSType(jSType83);
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString("");
        boolean boolean87 = node86.isOnlyModifiesThisCall();
        boolean boolean88 = node86.isEmpty();
        boolean boolean89 = node86.isCatch();
        com.google.javascript.rhino.Node node90 = node81.clonePropsFrom(node86);
        com.google.javascript.rhino.Node node91 = node81.getNext();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = node91.isOnlyModifiesThisCall();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(strSet82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNull(node91);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        boolean boolean5 = node1.isGetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        node24.removeProp(53);
        java.util.Set<java.lang.String> strSet31 = node24.getDirectives();
        boolean boolean32 = node24.isTrue();
        node24.setOptionalArg(false);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(41);
        boolean boolean2 = node1.isTry();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node7.getStaticSourceFile();
        boolean boolean12 = node7.isAssignAdd();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node19 = node7.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        boolean boolean22 = node21.isOnlyModifiesThisCall();
        boolean boolean23 = node21.isEmpty();
        boolean boolean24 = node21.isArrayLit();
        com.google.javascript.rhino.Node node25 = node7.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] { node7 };
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(32, nodeArray26);
        int int29 = node27.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isReturn();
        boolean boolean35 = node31.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        node37.setSourceEncodedPosition(4095);
        boolean boolean40 = node37.isNot();
        boolean boolean41 = node37.isBreak();
        boolean boolean42 = node37.isIn();
        com.google.javascript.rhino.Node node43 = node31.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.Node node44 = node27.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        boolean boolean49 = node46.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node46.getStaticSourceFile();
        boolean boolean51 = node46.isAssignAdd();
        java.util.Set<java.lang.String> strSet52 = node46.getDirectives();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        node54.setSourceEncodedPosition(4095);
        boolean boolean57 = node54.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = node54.getStaticSourceFile();
        node54.setVarArgs(false);
        boolean boolean61 = node54.isFromExterns();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        node63.setSourceEncodedPosition(4095);
        boolean boolean66 = node63.isNot();
        com.google.javascript.rhino.Node node67 = node63.getLastSibling();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(37, node27, node46, node54, node67);
        boolean boolean69 = node68.isExprResult();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(49, node68, (int) (byte) 10, (int) (short) 10);
        boolean boolean73 = node72.isAssign();
        com.google.javascript.rhino.Node node75 = node72.getAncestor(0);
        boolean boolean76 = node1.isEquivalentToTyped(node75);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(45);
        com.google.javascript.rhino.Node node79 = node75.srcref(node78);
        boolean boolean80 = node78.isCatch();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(staticSourceFile58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        boolean boolean6 = node2.isBreak();
        boolean boolean7 = node2.isIn();
        boolean boolean8 = node2.isLabel();
        boolean boolean9 = node2.isReturn();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(46, "STRING \n");
        boolean boolean13 = node12.isNew();
        int int14 = node12.getSideEffectFlags();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(37, node2, node12);
        com.google.javascript.rhino.jstype.JSType jSType16 = node2.getJSType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(jSType16);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        boolean boolean14 = node1.isNE();
        boolean boolean15 = node1.isThrow();
        boolean boolean16 = node1.wasEmptyNode();
        boolean boolean17 = node1.isObjectLit();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isReturn();
        boolean boolean6 = node2.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        boolean boolean12 = node8.isBreak();
        boolean boolean13 = node8.isIn();
        com.google.javascript.rhino.Node node14 = node2.useSourceInfoIfMissingFromForTree(node8);
        node8.setSourceEncodedPositionForTree(39);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isReturn();
        boolean boolean22 = node18.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        boolean boolean28 = node24.isBreak();
        boolean boolean29 = node24.isIn();
        com.google.javascript.rhino.Node node30 = node18.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        boolean boolean45 = node32.isNE();
        boolean boolean46 = node32.isThrow();
        boolean boolean47 = node32.isFor();
        com.google.javascript.rhino.Node node48 = node24.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(0.0d);
        node50.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        boolean boolean55 = node54.isOnlyModifiesThisCall();
        boolean boolean56 = node54.isEmpty();
        boolean boolean57 = node54.isCatch();
        int int58 = node54.getSourceOffset();
        boolean boolean59 = node54.isHook();
        node50.addChildToBack(node54);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        node63.setSourceEncodedPosition(4095);
        boolean boolean66 = node63.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile67 = node63.getStaticSourceFile();
        boolean boolean68 = node63.isAssignAdd();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("");
        node70.setSourceEncodedPosition(4095);
        boolean boolean73 = node70.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = node70.getStaticSourceFile();
        com.google.javascript.rhino.Node node75 = node63.copyInformationFromForTree(node70);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        boolean boolean78 = node77.isOnlyModifiesThisCall();
        boolean boolean79 = node77.isEmpty();
        boolean boolean80 = node77.isArrayLit();
        com.google.javascript.rhino.Node node81 = node63.useSourceInfoFrom(node77);
        com.google.javascript.rhino.Node[] nodeArray82 = new com.google.javascript.rhino.Node[] { node63 };
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(32, nodeArray82);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("");
        boolean boolean86 = node85.isOnlyModifiesThisCall();
        boolean boolean87 = node85.isEmpty();
        boolean boolean88 = node85.isReturn();
        com.google.javascript.rhino.Node node89 = node83.useSourceInfoFromForTree(node85);
        boolean boolean90 = node85.isAdd();
        node85.putBooleanProp(38, false);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((int) (short) 10, node8, node48, node50, node85);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder95 = node8.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(staticSourceFile67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(staticSourceFile74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(nodeArray82);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        boolean boolean41 = node33.isNE();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        boolean boolean44 = node43.isOnlyModifiesThisCall();
        boolean boolean45 = node43.isEmpty();
        boolean boolean46 = node43.isReturn();
        boolean boolean47 = node43.isRegExp();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(52, node33, node43);
        boolean boolean49 = node33.isSyntheticBlock();
        boolean boolean50 = node33.hasChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType6 = node1.getJSType();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        boolean boolean12 = node8.isBreak();
        boolean boolean13 = node8.isTypeOf();
        boolean boolean14 = node8.isInc();
        boolean boolean15 = node8.isWhile();
        node8.setSourceEncodedPosition((-1));
        boolean boolean18 = node1.hasChild(node8);
        boolean boolean19 = node1.isAssign();
        com.google.javascript.rhino.Node node20 = node1.removeChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        int int3 = node1.getSourceOffset();
        boolean boolean4 = node1.isLabel();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isEmpty();
        boolean boolean9 = node6.isArrayLit();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        boolean boolean12 = node11.isOnlyModifiesThisCall();
        boolean boolean13 = node11.isSetterDef();
        com.google.javascript.rhino.Node node14 = node6.srcref(node11);
        com.google.javascript.rhino.Node node15 = node14.getLastSibling();
        boolean boolean16 = node15.isIf();
        node15.setLength(4);
        boolean boolean19 = node15.isFunction();
        com.google.javascript.rhino.Node node20 = node1.useSourceInfoIfMissingFromForTree(node15);
        node15.putIntProp((int) (short) 0, 2);
        boolean boolean24 = node15.wasEmptyNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isCall();
        boolean boolean5 = node1.isAssign();
        boolean boolean6 = node1.hasOneChild();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        boolean boolean11 = node8.isReturn();
        boolean boolean12 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        boolean boolean18 = node14.isBreak();
        boolean boolean19 = node14.isIn();
        com.google.javascript.rhino.Node node20 = node8.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node20.cloneNode();
        com.google.javascript.rhino.Node node22 = node1.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        boolean boolean29 = node24.isAssignAdd();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        node31.setSourceEncodedPosition(4095);
        boolean boolean34 = node31.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node31.getStaticSourceFile();
        com.google.javascript.rhino.Node node36 = node24.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node37 = node31.removeFirstChild();
        boolean boolean38 = node31.isAnd();
        node31.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node43 = node31.getAncestor(0);
        com.google.javascript.rhino.Node node44 = node22.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean45 = node44.isAdd();
        boolean boolean46 = node44.isName();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        node51.setSourceEncodedPosition(4095);
        boolean boolean54 = node51.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = node51.getStaticSourceFile();
        boolean boolean56 = node51.isAssignAdd();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node58.getStaticSourceFile();
        com.google.javascript.rhino.Node node63 = node51.copyInformationFromForTree(node58);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        boolean boolean66 = node65.isOnlyModifiesThisCall();
        boolean boolean67 = node65.isEmpty();
        boolean boolean68 = node65.isArrayLit();
        com.google.javascript.rhino.Node node69 = node51.useSourceInfoFrom(node65);
        boolean boolean70 = node69.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        boolean boolean73 = node72.isOnlyModifiesThisCall();
        boolean boolean74 = node72.isEmpty();
        boolean boolean75 = node72.isArrayLit();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        boolean boolean78 = node77.isOnlyModifiesThisCall();
        boolean boolean79 = node77.isEmpty();
        boolean boolean80 = node77.isReturn();
        boolean boolean81 = node77.isNE();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(4095, node69, node72, node77, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node85 = node48.useSourceInfoIfMissingFrom(node84);
        boolean boolean86 = node85.isOptionalArg();
        com.google.javascript.rhino.Node node87 = node44.srcref(node85);
        com.google.javascript.rhino.Node node88 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node89 = node44.copyInformationFromForTree(node88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(staticSourceFile55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node41 = node20.clonePropsFrom(node39);
        node39.setQuotedString();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean47 = node46.isObjectLit();
        boolean boolean48 = node46.isFunction();
        java.lang.String str49 = node39.checkTreeEquals(node46);
        boolean boolean50 = node39.isFalse();
        boolean boolean51 = node39.isCatch();
        java.lang.String str52 = node39.toString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  [quoted: 1]\n\n\nTree2:\nNUMBER 37.0 100\n\n\nSubtree1: STRING  [quoted: 1]\n\n\nSubtree2: NUMBER 37.0 100\n" + "'", str49, "Node tree inequality:\nTree1:\nSTRING  [quoted: 1]\n\n\nTree2:\nNUMBER 37.0 100\n\n\nSubtree1: STRING  [quoted: 1]\n\n\nSubtree2: NUMBER 37.0 100\n");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "STRING  [quoted: 1]" + "'", str52, "STRING  [quoted: 1]");
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        node24.removeProp(53);
        java.util.Set<java.lang.String> strSet31 = node24.getDirectives();
        boolean boolean32 = node24.isQualifiedName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node24.new FileLevelJsDocBuilder();
        // The following exception was thrown during execution in test generation
        try {
            node24.setSideEffectFlags(43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        node40.setSourceEncodedPosition(4095);
        boolean boolean43 = node40.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = node40.getStaticSourceFile();
        boolean boolean45 = node40.isAssignAdd();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        node47.setSourceEncodedPosition(4095);
        boolean boolean50 = node47.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = node47.getStaticSourceFile();
        com.google.javascript.rhino.Node node52 = node40.copyInformationFromForTree(node47);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        boolean boolean55 = node54.isOnlyModifiesThisCall();
        boolean boolean56 = node54.isEmpty();
        boolean boolean57 = node54.isArrayLit();
        com.google.javascript.rhino.Node node58 = node40.useSourceInfoFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] { node40 };
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(32, nodeArray59);
        node20.addChildrenToFront(node60);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder62 = node20.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(staticSourceFile44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(staticSourceFile51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(nodeArray59);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = node1.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        boolean boolean6 = node2.isBreak();
        boolean boolean7 = node2.isTypeOf();
        int int8 = node2.getCharno();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        boolean boolean11 = node10.isOnlyModifiesThisCall();
        int int12 = node10.getSourceOffset();
        boolean boolean13 = node10.isExprResult();
        com.google.javascript.rhino.Node node14 = node2.srcref(node10);
        boolean boolean15 = node14.isNE();
        boolean boolean16 = node14.isContinue();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(15, node14, 10, 12);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4095 + "'", int8 == 4095);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }
}


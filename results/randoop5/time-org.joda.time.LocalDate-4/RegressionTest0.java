import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate5 = localDate1.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = localDate1.get(dateTimeFieldType3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = localDate1.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    @Ignore
  public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        int int5 = localDate4.getDayOfYear();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        java.util.Locale locale7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = localDate3.toString("hi!", locale7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    @Ignore
  public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = localDate4.withField(dateTimeFieldType5, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate5 = localDate1.withDayOfWeek((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    @Ignore
  public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalTime localTime5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = localDate4.toLocalDateTime(localTime5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The time must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"hi!\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        java.lang.Class<?> wildcardClass5 = chronology4.getClass();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 1);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = localDate1.minusWeeks((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDate11.getFieldType(2019);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2019");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth(2020);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2020 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = localDate1.getValue(1970);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1970");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int4 = localDate2.getValue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateMidnight4);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DurationFieldType durationFieldType8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = localDate3.withFieldAdded(durationFieldType8, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = localDate1.withYearOfCentury(2020);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2020 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        int int5 = localDate1.getYearOfEra();
        org.joda.time.DurationFieldType durationFieldType6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = localDate1.withFieldAdded(durationFieldType6, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((int) (byte) 1, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.DurationFieldType durationFieldType22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate24 = localDate21.withFieldAdded(durationFieldType22, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    @Ignore
  public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        // The following exception was thrown during execution in test generation
        try {
            int int4 = localDate1.getValue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DurationField durationField13 = property9.getDurationField();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = localDate5.withMonthOfYear((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((java.lang.Object) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Short");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date17 = localDate16.toDate();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology22 = localDate19.getChronology();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) date17, chronology22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) (short) 1, chronology22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Short");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = localDate7.isSupported(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The calendar must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate1.plusDays((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = localDate10.get(dateTimeFieldType11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = localDate15.withField(dateTimeFieldType16, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.parse("", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((java.lang.Object) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Float");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        java.lang.Class<?> wildcardClass13 = localDate12.getClass();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 99, chronology6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField10 = localDate8.getField((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.LocalDate localDate15 = property12.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property16 = localDate15.weekOfWeekyear();
        boolean boolean17 = localDate0.isAfter((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property19 = localDate15.property(dateTimeFieldType18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = localDate12.isSupported(dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate19 = localDate12.withFieldAdded(durationFieldType17, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int9 = localDate5.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    @Ignore
  public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        java.lang.String str20 = property9.getAsString();
        int int21 = property9.get();
        int int22 = property9.getLeapAmount();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2020" + "'", str20, "2020");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2020 + "'", int21 == 2020);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        long long13 = property12.remainder();
        org.joda.time.LocalDate localDate14 = property12.withMinimumValue();
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDate14.getFields();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int17 = localDate14.get(dateTimeFieldType16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.parse("Property[monthOfYear]", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalTime localTime3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime4 = localDate1.toLocalDateTime(localTime3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The time must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now(dateTimeZone0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Zone must not be null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int9 = localDate5.getYearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = localDate5.toString(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0001-01-01" + "'", str11, "0001-01-01");
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate4 = localDate2.withMonthOfYear(330);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 330 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        int int12 = localDate11.getWeekyear();
        java.lang.Class<?> wildcardClass13 = localDate11.getClass();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 99 + "'", int12 == 99);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    @Ignore
  public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy((int) (short) 10);
        java.util.Locale locale15 = null;
        java.lang.String str16 = property9.getAsShortText(locale15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((java.lang.Object) locale15);
        int int18 = localDate17.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate13 = localDate3.withCenturyOfEra((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = localDate13.withMonthOfYear((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = localDate3.withMonthOfYear(19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 19 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    @Ignore
  public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType4 = localDate1.getFieldType((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    @Ignore
  public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = localDate4.toDateMidnight(dateTimeZone5);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateMidnight6);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        long long13 = property12.remainder();
        org.joda.time.LocalDate localDate14 = property12.withMinimumValue();
        org.joda.time.ReadablePartial readablePartial15 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = localDate14.isEqual(readablePartial15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    @Ignore
  public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.year();
        int int2 = localDate0.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate4 = localDate0.withDayOfWeek(2020);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2020 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2020 + "'", int2 == 2020);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.LocalDate localDate15 = property12.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property16 = localDate15.weekOfWeekyear();
        boolean boolean17 = localDate0.isAfter((org.joda.time.ReadablePartial) localDate15);
        int int18 = localDate15.getCenturyOfEra();
        org.joda.time.LocalDate.Property property19 = localDate15.dayOfMonth();
        java.util.Locale locale21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate22 = property19.setCopy("2020", locale21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2020 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate.Property property10 = localDate1.dayOfMonth();
        java.lang.Object obj11 = null;
        boolean boolean12 = localDate1.equals(obj11);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    @Ignore
  public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date6 = localDate5.toDate();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology11 = localDate8.getChronology();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) date6, chronology11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(0L, chronology11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((int) (short) 10, (int) 'a', (-292275054), chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        long long13 = property12.remainder();
        org.joda.time.LocalDate localDate14 = property12.withMinimumValue();
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDate14.getFields();
        org.joda.time.LocalDate.Property property16 = localDate14.year();
        java.lang.String str17 = property16.getAsShortText();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.parse("2020-11-25", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        int int5 = localDate1.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = localDate1.withDayOfWeek(2021);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2021 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        org.joda.time.LocalDate localDate16 = property14.addWrapFieldToCopy((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = property14.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((-1));
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((int) (short) 100);
        boolean boolean12 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate.Property property13 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = localDate14.withWeekOfWeekyear((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    @Ignore
  public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property6 = localDate4.property(dateTimeFieldType5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate7.getDayOfYear();
        java.lang.String str13 = localDate7.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType15 = localDate7.getFieldType((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.parse("Property[yearOfCentury]", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        boolean boolean11 = property9.equals((java.lang.Object) 100L);
        java.lang.String str12 = property9.toString();
        org.joda.time.DateTimeField dateTimeField13 = property9.getField();
        org.joda.time.LocalDate localDate14 = property9.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate14.withPeriodAdded(readablePeriod15, 2020);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[yearOfCentury]" + "'", str12, "Property[yearOfCentury]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        int int17 = localDate15.indexOf(dateTimeFieldType16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology22 = localDate19.getChronology();
        int int23 = localDate15.compareTo((org.joda.time.ReadablePartial) localDate19);
        int int24 = localDate15.size();
        boolean boolean25 = localDate7.isBefore((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalTime localTime26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = localDate15.toLocalDateTime(localTime26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The time must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    @Ignore
  public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(99);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = localDate10.indexOf(dateTimeFieldType11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology17 = localDate14.getChronology();
        int int18 = localDate10.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = localDate14.toDateMidnight(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate14.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate14.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.LocalDate localDate25 = localDate4.withFields((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate.Property property26 = localDate4.era();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate32 = localDate30.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate34 = localDate32.minusWeeks((-1));
        boolean boolean35 = localDate28.isEqual((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.LocalDate.Property property36 = localDate28.year();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate40.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtCurrentTime(dateTimeZone43);
        int int45 = property36.getDifference((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate51 = localDate49.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate53 = localDate51.minusWeeks((-1));
        boolean boolean54 = localDate47.isEqual((org.joda.time.ReadablePartial) localDate51);
        org.joda.time.DateTime dateTime55 = localDate51.toDateTimeAtMidnight();
        int int56 = property36.getDifference((org.joda.time.ReadableInstant) dateTime55);
        // The following exception was thrown during execution in test generation
        try {
            long long57 = property26.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime55);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2019 + "'", int45 == 2019);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2019 + "'", int56 == 2019);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = localDate0.toInterval(dateTimeZone3);
        java.lang.Class<?> wildcardClass5 = interval4.getClass();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int16 = localDate11.get(dateTimeFieldType15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    @Ignore
  public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        boolean boolean19 = localDate12.isEqual((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate.Property property20 = localDate12.year();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate26 = localDate24.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtCurrentTime(dateTimeZone27);
        int int29 = property20.getDifference((org.joda.time.ReadableInstant) dateTime28);
        long long30 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate38 = localDate36.minusWeeks((-1));
        boolean boolean39 = localDate32.isEqual((org.joda.time.ReadablePartial) localDate36);
        org.joda.time.LocalDate.Property property40 = localDate32.year();
        int int41 = property9.compareTo((org.joda.time.ReadablePartial) localDate32);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2019 + "'", int29 == 2019);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    @Ignore
  public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate11 = localDate5.withYearOfCentury((int) '#');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        int int14 = localDate13.getDayOfYear();
        org.joda.time.LocalDate localDate15 = localDate5.withFields((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtStartOfDay(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 330 + "'", int14 == 330);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        int int5 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate localDate7 = localDate1.minusDays((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = localDate1.withMonthOfYear((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        int int5 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate localDate7 = localDate1.minusDays((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType9 = localDate7.getFieldType(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("Jan");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Jan\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.util.Locale locale11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = property9.setCopy("Thursday", locale11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Thursday\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        org.joda.time.LocalDate.Property property5 = localDate1.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = localDate1.withEra(12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 12 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate4.minusDays((int) (byte) 100);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.year();
        org.joda.time.LocalDate localDate9 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        int int10 = localDate7.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalTime localTime1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = localDate0.toLocalDateTime(localTime1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The time must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property9.roundFloorCopy();
        java.lang.String str13 = property9.getAsString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = property9.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property9.roundFloorCopy();
        java.lang.String str13 = property9.getAsString();
        java.util.Locale locale15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = property9.setCopy("Property[monthOfYear]", locale15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[monthOfYear]\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        int int7 = property6.get();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(chronology2);
        org.joda.time.DurationFieldType durationFieldType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate6 = localDate3.withFieldAdded(durationFieldType4, 330);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        int int13 = property9.getMaximumValue();
        org.joda.time.LocalDate localDate14 = property9.roundHalfEvenCopy();
        boolean boolean15 = property9.isLeap();
        int int16 = property9.getMinimumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = property9.setCopy("Jan");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Jan\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 99 + "'", int13 == 99);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        org.joda.time.DurationField durationField15 = property14.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(durationField15);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        java.util.Locale locale13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = property9.setCopy("", locale13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate5.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property11 = localDate5.year();
        org.joda.time.LocalDate localDate13 = property11.setCopy((int) 'a');
        java.util.Locale locale14 = null;
        int int15 = property11.getMaximumShortTextLength(locale14);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
    }

    @Test
    @Ignore
  public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfWeek();
        org.joda.time.LocalDate localDate8 = localDate5.withWeekyear((int) (short) 0);
        java.util.Locale locale10 = null;
        java.lang.String str11 = localDate5.toString("2020-11-25", locale10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = localDate5.withEra((int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2020-11-25" + "'", str11, "2020-11-25");
    }

    @Test
    @Ignore
  public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate24 = property9.setCopy("Property[yearOfCentury]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[yearOfCentury]\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        java.util.Locale locale16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate17 = property14.setCopy("2020-11-25", locale16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2020-11-25\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate7.getDayOfYear();
        java.lang.String str13 = localDate7.toString();
        java.lang.String str15 = localDate7.toString("1");
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = localDate7.toDateMidnight(dateTimeZone16);
        org.joda.time.LocalDate.Property property18 = localDate7.year();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDate7.getFieldTypes();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate localDate7 = localDate3.minusMonths(25);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate3.toDateTimeAtMidnight(dateTimeZone8);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    @Ignore
  public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = property9.addWrapFieldToCopy((int) '#');
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate24 = localDate22.minusWeeks((-1));
        boolean boolean25 = localDate18.isEqual((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate.Property property26 = localDate18.year();
        int int27 = property26.get();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = localDate31.indexOf(dateTimeFieldType32);
        org.joda.time.LocalTime localTime34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate31.toDateTime(localTime34, dateTimeZone35);
        long long37 = property26.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime36);
        int int38 = property9.getDifference((org.joda.time.ReadableInstant) dateTime36);
        int int39 = property9.getMinimumValueOverall();
        java.lang.String str40 = property9.getAsShortText();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2020 + "'", int27 == 2020);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2019L + "'", long37 == 2019L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology9 = localDate6.getChronology();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 0, chronology9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 99, chronology9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(10, (int) (short) 10, (int) (byte) -1, chronology9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    @Ignore
  public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate29 = localDate27.minusWeeks((-1));
        boolean boolean30 = localDate23.isEqual((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.LocalDate.Property property31 = localDate27.yearOfCentury();
        java.lang.String str32 = property31.getAsShortText();
        org.joda.time.LocalDate localDate33 = property31.withMaximumValue();
        java.lang.String str34 = localDate33.toString();
        org.joda.time.LocalDate localDate35 = localDate21.withFields((org.joda.time.ReadablePartial) localDate33);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = localDate33.getValue(1970);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1970");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0099-01-01" + "'", str34, "0099-01-01");
        org.junit.Assert.assertNotNull(localDate35);
    }

    @Test
    @Ignore
  public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((-1));
        boolean boolean14 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate17.year();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone32);
        int int34 = property25.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate40.minusWeeks((-1));
        boolean boolean43 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtMidnight();
        int int45 = property25.getDifference((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDate11.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = localDate5.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        java.lang.Class<?> wildcardClass48 = localDate5.getClass();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2019 + "'", int34 == 2019);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2019 + "'", int45 == 2019);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.parse("2020", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = localDate8.indexOf(dateTimeFieldType9);
        org.joda.time.LocalTime localTime11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate8.toDateTime(localTime11, dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate1.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDate localDate16 = localDate1.minusMonths((-292275054));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDate16.getFieldTypes();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
    }

    @Test
    @Ignore
  public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate15.minusWeeks((-1));
        boolean boolean18 = localDate11.isEqual((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate.Property property19 = localDate11.year();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate25 = localDate23.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone26);
        int int28 = property19.getDifference((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate36 = localDate34.minusWeeks((-1));
        boolean boolean37 = localDate30.isEqual((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.DateTime dateTime38 = localDate34.toDateTimeAtMidnight();
        int int39 = property19.getDifference((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = localDate5.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        int int41 = localDate5.size();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2019 + "'", int28 == 2019);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2019 + "'", int39 == 2019);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = localDate12.isSupported(dateTimeFieldType15);
        int int17 = localDate12.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate19 = localDate12.minusYears((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType21 = localDate19.getFieldType((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 0, chronology5);
        int int7 = localDate6.getYear();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.LocalDate localDate15 = property12.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property16 = localDate15.weekOfWeekyear();
        boolean boolean17 = localDate0.isAfter((org.joda.time.ReadablePartial) localDate15);
        int int18 = localDate15.getCenturyOfEra();
        org.joda.time.LocalDate localDate20 = localDate15.withWeekyear(330);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = localDate15.indexOf(dateTimeFieldType21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate24 = localDate15.withDayOfYear(1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.joda.time.Chronology chronology0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now(chronology0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Chronology must not be null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate1.plusDays((int) (short) 100);
        org.joda.time.LocalTime localTime11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDate10.toLocalDateTime(localTime11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The time must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    @Ignore
  public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) property4, chronology7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate5.withYear((int) (short) 0);
        java.util.Locale locale12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = localDate10.toString("yearOfCentury", locale12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: r");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate.Property property3 = localDate1.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate1.toDateTimeAtMidnight(dateTimeZone4);
        int int6 = localDate1.getEra();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    @Ignore
  public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) date2, chronology7);
        java.util.Date date9 = localDate8.toDate();
        org.joda.time.LocalDate.Property property10 = localDate8.era();
        org.joda.time.LocalDate.Property property11 = localDate8.dayOfMonth();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate15.minusWeeks((-1));
        org.joda.time.LocalDate.Property property18 = localDate17.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDate17.toDateTimeAtCurrentTime(dateTimeZone19);
        long long21 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime20);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 719154L + "'", long21 == 719154L);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        boolean boolean10 = property9.isLeap();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = localDate14.indexOf(dateTimeFieldType15);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology21 = localDate18.getChronology();
        int int22 = localDate14.compareTo((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate.Property property23 = localDate14.weekOfWeekyear();
        int int24 = property9.compareTo((org.joda.time.ReadablePartial) localDate14);
        int int25 = property9.getMinimumValue();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    @Ignore
  public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate11 = localDate5.withYearOfCentury((int) '#');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        int int14 = localDate13.getDayOfYear();
        org.joda.time.LocalDate localDate15 = localDate5.withFields((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date18 = localDate17.toDate();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology23 = localDate20.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) date18, chronology23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) localDate5, chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property27 = localDate25.property(dateTimeFieldType26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 330 + "'", int14 == 330);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        long long13 = property12.remainder();
        org.joda.time.LocalDate localDate14 = property12.withMinimumValue();
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(19, (int) (byte) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate6 = property4.setCopy(6);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = localDate3.withDayOfYear(2020);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2020 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    @Ignore
  public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((-1));
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((int) (short) 100);
        boolean boolean12 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate11);
        int int13 = localDate11.getWeekOfWeekyear();
        int int14 = localDate11.getYear();
        org.joda.time.LocalTime localTime15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate11.toDateTime(localTime15, dateTimeZone16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate19 = localDate11.withMonthOfYear(52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2021 + "'", int14 == 2021);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate1.plusDays((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = localDate10.withDayOfMonth((-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        int[] intArray13 = localDate12.getValues();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 1, 1]");
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(52, 2, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must be in the range [1,29]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.LocalDate localDate4 = localDate2.plusWeeks((int) (byte) 10);
        org.joda.time.LocalTime localTime5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = localDate2.toLocalDateTime(localTime5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The time must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    @Ignore
  public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int9 = localDate1.getYearOfCentury();
        org.joda.time.LocalTime localTime10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate1.toDateTime(localTime10, dateTimeZone11);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    @Ignore
  public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate23 = property9.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate25 = localDate23.minus(readablePeriod24);
        java.util.Locale locale27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = localDate23.toString("", locale27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (byte) 1);
        int int16 = localDate13.size();
        int int17 = localDate13.getWeekOfWeekyear();
        int int18 = localDate13.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 98 + "'", int18 == 98);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property9.roundFloorCopy();
        java.lang.String str13 = property9.getAsString();
        long long14 = property9.remainder();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int9 = localDate5.getYearOfEra();
        int int10 = localDate5.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType12 = localDate5.getFieldType(292278993);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 292278993");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
    }

    @Test
    @Ignore
  public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = localDate8.indexOf(dateTimeFieldType9);
        org.joda.time.LocalTime localTime11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate8.toDateTime(localTime11, dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate1.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDate localDate16 = localDate1.minusMonths((-292275054));
        org.joda.time.LocalTime localTime17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate16.toDateTime(localTime17, dateTimeZone18);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("70");
        org.junit.Assert.assertNotNull(localDate1);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property13 = localDate12.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = property13.setCopy((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        int int12 = property9.getMinimumValueOverall();
        org.joda.time.LocalDate localDate13 = property9.roundCeilingCopy();
        org.joda.time.DurationField durationField14 = property9.getRangeDurationField();
        java.lang.String str15 = property9.getAsString();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate.Property property10 = localDate1.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = localDate1.withDayOfMonth((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(719154L);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (byte) 1);
        int int16 = localDate13.size();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Interval interval18 = localDate13.toInterval(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtMidnight(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    @Ignore
  public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) date2, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = localDate8.toDateMidnight(dateTimeZone9);
        org.joda.time.LocalDate.Property property11 = localDate8.weekOfWeekyear();
        int int12 = localDate8.size();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtStartOfDay(dateTimeZone13);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        boolean boolean10 = property9.isLeap();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = localDate14.indexOf(dateTimeFieldType15);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology21 = localDate18.getChronology();
        int int22 = localDate14.compareTo((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate.Property property23 = localDate14.weekOfWeekyear();
        int int24 = property9.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate localDate25 = property9.roundCeilingCopy();
        org.joda.time.DurationField durationField26 = property9.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNull(durationField26);
    }

    @Test
    @Ignore
  public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear(52);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfYear();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate7.getDayOfYear();
        java.lang.String str13 = localDate7.toString();
        java.lang.String str15 = localDate7.toString("1");
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = localDate7.toDateMidnight(dateTimeZone16);
        org.joda.time.LocalDate.Property property18 = localDate7.year();
        org.joda.time.Interval interval19 = property18.toInterval();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property18.getAsText(locale20);
        java.lang.String str22 = property18.toString();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970" + "'", str21, "1970");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Property[year]" + "'", str22, "Property[year]");
    }

    @Test
    @Ignore
  public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        java.lang.String str20 = property9.getAsString();
        int int21 = property9.get();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate23 = property9.setCopy("Thursday");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Thursday\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2020" + "'", str20, "2020");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2020 + "'", int21 == 2020);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        java.lang.String str7 = property6.toString();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[monthOfYear]" + "'", str7, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(interval8);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate11.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate11.withWeekOfWeekyear(52);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = localDate18.getValue(19);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 19");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate11 = localDate5.withYearOfCentury((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = localDate5.withDayOfWeek(360);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 360 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) chronology2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
    }

    @Test
    @Ignore
  public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        org.joda.time.LocalDate localDate12 = property9.addToCopy((-1));
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate20 = localDate18.minusWeeks((-1));
        boolean boolean21 = localDate14.isEqual((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate.Property property22 = localDate14.year();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate28 = localDate26.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtCurrentTime(dateTimeZone29);
        int int31 = property22.getDifference((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate37 = localDate35.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate39 = localDate37.minusWeeks((-1));
        boolean boolean40 = localDate33.isEqual((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtMidnight();
        int int42 = property22.getDifference((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.LocalDate localDate43 = property22.roundHalfEvenCopy();
        int int44 = property9.compareTo((org.joda.time.ReadablePartial) localDate43);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2019 + "'", int31 == 2019);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2019 + "'", int42 == 2019);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 330, dateTimeZone1);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        int int5 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate localDate7 = localDate1.minusDays((int) ' ');
        int int8 = localDate1.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType10 = localDate1.getFieldType(20);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 20");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        int int19 = property9.compareTo((org.joda.time.ReadablePartial) localDate16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = property9.setCopy(2019);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2019 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now(chronology5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((int) (byte) 0, (int) '4', 98, chronology5);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    @Ignore
  public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((-1));
        boolean boolean13 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property14 = localDate6.year();
        int int15 = property14.get();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = localDate19.indexOf(dateTimeFieldType20);
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate19.toDateTime(localTime22, dateTimeZone23);
        long long25 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        int int26 = property4.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalDate localDate27 = property4.withMinimumValue();
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) ' ');
        int int30 = localDate29.getYearOfCentury();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2020 + "'", int15 == 2020);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2019L + "'", long25 == 2019L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 32 + "'", int30 == 32);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        java.lang.String str7 = property6.toString();
        java.lang.String str8 = property6.getAsShortText();
        long long9 = property6.remainder();
        org.joda.time.Chronology chronology10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((java.lang.Object) property6, chronology10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[monthOfYear]" + "'", str7, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Jan" + "'", str8, "Jan");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 604800000L + "'", long9 == 604800000L);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate1.plusDays((int) (short) 100);
        org.joda.time.LocalDate localDate12 = localDate1.withYearOfEra((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = localDate1.withDayOfWeek((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 10 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    @Ignore
  public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = property9.addWrapFieldToCopy((int) '#');
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate24 = localDate22.minusWeeks((-1));
        boolean boolean25 = localDate18.isEqual((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate.Property property26 = localDate18.year();
        int int27 = property26.get();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = localDate31.indexOf(dateTimeFieldType32);
        org.joda.time.LocalTime localTime34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate31.toDateTime(localTime34, dateTimeZone35);
        long long37 = property26.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime36);
        int int38 = property9.getDifference((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDate localDate40 = property9.addWrapFieldToCopy(2019);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2020 + "'", int27 == 2020);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2019L + "'", long37 == 2019L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDate40);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = localDate1.withEra((-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) date2, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = localDate8.toDateMidnight(dateTimeZone9);
        org.joda.time.LocalDate.Property property11 = localDate8.weekOfWeekyear();
        org.joda.time.LocalDate localDate12 = property11.roundHalfEvenCopy();
        int int13 = property11.get();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate.Property property15 = localDate14.weekOfWeekyear();
        org.joda.time.LocalDate localDate17 = localDate14.withDayOfMonth((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate19 = localDate14.withDayOfMonth(1968);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1968 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(chronology2);
        org.joda.time.LocalDate localDate5 = localDate3.plusWeeks(13);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    @Ignore
  public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) date2, chronology7);
        java.util.Date date9 = localDate8.toDate();
        org.joda.time.DurationFieldType durationFieldType10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = localDate8.withFieldAdded(durationFieldType10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalTime localTime6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = localDate5.toLocalDateTime(localTime6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The time must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    @Ignore
  public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = localDate8.indexOf(dateTimeFieldType9);
        org.joda.time.LocalTime localTime11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate8.toDateTime(localTime11, dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate1.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology15 = localDate1.getChronology();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.DurationFieldType durationFieldType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = localDate1.withFieldAdded(durationFieldType5, 25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((int) (byte) 10, 2019, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2019 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 99, chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology16 = localDate13.getChronology();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 0, chronology16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 99, chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology16);
        int int20 = localDate9.compareTo((org.joda.time.ReadablePartial) localDate19);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = localDate9.getValue(2019);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2019");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    @Ignore
  public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date19 = localDate18.toDate();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate18.minus(readablePeriod20);
        org.joda.time.LocalDate localDate23 = localDate21.plusMonths(99);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        int int29 = localDate27.indexOf(dateTimeFieldType28);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate33 = localDate31.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology34 = localDate31.getChronology();
        int int35 = localDate27.compareTo((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = localDate31.toDateMidnight(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = localDate31.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = localDate31.toDateTimeAtStartOfDay(dateTimeZone40);
        org.joda.time.LocalDate localDate42 = localDate21.withFields((org.joda.time.ReadablePartial) localDate31);
        boolean boolean43 = localDate15.isBefore((org.joda.time.ReadablePartial) localDate42);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    @Ignore
  public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int9 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate.Property property10 = localDate1.dayOfYear();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate18 = localDate15.minus(readablePeriod17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate20 = localDate18.withEra((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate11.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate11.withWeekOfWeekyear(52);
        org.joda.time.LocalDate localDate20 = localDate11.plusYears(0);
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = localDate11.getFields();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (byte) 1);
        int int16 = localDate13.size();
        int int17 = localDate13.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    @Ignore
  public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        int int12 = property9.get();
        java.lang.Class<?> wildcardClass13 = property9.getClass();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2020 + "'", int12 == 2020);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = localDate3.getValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = localDate12.isSupported(dateTimeFieldType15);
        int int17 = localDate12.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDate localDate20 = localDate12.withPeriodAdded(readablePeriod18, 99);
        boolean boolean22 = localDate20.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate28 = localDate26.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate30 = localDate28.minusWeeks((-1));
        boolean boolean31 = localDate24.isEqual((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.LocalDate localDate33 = localDate28.withYear((int) (short) 0);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.plusMonths((int) '4');
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate42 = localDate40.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate44 = localDate42.minusWeeks((-1));
        boolean boolean45 = localDate38.isEqual((org.joda.time.ReadablePartial) localDate42);
        org.joda.time.LocalDate.Property property46 = localDate42.yearOfCentury();
        java.lang.String str47 = property46.getAsShortText();
        org.joda.time.LocalDate localDate49 = property46.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property50 = localDate49.weekOfWeekyear();
        boolean boolean51 = localDate34.isAfter((org.joda.time.ReadablePartial) localDate49);
        int int52 = localDate49.getCenturyOfEra();
        org.joda.time.LocalDate.Property property53 = localDate49.dayOfMonth();
        org.joda.time.LocalDate localDate55 = localDate49.withYear((int) (short) 0);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology56);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate61 = localDate59.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate63 = localDate61.minusWeeks((-1));
        boolean boolean64 = localDate57.isEqual((org.joda.time.ReadablePartial) localDate61);
        org.joda.time.LocalDate.Property property65 = localDate61.yearOfCentury();
        java.lang.String str66 = property65.getAsShortText();
        org.joda.time.LocalDate localDate67 = property65.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = null;
        int int69 = localDate67.indexOf(dateTimeFieldType68);
        org.joda.time.LocalDate.Property property70 = localDate67.dayOfWeek();
        java.lang.String str71 = property70.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = property70.getFieldType();
        boolean boolean73 = localDate49.isSupported(dateTimeFieldType72);
        int int74 = localDate28.get(dateTimeFieldType72);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate76 = localDate20.withField(dateTimeFieldType72, (-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1" + "'", str47, "1");
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1" + "'", str66, "1");
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Thursday" + "'", str71, "Thursday");
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
    }

    @Test
    @Ignore
  public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        boolean boolean24 = localDate22.isSupported(dateTimeFieldType23);
        org.joda.time.DateTime dateTime25 = localDate22.toDateTimeAtStartOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate33 = localDate31.minusWeeks((-1));
        boolean boolean34 = localDate27.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property35 = localDate31.yearOfCentury();
        java.lang.String str36 = property35.getAsShortText();
        org.joda.time.LocalDate localDate38 = property35.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate40 = property35.addToCopy((int) (short) 1);
        org.joda.time.LocalDate.Property property41 = localDate40.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property41.getFieldType();
        boolean boolean43 = localDate22.isSupported(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        int int5 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate localDate7 = localDate1.minusDays((int) ' ');
        int[] intArray8 = localDate1.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = localDate1.withDayOfYear(1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1970, 1, 1]");
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate7.getDayOfYear();
        java.lang.String str13 = localDate7.toString();
        java.lang.String str15 = localDate7.toString("1");
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = localDate7.toDateMidnight(dateTimeZone16);
        org.joda.time.LocalDate.Property property18 = localDate7.year();
        int int19 = localDate7.getDayOfWeek();
        int int20 = localDate7.getYearOfEra();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate28 = localDate26.minusWeeks((-1));
        boolean boolean29 = localDate22.isEqual((org.joda.time.ReadablePartial) localDate26);
        org.joda.time.LocalDate.Property property30 = localDate26.yearOfCentury();
        java.lang.String str31 = property30.getAsShortText();
        org.joda.time.LocalDate localDate32 = property30.withMaximumValue();
        int int33 = localDate32.getMonthOfYear();
        org.joda.time.DurationFieldType durationFieldType34 = null;
        boolean boolean35 = localDate32.isSupported(durationFieldType34);
        int int36 = localDate7.compareTo((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DurationFieldType durationFieldType37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate39 = localDate32.withFieldAdded(durationFieldType37, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("0099-01-01");
        org.junit.Assert.assertNotNull(localDate1);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        org.joda.time.LocalDate localDate16 = property14.addWrapFieldToCopy((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((java.lang.Object) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Short");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    @Ignore
  public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths(292278993);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate6.toDateMidnight(dateTimeZone7);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateMidnight8);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        int int13 = property9.getMaximumValue();
        org.joda.time.LocalDate localDate14 = property9.roundHalfEvenCopy();
        int int15 = localDate14.getDayOfYear();
        org.joda.time.LocalTime localTime16 = null;
        org.joda.time.DateTime dateTime17 = localDate14.toDateTime(localTime16);
        int int18 = localDate14.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 99 + "'", int13 == 99);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    @Ignore
  public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((-1));
        boolean boolean13 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property14 = localDate6.year();
        int int15 = property14.get();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = localDate19.indexOf(dateTimeFieldType20);
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate19.toDateTime(localTime22, dateTimeZone23);
        long long25 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        int int26 = property4.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalDate localDate27 = property4.withMinimumValue();
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate31 = localDate27.withMonthOfYear((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2020 + "'", int15 == 2020);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2019L + "'", long25 == 2019L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
    }

    @Test
    @Ignore
  public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((-1));
        boolean boolean13 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property14 = localDate6.year();
        int int15 = property14.get();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = localDate19.indexOf(dateTimeFieldType20);
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate19.toDateTime(localTime22, dateTimeZone23);
        long long25 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        int int26 = property4.compareTo((org.joda.time.ReadableInstant) dateTime24);
        int int27 = property4.getLeapAmount();
        java.util.Locale locale28 = null;
        int int29 = property4.getMaximumTextLength(locale28);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2020 + "'", int15 == 2020);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2019L + "'", long25 == 2019L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
    }

    @Test
    @Ignore
  public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((-1));
        boolean boolean13 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property14 = localDate6.year();
        int int15 = property14.get();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = localDate19.indexOf(dateTimeFieldType20);
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate19.toDateTime(localTime22, dateTimeZone23);
        long long25 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        int int26 = property4.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalDate localDate27 = property4.withMinimumValue();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate33 = localDate31.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate35 = localDate33.minusWeeks((-1));
        boolean boolean36 = localDate29.isEqual((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.LocalDate.Property property37 = localDate33.yearOfCentury();
        java.lang.String str38 = property37.getAsShortText();
        org.joda.time.LocalDate localDate39 = property37.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        int int41 = localDate39.indexOf(dateTimeFieldType40);
        org.joda.time.LocalDate.Property property42 = localDate39.dayOfWeek();
        int[] intArray43 = localDate39.getValues();
        org.joda.time.DateTime dateTime44 = localDate39.toDateTimeAtCurrentTime();
        int int45 = property4.compareTo((org.joda.time.ReadablePartial) localDate39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate47 = localDate39.withDayOfWeek(1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2020 + "'", int15 == 2020);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2019L + "'", long25 == 2019L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[99, 1, 1]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate localDate26 = localDate21.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property27 = localDate21.year();
        org.joda.time.LocalDate localDate29 = property27.setCopy((int) 'a');
        org.joda.time.LocalDate localDate31 = property27.addToCopy(48);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = localDate31.getFieldType(1);
        org.joda.time.LocalDate.Property property34 = localDate7.property(dateTimeFieldType33);
        java.util.Locale locale35 = null;
        int int36 = property34.getMaximumShortTextLength(locale35);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
    }

    @Test
    @Ignore
  public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        boolean boolean12 = property9.isLeap();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        boolean boolean10 = property9.isLeap();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = localDate14.indexOf(dateTimeFieldType15);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology21 = localDate18.getChronology();
        int int22 = localDate14.compareTo((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate.Property property23 = localDate14.weekOfWeekyear();
        int int24 = property9.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate localDate25 = property9.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTimeAtMidnight(dateTimeZone26);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((-1));
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((int) (short) 100);
        boolean boolean12 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate11);
        int int13 = localDate11.getEra();
        org.joda.time.LocalDate localDate15 = localDate11.plusWeeks(12);
        java.util.Locale locale17 = null;
        java.lang.String str18 = localDate11.toString("0099-01-01", locale17);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0099-01-01" + "'", str18, "0099-01-01");
    }

    @Test
    @Ignore
  public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        org.joda.time.LocalDate localDate12 = property9.addToCopy((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = localDate12.isSupported(dateTimeFieldType13);
        org.joda.time.LocalDate.Property property15 = localDate12.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 70, dateTimeZone1);
        org.joda.time.LocalTime localTime3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime4 = localDate2.toLocalDateTime(localTime3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The time must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate3.withYearOfEra(2);
        org.joda.time.LocalDate localDate16 = localDate3.minusYears(100);
        java.util.Date date17 = localDate16.toDate();
        int int18 = localDate16.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Jan 01 00:00:00 UTC 100");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    @Ignore
  public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate3.withYearOfEra(2);
        org.joda.time.LocalDate localDate16 = localDate3.minusYears(100);
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfEra();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate25 = localDate23.minusWeeks((-1));
        boolean boolean26 = localDate19.isEqual((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.LocalDate.Property property27 = localDate23.yearOfCentury();
        boolean boolean28 = property27.isLeap();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate36 = localDate34.minusWeeks((-1));
        boolean boolean37 = localDate30.isEqual((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.LocalDate.Property property38 = localDate30.year();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate42 = localDate40.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate44 = localDate42.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtCurrentTime(dateTimeZone45);
        int int47 = property38.getDifference((org.joda.time.ReadableInstant) dateTime46);
        java.lang.String str48 = property38.getAsString();
        org.joda.time.LocalDate localDate50 = property38.addWrapFieldToCopy((int) ' ');
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology51);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate56 = localDate54.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate58 = localDate56.minusWeeks((-1));
        boolean boolean59 = localDate52.isEqual((org.joda.time.ReadablePartial) localDate56);
        org.joda.time.LocalDate.Property property60 = localDate56.yearOfCentury();
        java.lang.String str61 = property60.getAsShortText();
        org.joda.time.LocalDate localDate62 = property60.withMaximumValue();
        java.lang.String str63 = localDate62.toString();
        org.joda.time.LocalDate localDate64 = localDate50.withFields((org.joda.time.ReadablePartial) localDate62);
        boolean boolean65 = property27.equals((java.lang.Object) localDate62);
        org.joda.time.LocalDate localDate66 = localDate16.withFields((org.joda.time.ReadablePartial) localDate62);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2019 + "'", int47 == 2019);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2020" + "'", str48, "2020");
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1" + "'", str61, "1");
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0099-01-01" + "'", str63, "0099-01-01");
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localDate66);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate localDate7 = localDate3.minusMonths(25);
        org.joda.time.Interval interval8 = localDate3.toInterval();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(interval8);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        int int12 = property9.getMinimumValueOverall();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property9.getAsText(locale13);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
    }

    @Test
    @Ignore
  public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate11 = localDate5.withYearOfCentury((int) '#');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        int int14 = localDate13.getDayOfYear();
        org.joda.time.LocalDate localDate15 = localDate5.withFields((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate13.withPeriodAdded(readablePeriod16, (int) '4');
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 330 + "'", int14 == 330);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    @Ignore
  public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((-1));
        boolean boolean13 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property14 = localDate6.year();
        int int15 = property14.get();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = localDate19.indexOf(dateTimeFieldType20);
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate19.toDateTime(localTime22, dateTimeZone23);
        long long25 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        int int26 = property4.compareTo((org.joda.time.ReadableInstant) dateTime24);
        int int27 = property4.getLeapAmount();
        org.joda.time.LocalDate localDate29 = property4.addWrapFieldToCopy(330);
        int int30 = localDate29.getYearOfCentury();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2020 + "'", int15 == 2020);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2019L + "'", long25 == 2019L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property9.roundFloorCopy();
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy(19);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfCentury(2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        int int15 = property9.getLeapAmount();
        org.joda.time.LocalDate localDate17 = property9.setCopy(20);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    @Ignore
  public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = property9.setCopy("2020");
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        int int17 = localDate15.indexOf(dateTimeFieldType16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology22 = localDate19.getChronology();
        int int23 = localDate15.compareTo((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = localDate19.toDateMidnight(dateTimeZone24);
        long long26 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight25);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 50L + "'", long26 == 50L);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        org.joda.time.LocalDate localDate16 = property14.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str17 = property14.getAsString();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "4" + "'", str17, "4");
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("Thursday");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Thursday\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = localDate8.indexOf(dateTimeFieldType9);
        org.joda.time.LocalTime localTime11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate8.toDateTime(localTime11, dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate1.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDate localDate16 = localDate1.minusMonths((-292275054));
        int int17 = localDate16.size();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = property9.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = localDate20.indexOf(dateTimeFieldType21);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology27 = localDate24.getChronology();
        int int28 = localDate20.compareTo((org.joda.time.ReadablePartial) localDate24);
        int int29 = localDate24.getDayOfYear();
        java.lang.String str30 = localDate24.toString();
        java.lang.String str32 = localDate24.toString("1");
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = localDate24.toDateMidnight(dateTimeZone33);
        org.joda.time.LocalDate.Property property35 = localDate24.year();
        org.joda.time.LocalDate localDate36 = localDate16.withFields((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = localDate16.toDateTimeAtStartOfDay(dateTimeZone37);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01" + "'", str30, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    @Ignore
  public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((-1));
        boolean boolean14 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate17.year();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone32);
        int int34 = property25.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate40.minusWeeks((-1));
        boolean boolean43 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtMidnight();
        int int45 = property25.getDifference((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDate11.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = localDate5.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDate.Property property48 = localDate5.dayOfWeek();
        org.joda.time.LocalDate.Property property49 = localDate5.weekyear();
        org.joda.time.LocalDate localDate51 = localDate5.plusYears((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate53 = localDate5.withDayOfWeek((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2019 + "'", int34 == 2019);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2019 + "'", int45 == 2019);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate51);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = localDate12.isSupported(dateTimeFieldType15);
        int int17 = localDate12.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = localDate12.isSupported(dateTimeFieldType18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = localDate12.withEra(3);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    @Ignore
  public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        org.joda.time.LocalDate localDate12 = property9.addToCopy((-1));
        org.joda.time.LocalDate localDate14 = localDate12.withMonthOfYear(11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField16 = localDate14.getField((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate localDate7 = localDate3.minusMonths(25);
        org.joda.time.LocalDate localDate9 = localDate7.minusDays(1);
        org.joda.time.LocalDate localDate11 = localDate9.withDayOfYear(360);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    @Ignore
  public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate26 = localDate24.minusWeeks((-1));
        boolean boolean27 = localDate20.isEqual((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtMidnight();
        int int29 = property9.getDifference((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalDate localDate30 = property9.roundHalfEvenCopy();
        int int31 = property9.getMinimumValueOverall();
        java.lang.String str32 = property9.getAsShortText();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2019 + "'", int29 == 2019);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-292275054) + "'", int31 == (-292275054));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2020" + "'", str32, "2020");
    }

    @Test
    @Ignore
  public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        java.util.Locale locale13 = null;
        org.joda.time.LocalDate localDate14 = property9.setCopy("2020", locale13);
        org.joda.time.LocalTime localTime15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(localTime15);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate11.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate11.withWeekOfWeekyear(52);
        org.joda.time.DateTime dateTime19 = localDate11.toDateTimeAtStartOfDay();
        java.lang.String str20 = localDate11.toString();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0099-01-01" + "'", str20, "0099-01-01");
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((-1));
        boolean boolean13 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property14 = localDate10.yearOfCentury();
        boolean boolean16 = property14.equals((java.lang.Object) 100L);
        java.lang.String str17 = property14.toString();
        org.joda.time.DateTimeField dateTimeField18 = property14.getField();
        org.joda.time.LocalDate localDate19 = property14.roundCeilingCopy();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property14.getAsShortText(locale20);
        boolean boolean22 = localDate4.equals((java.lang.Object) str21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType24 = localDate4.getFieldType(6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[yearOfCentury]" + "'", str17, "Property[yearOfCentury]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    @Ignore
  public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfWeek();
        org.joda.time.LocalDate localDate8 = localDate5.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((java.lang.Object) localDate8);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date12 = localDate11.toDate();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology17 = localDate14.getChronology();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) date12, chronology17);
        java.util.Date date19 = localDate18.toDate();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate27 = localDate25.minusWeeks((-1));
        boolean boolean28 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.LocalDate localDate30 = localDate25.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property31 = localDate25.year();
        org.joda.time.LocalDate localDate33 = property31.setCopy((int) 'a');
        org.joda.time.LocalDate localDate35 = property31.addToCopy(48);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = localDate35.getFieldType(1);
        org.joda.time.LocalDate.Property property38 = localDate18.property(dateTimeFieldType37);
        org.joda.time.LocalDate localDate40 = localDate8.withField(dateTimeFieldType37, (int) (byte) 1);
        java.lang.String str41 = localDate8.toString();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0000-01-06" + "'", str41, "0000-01-06");
    }

    @Test
    @Ignore
  public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        java.lang.String str1 = localDate0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2020-11-25" + "'", str1, "2020-11-25");
    }

    @Test
    @Ignore
  public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date7 = localDate6.toDate();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate6.minus(readablePeriod8);
        org.joda.time.LocalDate localDate11 = localDate9.plusMonths(99);
        int int12 = localDate11.getDayOfWeek();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate20 = localDate18.minusWeeks((-1));
        boolean boolean21 = localDate14.isEqual((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate localDate23 = localDate14.plusDays((int) (short) 100);
        org.joda.time.LocalDate localDate25 = localDate14.withYearOfEra((int) ' ');
        org.joda.time.LocalDate localDate27 = localDate14.plusWeeks(292278993);
        boolean boolean28 = localDate11.isBefore((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.LocalDate.Property property29 = localDate27.year();
        int int30 = localDate4.compareTo((org.joda.time.ReadablePartial) localDate27);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        int[] intArray15 = localDate11.getValues();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDate localDate20 = localDate17.withPeriodAdded(readablePeriod18, 0);
        org.joda.time.LocalDate localDate22 = localDate20.minusDays((int) (byte) 100);
        int int23 = localDate11.compareTo((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate localDate25 = localDate11.withCenturyOfEra(1968);
        int int26 = localDate11.getEra();
        org.joda.time.ReadablePartial readablePartial27 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = localDate11.isBefore(readablePartial27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[99, 1, 1]");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = property9.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = localDate20.indexOf(dateTimeFieldType21);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology27 = localDate24.getChronology();
        int int28 = localDate20.compareTo((org.joda.time.ReadablePartial) localDate24);
        int int29 = localDate24.getDayOfYear();
        java.lang.String str30 = localDate24.toString();
        java.lang.String str32 = localDate24.toString("1");
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = localDate24.toDateMidnight(dateTimeZone33);
        org.joda.time.LocalDate.Property property35 = localDate24.year();
        org.joda.time.LocalDate localDate36 = localDate16.withFields((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.LocalDate.Property property37 = localDate36.centuryOfEra();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01" + "'", str30, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = property12.setCopy("Property[monthOfYear]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[monthOfYear]\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate1.minusWeeks((int) (byte) -1);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfMonth((int) (byte) 1);
        int int9 = localDate6.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 70 + "'", int9 == 70);
    }

    @Test
    @Ignore
  public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((-1));
        boolean boolean13 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property14 = localDate6.year();
        int int15 = property14.get();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = localDate19.indexOf(dateTimeFieldType20);
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate19.toDateTime(localTime22, dateTimeZone23);
        long long25 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        int int26 = property4.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalDate localDate27 = property4.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField28 = property4.getField();
        int int29 = property4.get();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2020 + "'", int15 == 2020);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2019L + "'", long25 == 2019L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 70 + "'", int29 == 70);
    }

    @Test
    @Ignore
  public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        boolean boolean19 = localDate12.isEqual((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate.Property property20 = localDate12.year();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate26 = localDate24.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtCurrentTime(dateTimeZone27);
        int int29 = property20.getDifference((org.joda.time.ReadableInstant) dateTime28);
        long long30 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalDate localDate31 = property9.roundHalfFloorCopy();
        java.lang.String str32 = property9.getAsString();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2019 + "'", int29 == 2019);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property9.roundFloorCopy();
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy(19);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate19 = localDate14.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate localDate21 = localDate18.withYear(3);
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate7.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTimeField[] dateTimeFieldArray18 = localDate7.getFields();
        org.joda.time.LocalDate localDate20 = localDate7.withDayOfYear(3);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDate localDate23 = localDate20.withPeriodAdded(readablePeriod21, 292278993);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldArray18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    @Ignore
  public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(99);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = localDate10.indexOf(dateTimeFieldType11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology17 = localDate14.getChronology();
        int int18 = localDate10.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = localDate14.toDateMidnight(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate14.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate14.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.LocalDate localDate25 = localDate4.withFields((org.joda.time.ReadablePartial) localDate14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate27 = localDate14.withWeekOfWeekyear(2021);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2021 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    @Ignore
  public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.LocalDate localDate14 = property12.withMaximumValue();
        java.lang.String str15 = localDate14.toString();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate14.withPeriodAdded(readablePeriod16, 11);
        org.joda.time.LocalDate localDate19 = localDate0.withFields((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date22 = localDate21.toDate();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology27 = localDate24.getChronology();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) date22, chronology27);
        java.util.Date date29 = localDate28.toDate();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate37 = localDate35.minusWeeks((-1));
        boolean boolean38 = localDate31.isEqual((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.LocalDate localDate40 = localDate35.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property41 = localDate35.year();
        org.joda.time.LocalDate localDate43 = property41.setCopy((int) 'a');
        org.joda.time.LocalDate localDate45 = property41.addToCopy(48);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = localDate45.getFieldType(1);
        org.joda.time.LocalDate.Property property48 = localDate28.property(dateTimeFieldType47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate50 = localDate14.withField(dateTimeFieldType47, 25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0099-01-01" + "'", str15, "0099-01-01");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    @Ignore
  public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = localDate8.indexOf(dateTimeFieldType9);
        org.joda.time.LocalTime localTime11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate8.toDateTime(localTime11, dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate1.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDate localDate16 = localDate1.minusMonths((-292275054));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = localDate16.withMonthOfYear((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        int int13 = property9.getMaximumValue();
        org.joda.time.LocalDate localDate14 = property9.roundHalfEvenCopy();
        boolean boolean15 = property9.isLeap();
        int int16 = property9.getMinimumValueOverall();
        java.util.Locale locale17 = null;
        int int18 = property9.getMaximumShortTextLength(locale17);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 99 + "'", int13 == 99);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.parse("19", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate.Property property3 = localDate1.centuryOfEra();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate7 = localDate5.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = localDate7.indexOf(dateTimeFieldType8);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology14 = localDate11.getChronology();
        int int15 = localDate7.compareTo((org.joda.time.ReadablePartial) localDate11);
        int int16 = localDate11.getDayOfYear();
        java.lang.String str17 = localDate11.toString();
        java.lang.String str19 = localDate11.toString("1");
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = localDate11.toDateMidnight(dateTimeZone20);
        org.joda.time.LocalDate.Property property22 = localDate11.year();
        org.joda.time.LocalDate.Property property23 = localDate11.weekyear();
        org.joda.time.LocalDate localDate24 = property23.roundCeilingCopy();
        int int25 = property3.compareTo((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) property3, dateTimeZone26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01" + "'", str17, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        int int5 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate localDate7 = localDate1.minusDays((int) ' ');
        org.joda.time.LocalDate localDate9 = localDate7.withWeekyear((int) (byte) 1);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        int int11 = localDate9.getYearOfEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    @Ignore
  public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfWeek();
        org.joda.time.LocalDate localDate8 = localDate5.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((java.lang.Object) localDate8);
        org.joda.time.LocalDate localDate11 = localDate8.minusYears(1970);
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate8.toDateTime(localTime12, dateTimeZone13);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    @Ignore
  public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        int int13 = property9.getMaximumValue();
        org.joda.time.LocalDate localDate14 = property9.roundHalfEvenCopy();
        boolean boolean15 = property9.isLeap();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate17.year();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone32);
        int int34 = property25.getDifference((org.joda.time.ReadableInstant) dateTime33);
        java.lang.String str35 = property25.getAsString();
        org.joda.time.LocalDate localDate37 = property25.addWrapFieldToCopy((int) ' ');
        boolean boolean38 = property9.equals((java.lang.Object) ' ');
        org.joda.time.DateTimeField dateTimeField39 = property9.getField();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 99 + "'", int13 == 99);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2019 + "'", int34 == 2019);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2020" + "'", str35, "2020");
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    @Ignore
  public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.year();
        int int2 = localDate0.getYear();
        int int3 = localDate0.getEra();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate6 = localDate0.withDayOfWeek(98);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 98 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2020 + "'", int2 == 2020);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate5.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property11 = localDate5.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        java.util.Locale locale14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = property11.setCopy("0099-01-01", locale14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0099-01-01\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    @Ignore
  public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.DateTime dateTime6 = localDate3.toDateTimeAtCurrentTime();
        int int7 = localDate3.getYearOfEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        boolean boolean16 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate.Property property17 = localDate9.year();
        org.joda.time.LocalDate localDate19 = localDate9.minusWeeks((int) (byte) 10);
        int int20 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate22 = localDate9.withYearOfCentury(2020);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2020 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((-1));
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((int) (short) 100);
        boolean boolean12 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate.Property property13 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.LocalDate localDate16 = property13.addWrapFieldToCopy(0);
        java.util.Locale locale18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate19 = property13.setCopy("1970", locale18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate11.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate11.withWeekOfWeekyear(52);
        org.joda.time.LocalDate localDate20 = localDate11.withYearOfEra((int) (short) 1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate16 = localDate14.plus(readablePeriod15);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property13 = localDate12.weekOfWeekyear();
        org.joda.time.LocalDate localDate15 = localDate12.minusMonths(330);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = localDate14.withMonthOfYear(10);
        int int17 = localDate14.getWeekyear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate25 = localDate23.minusWeeks((-1));
        boolean boolean26 = localDate19.isEqual((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.LocalDate.Property property27 = localDate23.yearOfCentury();
        java.lang.String str28 = property27.getAsShortText();
        org.joda.time.LocalDate localDate29 = property27.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = localDate29.indexOf(dateTimeFieldType30);
        org.joda.time.LocalDate.Property property32 = localDate29.dayOfWeek();
        int[] intArray33 = localDate29.getValues();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDate localDate38 = localDate35.withPeriodAdded(readablePeriod36, 0);
        org.joda.time.LocalDate localDate40 = localDate38.minusDays((int) (byte) 100);
        int int41 = localDate29.compareTo((org.joda.time.ReadablePartial) localDate40);
        boolean boolean42 = localDate14.isBefore((org.joda.time.ReadablePartial) localDate40);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[99, 1, 1]");
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        org.joda.time.LocalDate localDate16 = property14.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = localDate16.withFieldAdded(durationFieldType19, 98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        java.util.Locale locale15 = null;
        int int16 = property9.getMaximumShortTextLength(locale15);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
    }

    @Test
    @Ignore
  public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate26 = localDate24.minusWeeks((-1));
        boolean boolean27 = localDate20.isEqual((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtMidnight();
        int int29 = property9.getDifference((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalDate localDate30 = property9.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = localDate30.toDateMidnight(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2019 + "'", int29 == 2019);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateMidnight32);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        int int2 = localDate1.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
    }

    @Test
    @Ignore
  public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfWeek();
        org.joda.time.LocalDate localDate8 = localDate5.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((java.lang.Object) localDate8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = localDate8.withDayOfWeek(2020);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2020 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate4.minusDays((int) (byte) 100);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.year();
        org.joda.time.LocalDate localDate9 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate15.minusWeeks((-1));
        boolean boolean18 = localDate11.isEqual((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate.Property property19 = localDate15.yearOfCentury();
        java.lang.String str20 = property19.getAsShortText();
        org.joda.time.LocalDate localDate21 = property19.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = localDate21.indexOf(dateTimeFieldType22);
        org.joda.time.LocalDate.Property property24 = localDate21.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate21.toDateTimeAtMidnight(dateTimeZone25);
        int int27 = localDate4.compareTo((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = localDate21.toDateMidnight(dateTimeZone28);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateMidnight29);
    }

    @Test
    @Ignore
  public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((-1));
        boolean boolean13 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property14 = localDate6.year();
        int int15 = property14.get();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = localDate19.indexOf(dateTimeFieldType20);
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate19.toDateTime(localTime22, dateTimeZone23);
        long long25 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        int int26 = property4.compareTo((org.joda.time.ReadableInstant) dateTime24);
        int int27 = property4.getLeapAmount();
        org.joda.time.LocalDate localDate29 = property4.addWrapFieldToCopy(330);
        java.util.Locale locale30 = null;
        java.lang.String str31 = property4.getAsShortText(locale30);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2020 + "'", int15 == 2020);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2019L + "'", long25 == 2019L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "70" + "'", str31, "70");
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        boolean boolean11 = property9.equals((java.lang.Object) 100L);
        java.lang.String str12 = property9.toString();
        org.joda.time.DateTimeField dateTimeField13 = property9.getField();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, 0);
        org.joda.time.LocalDate localDate20 = localDate18.minusDays((int) (byte) 100);
        int int21 = localDate20.getMonthOfYear();
        int int22 = localDate20.getCenturyOfEra();
        int int23 = property9.compareTo((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate localDate25 = property9.setCopy("4");
        int int26 = localDate25.getDayOfYear();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[yearOfCentury]" + "'", str12, "Property[yearOfCentury]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 19 + "'", int22 == 19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = property9.addWrapFieldToCopy((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property9.getFieldType();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
    }

    @Test
    @Ignore
  public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int9 = localDate1.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField11 = localDate1.getField(52);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        int int5 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate localDate7 = localDate1.minusDays((int) ' ');
        org.joda.time.LocalDate localDate9 = localDate7.withWeekyear((int) (byte) 1);
        org.joda.time.DurationFieldType durationFieldType10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = localDate7.withFieldAdded(durationFieldType10, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate1.plusDays((int) (short) 100);
        org.joda.time.LocalDate.Property property11 = localDate10.yearOfCentury();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate19 = localDate17.minusWeeks((-1));
        boolean boolean20 = localDate13.isEqual((org.joda.time.ReadablePartial) localDate17);
        org.joda.time.LocalDate.Property property21 = localDate17.yearOfCentury();
        java.lang.String str22 = property21.getAsShortText();
        org.joda.time.LocalDate localDate23 = property21.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = localDate23.indexOf(dateTimeFieldType24);
        org.joda.time.LocalDate.Property property26 = localDate23.dayOfWeek();
        int int27 = localDate23.getEra();
        int int28 = property11.compareTo((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.LocalDate localDate30 = localDate23.withWeekyear((int) (short) -1);
        org.joda.time.LocalDate localDate32 = localDate23.withWeekyear(70);
        org.joda.time.LocalDate localDate34 = localDate23.minusWeeks((int) (byte) 100);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (byte) 1);
        int int16 = localDate13.size();
        int int17 = localDate13.getWeekOfWeekyear();
        org.joda.time.LocalTime localTime18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDate13.toLocalDateTime(localTime18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The time must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        java.lang.String str7 = property6.toString();
        int int8 = property6.getMaximumValue();
        long long9 = property6.remainder();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[monthOfYear]" + "'", str7, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 604800000L + "'", long9 == 604800000L);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate11.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate24 = localDate22.minusWeeks((-1));
        boolean boolean25 = localDate18.isEqual((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate.Property property26 = localDate22.yearOfCentury();
        java.lang.String str27 = property26.getAsShortText();
        org.joda.time.LocalDate localDate29 = property26.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate31 = property26.addToCopy((int) (short) 1);
        org.joda.time.LocalDate.Property property32 = localDate31.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property32.getFieldType();
        org.joda.time.LocalDate.Property property34 = localDate11.property(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate1.plusDays((int) (short) 100);
        org.joda.time.LocalDate.Property property11 = localDate10.yearOfCentury();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate19 = localDate17.minusWeeks((-1));
        boolean boolean20 = localDate13.isEqual((org.joda.time.ReadablePartial) localDate17);
        org.joda.time.LocalDate.Property property21 = localDate17.yearOfCentury();
        java.lang.String str22 = property21.getAsShortText();
        org.joda.time.LocalDate localDate23 = property21.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = localDate23.indexOf(dateTimeFieldType24);
        org.joda.time.LocalDate.Property property26 = localDate23.dayOfWeek();
        int int27 = localDate23.getEra();
        int int28 = property11.compareTo((org.joda.time.ReadablePartial) localDate23);
        int int29 = property11.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 99 + "'", int29 == 99);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.LocalDate localDate17 = localDate7.minusYears((int) '#');
        org.joda.time.LocalDate.Property property18 = localDate17.yearOfCentury();
        int int19 = property18.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate11.toDateTimeAtStartOfDay(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property13 = localDate12.weekOfWeekyear();
        int int14 = property13.getLeapAmount();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("Property[year]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Property[year]\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        int int13 = property9.getMaximumValue();
        org.joda.time.LocalDate localDate14 = property9.roundHalfEvenCopy();
        boolean boolean15 = property9.isLeap();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate17.year();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone32);
        int int34 = property25.getDifference((org.joda.time.ReadableInstant) dateTime33);
        java.lang.String str35 = property25.getAsString();
        org.joda.time.LocalDate localDate37 = property25.addWrapFieldToCopy((int) ' ');
        boolean boolean38 = property9.equals((java.lang.Object) ' ');
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDate localDate43 = localDate40.withPeriodAdded(readablePeriod41, 0);
        org.joda.time.LocalDate localDate45 = localDate43.minusDays((int) (byte) 100);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property47 = localDate46.year();
        org.joda.time.LocalDate localDate48 = localDate43.withFields((org.joda.time.ReadablePartial) localDate46);
        org.joda.time.LocalTime localTime49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTime(localTime49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((java.lang.Object) localDate48, dateTimeZone51);
        int int53 = property9.compareTo((org.joda.time.ReadablePartial) localDate52);
        int int54 = property9.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 99 + "'", int13 == 99);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2019 + "'", int34 == 2019);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2020" + "'", str35, "2020");
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 99 + "'", int54 == 99);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate localDate26 = localDate21.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property27 = localDate21.year();
        org.joda.time.LocalDate localDate29 = property27.setCopy((int) 'a');
        org.joda.time.LocalDate localDate31 = property27.addToCopy(48);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = localDate31.getFieldType(1);
        org.joda.time.LocalDate.Property property34 = localDate7.property(dateTimeFieldType33);
        int int35 = localDate7.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = localDate12.isSupported(dateTimeFieldType15);
        int int17 = localDate12.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate19 = localDate12.minusYears((int) (short) 100);
        org.joda.time.DateTime dateTime20 = localDate19.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate22 = localDate19.minusDays(10);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("yearOfEra");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"yearOfEra\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        boolean boolean10 = property9.isLeap();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = localDate14.indexOf(dateTimeFieldType15);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology21 = localDate18.getChronology();
        int int22 = localDate14.compareTo((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate.Property property23 = localDate14.weekOfWeekyear();
        int int24 = property9.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate localDate25 = property9.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField27 = localDate25.getField(9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 9");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy((int) (short) 10);
        java.util.Locale locale15 = null;
        java.lang.String str16 = property9.getAsShortText(locale15);
        org.joda.time.DurationField durationField17 = property9.getDurationField();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    @Ignore
  public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((-1));
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((int) (short) 100);
        boolean boolean12 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate.Property property13 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property13.getFieldType();
        int int16 = property13.get();
        int int17 = property13.get();
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        java.lang.String str7 = property6.toString();
        int int8 = property6.getMaximumValue();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate16 = localDate14.minusWeeks((-1));
        boolean boolean17 = localDate10.isEqual((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate.Property property18 = localDate14.yearOfCentury();
        java.lang.String str19 = property18.getAsShortText();
        org.joda.time.LocalDate localDate20 = property18.withMaximumValue();
        org.joda.time.LocalDate localDate21 = property18.roundFloorCopy();
        org.joda.time.LocalDate localDate23 = property18.addWrapFieldToCopy(19);
        boolean boolean24 = property6.equals((java.lang.Object) property18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate26 = property18.setCopy("Jan");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Jan\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[monthOfYear]" + "'", str7, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    @Ignore
  public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate26 = localDate24.minusWeeks((-1));
        boolean boolean27 = localDate20.isEqual((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtMidnight();
        int int29 = property9.getDifference((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DurationField durationField30 = property9.getLeapDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) durationField30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.field.PreciseDurationField");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2019 + "'", int29 == 2019);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((-1));
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((int) (short) 100);
        boolean boolean12 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = localDate11.withField(dateTimeFieldType13, 19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        long long13 = property12.remainder();
        org.joda.time.LocalDate localDate14 = property12.withMinimumValue();
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDate14.getFields();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((java.lang.Object) dateTimeFieldArray15, dateTimeZone16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: [Lorg.joda.time.DateTimeField;");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.Chronology chronology8 = localDate7.getChronology();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(chronology8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(19, 1, (int) (short) 1, chronology8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((int) '#', 11, 31, chronology8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate localDate7 = localDate3.minusMonths(25);
        int[] intArray8 = localDate7.getValues();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) intArray8, dateTimeZone9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: [I");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-2, 12, 1]");
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate12.plusWeeks((-1));
        int int17 = localDate16.getDayOfMonth();
        java.lang.Class<?> wildcardClass18 = localDate16.getClass();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 25 + "'", int17 == 25);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.parse("1970-01-01", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("year");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"year\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate1.plusDays((int) (short) 100);
        int[] intArray11 = localDate1.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDate1.getFieldType((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2020, 11, 25]");
    }

    @Test
    @Ignore
  public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        org.joda.time.LocalDate localDate13 = property9.setCopy(99);
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfWeek();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate.Property property15 = localDate14.weekOfWeekyear();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfCentury(0);
        org.joda.time.LocalDate localDate19 = localDate14.withWeekyear(31);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int9 = localDate5.getYearOfEra();
        int int10 = localDate5.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        boolean boolean19 = localDate12.isEqual((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate.Property property20 = localDate16.yearOfCentury();
        java.lang.String str21 = property20.getAsShortText();
        org.joda.time.LocalDate localDate23 = property20.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate25 = property20.addToCopy((int) (short) 1);
        int int26 = property20.getLeapAmount();
        boolean boolean27 = localDate5.equals((java.lang.Object) property20);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = localDate31.indexOf(dateTimeFieldType32);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate37 = localDate35.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology38 = localDate35.getChronology();
        int int39 = localDate31.compareTo((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = localDate35.toDateMidnight(dateTimeZone40);
        org.joda.time.LocalDate localDate43 = localDate35.minusYears((int) ' ');
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology44);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate49 = localDate47.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate51 = localDate49.minusWeeks((-1));
        boolean boolean52 = localDate45.isEqual((org.joda.time.ReadablePartial) localDate49);
        org.joda.time.LocalDate localDate54 = localDate49.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property55 = localDate49.year();
        org.joda.time.LocalDate localDate57 = property55.setCopy((int) 'a');
        org.joda.time.LocalDate localDate59 = property55.addToCopy(48);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = localDate59.getFieldType(1);
        org.joda.time.LocalDate.Property property62 = localDate35.property(dateTimeFieldType61);
        boolean boolean63 = localDate5.isSupported(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    @Ignore
  public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate23 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate25 = property9.addToCopy((int) (byte) -1);
        java.util.Locale locale26 = null;
        int int27 = property9.getMaximumShortTextLength(locale26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate33 = localDate31.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate35 = localDate33.minusWeeks((-1));
        boolean boolean36 = localDate29.isEqual((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.LocalDate.Property property37 = localDate33.yearOfCentury();
        java.lang.String str38 = property37.getAsShortText();
        org.joda.time.LocalDate localDate39 = property37.withMaximumValue();
        org.joda.time.LocalDate localDate40 = property37.roundFloorCopy();
        org.joda.time.LocalDate localDate42 = property37.addWrapFieldToCopy(19);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate46 = localDate44.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate47 = localDate42.withFields((org.joda.time.ReadablePartial) localDate46);
        org.joda.time.LocalDate localDate49 = localDate46.withYear(3);
        boolean boolean50 = property9.equals((java.lang.Object) localDate46);
        long long51 = property9.remainder();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 28425600000L + "'", long51 == 28425600000L);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((-1));
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((int) (short) 100);
        boolean boolean12 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate11);
        int int13 = localDate11.getEra();
        org.joda.time.LocalDate localDate15 = localDate11.plusWeeks(12);
        org.joda.time.LocalDate.Property property16 = localDate15.monthOfYear();
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((-1));
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((int) (short) 100);
        boolean boolean12 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate.Property property13 = localDate0.dayOfWeek();
        org.joda.time.LocalTime localTime14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDate0.toLocalDateTime(localTime14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The time must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate1.plusDays((int) (short) 100);
        org.joda.time.LocalDate.Property property11 = localDate10.yearOfCentury();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate19 = localDate17.minusWeeks((-1));
        boolean boolean20 = localDate13.isEqual((org.joda.time.ReadablePartial) localDate17);
        org.joda.time.LocalDate.Property property21 = localDate17.yearOfCentury();
        java.lang.String str22 = property21.getAsShortText();
        org.joda.time.LocalDate localDate23 = property21.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = localDate23.indexOf(dateTimeFieldType24);
        org.joda.time.LocalDate.Property property26 = localDate23.dayOfWeek();
        int int27 = localDate23.getEra();
        int int28 = property11.compareTo((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.LocalDate localDate30 = localDate23.withWeekyear((int) (short) -1);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 0);
        int int33 = localDate32.getCenturyOfEra();
        org.joda.time.LocalDate.Property property34 = localDate32.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate32.toDateTimeAtMidnight(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = localDate23.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 19 + "'", int33 == 19);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    @Ignore
  public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        int int12 = property9.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField13 = property9.getField();
        org.joda.time.LocalDate localDate14 = property9.withMinimumValue();
        int int15 = localDate14.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 292278993 + "'", int12 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2922750 + "'", int15 == 2922750);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property9.roundFloorCopy();
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy(19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = localDate14.withWeekOfWeekyear(1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        java.lang.String str15 = property14.getAsText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate17 = property14.setCopy("Property[dayOfWeek]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[dayOfWeek]\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Thursday" + "'", str15, "Thursday");
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate3.withYearOfEra(2);
        org.joda.time.LocalDate localDate16 = localDate3.minusYears(100);
        org.joda.time.LocalDate localDate18 = localDate16.plusDays(330);
        org.joda.time.LocalDate localDate20 = localDate18.withMonthOfYear((int) (short) 1);
        org.joda.time.LocalTime localTime21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDate18.toLocalDateTime(localTime21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The time must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    @Ignore
  public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        boolean boolean11 = property9.equals((java.lang.Object) 100L);
        java.lang.String str12 = property9.toString();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        int int15 = localDate14.getCenturyOfEra();
        org.joda.time.DateTime dateTime16 = localDate14.toDateTimeAtCurrentTime();
        int int17 = property9.getDifference((org.joda.time.ReadableInstant) dateTime16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) property9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[yearOfCentury]" + "'", str12, "Property[yearOfCentury]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-2019) + "'", int17 == (-2019));
    }

    @Test
    @Ignore
  public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.plusMonths((int) '4');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate16 = localDate14.minusWeeks((-1));
        boolean boolean17 = localDate10.isEqual((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate.Property property18 = localDate14.yearOfCentury();
        java.lang.String str19 = property18.getAsShortText();
        org.joda.time.LocalDate localDate20 = property18.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = localDate20.indexOf(dateTimeFieldType21);
        org.joda.time.LocalDate.Property property23 = localDate20.dayOfWeek();
        java.lang.String str24 = property23.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property23.getFieldType();
        org.joda.time.LocalDate.Property property26 = localDate6.property(dateTimeFieldType25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate28 = localDate5.withField(dateTimeFieldType25, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Thursday" + "'", str24, "Thursday");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        long long13 = property12.remainder();
        org.joda.time.LocalDate localDate14 = property12.withMinimumValue();
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDate14.getFields();
        org.joda.time.LocalDate.Property property16 = localDate14.year();
        org.joda.time.LocalDate localDate17 = property16.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        org.joda.time.DurationField durationField7 = property6.getRangeDurationField();
        int int8 = property6.getMinimumValue();
        java.lang.String str9 = property6.toString();
        java.lang.String str10 = property6.toString();
        org.joda.time.DurationField durationField11 = property6.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[monthOfYear]" + "'", str9, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[monthOfYear]" + "'", str10, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.LocalDate localDate15 = property12.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property16 = localDate15.weekOfWeekyear();
        boolean boolean17 = localDate0.isAfter((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate19 = localDate0.withEra((int) (byte) 1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    @Ignore
  public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate21 = localDate19.minusWeeks((-1));
        boolean boolean22 = localDate15.isEqual((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalDate.Property property23 = localDate15.year();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate29 = localDate27.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtCurrentTime(dateTimeZone30);
        int int32 = property23.getDifference((org.joda.time.ReadableInstant) dateTime31);
        long long33 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean34 = localDate2.equals((java.lang.Object) property12);
        org.joda.time.LocalDate localDate36 = localDate2.withCenturyOfEra((int) (short) 100);
        org.joda.time.LocalDate.Property property37 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate localDate39 = localDate2.withDayOfMonth(10);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) localDate2);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2019 + "'", int32 == 2019);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate39);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDate.Property property15 = localDate14.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate17 = localDate14.withDayOfMonth(100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    @Ignore
  public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(99);
        int int7 = localDate4.getDayOfMonth();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    @Ignore
  public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        java.lang.String str7 = property6.toString();
        int int8 = property6.getMaximumValue();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate16 = localDate14.minusWeeks((-1));
        boolean boolean17 = localDate10.isEqual((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate.Property property18 = localDate14.yearOfCentury();
        java.lang.String str19 = property18.getAsShortText();
        org.joda.time.LocalDate localDate20 = property18.withMaximumValue();
        org.joda.time.LocalDate localDate21 = property18.roundFloorCopy();
        org.joda.time.LocalDate localDate23 = property18.addWrapFieldToCopy(19);
        boolean boolean24 = property6.equals((java.lang.Object) property18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate32 = localDate30.minusWeeks((-1));
        boolean boolean33 = localDate26.isEqual((org.joda.time.ReadablePartial) localDate30);
        org.joda.time.DateTime dateTime34 = localDate30.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate40.minusWeeks((-1));
        boolean boolean43 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.LocalDate.Property property44 = localDate36.year();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate48 = localDate46.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate50 = localDate48.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = localDate48.toDateTimeAtCurrentTime(dateTimeZone51);
        int int53 = property44.getDifference((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology54);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate59 = localDate57.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate61 = localDate59.minusWeeks((-1));
        boolean boolean62 = localDate55.isEqual((org.joda.time.ReadablePartial) localDate59);
        org.joda.time.DateTime dateTime63 = localDate59.toDateTimeAtMidnight();
        int int64 = property44.getDifference((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime65 = localDate30.toDateTime((org.joda.time.ReadableInstant) dateTime63);
        int int66 = property18.compareTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.LocalDate localDate67 = property18.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[monthOfYear]" + "'", str7, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2019 + "'", int53 == 2019);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2019 + "'", int64 == 2019);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(localDate67);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate7.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = localDate7.withDayOfMonth((int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    @Ignore
  public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate21 = localDate19.minusWeeks((-1));
        boolean boolean22 = localDate15.isEqual((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalDate.Property property23 = localDate15.year();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate29 = localDate27.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtCurrentTime(dateTimeZone30);
        int int32 = property23.getDifference((org.joda.time.ReadableInstant) dateTime31);
        long long33 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean34 = localDate2.equals((java.lang.Object) property12);
        org.joda.time.LocalDate localDate36 = localDate2.withCenturyOfEra((int) (short) 100);
        org.joda.time.LocalDate.Property property37 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate localDate39 = localDate2.withDayOfMonth(10);
        org.joda.time.LocalDate.Property property40 = localDate39.yearOfEra();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2019 + "'", int32 == 2019);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("yearOfCentury");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"yearOfCentury\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate7.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DurationFieldType durationFieldType18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate20 = localDate7.withFieldAdded(durationFieldType18, (-292275054));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    @Ignore
  public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        java.lang.Object obj0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(obj0);
        int int2 = localDate1.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
    }

    @Test
    @Ignore
  public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(99);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = localDate10.indexOf(dateTimeFieldType11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology17 = localDate14.getChronology();
        int int18 = localDate10.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = localDate14.toDateMidnight(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate14.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate14.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.LocalDate localDate25 = localDate4.withFields((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate.Property property26 = localDate4.era();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        int int32 = localDate30.indexOf(dateTimeFieldType31);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology37 = localDate34.getChronology();
        int int38 = localDate30.compareTo((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = localDate34.toDateMidnight(dateTimeZone39);
        org.joda.time.LocalDate localDate42 = localDate34.minusYears((int) ' ');
        int int43 = localDate34.getMonthOfYear();
        boolean boolean44 = localDate4.isAfter((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.LocalDate.Property property45 = localDate4.era();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    @Ignore
  public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfWeek();
        org.joda.time.LocalDate localDate8 = localDate5.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate11 = localDate5.plusMonths(2021);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDate11.getFieldType((-2019));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -2019");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    @Ignore
  public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((-1));
        boolean boolean14 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate17.year();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone32);
        int int34 = property25.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate40.minusWeeks((-1));
        boolean boolean43 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtMidnight();
        int int45 = property25.getDifference((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDate11.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = localDate5.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDate.Property property48 = localDate5.dayOfWeek();
        org.joda.time.LocalDate.Property property49 = localDate5.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate51 = localDate5.withEra(70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2019 + "'", int34 == 2019);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2019 + "'", int45 == 2019);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    @Ignore
  public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        int int11 = property9.get();
        org.joda.time.DateTimeField dateTimeField12 = property9.getField();
        int int13 = property9.getMaximumValue();
        org.joda.time.DurationField durationField14 = property9.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = property9.setCopy("2020-11-25");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2020-11-25\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2020 + "'", int11 == 2020);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate localDate15 = localDate11.minusWeeks(2922750);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    @Ignore
  public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.LocalDate localDate15 = property12.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property16 = localDate15.weekOfWeekyear();
        boolean boolean17 = localDate0.isAfter((org.joda.time.ReadablePartial) localDate15);
        int int18 = localDate15.getCenturyOfEra();
        org.joda.time.LocalDate localDate20 = localDate15.withWeekyear(330);
        java.util.Date date21 = localDate20.toDate();
        org.joda.time.DateMidnight dateMidnight22 = localDate20.toDateMidnight();
        int int23 = localDate20.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Dec 30 00:00:00 UTC 329");
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property9.roundHalfFloorCopy();
        org.joda.time.DurationField durationField13 = property9.getLeapDurationField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass14 = durationField13.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNull(durationField13);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate localDate7 = localDate3.minusMonths(25);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfWeek();
        int int9 = property8.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDate.Property property15 = localDate14.centuryOfEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate21.yearOfCentury();
        java.lang.String str26 = property25.getAsShortText();
        org.joda.time.LocalDate localDate27 = property25.withMaximumValue();
        org.joda.time.LocalDate localDate28 = property25.roundHalfFloorCopy();
        org.joda.time.DurationField durationField29 = property25.getLeapDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property25.getFieldType();
        boolean boolean31 = localDate14.isSupported(dateTimeFieldType30);
        int int32 = localDate14.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    @Ignore
  public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        java.util.Locale locale5 = null;
        int int6 = property4.getMaximumTextLength(locale5);
        org.joda.time.LocalDate localDate8 = property4.addToCopy(2);
        java.lang.String str9 = property4.getAsText();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "70" + "'", str9, "70");
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 4, chronology5);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(chronology5);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property9.roundFloorCopy();
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy(19);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate19 = localDate14.withFields((org.joda.time.ReadablePartial) localDate18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = localDate18.toString("Jan");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: J");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    @Ignore
  public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(99);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Interval interval8 = localDate4.toInterval(dateTimeZone7);
        int[] intArray9 = localDate4.getValues();
        org.joda.time.LocalTime localTime10 = null;
        org.joda.time.DateTime dateTime11 = localDate4.toDateTime(localTime10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate4.toDateTimeAtMidnight(dateTimeZone12);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = property9.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = localDate20.indexOf(dateTimeFieldType21);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology27 = localDate24.getChronology();
        int int28 = localDate20.compareTo((org.joda.time.ReadablePartial) localDate24);
        int int29 = localDate24.getDayOfYear();
        java.lang.String str30 = localDate24.toString();
        java.lang.String str32 = localDate24.toString("1");
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = localDate24.toDateMidnight(dateTimeZone33);
        org.joda.time.LocalDate.Property property35 = localDate24.year();
        org.joda.time.LocalDate localDate36 = localDate16.withFields((org.joda.time.ReadablePartial) localDate24);
        java.lang.String str37 = localDate24.toString();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        int int43 = localDate41.indexOf(dateTimeFieldType42);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology48 = localDate45.getChronology();
        int int49 = localDate41.compareTo((org.joda.time.ReadablePartial) localDate45);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate53 = localDate51.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = localDate53.indexOf(dateTimeFieldType54);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate59 = localDate57.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology60 = localDate57.getChronology();
        int int61 = localDate53.compareTo((org.joda.time.ReadablePartial) localDate57);
        int int62 = localDate53.size();
        boolean boolean63 = localDate45.isBefore((org.joda.time.ReadablePartial) localDate53);
        java.lang.String str65 = localDate53.toString("1970-01-01");
        boolean boolean66 = localDate24.isBefore((org.joda.time.ReadablePartial) localDate53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate68 = localDate24.withDayOfYear(1968);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1968 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01" + "'", str30, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01" + "'", str37, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1970-01-01" + "'", str65, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTime(localTime2);
        java.lang.String str5 = localDate1.toString("1970-01-01");
        org.joda.time.LocalDate localDate7 = localDate1.withYearOfCentury(13);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        boolean boolean12 = localDate7.isBefore((org.joda.time.ReadablePartial) localDate11);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    @Ignore
  public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths(292278993);
        int int7 = localDate4.getDayOfYear();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeField dateTimeField10 = localDate5.getField((int) (byte) 1);
        org.joda.time.LocalDate.Property property11 = localDate5.yearOfCentury();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(2019, (int) ' ', 330);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        int int12 = property9.getMinimumValueOverall();
        org.joda.time.LocalDate localDate13 = property9.roundCeilingCopy();
        org.joda.time.DurationField durationField14 = property9.getRangeDurationField();
        int int15 = property9.getLeapAmount();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate7.getDayOfYear();
        java.lang.String str13 = localDate7.toString();
        java.lang.String str15 = localDate7.toString("1");
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = localDate7.toDateMidnight(dateTimeZone16);
        org.joda.time.LocalDate.Property property18 = localDate7.year();
        org.joda.time.LocalDate.Property property19 = localDate7.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = localDate7.withDayOfWeek(32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (short) 1);
    }

    @Test
    @Ignore
  public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((-1));
        boolean boolean13 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property14 = localDate6.year();
        int int15 = property14.get();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = localDate19.indexOf(dateTimeFieldType20);
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate19.toDateTime(localTime22, dateTimeZone23);
        long long25 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        int int26 = property4.compareTo((org.joda.time.ReadableInstant) dateTime24);
        int int27 = property4.getLeapAmount();
        boolean boolean28 = property4.isLeap();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2020 + "'", int15 == 2020);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2019L + "'", long25 == 2019L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        boolean boolean11 = property9.equals((java.lang.Object) 100L);
        java.lang.String str12 = property9.toString();
        org.joda.time.DateTimeField dateTimeField13 = property9.getField();
        org.joda.time.LocalDate localDate14 = property9.roundCeilingCopy();
        java.util.Locale locale15 = null;
        java.lang.String str16 = property9.getAsShortText(locale15);
        int int17 = property9.getLeapAmount();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[yearOfCentury]" + "'", str12, "Property[yearOfCentury]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    @Ignore
  public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = localDate1.toString(dateTimeFormatter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-31" + "'", str3, "1969-12-31");
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.LocalDate localDate17 = localDate7.minusYears((int) '#');
        org.joda.time.LocalDate localDate19 = localDate7.withDayOfYear(330);
        org.joda.time.LocalDate localDate21 = localDate19.plusYears(13);
        org.joda.time.LocalDate localDate23 = localDate21.minusYears((int) (short) 0);
        int int24 = localDate21.getWeekyear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1983 + "'", int24 == 1983);
    }

    @Test
    @Ignore
  public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        int int3 = localDate1.getYearOfCentury();
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    @Ignore
  public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        java.util.Locale locale5 = null;
        int int6 = property4.getMaximumTextLength(locale5);
        int int7 = property4.getMinimumValue();
        org.joda.time.LocalDate localDate8 = property4.roundHalfCeilingCopy();
        int int9 = localDate8.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property10 = localDate8.dayOfYear();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    @Ignore
  public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date17 = localDate16.toDate();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology22 = localDate19.getChronology();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) date17, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = localDate23.toDateMidnight(dateTimeZone24);
        org.joda.time.LocalDate.Property property26 = localDate23.weekOfWeekyear();
        org.joda.time.LocalDate localDate27 = property26.roundHalfEvenCopy();
        boolean boolean28 = localDate14.isBefore((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.LocalDate localDate30 = localDate14.minusYears((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate32 = localDate14.withDayOfWeek((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDate30);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("4");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = localDate1.withDayOfWeek(11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 11 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
    }

    @Test
    @Ignore
  public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        int int3 = localDate1.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate1.plus(readablePeriod4);
        org.joda.time.LocalDate localDate7 = localDate1.plusDays(6);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    @Ignore
  public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        java.lang.String str12 = localDate11.toString();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate15 = localDate11.withPeriodAdded(readablePeriod13, 11);
        org.joda.time.LocalDate.Property property16 = localDate11.yearOfEra();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date21 = localDate20.toDate();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology26 = localDate23.getChronology();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) date21, chronology26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(0L, chronology26);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (byte) 10, chronology26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate37 = localDate35.minusWeeks((-1));
        boolean boolean38 = localDate31.isEqual((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.LocalDate localDate40 = localDate31.plusDays((int) (short) 100);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date43 = localDate42.toDate();
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.fromDateFields(date43);
        org.joda.time.LocalDate.Property property45 = localDate44.yearOfCentury();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate51 = localDate49.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate53 = localDate51.minusWeeks((-1));
        boolean boolean54 = localDate47.isEqual((org.joda.time.ReadablePartial) localDate51);
        org.joda.time.LocalDate.Property property55 = localDate47.year();
        int int56 = property55.get();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate60 = localDate58.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        int int62 = localDate60.indexOf(dateTimeFieldType61);
        org.joda.time.LocalTime localTime63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = localDate60.toDateTime(localTime63, dateTimeZone64);
        long long66 = property55.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime65);
        int int67 = property45.compareTo((org.joda.time.ReadableInstant) dateTime65);
        boolean boolean68 = localDate40.equals((java.lang.Object) dateTime65);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate73 = localDate71.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology74 = localDate71.getChronology();
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((long) 4, chronology74);
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((java.lang.Object) dateTime65, chronology74);
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate((java.lang.Object) localDate29, chronology74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((java.lang.Object) property16, chronology74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0099-01-01" + "'", str12, "0099-01-01");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2020 + "'", int56 == 2020);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 2019L + "'", long66 == 2019L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(chronology74);
    }

    @Test
    @Ignore
  public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate11 = localDate5.withYearOfCentury((int) '#');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        int int14 = localDate13.getDayOfYear();
        org.joda.time.LocalDate localDate15 = localDate5.withFields((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date18 = localDate17.toDate();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology23 = localDate20.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) date18, chronology23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) localDate5, chronology23);
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now(chronology23);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        int int32 = localDate30.indexOf(dateTimeFieldType31);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology37 = localDate34.getChronology();
        int int38 = localDate30.compareTo((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.LocalDate.Property property39 = localDate30.weekOfWeekyear();
        org.joda.time.LocalDate localDate41 = localDate30.withYearOfEra(2);
        org.joda.time.LocalDate localDate43 = localDate30.minusYears(100);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology44);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate49 = localDate47.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate51 = localDate49.minusWeeks((-1));
        boolean boolean52 = localDate45.isEqual((org.joda.time.ReadablePartial) localDate49);
        org.joda.time.LocalDate.Property property53 = localDate49.yearOfCentury();
        org.joda.time.LocalDate localDate55 = localDate49.withYearOfCentury((int) '#');
        int int56 = localDate55.getDayOfMonth();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology58);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate63 = localDate61.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate65 = localDate63.minusWeeks((-1));
        boolean boolean66 = localDate59.isEqual((org.joda.time.ReadablePartial) localDate63);
        org.joda.time.LocalDate localDate68 = localDate59.plusDays((int) (short) 100);
        boolean boolean69 = localDate57.isEqual((org.joda.time.ReadablePartial) localDate68);
        org.joda.time.LocalDate.Property property70 = localDate57.dayOfWeek();
        org.joda.time.LocalDate localDate71 = property70.getLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = property70.getFieldType();
        int int73 = localDate55.indexOf(dateTimeFieldType72);
        org.joda.time.LocalDate.Property property74 = localDate30.property(dateTimeFieldType72);
        org.joda.time.LocalDate.Property property75 = localDate26.property(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 330 + "'", int14 == 330);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(property75);
    }

    @Test
    @Ignore
  public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate1.plusDays((int) ' ');
        int int11 = localDate10.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
    }

    @Test
    @Ignore
  public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate.Property property3 = localDate1.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate1.toDateTimeAtMidnight(dateTimeZone4);
        java.util.Date date6 = localDate1.toDate();
        org.joda.time.DurationFieldType durationFieldType7 = null;
        boolean boolean8 = localDate1.isSupported(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 292278993, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((java.lang.Object) dateTimeZone1, chronology5);
        org.joda.time.DateMidnight dateMidnight7 = localDate6.toDateMidnight();
        org.joda.time.LocalDate localDate9 = localDate6.withYearOfEra((int) '#');
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    @Ignore
  public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        java.lang.String str3 = localDate0.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtStartOfDay(dateTimeZone4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, 0);
        org.joda.time.LocalDate localDate12 = localDate10.withWeekyear(19);
        org.joda.time.DateTime dateTime13 = localDate12.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate14 = localDate0.withFields((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate.Property property15 = localDate14.era();
        java.lang.String str16 = property15.getAsText();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2020-11-25" + "'", str3, "2020-11-25");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AD" + "'", str16, "AD");
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate1.plusDays((int) (short) 100);
        org.joda.time.LocalDate.Property property11 = localDate10.yearOfCentury();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate19 = localDate17.minusWeeks((-1));
        boolean boolean20 = localDate13.isEqual((org.joda.time.ReadablePartial) localDate17);
        org.joda.time.LocalDate.Property property21 = localDate17.yearOfCentury();
        java.lang.String str22 = property21.getAsShortText();
        org.joda.time.LocalDate localDate23 = property21.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = localDate23.indexOf(dateTimeFieldType24);
        org.joda.time.LocalDate.Property property26 = localDate23.dayOfWeek();
        int int27 = localDate23.getEra();
        int int28 = property11.compareTo((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.LocalDate localDate30 = localDate23.withWeekyear((int) (short) -1);
        int int31 = localDate23.getYearOfEra();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 99 + "'", int31 == 99);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        int int17 = localDate15.indexOf(dateTimeFieldType16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology22 = localDate19.getChronology();
        int int23 = localDate15.compareTo((org.joda.time.ReadablePartial) localDate19);
        int int24 = localDate15.size();
        boolean boolean25 = localDate7.isBefore((org.joda.time.ReadablePartial) localDate15);
        java.lang.String str27 = localDate15.toString("1970-01-01");
        org.joda.time.LocalDate localDate29 = localDate15.plusWeeks((-2019));
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01" + "'", str27, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate29);
    }

    @Test
    @Ignore
  public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        java.util.Locale locale5 = null;
        int int6 = property4.getMaximumTextLength(locale5);
        int int7 = property4.getMinimumValue();
        org.joda.time.LocalDate localDate8 = property4.roundFloorCopy();
        java.util.Date date9 = localDate8.toDate();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int9 = localDate5.getYearOfEra();
        int int10 = localDate5.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        boolean boolean19 = localDate12.isEqual((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate.Property property20 = localDate16.yearOfCentury();
        java.lang.String str21 = property20.getAsShortText();
        org.joda.time.LocalDate localDate23 = property20.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate25 = property20.addToCopy((int) (short) 1);
        int int26 = property20.getLeapAmount();
        boolean boolean27 = localDate5.equals((java.lang.Object) property20);
        java.util.Locale locale28 = null;
        int int29 = property20.getMaximumShortTextLength(locale28);
        java.util.Locale locale30 = null;
        int int31 = property20.getMaximumShortTextLength(locale30);
        org.joda.time.LocalDate localDate33 = property20.addWrapFieldToCopy(2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(localDate33);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate4.minusDays((int) (byte) 100);
        int int7 = localDate6.getMonthOfYear();
        int int8 = localDate6.getCenturyOfEra();
        org.joda.time.LocalDate localDate10 = localDate6.withDayOfYear(48);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 19 + "'", int8 == 19);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int9 = localDate5.getYearOfEra();
        int int10 = localDate5.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        boolean boolean19 = localDate12.isEqual((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate.Property property20 = localDate16.yearOfCentury();
        java.lang.String str21 = property20.getAsShortText();
        org.joda.time.LocalDate localDate23 = property20.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate25 = property20.addToCopy((int) (short) 1);
        int int26 = property20.getLeapAmount();
        boolean boolean27 = localDate5.equals((java.lang.Object) property20);
        org.joda.time.LocalDate localDate29 = localDate5.withWeekyear(1970);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate31 = localDate5.withDayOfWeek(1983);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1983 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate29);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfMonth(25);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy((int) (short) 10);
        java.util.Locale locale15 = null;
        java.lang.String str16 = property9.getAsShortText(locale15);
        java.lang.String str17 = property9.toString();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[yearOfCentury]" + "'", str17, "Property[yearOfCentury]");
    }

    @Test
    @Ignore
  public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(99);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = localDate10.indexOf(dateTimeFieldType11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology17 = localDate14.getChronology();
        int int18 = localDate10.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = localDate14.toDateMidnight(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate14.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate14.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.LocalDate localDate25 = localDate4.withFields((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate27.withPeriodAdded(readablePeriod28, 0);
        org.joda.time.LocalDate localDate32 = localDate30.minusDays((int) (byte) 100);
        int int33 = localDate32.getMonthOfYear();
        boolean boolean34 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDate localDate36 = localDate32.plus(readablePeriod35);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate36);
    }

    @Test
    @Ignore
  public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        org.joda.time.LocalDate localDate12 = property9.addToCopy((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = localDate12.isSupported(dateTimeFieldType13);
        org.joda.time.LocalDate.Property property15 = localDate12.dayOfMonth();
        int int16 = property15.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate5.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property11 = localDate5.year();
        org.joda.time.LocalDate localDate13 = property11.setCopy((int) 'a');
        org.joda.time.LocalDate localDate15 = property11.addToCopy(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        int int17 = localDate15.indexOf(dateTimeFieldType16);
        org.joda.time.LocalDate.Property property18 = localDate15.dayOfMonth();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        org.joda.time.DateTime dateTime5 = localDate1.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        int int5 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate localDate7 = localDate1.minusDays((int) ' ');
        org.joda.time.LocalDate localDate9 = localDate7.withWeekyear((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = localDate7.withEra((-2019));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2019 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    @Ignore
  public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = localDate8.indexOf(dateTimeFieldType9);
        org.joda.time.LocalTime localTime11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate8.toDateTime(localTime11, dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate1.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDate localDate16 = localDate1.minusMonths((-292275054));
        org.joda.time.Interval interval17 = localDate1.toInterval();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(interval17);
    }

    @Test
    @Ignore
  public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        java.util.Date date5 = localDate1.toDate();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromDateFields(date5);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate.Property property15 = localDate14.weekOfWeekyear();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfCentury(0);
        org.joda.time.LocalDate localDate19 = localDate14.withCenturyOfEra(10);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = localDate23.indexOf(dateTimeFieldType24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology30 = localDate27.getChronology();
        int int31 = localDate23.compareTo((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.LocalDate.Property property32 = localDate23.weekOfWeekyear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate40 = localDate38.minusWeeks((-1));
        boolean boolean41 = localDate34.isEqual((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.LocalDate localDate43 = localDate38.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property44 = localDate38.year();
        org.joda.time.LocalDate localDate46 = property44.setCopy((int) 'a');
        org.joda.time.LocalDate localDate48 = property44.addToCopy(48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = localDate48.getFieldType(1);
        boolean boolean51 = localDate23.isSupported(dateTimeFieldType50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate53 = localDate19.withField(dateTimeFieldType50, 99);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 99 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    @Ignore
  public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = property9.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = localDate20.indexOf(dateTimeFieldType21);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology27 = localDate24.getChronology();
        int int28 = localDate20.compareTo((org.joda.time.ReadablePartial) localDate24);
        int int29 = localDate24.getDayOfYear();
        java.lang.String str30 = localDate24.toString();
        java.lang.String str32 = localDate24.toString("1");
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = localDate24.toDateMidnight(dateTimeZone33);
        org.joda.time.LocalDate.Property property35 = localDate24.year();
        org.joda.time.LocalDate localDate36 = localDate16.withFields((org.joda.time.ReadablePartial) localDate24);
        java.lang.String str37 = localDate24.toString();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        int int43 = localDate41.indexOf(dateTimeFieldType42);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology48 = localDate45.getChronology();
        int int49 = localDate41.compareTo((org.joda.time.ReadablePartial) localDate45);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate53 = localDate51.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = localDate53.indexOf(dateTimeFieldType54);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate59 = localDate57.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology60 = localDate57.getChronology();
        int int61 = localDate53.compareTo((org.joda.time.ReadablePartial) localDate57);
        int int62 = localDate53.size();
        boolean boolean63 = localDate45.isBefore((org.joda.time.ReadablePartial) localDate53);
        java.lang.String str65 = localDate53.toString("1970-01-01");
        boolean boolean66 = localDate24.isBefore((org.joda.time.ReadablePartial) localDate53);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date69 = localDate68.toDate();
        org.joda.time.LocalDate localDate70 = org.joda.time.LocalDate.fromDateFields(date69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDate localDate72 = localDate70.minus(readablePeriod71);
        org.joda.time.LocalDate.Property property73 = localDate72.dayOfWeek();
        org.joda.time.LocalDate localDate75 = localDate72.withWeekyear((int) (short) 0);
        java.util.Locale locale77 = null;
        java.lang.String str78 = localDate72.toString("2020-11-25", locale77);
        int int79 = localDate24.compareTo((org.joda.time.ReadablePartial) localDate72);
        org.joda.time.LocalDate.Property property80 = localDate72.yearOfEra();
        int int81 = property80.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01" + "'", str30, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01" + "'", str37, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1970-01-01" + "'", str65, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2020-11-25" + "'", str78, "2020-11-25");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    @Ignore
  public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        int int11 = property9.get();
        org.joda.time.DateTimeField dateTimeField12 = property9.getField();
        int int13 = property9.getMinimumValue();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2020 + "'", int11 == 2020);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-292275054) + "'", int13 == (-292275054));
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        int int5 = localDate1.getYearOfCentury();
        int int6 = localDate1.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = localDate1.withYearOfCentury((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.LocalDate localDate17 = localDate7.minusYears((int) '#');
        int int18 = localDate7.getWeekOfWeekyear();
        org.joda.time.Interval interval19 = localDate7.toInterval();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(interval19);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = property9.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((java.lang.Object) localDate16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtMidnight(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        int int13 = property9.getMaximumValue();
        org.joda.time.LocalDate localDate14 = property9.roundHalfEvenCopy();
        boolean boolean15 = property9.isLeap();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property9.getAsText(locale16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate25 = localDate23.minusWeeks((-1));
        boolean boolean26 = localDate19.isEqual((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.LocalDate localDate28 = localDate19.plusDays((int) (short) 100);
        org.joda.time.DateTime dateTime29 = localDate28.toDateTimeAtMidnight();
        boolean boolean30 = property9.equals((java.lang.Object) localDate28);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 99 + "'", int13 == 99);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.LocalDate localDate17 = localDate7.minusYears((int) '#');
        org.joda.time.LocalDate localDate19 = localDate7.withDayOfYear(330);
        org.joda.time.LocalDate localDate21 = localDate19.plusYears(13);
        int int22 = localDate21.getYearOfEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1983 + "'", int22 == 1983);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate11 = localDate9.minusWeeks((-1));
        boolean boolean12 = localDate5.isEqual((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.LocalDate localDate14 = localDate5.plusDays((int) (short) 100);
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate21.yearOfCentury();
        java.lang.String str26 = property25.getAsShortText();
        org.joda.time.LocalDate localDate27 = property25.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        int int29 = localDate27.indexOf(dateTimeFieldType28);
        org.joda.time.LocalDate.Property property30 = localDate27.dayOfWeek();
        int int31 = localDate27.getEra();
        int int32 = property15.compareTo((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.LocalDate localDate34 = localDate27.withWeekyear((int) (short) -1);
        int int35 = localDate0.compareTo((org.joda.time.ReadablePartial) localDate34);
        int int36 = localDate34.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDate localDate38 = localDate34.plus(readablePeriod37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.plusMonths((int) '4');
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate49 = localDate47.minusWeeks((-1));
        boolean boolean50 = localDate43.isEqual((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.LocalDate.Property property51 = localDate47.yearOfCentury();
        java.lang.String str52 = property51.getAsShortText();
        org.joda.time.LocalDate localDate54 = property51.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property55 = localDate54.weekOfWeekyear();
        boolean boolean56 = localDate39.isAfter((org.joda.time.ReadablePartial) localDate54);
        int int57 = localDate54.getCenturyOfEra();
        org.joda.time.LocalDate.Property property58 = localDate54.dayOfMonth();
        java.util.Locale locale59 = null;
        java.lang.String str60 = property58.getAsText(locale59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property58.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate63 = localDate38.withField(dateTimeFieldType61, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1" + "'", str52, "1");
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1" + "'", str60, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
    }

    @Test
    @Ignore
  public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) date2, chronology7);
        java.util.Date date9 = localDate8.toDate();
        org.joda.time.LocalDate.Property property10 = localDate8.era();
        org.joda.time.LocalDate.Property property11 = localDate8.dayOfMonth();
        int int12 = localDate8.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        org.joda.time.LocalDate localDate16 = property14.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate17 = property14.withMaximumValue();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    @Ignore
  public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        boolean boolean10 = property9.isLeap();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        boolean boolean19 = localDate12.isEqual((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate.Property property20 = localDate12.year();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate26 = localDate24.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtCurrentTime(dateTimeZone27);
        int int29 = property20.getDifference((org.joda.time.ReadableInstant) dateTime28);
        java.lang.String str30 = property20.getAsString();
        org.joda.time.LocalDate localDate32 = property20.addWrapFieldToCopy((int) ' ');
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate40 = localDate38.minusWeeks((-1));
        boolean boolean41 = localDate34.isEqual((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.LocalDate.Property property42 = localDate38.yearOfCentury();
        java.lang.String str43 = property42.getAsShortText();
        org.joda.time.LocalDate localDate44 = property42.withMaximumValue();
        java.lang.String str45 = localDate44.toString();
        org.joda.time.LocalDate localDate46 = localDate32.withFields((org.joda.time.ReadablePartial) localDate44);
        boolean boolean47 = property9.equals((java.lang.Object) localDate44);
        java.util.Locale locale48 = null;
        java.lang.String str49 = property9.getAsShortText(locale48);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2019 + "'", int29 == 2019);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2020" + "'", str30, "2020");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0099-01-01" + "'", str45, "0099-01-01");
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = localDate13.toDateMidnight(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateMidnight17);
    }

    @Test
    @Ignore
  public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int9 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate localDate11 = localDate1.plusYears((-292275054));
        org.joda.time.DurationFieldType durationFieldType12 = null;
        boolean boolean13 = localDate1.isSupported(durationFieldType12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType15 = localDate1.getFieldType((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    @Ignore
  public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date5 = localDate4.toDate();
        java.util.Locale locale7 = null;
        java.lang.String str8 = localDate4.toString("2020", locale7);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(38, 1968, 6, chronology9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1968 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2020" + "'", str8, "2020");
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTime(localTime2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = localDate1.toDateMidnight(dateTimeZone4);
        org.joda.time.LocalDate localDate7 = localDate1.withDayOfWeek(4);
        org.joda.time.LocalTime localTime8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDate7.toLocalDateTime(localTime8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The time must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    @Ignore
  public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(99);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = localDate10.indexOf(dateTimeFieldType11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology17 = localDate14.getChronology();
        int int18 = localDate10.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = localDate14.toDateMidnight(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate14.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate14.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.LocalDate localDate25 = localDate4.withFields((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate33 = localDate31.minusWeeks((-1));
        boolean boolean34 = localDate27.isEqual((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property35 = localDate31.yearOfCentury();
        java.lang.String str36 = property35.getAsShortText();
        org.joda.time.LocalDate localDate38 = property35.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Interval interval40 = localDate38.toInterval(dateTimeZone39);
        org.joda.time.LocalDate localDate42 = localDate38.plusWeeks((-1));
        int int43 = localDate42.getDayOfMonth();
        boolean boolean45 = localDate42.equals((java.lang.Object) "");
        int int46 = localDate42.getEra();
        boolean boolean47 = localDate4.isBefore((org.joda.time.ReadablePartial) localDate42);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate51 = localDate49.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        int int53 = localDate51.indexOf(dateTimeFieldType52);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate57 = localDate55.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology58 = localDate55.getChronology();
        int int59 = localDate51.compareTo((org.joda.time.ReadablePartial) localDate55);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = localDate55.toDateMidnight(dateTimeZone60);
        org.joda.time.LocalDate localDate63 = localDate55.minusYears((int) ' ');
        org.joda.time.DateTime dateTime64 = localDate63.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate67 = localDate65.plusMonths((int) '4');
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(chronology68);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate73 = localDate71.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate75 = localDate73.minusWeeks((-1));
        boolean boolean76 = localDate69.isEqual((org.joda.time.ReadablePartial) localDate73);
        org.joda.time.LocalDate.Property property77 = localDate73.yearOfCentury();
        java.lang.String str78 = property77.getAsShortText();
        org.joda.time.LocalDate localDate79 = property77.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        int int81 = localDate79.indexOf(dateTimeFieldType80);
        org.joda.time.LocalDate.Property property82 = localDate79.dayOfWeek();
        java.lang.String str83 = property82.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = property82.getFieldType();
        org.joda.time.LocalDate.Property property85 = localDate65.property(dateTimeFieldType84);
        org.joda.time.LocalDate.Property property86 = localDate63.property(dateTimeFieldType84);
        boolean boolean87 = localDate42.isAfter((org.joda.time.ReadablePartial) localDate63);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 25 + "'", int43 == 25);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "1" + "'", str78, "1");
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Thursday" + "'", str83, "Thursday");
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate12.plusWeeks((-1));
        org.joda.time.LocalDate localDate18 = localDate16.withCenturyOfEra(4);
        int int19 = localDate16.getEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate27 = localDate25.minusWeeks((-1));
        boolean boolean28 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.LocalDate.Property property29 = localDate25.yearOfCentury();
        java.lang.String str30 = property29.getAsShortText();
        org.joda.time.LocalDate localDate32 = property29.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate34 = property29.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate36 = property29.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        int int42 = localDate40.indexOf(dateTimeFieldType41);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate46 = localDate44.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology47 = localDate44.getChronology();
        int int48 = localDate40.compareTo((org.joda.time.ReadablePartial) localDate44);
        int int49 = localDate44.getDayOfYear();
        java.lang.String str50 = localDate44.toString();
        java.lang.String str52 = localDate44.toString("1");
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = localDate44.toDateMidnight(dateTimeZone53);
        org.joda.time.LocalDate.Property property55 = localDate44.year();
        org.joda.time.LocalDate localDate56 = localDate36.withFields((org.joda.time.ReadablePartial) localDate44);
        boolean boolean57 = localDate16.isAfter((org.joda.time.ReadablePartial) localDate44);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology58);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate63 = localDate61.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate65 = localDate63.minusWeeks((-1));
        boolean boolean66 = localDate59.isEqual((org.joda.time.ReadablePartial) localDate63);
        org.joda.time.LocalDate.Property property67 = localDate63.yearOfCentury();
        java.lang.String str68 = property67.getAsShortText();
        org.joda.time.LocalDate localDate70 = property67.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate72 = property67.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDate.Property property73 = localDate72.centuryOfEra();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate(chronology74);
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate79 = localDate77.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate81 = localDate79.minusWeeks((-1));
        boolean boolean82 = localDate75.isEqual((org.joda.time.ReadablePartial) localDate79);
        org.joda.time.LocalDate.Property property83 = localDate79.yearOfCentury();
        java.lang.String str84 = property83.getAsShortText();
        org.joda.time.LocalDate localDate85 = property83.withMaximumValue();
        org.joda.time.LocalDate localDate86 = property83.roundHalfFloorCopy();
        org.joda.time.DurationField durationField87 = property83.getLeapDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = property83.getFieldType();
        boolean boolean89 = localDate72.isSupported(dateTimeFieldType88);
        int int90 = localDate16.get(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-01" + "'", str50, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1" + "'", str52, "1");
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1" + "'", str68, "1");
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "1" + "'", str84, "1");
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    @Ignore
  public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate23 = property9.withMaximumValue();
        org.joda.time.LocalTime localTime24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDate23.toLocalDateTime(localTime24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The time must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate4.minusDays((int) (byte) 100);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.year();
        org.joda.time.LocalDate localDate9 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        int int10 = localDate4.getEra();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDate4.getFieldTypes();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
    }

    @Test
    @Ignore
  public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.Interval interval23 = localDate22.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            int int25 = localDate22.getValue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(interval23);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths((int) '4');
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate11 = localDate9.minusWeeks((-1));
        boolean boolean12 = localDate5.isEqual((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.LocalDate.Property property13 = localDate9.yearOfCentury();
        java.lang.String str14 = property13.getAsShortText();
        org.joda.time.LocalDate localDate16 = property13.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property17 = localDate16.weekOfWeekyear();
        boolean boolean18 = localDate1.isAfter((org.joda.time.ReadablePartial) localDate16);
        int int19 = localDate16.getCenturyOfEra();
        org.joda.time.Chronology chronology20 = localDate16.getChronology();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (byte) 10, chronology20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    @Ignore
  public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) date2, chronology7);
        java.util.Date date9 = localDate8.toDate();
        org.joda.time.LocalDate.Property property10 = localDate8.era();
        org.joda.time.LocalDate.Property property11 = localDate8.dayOfMonth();
        org.joda.time.LocalDate localDate12 = property11.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) property11, dateTimeZone13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        int int19 = property9.compareTo((org.joda.time.ReadablePartial) localDate16);
        int int20 = property9.getMinimumValue();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    @Ignore
  public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate1.plusDays((int) (short) 100);
        org.joda.time.LocalDate.Property property11 = localDate10.yearOfCentury();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate19 = localDate17.minusWeeks((-1));
        boolean boolean20 = localDate13.isEqual((org.joda.time.ReadablePartial) localDate17);
        org.joda.time.LocalDate.Property property21 = localDate17.yearOfCentury();
        java.lang.String str22 = property21.getAsShortText();
        org.joda.time.LocalDate localDate23 = property21.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = localDate23.indexOf(dateTimeFieldType24);
        org.joda.time.LocalDate.Property property26 = localDate23.dayOfWeek();
        int int27 = localDate23.getEra();
        int int28 = property11.compareTo((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.LocalDate localDate30 = localDate23.withWeekyear((int) (short) -1);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date33 = localDate32.toDate();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDate localDate35 = localDate32.minus(readablePeriod34);
        org.joda.time.LocalDate localDate37 = localDate35.plusMonths(99);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Interval interval39 = localDate35.toInterval(dateTimeZone38);
        int[] intArray40 = localDate35.getValues();
        org.joda.time.LocalTime localTime41 = null;
        org.joda.time.DateTime dateTime42 = localDate35.toDateTime(localTime41);
        boolean boolean43 = localDate30.equals((java.lang.Object) dateTime42);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        int int13 = property9.getMaximumValue();
        org.joda.time.LocalDate localDate14 = property9.roundHalfEvenCopy();
        boolean boolean15 = property9.isLeap();
        long long16 = property9.remainder();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 99 + "'", int13 == 99);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    @Ignore
  public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((-1));
        boolean boolean14 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate17.year();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone32);
        int int34 = property25.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate40.minusWeeks((-1));
        boolean boolean43 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtMidnight();
        int int45 = property25.getDifference((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDate11.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = localDate5.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDate.Property property48 = localDate5.dayOfWeek();
        org.joda.time.LocalDate.Property property49 = localDate5.weekyear();
        int int50 = property49.getMinimumValueOverall();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate54 = localDate52.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology55 = localDate52.getChronology();
        int int56 = property49.compareTo((org.joda.time.ReadablePartial) localDate52);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate59 = localDate57.plusMonths((int) '4');
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(chronology60);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate65 = localDate63.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate67 = localDate65.minusWeeks((-1));
        boolean boolean68 = localDate61.isEqual((org.joda.time.ReadablePartial) localDate65);
        org.joda.time.LocalDate.Property property69 = localDate65.yearOfCentury();
        java.lang.String str70 = property69.getAsShortText();
        org.joda.time.LocalDate localDate71 = property69.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        int int73 = localDate71.indexOf(dateTimeFieldType72);
        org.joda.time.LocalDate.Property property74 = localDate71.dayOfWeek();
        java.lang.String str75 = property74.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = property74.getFieldType();
        org.joda.time.LocalDate.Property property77 = localDate57.property(dateTimeFieldType76);
        boolean boolean78 = localDate52.isSupported(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2019 + "'", int34 == 2019);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2019 + "'", int45 == 2019);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-292275054) + "'", int50 == (-292275054));
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1" + "'", str70, "1");
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Thursday" + "'", str75, "Thursday");
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.LocalDate localDate4 = localDate2.withWeekOfWeekyear(11);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    @Ignore
  public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate12.plusWeeks((-1));
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate19 = localDate16.withPeriodAdded(readablePeriod17, 1968);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate27 = localDate25.minusWeeks((-1));
        boolean boolean28 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.LocalDate.Property property29 = localDate25.yearOfCentury();
        boolean boolean30 = property29.isLeap();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate38 = localDate36.minusWeeks((-1));
        boolean boolean39 = localDate32.isEqual((org.joda.time.ReadablePartial) localDate36);
        org.joda.time.LocalDate.Property property40 = localDate32.year();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate44 = localDate42.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate46 = localDate44.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = localDate44.toDateTimeAtCurrentTime(dateTimeZone47);
        int int49 = property40.getDifference((org.joda.time.ReadableInstant) dateTime48);
        java.lang.String str50 = property40.getAsString();
        org.joda.time.LocalDate localDate52 = property40.addWrapFieldToCopy((int) ' ');
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(chronology53);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate58 = localDate56.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate60 = localDate58.minusWeeks((-1));
        boolean boolean61 = localDate54.isEqual((org.joda.time.ReadablePartial) localDate58);
        org.joda.time.LocalDate.Property property62 = localDate58.yearOfCentury();
        java.lang.String str63 = property62.getAsShortText();
        org.joda.time.LocalDate localDate64 = property62.withMaximumValue();
        java.lang.String str65 = localDate64.toString();
        org.joda.time.LocalDate localDate66 = localDate52.withFields((org.joda.time.ReadablePartial) localDate64);
        boolean boolean67 = property29.equals((java.lang.Object) localDate64);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalDate localDate72 = localDate69.withPeriodAdded(readablePeriod70, 0);
        org.joda.time.LocalDate localDate74 = localDate69.minusWeeks((int) (byte) -1);
        boolean boolean75 = localDate64.isBefore((org.joda.time.ReadablePartial) localDate69);
        org.joda.time.LocalDate localDate76 = localDate16.withFields((org.joda.time.ReadablePartial) localDate69);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2019 + "'", int49 == 2019);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2020" + "'", str50, "2020");
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0099-01-01" + "'", str65, "0099-01-01");
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(localDate76);
    }

    @Test
    @Ignore
  public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = localDate8.indexOf(dateTimeFieldType9);
        org.joda.time.LocalTime localTime11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate8.toDateTime(localTime11, dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate1.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        int int15 = localDate1.getDayOfWeek();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate1.plusDays((int) (short) 100);
        org.joda.time.LocalDate.Property property11 = localDate1.centuryOfEra();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property11.getAsText(locale12);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "20" + "'", str13, "20");
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 19);
    }

    @Test
    @Ignore
  public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = property9.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = localDate20.indexOf(dateTimeFieldType21);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology27 = localDate24.getChronology();
        int int28 = localDate20.compareTo((org.joda.time.ReadablePartial) localDate24);
        int int29 = localDate24.getDayOfYear();
        java.lang.String str30 = localDate24.toString();
        java.lang.String str32 = localDate24.toString("1");
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = localDate24.toDateMidnight(dateTimeZone33);
        org.joda.time.LocalDate.Property property35 = localDate24.year();
        org.joda.time.LocalDate localDate36 = localDate16.withFields((org.joda.time.ReadablePartial) localDate24);
        java.lang.String str37 = localDate24.toString();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        int int43 = localDate41.indexOf(dateTimeFieldType42);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology48 = localDate45.getChronology();
        int int49 = localDate41.compareTo((org.joda.time.ReadablePartial) localDate45);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate53 = localDate51.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = localDate53.indexOf(dateTimeFieldType54);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate59 = localDate57.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology60 = localDate57.getChronology();
        int int61 = localDate53.compareTo((org.joda.time.ReadablePartial) localDate57);
        int int62 = localDate53.size();
        boolean boolean63 = localDate45.isBefore((org.joda.time.ReadablePartial) localDate53);
        java.lang.String str65 = localDate53.toString("1970-01-01");
        boolean boolean66 = localDate24.isBefore((org.joda.time.ReadablePartial) localDate53);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date69 = localDate68.toDate();
        org.joda.time.LocalDate localDate70 = org.joda.time.LocalDate.fromDateFields(date69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDate localDate72 = localDate70.minus(readablePeriod71);
        org.joda.time.LocalDate.Property property73 = localDate72.dayOfWeek();
        org.joda.time.LocalDate localDate75 = localDate72.withWeekyear((int) (short) 0);
        java.util.Locale locale77 = null;
        java.lang.String str78 = localDate72.toString("2020-11-25", locale77);
        int int79 = localDate24.compareTo((org.joda.time.ReadablePartial) localDate72);
        org.joda.time.ReadablePartial readablePartial80 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean81 = localDate72.isBefore(readablePartial80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01" + "'", str30, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01" + "'", str37, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1970-01-01" + "'", str65, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2020-11-25" + "'", str78, "2020-11-25");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.getMaximumValue();
        java.util.Locale locale11 = null;
        int int12 = property9.getMaximumTextLength(locale11);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
    }

    @Test
    @Ignore
  public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((-1));
        boolean boolean14 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate17.year();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone32);
        int int34 = property25.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate40.minusWeeks((-1));
        boolean boolean43 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtMidnight();
        int int45 = property25.getDifference((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDate11.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = localDate5.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDate.Property property48 = localDate5.dayOfWeek();
        org.joda.time.LocalDate.Property property49 = localDate5.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate51 = localDate5.withDayOfWeek((int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2019 + "'", int34 == 2019);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2019 + "'", int45 == 2019);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("1969-12-31");
        org.junit.Assert.assertNotNull(localDate1);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType2 = localDate0.getFieldType(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
    }

    @Test
    @Ignore
  public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) date2, chronology7);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.fromDateFields(date2);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    @Ignore
  public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(99);
        int int7 = localDate4.getMonthOfYear();
        int int8 = localDate4.getWeekOfWeekyear();
        int int9 = localDate4.getDayOfWeek();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate15.minusWeeks((-1));
        boolean boolean18 = localDate11.isEqual((org.joda.time.ReadablePartial) localDate15);
        int int19 = localDate11.getYearOfCentury();
        org.joda.time.LocalDate localDate21 = localDate11.plusYears((-292275054));
        org.joda.time.DurationFieldType durationFieldType22 = null;
        boolean boolean23 = localDate11.isSupported(durationFieldType22);
        boolean boolean24 = localDate4.isBefore((org.joda.time.ReadablePartial) localDate11);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20 + "'", int19 == 20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.parse("1970", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear(52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = localDate3.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate4.minusDays((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate9 = localDate4.withPeriodAdded(readablePeriod7, 1983);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate1.plusDays((int) ' ');
        org.joda.time.LocalTime localTime11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate10.toDateTime(localTime11, dateTimeZone12);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        java.lang.String str7 = property6.toString();
        int int8 = property6.getMaximumValue();
        java.util.Locale locale9 = null;
        int int10 = property6.getMaximumShortTextLength(locale9);
        int int11 = property6.getMinimumValueOverall();
        int int12 = property6.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[monthOfYear]" + "'", str7, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate15.withWeekOfWeekyear(48);
        org.joda.time.LocalDate.Property property18 = localDate17.weekyear();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 330);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        long long12 = property9.remainder();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        boolean boolean10 = property9.isLeap();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = localDate14.indexOf(dateTimeFieldType15);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology21 = localDate18.getChronology();
        int int22 = localDate14.compareTo((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate.Property property23 = localDate14.weekOfWeekyear();
        int int24 = property9.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate localDate26 = localDate14.withCenturyOfEra(2021);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate11 = localDate5.withYearOfCentury((int) '#');
        int int12 = localDate11.getDayOfMonth();
        org.joda.time.LocalDate localDate14 = localDate11.minusYears(100);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = property9.addWrapFieldToCopy((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        org.joda.time.DurationField durationField7 = property6.getRangeDurationField();
        java.lang.String str8 = property6.getAsString();
        int int9 = property6.get();
        java.lang.String str10 = property6.getAsString();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        int int12 = property9.getMinimumValueOverall();
        org.joda.time.LocalDate localDate13 = property9.roundCeilingCopy();
        org.joda.time.DurationField durationField14 = property9.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = property9.setCopy("0099-01-01");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0099-01-01\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone1);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate3.getEra();
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = localDate3.getFields();
        org.joda.time.LocalDate.Property property14 = localDate3.monthOfYear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate12.plusWeeks((-1));
        org.joda.time.LocalDate localDate18 = localDate16.withCenturyOfEra(4);
        org.joda.time.LocalDate.Property property19 = localDate18.year();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate27 = localDate25.minusWeeks((-1));
        boolean boolean28 = localDate21.isEqual((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.LocalDate.Property property29 = localDate25.yearOfCentury();
        org.joda.time.LocalDate localDate31 = localDate25.withYearOfCentury((int) '#');
        boolean boolean32 = localDate18.isEqual((org.joda.time.ReadablePartial) localDate25);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 0, chronology6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 99, chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology16 = localDate13.getChronology();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 0, chronology16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 99, chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology16);
        int int20 = localDate9.compareTo((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.plusMonths((int) '4');
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        boolean boolean32 = localDate25.isEqual((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.LocalDate.Property property33 = localDate29.yearOfCentury();
        java.lang.String str34 = property33.getAsShortText();
        org.joda.time.LocalDate localDate36 = property33.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property37 = localDate36.weekOfWeekyear();
        boolean boolean38 = localDate21.isAfter((org.joda.time.ReadablePartial) localDate36);
        int int39 = localDate36.getCenturyOfEra();
        int int40 = localDate36.getDayOfMonth();
        org.joda.time.LocalDate.Property property41 = localDate36.weekOfWeekyear();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate49 = localDate47.minusWeeks((-1));
        boolean boolean50 = localDate43.isEqual((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.LocalDate localDate52 = localDate47.withYear((int) (short) 0);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.plusMonths((int) '4');
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology56);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate61 = localDate59.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate63 = localDate61.minusWeeks((-1));
        boolean boolean64 = localDate57.isEqual((org.joda.time.ReadablePartial) localDate61);
        org.joda.time.LocalDate.Property property65 = localDate61.yearOfCentury();
        java.lang.String str66 = property65.getAsShortText();
        org.joda.time.LocalDate localDate68 = property65.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property69 = localDate68.weekOfWeekyear();
        boolean boolean70 = localDate53.isAfter((org.joda.time.ReadablePartial) localDate68);
        int int71 = localDate68.getCenturyOfEra();
        org.joda.time.LocalDate.Property property72 = localDate68.dayOfMonth();
        org.joda.time.LocalDate localDate74 = localDate68.withYear((int) (short) 0);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate(chronology75);
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate80 = localDate78.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate82 = localDate80.minusWeeks((-1));
        boolean boolean83 = localDate76.isEqual((org.joda.time.ReadablePartial) localDate80);
        org.joda.time.LocalDate.Property property84 = localDate80.yearOfCentury();
        java.lang.String str85 = property84.getAsShortText();
        org.joda.time.LocalDate localDate86 = property84.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = null;
        int int88 = localDate86.indexOf(dateTimeFieldType87);
        org.joda.time.LocalDate.Property property89 = localDate86.dayOfWeek();
        java.lang.String str90 = property89.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = property89.getFieldType();
        boolean boolean92 = localDate68.isSupported(dateTimeFieldType91);
        int int93 = localDate47.get(dateTimeFieldType91);
        int int94 = localDate36.get(dateTimeFieldType91);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate96 = localDate9.withField(dateTimeFieldType91, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1" + "'", str66, "1");
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "1" + "'", str85, "1");
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Thursday" + "'", str90, "Thursday");
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        int[] intArray15 = localDate11.getValues();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDate localDate20 = localDate17.withPeriodAdded(readablePeriod18, 0);
        org.joda.time.LocalDate localDate22 = localDate20.minusDays((int) (byte) 100);
        int int23 = localDate11.compareTo((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DurationFieldType durationFieldType24 = null;
        boolean boolean25 = localDate22.isSupported(durationFieldType24);
        org.joda.time.DateTime dateTime26 = localDate22.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[99, 1, 1]");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    @Ignore
  public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((-1));
        boolean boolean13 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.LocalDate.Property property14 = localDate6.year();
        int int15 = property14.get();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = localDate19.indexOf(dateTimeFieldType20);
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate19.toDateTime(localTime22, dateTimeZone23);
        long long25 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        int int26 = property4.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalDate localDate27 = property4.withMinimumValue();
        org.joda.time.LocalDate localDate28 = property4.getLocalDate();
        java.util.Locale locale29 = null;
        java.lang.String str30 = property4.getAsShortText(locale29);
        org.joda.time.DurationField durationField31 = property4.getRangeDurationField();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2020 + "'", int15 == 2020);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2019L + "'", long25 == 2019L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "70" + "'", str30, "70");
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        int[] intArray15 = localDate11.getValues();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDate localDate20 = localDate17.withPeriodAdded(readablePeriod18, 0);
        org.joda.time.LocalDate localDate22 = localDate20.minusDays((int) (byte) 100);
        int int23 = localDate11.compareTo((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate localDate25 = localDate11.withCenturyOfEra(1968);
        int int26 = localDate11.getEra();
        int int28 = localDate11.getValue(0);
        int int29 = localDate11.getDayOfYear();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[99, 1, 1]");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 99 + "'", int28 == 99);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    @Ignore
  public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date5 = localDate4.toDate();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((java.lang.Object) date5, chronology10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(0L, chronology10);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (byte) 10, chronology10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) "1969-12-31", chronology10);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
    }

    @Test
    @Ignore
  public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate21 = localDate19.minusWeeks((-1));
        boolean boolean22 = localDate15.isEqual((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalDate.Property property23 = localDate15.year();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate29 = localDate27.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtCurrentTime(dateTimeZone30);
        int int32 = property23.getDifference((org.joda.time.ReadableInstant) dateTime31);
        long long33 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean34 = localDate2.equals((java.lang.Object) property12);
        org.joda.time.LocalDate localDate36 = localDate2.withCenturyOfEra((int) (short) 100);
        int int37 = localDate36.getYearOfEra();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2019 + "'", int32 == 2019);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10025 + "'", int37 == 10025);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property13 = localDate12.weekOfWeekyear();
        int int14 = property13.getMinimumValue();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property12.getAsText(locale13);
        org.joda.time.LocalDate localDate15 = property12.roundFloorCopy();
        org.joda.time.LocalDate.Property property16 = localDate15.era();
        java.util.Locale locale17 = null;
        int int18 = property16.getMaximumShortTextLength(locale17);
        org.joda.time.DurationField durationField19 = property16.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNull(durationField19);
    }

    @Test
    @Ignore
  public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        java.lang.String str7 = property6.toString();
        java.lang.String str8 = property6.getAsShortText();
        long long9 = property6.remainder();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date12 = localDate11.toDate();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology17 = localDate14.getChronology();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) date12, chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = localDate18.toDateMidnight(dateTimeZone19);
        long long21 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[monthOfYear]" + "'", str7, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Jan" + "'", str8, "Jan");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 604800000L + "'", long9 == 604800000L);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-23627L) + "'", long21 == (-23627L));
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        int int12 = property9.getMinimumValue();
        org.joda.time.DurationField durationField13 = property9.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        boolean boolean10 = property9.isLeap();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property9.getFieldType();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate5.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property11 = localDate5.year();
        org.joda.time.LocalDate localDate13 = property11.setCopy((int) 'a');
        java.util.Locale locale14 = null;
        java.lang.String str15 = property11.getAsText(locale14);
        org.joda.time.DurationField durationField16 = property11.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNull(durationField16);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.parse("-1", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        int int11 = property9.get();
        long long12 = property9.remainder();
        java.util.Locale locale13 = null;
        int int14 = property9.getMaximumShortTextLength(locale13);
        java.lang.String str15 = property9.toString();
        org.joda.time.LocalDate localDate16 = property9.getLocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfWeek();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = localDate16.toString(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2020 + "'", int11 == 2020);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 28425600000L + "'", long12 == 28425600000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[year]" + "'", str15, "Property[year]");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020-11-25" + "'", str19, "2020-11-25");
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate7.getDayOfYear();
        java.lang.String str13 = localDate7.toString();
        java.lang.String str15 = localDate7.toString("1");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDate7.getFieldTypes();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate5.withYear((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        boolean boolean19 = localDate12.isEqual((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate.Property property20 = localDate12.year();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology27 = localDate24.getChronology();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 0, chronology27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 99, chronology27);
        boolean boolean30 = localDate12.equals((java.lang.Object) 99);
        boolean boolean31 = localDate10.isEqual((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate33 = localDate12.plusYears(48);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDate33);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType3 = localDate1.getFieldType(52);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate localDate7 = localDate3.minusMonths(25);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfWeek();
        org.joda.time.LocalDate localDate10 = localDate7.minusDays((int) (byte) 10);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    @Ignore
  public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        java.lang.String str3 = localDate0.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int5 = localDate0.get(dateTimeFieldType4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2020-11-25" + "'", str3, "2020-11-25");
    }

    @Test
    @Ignore
  public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(99);
        int int7 = localDate4.getMonthOfYear();
        int int8 = localDate4.getWeekOfWeekyear();
        int int9 = localDate4.getDayOfWeek();
        java.util.Locale locale11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = localDate4.toString("yearOfCentury", locale11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: r");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
    }

    @Test
    @Ignore
  public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate23 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate24 = property9.withMaximumValue();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate24);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((-1));
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((int) (short) 100);
        boolean boolean12 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate.Property property13 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = localDate17.indexOf(dateTimeFieldType18);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology24 = localDate21.getChronology();
        int int25 = localDate17.compareTo((org.joda.time.ReadablePartial) localDate21);
        int int26 = localDate21.getDayOfYear();
        java.lang.String str27 = localDate21.toString();
        java.lang.String str29 = localDate21.toString("1");
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = localDate21.toDateMidnight(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = localDate0.toDateTime((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        int int38 = localDate36.indexOf(dateTimeFieldType37);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate42 = localDate40.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology43 = localDate40.getChronology();
        int int44 = localDate36.compareTo((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.LocalDate.Property property45 = localDate36.weekOfWeekyear();
        org.joda.time.LocalDate localDate47 = localDate36.withYearOfEra(2);
        org.joda.time.LocalDate localDate49 = localDate36.minusYears(100);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(chronology50);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate55 = localDate53.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate57 = localDate55.minusWeeks((-1));
        boolean boolean58 = localDate51.isEqual((org.joda.time.ReadablePartial) localDate55);
        org.joda.time.LocalDate.Property property59 = localDate55.yearOfCentury();
        org.joda.time.LocalDate localDate61 = localDate55.withYearOfCentury((int) '#');
        int int62 = localDate61.getDayOfMonth();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(chronology64);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate69 = localDate67.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate71 = localDate69.minusWeeks((-1));
        boolean boolean72 = localDate65.isEqual((org.joda.time.ReadablePartial) localDate69);
        org.joda.time.LocalDate localDate74 = localDate65.plusDays((int) (short) 100);
        boolean boolean75 = localDate63.isEqual((org.joda.time.ReadablePartial) localDate74);
        org.joda.time.LocalDate.Property property76 = localDate63.dayOfWeek();
        org.joda.time.LocalDate localDate77 = property76.getLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = property76.getFieldType();
        int int79 = localDate61.indexOf(dateTimeFieldType78);
        org.joda.time.LocalDate.Property property80 = localDate36.property(dateTimeFieldType78);
        int int81 = localDate0.indexOf(dateTimeFieldType78);
        org.joda.time.LocalDate.Property property82 = localDate0.dayOfMonth();
        java.lang.String str83 = property82.getName();
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01" + "'", str27, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "dayOfMonth" + "'", str83, "dayOfMonth");
    }

    @Test
    @Ignore
  public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((-1));
        boolean boolean14 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate17.year();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone32);
        int int34 = property25.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate40.minusWeeks((-1));
        boolean boolean43 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtMidnight();
        int int45 = property25.getDifference((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDate11.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = localDate5.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDate.Property property48 = localDate5.dayOfWeek();
        org.joda.time.LocalDate.Property property49 = localDate5.weekyear();
        org.joda.time.LocalDate localDate51 = localDate5.plusYears((int) (byte) 10);
        org.joda.time.LocalDate.Property property52 = localDate5.dayOfWeek();
        org.joda.time.LocalDate localDate53 = property52.withMinimumValue();
        org.joda.time.LocalTime localTime54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime55 = localDate53.toLocalDateTime(localTime54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The time must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2019 + "'", int34 == 2019);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2019 + "'", int45 == 2019);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate53);
    }

    @Test
    @Ignore
  public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        boolean boolean19 = localDate12.isEqual((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate.Property property20 = localDate12.year();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate26 = localDate24.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtCurrentTime(dateTimeZone27);
        int int29 = property20.getDifference((org.joda.time.ReadableInstant) dateTime28);
        long long30 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalDate localDate31 = property9.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTimeAtCurrentTime(dateTimeZone32);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2019 + "'", int29 == 2019);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    @Ignore
  public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy((int) (short) 10);
        java.util.Locale locale15 = null;
        java.lang.String str16 = property9.getAsShortText(locale15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((java.lang.Object) locale15);
        org.joda.time.LocalDate localDate19 = localDate17.withYear(1);
        org.joda.time.LocalDate.Property property20 = localDate17.centuryOfEra();
        java.util.Date date21 = localDate17.toDate();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Nov 25 00:00:00 UTC 2020");
    }

    @Test
    @Ignore
  public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) date2, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = localDate8.toDateMidnight(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = localDate14.indexOf(dateTimeFieldType15);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology21 = localDate18.getChronology();
        int int22 = localDate14.compareTo((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = localDate18.toDateMidnight(dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate18.minusYears((int) ' ');
        boolean boolean27 = localDate8.isBefore((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate33 = localDate31.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate35 = localDate33.minusWeeks((-1));
        boolean boolean36 = localDate29.isEqual((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.LocalDate.Property property37 = localDate33.yearOfCentury();
        java.lang.String str38 = property37.getAsShortText();
        org.joda.time.LocalDate localDate40 = property37.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate42 = property37.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date45 = localDate44.toDate();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate49 = localDate47.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology50 = localDate47.getChronology();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((java.lang.Object) date45, chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = localDate51.toDateMidnight(dateTimeZone52);
        org.joda.time.LocalDate.Property property54 = localDate51.weekOfWeekyear();
        org.joda.time.LocalDate localDate55 = property54.roundHalfEvenCopy();
        boolean boolean56 = localDate42.isBefore((org.joda.time.ReadablePartial) localDate55);
        org.joda.time.LocalDate localDate58 = localDate42.minusYears((int) '4');
        boolean boolean59 = localDate18.isBefore((org.joda.time.ReadablePartial) localDate42);
        org.joda.time.LocalDate.Property property60 = localDate18.dayOfMonth();
        org.joda.time.LocalDate localDate62 = localDate18.withYearOfEra(31);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDate62);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.LocalDate localDate15 = property12.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property16 = localDate15.weekOfWeekyear();
        boolean boolean17 = localDate0.isAfter((org.joda.time.ReadablePartial) localDate15);
        int int18 = localDate15.getCenturyOfEra();
        int int19 = localDate15.getDayOfMonth();
        org.joda.time.LocalDate.Property property20 = localDate15.weekOfWeekyear();
        int int21 = property20.get();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    @Ignore
  public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        org.joda.time.LocalDate localDate12 = property9.addToCopy((-1));
        org.joda.time.LocalDate localDate14 = localDate12.withMonthOfYear(11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = localDate12.withDayOfWeek(10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 10 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate4.minusDays((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    @Ignore
  public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((-1));
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((int) (short) 100);
        boolean boolean12 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate.Property property13 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property13.getFieldType();
        int int16 = property13.get();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = property13.setCopy((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate3.getEra();
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = localDate3.getFields();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate19 = localDate17.minusWeeks((-1));
        org.joda.time.LocalDate localDate21 = localDate17.minusMonths(25);
        org.joda.time.LocalDate localDate23 = localDate21.minusDays(1);
        int int24 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate23);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    @Ignore
  public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfCentury();
        java.util.Locale locale5 = null;
        int int6 = property4.getMaximumTextLength(locale5);
        int int7 = property4.getMinimumValue();
        org.joda.time.LocalDate localDate8 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate9 = property4.withMinimumValue();
        java.util.Locale locale10 = null;
        int int11 = property4.getMaximumShortTextLength(locale10);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int9 = localDate5.getYearOfEra();
        int int10 = localDate5.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        boolean boolean19 = localDate12.isEqual((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate.Property property20 = localDate16.yearOfCentury();
        java.lang.String str21 = property20.getAsShortText();
        org.joda.time.LocalDate localDate23 = property20.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate25 = property20.addToCopy((int) (short) 1);
        int int26 = property20.getLeapAmount();
        boolean boolean27 = localDate5.equals((java.lang.Object) property20);
        org.joda.time.LocalDate localDate29 = localDate5.withWeekyear(1970);
        org.joda.time.LocalDate localDate31 = localDate29.plusDays((int) '4');
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate37 = localDate35.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate39 = localDate37.minusWeeks((-1));
        boolean boolean40 = localDate33.isEqual((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.LocalDate localDate42 = localDate37.withYear((int) (short) 0);
        boolean boolean43 = localDate31.isBefore((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.LocalTime localTime44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime45 = localDate37.toLocalDateTime(localTime44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The time must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    @Ignore
  public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) date2, chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = localDate8.toDateMidnight(dateTimeZone9);
        org.joda.time.LocalDate.Property property11 = localDate8.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate8.toDateTimeAtMidnight(dateTimeZone12);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    @Ignore
  public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfWeek();
        org.joda.time.LocalDate localDate8 = localDate5.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((java.lang.Object) localDate8);
        int int10 = localDate8.getDayOfWeek();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate7.getDayOfYear();
        java.lang.String str13 = localDate7.toString();
        java.lang.String str15 = localDate7.toString("1");
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = localDate7.toDateMidnight(dateTimeZone16);
        org.joda.time.LocalDate.Property property18 = localDate7.year();
        org.joda.time.Interval interval19 = property18.toInterval();
        org.joda.time.LocalDate localDate20 = property18.getLocalDate();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        int int13 = property12.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate18 = localDate15.minus(readablePeriod17);
        org.joda.time.LocalDate localDate20 = localDate15.plusWeeks(99);
        org.joda.time.LocalDate.Property property21 = localDate15.dayOfMonth();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    @Ignore
  public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date4 = localDate3.toDate();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology9 = localDate6.getChronology();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) date4, chronology9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(0L, chronology9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (byte) 10, chronology9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate20 = localDate18.minusWeeks((-1));
        boolean boolean21 = localDate14.isEqual((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate localDate23 = localDate14.plusDays((int) (short) 100);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date26 = localDate25.toDate();
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.fromDateFields(date26);
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfCentury();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate36 = localDate34.minusWeeks((-1));
        boolean boolean37 = localDate30.isEqual((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.LocalDate.Property property38 = localDate30.year();
        int int39 = property38.get();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate43 = localDate41.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        int int45 = localDate43.indexOf(dateTimeFieldType44);
        org.joda.time.LocalTime localTime46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = localDate43.toDateTime(localTime46, dateTimeZone47);
        long long49 = property38.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime48);
        int int50 = property28.compareTo((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean51 = localDate23.equals((java.lang.Object) dateTime48);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate56 = localDate54.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology57 = localDate54.getChronology();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 4, chronology57);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((java.lang.Object) dateTime48, chronology57);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) localDate12, chronology57);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(chronology57);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2020 + "'", int39 == 2020);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 2019L + "'", long49 == 2019L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(chronology57);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        int int5 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate localDate7 = localDate1.minusDays((int) ' ');
        org.joda.time.LocalDate localDate9 = localDate7.withWeekyear((int) (byte) 1);
        int int10 = localDate9.getMonthOfYear();
        int int11 = localDate9.getEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    @Ignore
  public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear(52);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date8 = localDate7.toDate();
        java.util.Locale locale10 = null;
        java.lang.String str11 = localDate7.toString("2020", locale10);
        org.joda.time.Chronology chronology12 = localDate7.getChronology();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) localDate3, chronology12);
        java.util.Locale locale15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = localDate13.toString("Jan", locale15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: J");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2020" + "'", str11, "2020");
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    @Ignore
  public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((-1));
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((int) (short) 100);
        boolean boolean12 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate11);
        int int13 = localDate11.getWeekOfWeekyear();
        int int14 = localDate11.getYear();
        org.joda.time.LocalDate.Property property15 = localDate11.monthOfYear();
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2021 + "'", int14 == 2021);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    @Ignore
  public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate26 = localDate24.minusWeeks((-1));
        boolean boolean27 = localDate20.isEqual((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtMidnight();
        int int29 = property9.getDifference((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalDate localDate30 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate32 = property9.setCopy((-2019));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2019 + "'", int29 == 2019);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 292278993, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((java.lang.Object) dateTimeZone1, chronology5);
        org.joda.time.LocalDate localDate8 = localDate6.plusWeeks(25);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate7.getDayOfYear();
        java.lang.String str13 = localDate7.toString();
        java.lang.String str15 = localDate7.toString("1");
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = localDate7.toDateMidnight(dateTimeZone16);
        org.joda.time.LocalDate.Property property18 = localDate7.year();
        int int19 = localDate7.getDayOfWeek();
        int int20 = localDate7.getYearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = localDate7.toString(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
    }

    @Test
    @Ignore
  public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date3 = localDate2.toDate();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate7 = localDate5.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology8 = localDate5.getChronology();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((java.lang.Object) date3, chronology8);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(chronology8);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(2019L, chronology8);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        int int15 = localDate13.getDayOfMonth();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 25 + "'", int15 == 25);
    }

    @Test
    @Ignore
  public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = localDate1.minusWeeks((int) (byte) 10);
        int int12 = localDate11.getWeekOfWeekyear();
        int int13 = localDate11.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 38 + "'", int12 == 38);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
    }

    @Test
    @Ignore
  public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate23 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate25 = property9.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = localDate29.indexOf(dateTimeFieldType30);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology36 = localDate33.getChronology();
        int int37 = localDate29.compareTo((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = localDate33.toDateMidnight(dateTimeZone38);
        org.joda.time.LocalDate localDate41 = localDate33.minusYears((int) ' ');
        org.joda.time.LocalDate.Property property42 = localDate41.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDate localDate44 = localDate41.minus(readablePeriod43);
        org.joda.time.LocalDate localDate46 = localDate41.plusWeeks(99);
        boolean boolean47 = localDate25.equals((java.lang.Object) localDate46);
        org.joda.time.LocalDate.Property property48 = localDate46.dayOfMonth();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("AD");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"AD\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.LocalDate localDate4 = localDate2.plusWeeks((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDate4.toString(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2025-06-03" + "'", str6, "2025-06-03");
    }

    @Test
    @Ignore
  public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        int int9 = localDate1.getYearOfCentury();
        int int10 = localDate1.getEra();
        int int11 = localDate1.getWeekyear();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2020 + "'", int11 == 2020);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTime(localTime2);
        java.lang.String str5 = localDate1.toString("1970-01-01");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = localDate1.withWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
    }

    @Test
    @Ignore
  public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.DateTime dateTime6 = localDate3.toDateTimeAtCurrentTime();
        int int7 = localDate3.getYearOfEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        boolean boolean16 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate.Property property17 = localDate9.year();
        org.joda.time.LocalDate localDate19 = localDate9.minusWeeks((int) (byte) 10);
        int int20 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate9);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = localDate3.getValue(19);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 19");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.Interval interval17 = localDate15.toInterval();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate5.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property11 = localDate5.year();
        org.joda.time.LocalDate localDate13 = property11.setCopy((int) 'a');
        org.joda.time.LocalDate localDate15 = property11.addToCopy(48);
        java.lang.String str16 = property11.getName();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "year" + "'", str16, "year");
    }

    @Test
    @Ignore
  public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate15.withWeekOfWeekyear(48);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date20 = localDate19.toDate();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology25 = localDate22.getChronology();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) date20, chronology25);
        java.util.Date date27 = localDate26.toDate();
        org.joda.time.LocalDate.Property property28 = localDate26.era();
        org.joda.time.LocalDate.Property property29 = localDate26.dayOfMonth();
        boolean boolean30 = localDate17.equals((java.lang.Object) property29);
        org.joda.time.LocalDate.Property property31 = localDate17.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) property31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    @Ignore
  public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((-1));
        boolean boolean14 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate17.year();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone32);
        int int34 = property25.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate40.minusWeeks((-1));
        boolean boolean43 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtMidnight();
        int int45 = property25.getDifference((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDate11.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = localDate5.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDate.Property property48 = localDate5.dayOfWeek();
        org.joda.time.LocalDate.Property property49 = localDate5.weekyear();
        org.joda.time.LocalDate localDate51 = localDate5.plusYears((int) (byte) 10);
        org.joda.time.LocalDate.Property property52 = localDate5.dayOfWeek();
        java.lang.String str53 = property52.toString();
        java.lang.String str54 = property52.getAsText();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2019 + "'", int34 == 2019);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2019 + "'", int45 == 2019);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Property[dayOfWeek]" + "'", str53, "Property[dayOfWeek]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Thursday" + "'", str54, "Thursday");
    }

    @Test
    @Ignore
  public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) date2, chronology7);
        java.util.Date date9 = localDate8.toDate();
        org.joda.time.LocalDate.Property property10 = localDate8.era();
        org.joda.time.LocalDate.Property property11 = localDate8.dayOfMonth();
        org.joda.time.LocalDate localDate12 = property11.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate13 = property11.roundHalfEvenCopy();
        org.joda.time.DurationField durationField14 = property11.getRangeDurationField();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTime(localTime2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = localDate1.toDateMidnight(dateTimeZone4);
        org.joda.time.LocalDate localDate7 = localDate1.withDayOfWeek(4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = localDate7.withEra((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    @Ignore
  public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate4.minusDays((int) (byte) 100);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.year();
        org.joda.time.LocalDate localDate9 = localDate4.withFields((org.joda.time.ReadablePartial) localDate7);
        int int11 = localDate9.getValue(0);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate14 = localDate9.withPeriodAdded(readablePeriod12, (int) (short) 1);
        org.joda.time.DateTime dateTime15 = localDate9.toDateTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate17 = localDate9.withYearOfEra((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2020 + "'", int11 == 2020);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        org.joda.time.LocalDate localDate16 = property14.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.plusMonths((int) '4');
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate29 = localDate27.minusWeeks((-1));
        boolean boolean30 = localDate23.isEqual((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.LocalDate.Property property31 = localDate27.yearOfCentury();
        java.lang.String str32 = property31.getAsShortText();
        org.joda.time.LocalDate localDate34 = property31.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property35 = localDate34.weekOfWeekyear();
        boolean boolean36 = localDate19.isAfter((org.joda.time.ReadablePartial) localDate34);
        int int37 = localDate34.getCenturyOfEra();
        int int38 = localDate34.getDayOfMonth();
        boolean boolean39 = localDate16.isBefore((org.joda.time.ReadablePartial) localDate34);
        int int40 = localDate16.getEra();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    @Ignore
  public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = property9.addWrapFieldToCopy((int) '#');
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate24 = localDate22.minusWeeks((-1));
        boolean boolean25 = localDate18.isEqual((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate.Property property26 = localDate18.year();
        int int27 = property26.get();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = localDate31.indexOf(dateTimeFieldType32);
        org.joda.time.LocalTime localTime34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate31.toDateTime(localTime34, dateTimeZone35);
        long long37 = property26.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime36);
        int int38 = property9.getDifference((org.joda.time.ReadableInstant) dateTime36);
        int int39 = property9.getMinimumValueOverall();
        java.util.Locale locale40 = null;
        int int41 = property9.getMaximumShortTextLength(locale40);
        java.util.Locale locale43 = null;
        org.joda.time.LocalDate localDate44 = property9.setCopy("70", locale43);
        org.joda.time.LocalDate.Property property45 = localDate44.yearOfCentury();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2020 + "'", int27 == 2020);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2019L + "'", long37 == 2019L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate12.plusWeeks((-1));
        org.joda.time.LocalDate localDate18 = localDate16.withCenturyOfEra(4);
        int int19 = localDate16.getEra();
        java.lang.Class<?> wildcardClass20 = localDate16.getClass();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate5.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property11 = localDate5.year();
        org.joda.time.LocalDate localDate13 = property11.setCopy((int) 'a');
        org.joda.time.LocalDate localDate15 = property11.addToCopy(48);
        org.joda.time.LocalDate localDate16 = property11.getLocalDate();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 292278993, dateTimeZone4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.Chronology chronology8 = localDate7.getChronology();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((java.lang.Object) dateTimeZone4, chronology8);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(chronology8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((int) (byte) -1, (int) (short) -1, 2019, chronology8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        org.joda.time.LocalDate.Property property5 = localDate1.yearOfEra();
        org.joda.time.LocalDate localDate7 = localDate1.minusMonths(19);
        org.joda.time.LocalDate.Property property8 = localDate1.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate16 = localDate14.minusWeeks((-1));
        boolean boolean17 = localDate10.isEqual((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate.Property property18 = localDate14.yearOfCentury();
        java.lang.String str19 = property18.getAsShortText();
        org.joda.time.LocalDate localDate21 = property18.addWrapFieldToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Interval interval23 = localDate21.toInterval(dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = localDate21.isSupported(dateTimeFieldType24);
        int int26 = localDate21.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate29 = localDate21.withPeriodAdded(readablePeriod27, 99);
        boolean boolean31 = localDate29.equals((java.lang.Object) 0.0f);
        boolean boolean32 = localDate1.isAfter((org.joda.time.ReadablePartial) localDate29);
        int int33 = localDate29.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = localDate29.toDateTimeAtMidnight(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    @Ignore
  public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate21 = localDate19.minusWeeks((-1));
        boolean boolean22 = localDate15.isEqual((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalDate.Property property23 = localDate15.year();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate29 = localDate27.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtCurrentTime(dateTimeZone30);
        int int32 = property23.getDifference((org.joda.time.ReadableInstant) dateTime31);
        long long33 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean34 = localDate2.equals((java.lang.Object) property12);
        org.joda.time.LocalDate localDate36 = localDate2.withCenturyOfEra((int) (short) 100);
        org.joda.time.LocalDate.Property property37 = localDate2.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate39 = property37.setCopy("weekyear");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"weekyear\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2019 + "'", int32 == 2019);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((-1));
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((int) (short) 100);
        boolean boolean12 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate11);
        int int13 = localDate11.getEra();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = localDate11.toString("dayOfMonth");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: O");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate localDate7 = localDate3.minusMonths(25);
        org.joda.time.LocalDate localDate9 = localDate7.minusDays(1);
        java.lang.String str10 = localDate9.toString();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-0002-11-30" + "'", str10, "-0002-11-30");
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDate.Property property15 = localDate14.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property15.getFieldType();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate14 = property9.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate16 = localDate14.withMonthOfYear(10);
        int int17 = localDate14.getWeekyear();
        org.joda.time.LocalDate localDate19 = localDate14.withYear(13);
        org.joda.time.LocalDate localDate21 = localDate14.minusWeeks(2021);
        org.joda.time.LocalDate localDate23 = localDate14.withDayOfMonth(1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        boolean boolean32 = localDate25.isEqual((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.LocalDate localDate34 = localDate29.withYear((int) (short) 0);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate40 = localDate38.minusWeeks((-1));
        org.joda.time.LocalDate localDate42 = localDate38.minusMonths(25);
        org.joda.time.LocalDate localDate44 = localDate42.minusDays(1);
        org.joda.time.LocalDate localDate45 = localDate34.withFields((org.joda.time.ReadablePartial) localDate44);
        org.joda.time.DurationFieldType durationFieldType46 = null;
        boolean boolean47 = localDate44.isSupported(durationFieldType46);
        org.joda.time.LocalDate localDate49 = localDate44.plusDays((-2019));
        org.joda.time.LocalDate localDate50 = localDate23.withFields((org.joda.time.ReadablePartial) localDate49);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate50);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate4 = localDate1.withPeriodAdded(readablePeriod2, 0);
        org.joda.time.LocalDate localDate6 = localDate1.minusWeeks((int) (byte) -1);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate6.withCenturyOfEra((int) '#');
        org.joda.time.LocalDate localDate12 = localDate6.withWeekyear(4);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        org.joda.time.LocalDate.Property property5 = localDate1.yearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((-1));
        boolean boolean14 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate.Property property15 = localDate11.yearOfCentury();
        java.lang.String str16 = property15.getAsShortText();
        org.joda.time.LocalDate localDate18 = property15.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate20 = property15.addToCopy((int) (short) 1);
        org.joda.time.LocalDate.Property property21 = localDate20.weekOfWeekyear();
        org.joda.time.LocalDate localDate22 = property21.roundFloorCopy();
        int int23 = property5.compareTo((org.joda.time.ReadablePartial) localDate22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    @Ignore
  public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate1.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusMonths(99);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = localDate10.indexOf(dateTimeFieldType11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology17 = localDate14.getChronology();
        int int18 = localDate10.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = localDate14.toDateMidnight(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate14.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate14.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.LocalDate localDate25 = localDate4.withFields((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate.Property property26 = localDate4.era();
        java.util.Locale locale27 = null;
        int int28 = property26.getMaximumTextLength(locale27);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        int int11 = property9.getMaximumValue();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 99 + "'", int11 == 99);
    }

    @Test
    @Ignore
  public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property12 = localDate3.weekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate3.withYearOfEra(2);
        org.joda.time.LocalDate localDate16 = localDate3.minusYears(100);
        java.util.Date date17 = localDate16.toDate();
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.fromDateFields(date17);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Jan 01 00:00:00 UTC 100");
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((-1));
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((int) (short) 100);
        boolean boolean12 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate11);
        int int13 = localDate11.getEra();
        int int14 = localDate11.getYear();
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2021 + "'", int14 == 2021);
    }

    @Test
    @Ignore
  public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.minus(readablePeriod4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((-1));
        boolean boolean14 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((-1));
        boolean boolean24 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property25 = localDate17.year();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone32);
        int int34 = property25.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate40.minusWeeks((-1));
        boolean boolean43 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtMidnight();
        int int45 = property25.getDifference((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDate11.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = localDate5.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDate.Property property48 = localDate5.dayOfWeek();
        org.joda.time.LocalDate.Property property49 = localDate5.weekyear();
        org.joda.time.LocalDate localDate51 = localDate5.plusYears((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate53 = localDate5.withYearOfCentury(10025);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 10025 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2019 + "'", int34 == 2019);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2019 + "'", int45 == 2019);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate51);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(7, 99, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 99 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        int int12 = localDate7.getDayOfYear();
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = localDate7.getFields();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.parse("1969-12-31", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate10 = localDate5.withYear((int) (short) 0);
        org.joda.time.LocalDate.Property property11 = localDate5.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.LocalDate localDate13 = property11.roundCeilingCopy();
        org.joda.time.DurationField durationField14 = property11.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNull(durationField14);
    }

    @Test
    @Ignore
  public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone16);
        int int18 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = property9.getAsString();
        org.joda.time.LocalDate localDate21 = property9.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate22 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate23 = property9.withMaximumValue();
        int int24 = localDate23.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date27 = localDate26.toDate();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate29 = localDate26.minus(readablePeriod28);
        boolean boolean30 = localDate23.isBefore((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.LocalDate.Property property31 = localDate23.yearOfEra();
        long long32 = property31.remainder();
        org.joda.time.DurationField durationField33 = property31.getLeapDurationField();
        java.lang.String str34 = property31.getAsString();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2019 + "'", int18 == 2019);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020" + "'", str19, "2020");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 48 + "'", int24 == 48);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 28339200000L + "'", long32 == 28339200000L);
        org.junit.Assert.assertNull(durationField33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "292278993" + "'", str34, "292278993");
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate15.withWeekOfWeekyear(48);
        org.joda.time.LocalDate localDate19 = localDate17.minusWeeks(16);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.LocalDate localDate17 = localDate7.minusYears(3);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = localDate7.toDateMidnight(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateMidnight19);
    }

    @Test
    @Ignore
  public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate1.year();
        int int10 = property9.get();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        int int12 = property9.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField13 = property9.getField();
        org.joda.time.LocalDate localDate14 = property9.withMinimumValue();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate22 = localDate20.minusWeeks((-1));
        boolean boolean23 = localDate16.isEqual((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate.Property property24 = localDate20.yearOfCentury();
        java.lang.String str25 = property24.getAsShortText();
        org.joda.time.LocalDate localDate27 = property24.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate29 = property24.addToCopy((int) (short) 1);
        org.joda.time.LocalDate.Property property30 = localDate29.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property30.getFieldType();
        boolean boolean32 = property9.equals((java.lang.Object) property30);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2020 + "'", int10 == 2020);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 292278993 + "'", int12 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    @Ignore
  public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.year();
        int int2 = localDate0.getYear();
        int int3 = localDate0.getEra();
        org.joda.time.DurationFieldType durationFieldType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate6 = localDate0.withFieldAdded(durationFieldType4, 2021);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2020 + "'", int2 == 2020);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.LocalDate.Property property8 = localDate3.yearOfEra();
        org.joda.time.LocalDate localDate9 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.parse("0001-01-01");
        org.joda.time.LocalDate localDate13 = localDate11.plusMonths(31);
        org.joda.time.LocalTime localTime14 = null;
        org.joda.time.DateTime dateTime15 = localDate11.toDateTime(localTime14);
        int int16 = property8.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        boolean boolean10 = property9.isLeap();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = localDate14.indexOf(dateTimeFieldType15);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology21 = localDate18.getChronology();
        int int22 = localDate14.compareTo((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate.Property property23 = localDate14.weekOfWeekyear();
        int int24 = property9.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate localDate25 = property9.roundCeilingCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = localDate25.getFields();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
    }

    @Test
    @Ignore
  public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDate1.getChronology();
        int int5 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate localDate7 = localDate1.minusDays((int) ' ');
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date10 = localDate9.toDate();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.fromDateFields(date10);
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate20 = localDate18.minusWeeks((-1));
        boolean boolean21 = localDate14.isEqual((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate.Property property22 = localDate14.year();
        int int23 = property22.get();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        int int29 = localDate27.indexOf(dateTimeFieldType28);
        org.joda.time.LocalTime localTime30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = localDate27.toDateTime(localTime30, dateTimeZone31);
        long long33 = property22.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime32);
        int int34 = property12.compareTo((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.LocalDate localDate35 = property12.withMinimumValue();
        org.joda.time.LocalDate localDate37 = localDate35.withYearOfEra((int) ' ');
        org.joda.time.LocalDate localDate38 = localDate7.withFields((org.joda.time.ReadablePartial) localDate35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate40 = localDate7.withEra((int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2020 + "'", int23 == 2020);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 2019L + "'", long33 == 2019L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate38);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.minusWeeks((-1));
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((int) (short) 100);
        boolean boolean12 = localDate0.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate.Property property13 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = localDate17.indexOf(dateTimeFieldType18);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology24 = localDate21.getChronology();
        int int25 = localDate17.compareTo((org.joda.time.ReadablePartial) localDate21);
        int int26 = localDate21.getDayOfYear();
        java.lang.String str27 = localDate21.toString();
        java.lang.String str29 = localDate21.toString("1");
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = localDate21.toDateMidnight(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = localDate0.toDateTime((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate38 = localDate36.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = localDate0.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01" + "'", str27, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) '4');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((-1));
        boolean boolean11 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.LocalDate localDate15 = property12.addWrapFieldToCopy(0);
        org.joda.time.LocalDate.Property property16 = localDate15.weekOfWeekyear();
        boolean boolean17 = localDate0.isAfter((org.joda.time.ReadablePartial) localDate15);
        int int18 = localDate15.getCenturyOfEra();
        int int19 = localDate15.getDayOfMonth();
        org.joda.time.LocalDate.Property property20 = localDate15.weekOfWeekyear();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) localDate15);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    @Ignore
  public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks((-1));
        boolean boolean19 = localDate12.isEqual((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate.Property property20 = localDate12.year();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate26 = localDate24.minusWeeks((-1));
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtCurrentTime(dateTimeZone27);
        int int29 = property20.getDifference((org.joda.time.ReadableInstant) dateTime28);
        long long30 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalDate localDate31 = property9.roundHalfFloorCopy();
        long long32 = property9.remainder();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2019 + "'", int29 == 2019);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate7.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DurationFieldType durationFieldType18 = null;
        boolean boolean19 = localDate7.isSupported(durationFieldType18);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks((-1));
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        java.lang.String str7 = property6.toString();
        int int8 = property6.getMaximumValue();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate16 = localDate14.minusWeeks((-1));
        boolean boolean17 = localDate10.isEqual((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate.Property property18 = localDate14.yearOfCentury();
        java.lang.String str19 = property18.getAsShortText();
        org.joda.time.LocalDate localDate20 = property18.withMaximumValue();
        org.joda.time.LocalDate localDate21 = property18.roundFloorCopy();
        org.joda.time.LocalDate localDate23 = property18.addWrapFieldToCopy(19);
        boolean boolean24 = property6.equals((java.lang.Object) property18);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property6.getFieldType();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[monthOfYear]" + "'", str7, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = localDate11.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfWeek();
        int int15 = localDate11.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks((-1));
        boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property9 = localDate5.yearOfCentury();
        boolean boolean10 = property9.isLeap();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = localDate14.indexOf(dateTimeFieldType15);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology21 = localDate18.getChronology();
        int int22 = localDate14.compareTo((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate.Property property23 = localDate14.weekOfWeekyear();
        int int24 = property9.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate localDate25 = property9.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField26 = property9.getField();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    @Ignore
  public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        java.util.Date date2 = localDate1.toDate();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.plus(readablePeriod4);
        int int6 = localDate5.getDayOfMonth();
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = localDate3.indexOf(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate7.minusYears((int) ' ');
        org.joda.time.LocalDate localDate17 = localDate7.minusYears(3);
        org.joda.time.LocalTime localTime18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDate7.toLocalDateTime(localTime18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The time must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
    }
}


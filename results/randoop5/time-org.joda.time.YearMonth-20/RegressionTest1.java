import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        int int11 = property4.getMinimumValueOverall();
        int int12 = property4.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField13 = property4.getField();
        int int14 = property4.getMinimumValue();
        java.util.Locale locale15 = null;
        java.lang.String str16 = property4.getAsText(locale15);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        int int53 = yearMonth50.size();
        org.joda.time.YearMonth yearMonth55 = yearMonth50.plusMonths((int) (byte) 10);
        int int56 = property46.compareTo((org.joda.time.ReadablePartial) yearMonth50);
        boolean boolean57 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth50);
        int[] intArray58 = yearMonth3.getValues();
        java.lang.String str60 = yearMonth3.toString("0097-09");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[97, 10]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0097-09" + "'", str60, "0097-09");
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth3.getFieldTypes();
        int[] intArray10 = yearMonth3.getValues();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        int int25 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.Chronology chronology26 = yearMonth19.getChronology();
        org.joda.time.YearMonth yearMonth27 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth28 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3, chronology26);
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth(0L);
        java.lang.String str32 = yearMonth31.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        boolean boolean46 = yearMonth38.isAfter((org.joda.time.ReadablePartial) yearMonth42);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth.Property property51 = yearMonth50.monthOfYear();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology54);
        org.joda.time.YearMonth yearMonth57 = yearMonth55.minusYears((int) (short) 0);
        int int58 = yearMonth55.size();
        org.joda.time.YearMonth yearMonth60 = yearMonth55.plusMonths((int) (byte) 10);
        int int61 = property51.compareTo((org.joda.time.ReadablePartial) yearMonth55);
        org.joda.time.Chronology chronology62 = yearMonth55.getChronology();
        org.joda.time.YearMonth yearMonth63 = yearMonth42.withChronologyRetainFields(chronology62);
        org.joda.time.YearMonth yearMonth65 = yearMonth42.withYear((int) (byte) 1);
        boolean boolean66 = yearMonth31.isEqual((org.joda.time.ReadablePartial) yearMonth65);
        boolean boolean67 = yearMonth3.isAfter((org.joda.time.ReadablePartial) yearMonth31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType69 = yearMonth31.getFieldType((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[97, 10]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01" + "'", str32, "1970-01");
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.Chronology chronology8 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(obj0, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.withYear((int) (byte) 0);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonth11);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(100, 9);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        int int8 = property4.getMaximumValueOverall();
        int int9 = property4.getMinimumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = yearMonth2.getChronology();
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth(12, 9, chronology3);
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth(chronology3);
        org.joda.time.YearMonth.Property property6 = yearMonth5.monthOfYear();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        org.joda.time.YearMonth yearMonth13 = property4.addToCopy(3);
        java.lang.String str14 = property4.getAsString();
        java.util.Locale locale15 = null;
        java.lang.String str16 = property4.getAsShortText(locale15);
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        java.lang.String str18 = property4.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property4.getAsText(locale19);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Oct" + "'", str16, "Oct");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "October" + "'", str20, "October");
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth yearMonth9 = yearMonth7.minusYears((int) (short) 0);
        int int10 = yearMonth7.size();
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        boolean boolean27 = yearMonth19.isAfter((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Interval interval28 = yearMonth19.toInterval();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = yearMonth32.indexOf(dateTimeFieldType38);
        org.joda.time.Interval interval40 = yearMonth32.toInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        int int46 = property45.getMaximumValue();
        java.lang.String str47 = property45.getAsShortText();
        java.util.Locale locale48 = null;
        java.lang.String str49 = property45.getAsShortText(locale48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property45.getFieldType();
        int int51 = yearMonth32.get(dateTimeFieldType50);
        org.joda.time.YearMonth.Property property52 = yearMonth19.property(dateTimeFieldType50);
        boolean boolean53 = yearMonth13.isSupported(dateTimeFieldType50);
        org.joda.time.YearMonth yearMonth55 = yearMonth7.withField(dateTimeFieldType50, (int) (short) 10);
        boolean boolean56 = yearMonth3.isBefore((org.joda.time.ReadablePartial) yearMonth7);
        java.util.Locale locale58 = null;
        java.lang.String str59 = yearMonth7.toString("1970-01", locale58);
        org.joda.time.Interval interval60 = yearMonth7.toInterval();
        int int61 = yearMonth7.size();
        int int62 = yearMonth7.size();
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Oct" + "'", str47, "Oct");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Oct" + "'", str49, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01" + "'", str59, "1970-01");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.YearMonth.Property property38 = yearMonth32.year();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonth42.indexOf(dateTimeFieldType48);
        org.joda.time.YearMonth yearMonth51 = yearMonth42.plusMonths((-1));
        org.joda.time.YearMonth yearMonth53 = yearMonth42.plusMonths((-1));
        org.joda.time.YearMonth.Property property54 = yearMonth53.monthOfYear();
        int int55 = property54.get();
        org.joda.time.YearMonth yearMonth56 = property54.getYearMonth();
        org.joda.time.YearMonth yearMonth58 = property54.addToCopy(0);
        int int59 = property38.compareTo((org.joda.time.ReadablePartial) yearMonth58);
        java.util.Locale locale60 = null;
        java.lang.String str61 = property38.getAsShortText(locale60);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970" + "'", str61, "1970");
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        boolean boolean24 = yearMonth16.isAfter((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        int int39 = property29.compareTo((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = yearMonth33.getChronology();
        org.joda.time.YearMonth yearMonth41 = yearMonth20.withChronologyRetainFields(chronology40);
        int int42 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.YearMonth yearMonth44 = yearMonth3.minusYears(10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType46 = yearMonth44.getFieldType(8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(yearMonth44);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology15 = yearMonth8.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        org.joda.time.YearMonth.Property property37 = yearMonth19.property(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth8.property(dateTimeFieldType36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonth42.indexOf(dateTimeFieldType48);
        org.joda.time.YearMonth yearMonth51 = yearMonth42.plusMonths((-1));
        boolean boolean53 = yearMonth51.equals((java.lang.Object) 1);
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((long) 100);
        boolean boolean56 = yearMonth51.isBefore((org.joda.time.ReadablePartial) yearMonth55);
        int int57 = yearMonth8.compareTo((org.joda.time.ReadablePartial) yearMonth51);
        int int58 = yearMonth51.getMonthOfYear();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth31 = org.joda.time.YearMonth.now(chronology29);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth(chronology29);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = yearMonth32.getFieldTypes();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth18 = yearMonth14.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int[] intArray19 = yearMonth18.getValues();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[97, 9]");
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth5.getYear();
        org.joda.time.YearMonth yearMonth8 = yearMonth5.plusMonths(2);
        org.joda.time.Chronology chronology9 = yearMonth5.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.YearMonth yearMonth15 = property14.getYearMonth();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth.Property property20 = yearMonth19.monthOfYear();
        int int21 = property20.getMaximumValue();
        java.lang.String str22 = property20.getAsShortText();
        org.joda.time.YearMonth yearMonth24 = property20.addWrapFieldToCopy((int) (short) -1);
        int[] intArray25 = yearMonth24.getValues();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth.Property property30 = yearMonth29.monthOfYear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        int int37 = yearMonth34.size();
        org.joda.time.YearMonth yearMonth39 = yearMonth34.plusMonths((int) (byte) 10);
        int int40 = property30.compareTo((org.joda.time.ReadablePartial) yearMonth34);
        org.joda.time.Chronology chronology41 = yearMonth34.getChronology();
        org.joda.time.YearMonth yearMonth42 = org.joda.time.YearMonth.now(chronology41);
        org.joda.time.YearMonth yearMonth43 = yearMonth24.withChronologyRetainFields(chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth15.withChronologyRetainFields(chronology41);
        org.joda.time.YearMonth yearMonth45 = org.joda.time.YearMonth.now(chronology41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((java.lang.Object) chronology9, chronology41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 12 + "'", int21 == 12);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Oct" + "'", str22, "Oct");
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 9]");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertNotNull(yearMonth45);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.YearMonth yearMonth11 = org.joda.time.YearMonth.parse("0097-10");
        boolean boolean13 = yearMonth11.equals((java.lang.Object) 100.0d);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        org.joda.time.YearMonth yearMonth22 = yearMonth17.plusMonths((int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth.Property property27 = yearMonth26.monthOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        org.joda.time.YearMonth yearMonth36 = yearMonth31.plusMonths((int) (byte) 10);
        int int37 = property27.compareTo((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Interval interval39 = yearMonth31.toInterval(dateTimeZone38);
        org.joda.time.YearMonth yearMonth41 = yearMonth31.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology50);
        org.joda.time.YearMonth yearMonth53 = yearMonth51.minusYears((int) (short) 0);
        int int54 = yearMonth51.size();
        boolean boolean55 = yearMonth47.isAfter((org.joda.time.ReadablePartial) yearMonth51);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology58);
        org.joda.time.YearMonth.Property property60 = yearMonth59.monthOfYear();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology63);
        org.joda.time.YearMonth yearMonth66 = yearMonth64.minusYears((int) (short) 0);
        int int67 = yearMonth64.size();
        org.joda.time.YearMonth yearMonth69 = yearMonth64.plusMonths((int) (byte) 10);
        int int70 = property60.compareTo((org.joda.time.ReadablePartial) yearMonth64);
        org.joda.time.Chronology chronology71 = yearMonth64.getChronology();
        org.joda.time.YearMonth yearMonth72 = yearMonth51.withChronologyRetainFields(chronology71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.YearMonth yearMonth75 = yearMonth72.withPeriodAdded(readablePeriod73, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = null;
        int int77 = yearMonth75.indexOf(dateTimeFieldType76);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.YearMonth yearMonth81 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology80);
        org.joda.time.YearMonth.Property property82 = yearMonth81.monthOfYear();
        int int83 = property82.getMaximumValue();
        java.lang.String str84 = property82.getAsShortText();
        java.util.Locale locale85 = null;
        java.lang.String str86 = property82.getAsShortText(locale85);
        org.joda.time.YearMonth yearMonth88 = property82.setCopy("October");
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.DateTime dateTime90 = yearMonth88.toDateTime(readableInstant89);
        org.joda.time.DateTime dateTime91 = yearMonth75.toDateTime(readableInstant89);
        org.joda.time.DateTime dateTime92 = yearMonth31.toDateTime((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.DateTime dateTime93 = yearMonth22.toDateTime((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.DateTime dateTime94 = yearMonth11.toDateTime((org.joda.time.ReadableInstant) dateTime93);
        org.joda.time.DateTime dateTime95 = yearMonth8.toDateTime((org.joda.time.ReadableInstant) dateTime93);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertNotNull(yearMonth75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 12 + "'", int83 == 12);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Oct" + "'", str84, "Oct");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Oct" + "'", str86, "Oct");
        org.junit.Assert.assertNotNull(yearMonth88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = yearMonth3.toString(dateTimeFormatter6);
        org.joda.time.YearMonth yearMonth9 = yearMonth3.plusYears(0);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0097-10" + "'", str7, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth9);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.YearMonth.Property property38 = yearMonth32.year();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonth42.indexOf(dateTimeFieldType48);
        org.joda.time.YearMonth yearMonth51 = yearMonth42.plusMonths((-1));
        org.joda.time.YearMonth yearMonth53 = yearMonth42.plusMonths((-1));
        org.joda.time.YearMonth.Property property54 = yearMonth53.monthOfYear();
        int int55 = property54.get();
        org.joda.time.YearMonth yearMonth56 = property54.getYearMonth();
        org.joda.time.YearMonth yearMonth58 = property54.addToCopy(0);
        int int59 = property38.compareTo((org.joda.time.ReadablePartial) yearMonth58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth yearMonth65 = yearMonth63.minusYears((int) (short) 0);
        int int66 = yearMonth63.size();
        org.joda.time.YearMonth yearMonth68 = yearMonth63.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        int int70 = yearMonth63.indexOf(dateTimeFieldType69);
        org.joda.time.YearMonth yearMonth72 = yearMonth63.plusMonths((-1));
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.YearMonth yearMonth76 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology75);
        org.joda.time.YearMonth yearMonth78 = yearMonth76.minusYears((int) (short) 0);
        int int79 = yearMonth76.size();
        org.joda.time.YearMonth yearMonth81 = yearMonth76.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = null;
        int int83 = yearMonth76.indexOf(dateTimeFieldType82);
        org.joda.time.Interval interval84 = yearMonth76.toInterval();
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.YearMonth yearMonth88 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology87);
        org.joda.time.YearMonth.Property property89 = yearMonth88.monthOfYear();
        int int90 = property89.getMaximumValue();
        java.lang.String str91 = property89.getAsShortText();
        java.util.Locale locale92 = null;
        java.lang.String str93 = property89.getAsShortText(locale92);
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = property89.getFieldType();
        int int95 = yearMonth76.get(dateTimeFieldType94);
        org.joda.time.YearMonth.Property property96 = yearMonth63.property(dateTimeFieldType94);
        org.joda.time.Chronology chronology97 = yearMonth63.getChronology();
        org.joda.time.YearMonth yearMonth98 = yearMonth58.withChronologyRetainFields(chronology97);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertNotNull(yearMonth78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(yearMonth81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 12 + "'", int90 == 12);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Oct" + "'", str91, "Oct");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Oct" + "'", str93, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 10 + "'", int95 == 10);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertNotNull(chronology97);
        org.junit.Assert.assertNotNull(yearMonth98);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.YearMonth.Property property36 = yearMonth3.property(dateTimeFieldType34);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minusYears((int) (short) 0);
        int int43 = yearMonth40.size();
        org.joda.time.YearMonth yearMonth45 = yearMonth40.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        int int47 = yearMonth40.indexOf(dateTimeFieldType46);
        org.joda.time.YearMonth yearMonth49 = yearMonth40.plusMonths((-1));
        org.joda.time.YearMonth yearMonth51 = yearMonth40.plusMonths((-1));
        org.joda.time.YearMonth.Property property52 = yearMonth51.monthOfYear();
        int int53 = property52.get();
        org.joda.time.YearMonth yearMonth54 = property52.getYearMonth();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth yearMonth60 = yearMonth58.minusYears((int) (short) 0);
        int int61 = yearMonth58.size();
        org.joda.time.YearMonth yearMonth63 = yearMonth58.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        int int65 = yearMonth58.indexOf(dateTimeFieldType64);
        org.joda.time.YearMonth yearMonth67 = yearMonth58.plusMonths((-1));
        org.joda.time.YearMonth yearMonth69 = yearMonth58.plusMonths((-1));
        org.joda.time.YearMonth.Property property70 = yearMonth69.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.YearMonth yearMonth73 = yearMonth69.withPeriodAdded(readablePeriod71, (int) (short) -1);
        org.joda.time.YearMonth yearMonth75 = yearMonth69.plusMonths((int) (short) 10);
        boolean boolean76 = yearMonth54.isEqual((org.joda.time.ReadablePartial) yearMonth69);
        int int77 = property36.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        int int78 = property36.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertNotNull(yearMonth75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        org.joda.time.YearMonth yearMonth7 = property4.setCopy("10");
        java.util.Locale locale8 = null;
        java.lang.String str9 = property4.getAsShortText(locale8);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Oct" + "'", str9, "Oct");
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("1980-01");
        org.junit.Assert.assertNotNull(yearMonth1);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        int int11 = property4.getMinimumValueOverall();
        int int12 = property4.getMinimumValue();
        java.lang.String str13 = property4.getName();
        org.joda.time.YearMonth yearMonth14 = property4.getYearMonth();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth14);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth yearMonth9 = yearMonth7.minusYears((int) (short) 0);
        org.joda.time.Interval interval10 = yearMonth7.toInterval();
        org.joda.time.Chronology chronology11 = yearMonth7.getChronology();
        org.joda.time.YearMonth yearMonth12 = yearMonth3.withChronologyRetainFields(chronology11);
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((long) (byte) 0, chronology11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth(1980, 0, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(yearMonth12);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.parse("2015-01", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth5.getYear();
        org.joda.time.YearMonth yearMonth8 = yearMonth5.minusYears(0);
        org.joda.time.YearMonth.Property property9 = yearMonth5.monthOfYear();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        boolean boolean14 = yearMonth12.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.YearMonth yearMonth30 = property19.getYearMonth();
        java.lang.String str31 = property19.getAsText();
        org.joda.time.YearMonth yearMonth32 = property19.getYearMonth();
        boolean boolean33 = yearMonth12.isBefore((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.YearMonth yearMonth35 = yearMonth12.minusYears(3);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth.Property property40 = yearMonth39.monthOfYear();
        int int41 = property40.getMaximumValue();
        java.util.Locale locale42 = null;
        int int43 = property40.getMaximumShortTextLength(locale42);
        java.util.Locale locale44 = null;
        int int45 = property40.getMaximumTextLength(locale44);
        org.joda.time.DateTimeField dateTimeField46 = property40.getField();
        boolean boolean47 = yearMonth12.equals((java.lang.Object) dateTimeField46);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "October" + "'", str31, "October");
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 12 + "'", int41 == 12);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) 100);
        org.joda.time.YearMonth yearMonth3 = yearMonth1.withYear((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.YearMonth yearMonth5 = yearMonth1.plus(readablePeriod4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        org.joda.time.YearMonth yearMonth14 = yearMonth9.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = yearMonth9.indexOf(dateTimeFieldType15);
        org.joda.time.YearMonth yearMonth18 = yearMonth9.plusMonths((-1));
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        int int29 = yearMonth22.indexOf(dateTimeFieldType28);
        org.joda.time.Interval interval30 = yearMonth22.toInterval();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth.Property property35 = yearMonth34.monthOfYear();
        int int36 = property35.getMaximumValue();
        java.lang.String str37 = property35.getAsShortText();
        java.util.Locale locale38 = null;
        java.lang.String str39 = property35.getAsShortText(locale38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property35.getFieldType();
        int int41 = yearMonth22.get(dateTimeFieldType40);
        org.joda.time.YearMonth.Property property42 = yearMonth9.property(dateTimeFieldType40);
        org.joda.time.Chronology chronology43 = yearMonth9.getChronology();
        int int44 = yearMonth5.compareTo((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        int int60 = property50.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = yearMonth54.getChronology();
        org.joda.time.YearMonth yearMonth62 = org.joda.time.YearMonth.now(chronology61);
        org.joda.time.YearMonth yearMonth63 = org.joda.time.YearMonth.now(chronology61);
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((java.lang.Object) "0097-10", chronology61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = null;
        java.lang.String str66 = yearMonth64.toString(dateTimeFormatter65);
        org.joda.time.Chronology chronology67 = yearMonth64.getChronology();
        org.joda.time.YearMonth yearMonth68 = yearMonth5.withChronologyRetainFields(chronology67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = null;
        java.lang.String str70 = yearMonth5.toString(dateTimeFormatter69);
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 12 + "'", int36 == 12);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Oct" + "'", str37, "Oct");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Oct" + "'", str39, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0097-10" + "'", str66, "0097-10");
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1970-01" + "'", str70, "1970-01");
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        org.joda.time.DurationField durationField12 = property4.getRangeDurationField();
        org.joda.time.DurationField durationField13 = property4.getDurationField();
        org.joda.time.DateTimeField dateTimeField14 = property4.getField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.YearMonth yearMonth5 = property4.getYearMonth();
        org.joda.time.ReadablePartial readablePartial6 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int7 = property4.compareTo(readablePartial6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth5);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonth yearMonth9 = yearMonth3.withPeriodAdded(readablePeriod7, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = yearMonth9.toString("Property[year]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth9);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) (byte) 10);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth5.getYear();
        org.joda.time.YearMonth yearMonth8 = yearMonth5.minusYears(0);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonth yearMonth11 = yearMonth8.withPeriodAdded(readablePeriod9, (int) (byte) 0);
        java.lang.String str12 = yearMonth8.toString();
        org.joda.time.YearMonth yearMonth14 = yearMonth8.withYear((int) (short) 100);
        java.lang.Class<?> wildcardClass15 = yearMonth14.getClass();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0097-10" + "'", str12, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = yearMonth8.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        int int15 = property4.getMaximumValueOverall();
        org.joda.time.DurationField durationField16 = property4.getRangeDurationField();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        int int22 = property21.getMaximumValue();
        java.util.Locale locale23 = null;
        int int24 = property21.getMaximumShortTextLength(locale23);
        java.util.Locale locale25 = null;
        int int26 = property21.getMaximumTextLength(locale25);
        java.lang.String str27 = property21.getName();
        org.joda.time.YearMonth yearMonth29 = property21.addToCopy((int) (short) 10);
        int[] intArray30 = yearMonth29.getValues();
        int[] intArray31 = yearMonth29.getValues();
        int int32 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth29);
        org.joda.time.DurationField durationField33 = property4.getDurationField();
        java.lang.String str34 = property4.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "monthOfYear" + "'", str27, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[98, 8]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[98, 8]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Property[monthOfYear]" + "'", str34, "Property[monthOfYear]");
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((int) (byte) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth.Property property6 = yearMonth5.monthOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        org.joda.time.YearMonth yearMonth15 = yearMonth10.plusMonths((int) (byte) 10);
        int int16 = property6.compareTo((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        boolean boolean23 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth10.indexOf(dateTimeFieldType24);
        int int26 = yearMonth10.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = yearMonth10.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Interval interval29 = yearMonth10.toInterval(dateTimeZone28);
        int[] intArray30 = yearMonth10.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = yearMonth10.getFieldType((int) (short) 1);
        int int33 = yearMonth1.get(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[97, 10]");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.YearMonth yearMonth8 = property4.addToCopy((int) ' ');
        org.joda.time.DurationField durationField9 = property4.getDurationField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        int[] intArray2 = yearMonth1.getValues();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1970, 1]");
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        int int47 = property46.getMinimumValue();
        java.util.Locale locale48 = null;
        int int49 = property46.getMaximumShortTextLength(locale48);
        org.joda.time.YearMonth yearMonth51 = property46.addToCopy((int) (short) 1);
        boolean boolean52 = yearMonth3.equals((java.lang.Object) yearMonth51);
        org.joda.time.YearMonth yearMonth54 = yearMonth51.minusMonths((-292275054));
        org.joda.time.YearMonth yearMonth56 = yearMonth51.plusMonths((int) (byte) 10);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(yearMonth56);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.lang.String str8 = property4.getName();
        org.joda.time.YearMonth yearMonth10 = property4.addWrapFieldToCopy(12);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.YearMonth yearMonth13 = yearMonth10.withPeriodAdded(readablePeriod11, 0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth13);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        int int7 = yearMonth4.size();
        org.joda.time.YearMonth yearMonth9 = yearMonth4.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = yearMonth4.indexOf(dateTimeFieldType10);
        org.joda.time.YearMonth yearMonth13 = yearMonth4.plusMonths((-1));
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        org.joda.time.YearMonth yearMonth22 = yearMonth17.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = yearMonth17.indexOf(dateTimeFieldType23);
        org.joda.time.Interval interval25 = yearMonth17.toInterval();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth.Property property30 = yearMonth29.monthOfYear();
        int int31 = property30.getMaximumValue();
        java.lang.String str32 = property30.getAsShortText();
        java.util.Locale locale33 = null;
        java.lang.String str34 = property30.getAsShortText(locale33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property30.getFieldType();
        int int36 = yearMonth17.get(dateTimeFieldType35);
        org.joda.time.YearMonth.Property property37 = yearMonth4.property(dateTimeFieldType35);
        org.joda.time.Chronology chronology38 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth(chronology38);
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        org.joda.time.Interval interval47 = yearMonth44.toInterval();
        org.joda.time.Chronology chronology48 = yearMonth44.getChronology();
        org.joda.time.YearMonth yearMonth49 = yearMonth40.withChronologyRetainFields(chronology48);
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth(chronology48);
        org.joda.time.YearMonth yearMonth51 = yearMonth39.withChronologyRetainFields(chronology48);
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((long) (short) 10, chronology48);
        int int53 = yearMonth52.getYear();
        int int54 = yearMonth52.size();
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 12 + "'", int31 == 12);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Oct" + "'", str32, "Oct");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Oct" + "'", str34, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property4.getFieldType();
        int int12 = property4.getMinimumValue();
        java.lang.String str13 = property4.getName();
        org.joda.time.DurationField durationField14 = property4.getRangeDurationField();
        org.joda.time.DurationField durationField15 = property4.getRangeDurationField();
        int int16 = property4.get();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        org.joda.time.YearMonth yearMonth13 = property4.addToCopy(3);
        java.lang.String str14 = property4.getAsString();
        java.lang.String str15 = property4.getAsShortText();
        org.joda.time.DurationField durationField16 = property4.getRangeDurationField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Oct" + "'", str15, "Oct");
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addToCopy((int) (short) 10);
        int[] intArray13 = yearMonth12.getValues();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        boolean boolean27 = yearMonth19.isAfter((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.YearMonth.Property property28 = yearMonth23.year();
        boolean boolean29 = yearMonth12.equals((java.lang.Object) property28);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        boolean boolean46 = yearMonth38.isAfter((org.joda.time.ReadablePartial) yearMonth42);
        org.joda.time.Interval interval47 = yearMonth38.toInterval();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology50);
        org.joda.time.YearMonth yearMonth53 = yearMonth51.minusYears((int) (short) 0);
        int int54 = yearMonth51.size();
        org.joda.time.YearMonth yearMonth56 = yearMonth51.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = yearMonth51.indexOf(dateTimeFieldType57);
        org.joda.time.Interval interval59 = yearMonth51.toInterval();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        int int65 = property64.getMaximumValue();
        java.lang.String str66 = property64.getAsShortText();
        java.util.Locale locale67 = null;
        java.lang.String str68 = property64.getAsShortText(locale67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property64.getFieldType();
        int int70 = yearMonth51.get(dateTimeFieldType69);
        org.joda.time.YearMonth.Property property71 = yearMonth38.property(dateTimeFieldType69);
        boolean boolean72 = yearMonth32.isSupported(dateTimeFieldType69);
        org.joda.time.YearMonth.Property property73 = yearMonth12.property(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[98, 8]");
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 12 + "'", int65 == 12);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Oct" + "'", str66, "Oct");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Oct" + "'", str68, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(property73);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.lang.String str8 = property4.getAsString();
        java.util.Locale locale9 = null;
        java.lang.String str10 = property4.getAsShortText(locale9);
        org.joda.time.DurationField durationField11 = property4.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((java.lang.Object) property4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.YearMonth$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10" + "'", str8, "10");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        java.lang.String str9 = property4.getAsShortText(locale8);
        java.util.Locale locale10 = null;
        int int11 = property4.getMaximumTextLength(locale10);
        java.util.Locale locale12 = null;
        java.lang.String str13 = property4.getAsText(locale12);
        java.util.Locale locale14 = null;
        java.lang.String str15 = property4.getAsShortText(locale14);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Oct" + "'", str9, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "October" + "'", str13, "October");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Oct" + "'", str15, "Oct");
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((-1), 1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        int int8 = yearMonth5.size();
        org.joda.time.YearMonth yearMonth10 = yearMonth5.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonth5.indexOf(dateTimeFieldType11);
        org.joda.time.YearMonth yearMonth14 = yearMonth5.plusMonths((-1));
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.Interval interval26 = yearMonth18.toInterval();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        int int37 = yearMonth18.get(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth5.property(dateTimeFieldType36);
        org.joda.time.Chronology chronology39 = yearMonth5.getChronology();
        org.joda.time.YearMonth yearMonth40 = org.joda.time.YearMonth.now(chronology39);
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth(1, 3, chronology39);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology50);
        org.joda.time.YearMonth yearMonth53 = yearMonth51.minusYears((int) (short) 0);
        int int54 = yearMonth51.size();
        boolean boolean55 = yearMonth47.isAfter((org.joda.time.ReadablePartial) yearMonth51);
        org.joda.time.YearMonth yearMonth57 = yearMonth51.minusYears((int) (byte) 100);
        boolean boolean58 = yearMonth41.isBefore((org.joda.time.ReadablePartial) yearMonth51);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("2020-11");
        int int2 = yearMonth1.getMonthOfYear();
        java.lang.String str4 = yearMonth1.toString("2020-11");
        org.junit.Assert.assertNotNull(yearMonth1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2020-11" + "'", str4, "2020-11");
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth yearMonth17 = yearMonth3.minusMonths(0);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        boolean boolean36 = yearMonth28.isAfter((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        int int51 = property41.compareTo((org.joda.time.ReadablePartial) yearMonth45);
        org.joda.time.Chronology chronology52 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth53 = yearMonth32.withChronologyRetainFields(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonth yearMonth56 = yearMonth53.withPeriodAdded(readablePeriod54, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = yearMonth56.indexOf(dateTimeFieldType57);
        boolean boolean59 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        int int65 = property64.getMinimumValue();
        java.util.Locale locale66 = null;
        int int67 = property64.getMaximumShortTextLength(locale66);
        org.joda.time.YearMonth yearMonth69 = property64.addToCopy((int) (short) 1);
        boolean boolean70 = yearMonth21.equals((java.lang.Object) yearMonth69);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.YearMonth yearMonth74 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology73);
        org.joda.time.YearMonth yearMonth76 = yearMonth74.minusYears((int) (short) 0);
        int int77 = yearMonth74.size();
        org.joda.time.YearMonth yearMonth79 = yearMonth74.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        int int81 = yearMonth74.indexOf(dateTimeFieldType80);
        int int82 = yearMonth74.getYear();
        boolean boolean83 = yearMonth69.isBefore((org.joda.time.ReadablePartial) yearMonth74);
        org.joda.time.DateTimeField[] dateTimeFieldArray84 = yearMonth74.getFields();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = null;
        java.lang.String str86 = yearMonth74.toString(dateTimeFormatter85);
        boolean boolean87 = yearMonth17.isBefore((org.joda.time.ReadablePartial) yearMonth74);
        java.util.Locale locale89 = null;
        java.lang.String str90 = yearMonth74.toString("10", locale89);
        org.joda.time.ReadablePeriod readablePeriod91 = null;
        org.joda.time.YearMonth yearMonth92 = yearMonth74.minus(readablePeriod91);
        org.joda.time.YearMonth.Property property93 = yearMonth74.year();
        int int94 = property93.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(yearMonth76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(yearMonth79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0097-10" + "'", str86, "0097-10");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "10" + "'", str90, "10");
        org.junit.Assert.assertNotNull(yearMonth92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-292275054) + "'", int94 == (-292275054));
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        java.util.Locale locale15 = null;
        java.lang.String str16 = property4.getAsText(locale15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        int int22 = property21.getMaximumValue();
        java.lang.String str23 = property21.getAsShortText();
        org.joda.time.YearMonth yearMonth25 = property21.addWrapFieldToCopy((int) (short) -1);
        int[] intArray26 = yearMonth25.getValues();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        int int38 = yearMonth35.size();
        org.joda.time.YearMonth yearMonth40 = yearMonth35.plusMonths((int) (byte) 10);
        int int41 = property31.compareTo((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.Chronology chronology42 = yearMonth35.getChronology();
        org.joda.time.YearMonth yearMonth43 = org.joda.time.YearMonth.now(chronology42);
        org.joda.time.YearMonth yearMonth44 = yearMonth25.withChronologyRetainFields(chronology42);
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth(chronology42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((java.lang.Object) property4, chronology42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.YearMonth$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Oct" + "'", str23, "Oct");
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[97, 9]");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertNotNull(yearMonth44);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth yearMonth17 = yearMonth3.minusMonths(0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth.Property property24 = yearMonth23.monthOfYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        int int31 = yearMonth28.size();
        org.joda.time.YearMonth yearMonth33 = yearMonth28.plusMonths((int) (byte) 10);
        int int34 = property24.compareTo((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.Chronology chronology35 = yearMonth28.getChronology();
        org.joda.time.YearMonth yearMonth36 = org.joda.time.YearMonth.now(chronology35);
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth(100, (int) (short) 1, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth3.withChronologyRetainFields(chronology35);
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.YearMonth yearMonth42 = yearMonth3.withPeriodAdded(readablePeriod40, 1);
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((java.lang.Object) readablePeriod40);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth42);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth.Property property5 = yearMonth4.monthOfYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        org.joda.time.YearMonth yearMonth14 = yearMonth9.plusMonths((int) (byte) 10);
        int int15 = property5.compareTo((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth yearMonth16 = property5.getYearMonth();
        java.lang.String str17 = property5.getAsText();
        org.joda.time.YearMonth yearMonth18 = property5.getYearMonth();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        boolean boolean37 = yearMonth29.isAfter((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth.Property property42 = yearMonth41.monthOfYear();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        int int49 = yearMonth46.size();
        org.joda.time.YearMonth yearMonth51 = yearMonth46.plusMonths((int) (byte) 10);
        int int52 = property42.compareTo((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.Chronology chronology53 = yearMonth46.getChronology();
        org.joda.time.YearMonth yearMonth54 = yearMonth33.withChronologyRetainFields(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.YearMonth yearMonth57 = yearMonth54.withPeriodAdded(readablePeriod55, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        int int59 = yearMonth57.indexOf(dateTimeFieldType58);
        boolean boolean60 = yearMonth22.isEqual((org.joda.time.ReadablePartial) yearMonth57);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology63);
        org.joda.time.YearMonth.Property property65 = yearMonth64.monthOfYear();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.YearMonth yearMonth69 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology68);
        org.joda.time.YearMonth yearMonth71 = yearMonth69.minusYears((int) (short) 0);
        int int72 = yearMonth69.size();
        org.joda.time.YearMonth yearMonth74 = yearMonth69.plusMonths((int) (byte) 10);
        int int75 = property65.compareTo((org.joda.time.ReadablePartial) yearMonth69);
        boolean boolean76 = yearMonth22.isEqual((org.joda.time.ReadablePartial) yearMonth69);
        boolean boolean77 = yearMonth18.isAfter((org.joda.time.ReadablePartial) yearMonth22);
        boolean boolean78 = yearMonth0.isEqual((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.YearMonth yearMonth80 = yearMonth0.plus(readablePeriod79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.YearMonth yearMonth82 = yearMonth0.minus(readablePeriod81);
        int[] intArray83 = yearMonth0.getValues();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "October" + "'", str17, "October");
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertNotNull(yearMonth82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[2020, 11]");
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property4.getFieldType();
        int int12 = property4.getMinimumValue();
        java.lang.String str13 = property4.getName();
        int int14 = property4.getMinimumValueOverall();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        int int20 = property19.getMaximumValue();
        java.lang.String str21 = property19.getAsShortText();
        java.util.Locale locale22 = null;
        java.lang.String str23 = property19.getAsShortText(locale22);
        org.joda.time.YearMonth yearMonth25 = property19.setCopy("October");
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = yearMonth25.toDateTime(readableInstant26);
        int int28 = property4.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DurationField durationField29 = property4.getDurationField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Oct" + "'", str21, "Oct");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Oct" + "'", str23, "Oct");
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth yearMonth9 = yearMonth7.minusYears((int) (short) 0);
        int int10 = yearMonth7.size();
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        boolean boolean27 = yearMonth19.isAfter((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Interval interval28 = yearMonth19.toInterval();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = yearMonth32.indexOf(dateTimeFieldType38);
        org.joda.time.Interval interval40 = yearMonth32.toInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        int int46 = property45.getMaximumValue();
        java.lang.String str47 = property45.getAsShortText();
        java.util.Locale locale48 = null;
        java.lang.String str49 = property45.getAsShortText(locale48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property45.getFieldType();
        int int51 = yearMonth32.get(dateTimeFieldType50);
        org.joda.time.YearMonth.Property property52 = yearMonth19.property(dateTimeFieldType50);
        boolean boolean53 = yearMonth13.isSupported(dateTimeFieldType50);
        org.joda.time.YearMonth yearMonth55 = yearMonth7.withField(dateTimeFieldType50, (int) (short) 10);
        boolean boolean56 = yearMonth3.isBefore((org.joda.time.ReadablePartial) yearMonth7);
        java.util.Locale locale58 = null;
        java.lang.String str59 = yearMonth7.toString("1970-01", locale58);
        org.joda.time.Interval interval60 = yearMonth7.toInterval();
        int int61 = yearMonth7.size();
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth yearMonth68 = yearMonth66.minusYears((int) (short) 0);
        org.joda.time.Interval interval69 = yearMonth66.toInterval();
        org.joda.time.Chronology chronology70 = yearMonth66.getChronology();
        org.joda.time.YearMonth yearMonth71 = yearMonth62.withChronologyRetainFields(chronology70);
        org.joda.time.YearMonth yearMonth72 = new org.joda.time.YearMonth(chronology70);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.YearMonth yearMonth76 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology75);
        org.joda.time.YearMonth yearMonth78 = yearMonth76.minusYears((int) (short) 0);
        int int79 = yearMonth76.size();
        org.joda.time.YearMonth yearMonth81 = yearMonth76.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = null;
        int int83 = yearMonth76.indexOf(dateTimeFieldType82);
        org.joda.time.YearMonth yearMonth85 = yearMonth76.plusMonths((-1));
        org.joda.time.YearMonth yearMonth87 = yearMonth76.plusMonths((-1));
        org.joda.time.YearMonth.Property property88 = yearMonth87.monthOfYear();
        int int89 = property88.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = property88.getFieldType();
        int int91 = yearMonth72.indexOf(dateTimeFieldType90);
        boolean boolean92 = yearMonth7.isSupported(dateTimeFieldType90);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Oct" + "'", str47, "Oct");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Oct" + "'", str49, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01" + "'", str59, "1970-01");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertNotNull(yearMonth78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(yearMonth81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(yearMonth85);
        org.junit.Assert.assertNotNull(yearMonth87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 9 + "'", int89 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.getMaximumValue();
        java.lang.String str17 = property15.getAsShortText();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property15.getAsShortText(locale18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property15.getFieldType();
        org.joda.time.YearMonth.Property property21 = yearMonth3.property(dateTimeFieldType20);
        java.util.Locale locale23 = null;
        org.joda.time.YearMonth yearMonth24 = property21.setCopy("October", locale23);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Oct" + "'", str17, "Oct");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Oct" + "'", str19, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth24);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        boolean boolean14 = yearMonth12.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.YearMonth yearMonth30 = property19.getYearMonth();
        java.lang.String str31 = property19.getAsText();
        org.joda.time.YearMonth yearMonth32 = property19.getYearMonth();
        boolean boolean33 = yearMonth12.isBefore((org.joda.time.ReadablePartial) yearMonth32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField35 = yearMonth32.getField((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "October" + "'", str31, "October");
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth16 = yearMonth8.plusYears((int) (byte) 10);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) -1);
        java.util.Locale locale20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = yearMonth18.toString("September", locale20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: p");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth18);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        java.util.Locale locale10 = null;
        int int11 = property4.getMaximumTextLength(locale10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property4.getFieldType();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonth yearMonth29 = yearMonth27.plus(readablePeriod28);
        org.joda.time.YearMonth yearMonth31 = yearMonth27.withYear((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = yearMonth31.getValue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth31);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth8.minusMonths((int) (short) -1);
        int int27 = yearMonth26.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth29 = yearMonth26.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth.Property property8 = yearMonth7.monthOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        org.joda.time.YearMonth yearMonth17 = yearMonth12.plusMonths((int) (byte) 10);
        int int18 = property8.compareTo((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = yearMonth12.getChronology();
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) (byte) 0, 11, chronology19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth(0, 2020, chronology19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2020 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology15 = yearMonth8.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        org.joda.time.YearMonth.Property property37 = yearMonth19.property(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth8.property(dateTimeFieldType36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((java.lang.Object) property38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.YearMonth$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = yearMonth2.getChronology();
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((long) 3, chronology3);
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((long) (byte) 10, chronology3);
        org.junit.Assert.assertNotNull(chronology3);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        java.lang.String str19 = yearMonth8.toString();
        java.lang.String str20 = yearMonth8.toString();
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = yearMonth22.toInterval(dateTimeZone23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = yearMonth22.getFieldType((int) (short) 1);
        int int27 = yearMonth8.indexOf(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0097-10" + "'", str19, "0097-10");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0097-10" + "'", str20, "0097-10");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((java.lang.Object) property4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.YearMonth$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(10L);
        org.joda.time.YearMonth.Property property2 = yearMonth1.monthOfYear();
        java.lang.String str3 = property2.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Property[monthOfYear]" + "'", str3, "Property[monthOfYear]");
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) 100);
        org.joda.time.YearMonth yearMonth3 = yearMonth1.withYear((int) (short) 1);
        java.util.Locale locale5 = null;
        java.lang.String str6 = yearMonth1.toString("2020-11", locale5);
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2020-11" + "'", str6, "2020-11");
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology1 = yearMonth0.getChronology();
        org.joda.time.YearMonth yearMonth3 = yearMonth0.withYear((int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField5 = yearMonth0.getField(1);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((int) (byte) -1, (int) (byte) 1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth.Property property7 = yearMonth6.monthOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        boolean boolean21 = yearMonth13.isAfter((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth.Property property26 = yearMonth25.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        int int36 = property26.compareTo((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.Chronology chronology37 = yearMonth30.getChronology();
        org.joda.time.YearMonth yearMonth38 = yearMonth17.withChronologyRetainFields(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonth yearMonth41 = yearMonth38.withPeriodAdded(readablePeriod39, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        int int43 = yearMonth41.indexOf(dateTimeFieldType42);
        boolean boolean44 = yearMonth6.isEqual((org.joda.time.ReadablePartial) yearMonth41);
        java.lang.String str45 = yearMonth41.toString();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.YearMonth yearMonth47 = yearMonth41.minus(readablePeriod46);
        boolean boolean48 = yearMonth2.isAfter((org.joda.time.ReadablePartial) yearMonth47);
        org.joda.time.DurationFieldType durationFieldType49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth51 = yearMonth47.withFieldAdded(durationFieldType49, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0097-10" + "'", str45, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth3.getFieldTypes();
        org.joda.time.DateTimeField[] dateTimeFieldArray10 = yearMonth3.getFields();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = yearMonth3.toString(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(dateTimeFieldArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0097-10" + "'", str12, "0097-10");
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.plusYears((int) '#');
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.YearMonth yearMonth41 = yearMonth37.minus(readablePeriod40);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology47);
        org.joda.time.YearMonth yearMonth50 = yearMonth48.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        boolean boolean58 = yearMonth50.isAfter((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology61);
        org.joda.time.YearMonth.Property property63 = yearMonth62.monthOfYear();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.YearMonth yearMonth67 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology66);
        org.joda.time.YearMonth yearMonth69 = yearMonth67.minusYears((int) (short) 0);
        int int70 = yearMonth67.size();
        org.joda.time.YearMonth yearMonth72 = yearMonth67.plusMonths((int) (byte) 10);
        int int73 = property63.compareTo((org.joda.time.ReadablePartial) yearMonth67);
        org.joda.time.Chronology chronology74 = yearMonth67.getChronology();
        org.joda.time.YearMonth yearMonth75 = yearMonth54.withChronologyRetainFields(chronology74);
        org.joda.time.YearMonth yearMonth76 = new org.joda.time.YearMonth((long) (short) 1, chronology74);
        org.joda.time.YearMonth yearMonth77 = new org.joda.time.YearMonth(chronology74);
        org.joda.time.YearMonth yearMonth78 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology74);
        int int80 = yearMonth78.getValue((int) (short) 1);
        boolean boolean81 = yearMonth41.isEqual((org.joda.time.ReadablePartial) yearMonth78);
        int[] intArray82 = yearMonth78.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField84 = yearMonth78.getField(11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 11");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(yearMonth75);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[100, 10]");
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) (-292275054));
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        int int8 = yearMonth5.size();
        org.joda.time.YearMonth yearMonth10 = yearMonth5.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonth5.indexOf(dateTimeFieldType11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        boolean boolean26 = yearMonth18.isAfter((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        int int38 = yearMonth35.size();
        org.joda.time.YearMonth yearMonth40 = yearMonth35.plusMonths((int) (byte) 10);
        int int41 = property31.compareTo((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.Chronology chronology42 = yearMonth35.getChronology();
        org.joda.time.YearMonth yearMonth43 = yearMonth22.withChronologyRetainFields(chronology42);
        int int44 = yearMonth5.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology47);
        org.joda.time.YearMonth.Property property49 = yearMonth48.monthOfYear();
        int int50 = property49.getMaximumValue();
        java.util.Locale locale51 = null;
        int int52 = property49.getMaximumShortTextLength(locale51);
        java.util.Locale locale53 = null;
        int int54 = property49.getMaximumTextLength(locale53);
        org.joda.time.DurationField durationField55 = property49.getRangeDurationField();
        java.util.Locale locale56 = null;
        java.lang.String str57 = property49.getAsShortText(locale56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property49.getFieldType();
        org.joda.time.YearMonth yearMonth60 = yearMonth5.withField(dateTimeFieldType58, 11);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology63);
        org.joda.time.YearMonth yearMonth66 = yearMonth64.minusYears((int) (short) 0);
        int int67 = yearMonth64.size();
        org.joda.time.YearMonth yearMonth69 = yearMonth64.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = null;
        int int71 = yearMonth64.indexOf(dateTimeFieldType70);
        org.joda.time.Interval interval72 = yearMonth64.toInterval();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.YearMonth yearMonth76 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology75);
        org.joda.time.YearMonth.Property property77 = yearMonth76.monthOfYear();
        int int78 = property77.getMaximumValue();
        java.lang.String str79 = property77.getAsShortText();
        java.util.Locale locale80 = null;
        java.lang.String str81 = property77.getAsShortText(locale80);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = property77.getFieldType();
        int int83 = yearMonth64.get(dateTimeFieldType82);
        int int84 = yearMonth60.get(dateTimeFieldType82);
        int int85 = yearMonth1.indexOf(dateTimeFieldType82);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.YearMonth yearMonth87 = yearMonth1.minus(readablePeriod86);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.YearMonth yearMonth90 = yearMonth1.withPeriodAdded(readablePeriod88, 1970);
        org.joda.time.DateTimeField[] dateTimeFieldArray91 = yearMonth1.getFields();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth93 = yearMonth1.withMonthOfYear((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 12 + "'", int50 == 12);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Oct" + "'", str57, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 12 + "'", int78 == 12);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Oct" + "'", str79, "Oct");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Oct" + "'", str81, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 11 + "'", int84 == 11);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(yearMonth87);
        org.junit.Assert.assertNotNull(yearMonth90);
        org.junit.Assert.assertNotNull(dateTimeFieldArray91);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth.Property property6 = yearMonth5.monthOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        org.joda.time.YearMonth yearMonth15 = yearMonth10.plusMonths((int) (byte) 10);
        int int16 = property6.compareTo((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = yearMonth10.getChronology();
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) (byte) 0, 11, chronology17);
        org.joda.time.YearMonth yearMonth19 = org.joda.time.YearMonth.now(chronology17);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(chronology17);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.plusMonths(1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth22);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property4.getAsText(locale17);
        org.joda.time.DurationField durationField19 = property4.getRangeDurationField();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property4.getAsShortText(locale20);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "October" + "'", str18, "October");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Oct" + "'", str21, "Oct");
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonth8.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonth8.toInterval(dateTimeZone26);
        int[] intArray28 = yearMonth8.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = yearMonth8.getFieldType((int) (short) 1);
        org.joda.time.YearMonth yearMonth32 = yearMonth8.minusMonths((int) (short) -1);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.plusYears((int) (byte) 1);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth.Property property39 = yearMonth38.monthOfYear();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth yearMonth45 = yearMonth43.minusYears((int) (short) 0);
        int int46 = yearMonth43.size();
        org.joda.time.YearMonth yearMonth48 = yearMonth43.plusMonths((int) (byte) 10);
        int int49 = property39.compareTo((org.joda.time.ReadablePartial) yearMonth43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = yearMonth43.toString(dateTimeFormatter50);
        boolean boolean52 = yearMonth32.isBefore((org.joda.time.ReadablePartial) yearMonth43);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[97, 10]");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0097-10" + "'", str51, "0097-10");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        java.lang.String str6 = yearMonth3.toString();
        java.lang.String str7 = yearMonth3.toString();
        org.joda.time.YearMonth yearMonth9 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        int int16 = yearMonth13.size();
        org.joda.time.YearMonth yearMonth18 = yearMonth13.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonth13.indexOf(dateTimeFieldType19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth.Property property25 = yearMonth24.monthOfYear();
        int int26 = property25.getMaximumValue();
        java.lang.String str27 = property25.getAsShortText();
        java.util.Locale locale28 = null;
        java.lang.String str29 = property25.getAsShortText(locale28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property25.getFieldType();
        org.joda.time.YearMonth.Property property31 = yearMonth13.property(dateTimeFieldType30);
        boolean boolean32 = yearMonth3.isSupported(dateTimeFieldType30);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = yearMonth3.getValue(2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0097-10" + "'", str6, "0097-10");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0097-10" + "'", str7, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Oct" + "'", str27, "Oct");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Oct" + "'", str29, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth31 = org.joda.time.YearMonth.now(chronology29);
        org.joda.time.YearMonth yearMonth32 = org.joda.time.YearMonth.now(chronology29);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth32);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        int int12 = property4.getMinimumValueOverall();
        java.lang.String str13 = property4.getAsText();
        org.joda.time.YearMonth yearMonth15 = property4.addToCopy((int) (short) -1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "October" + "'", str13, "October");
        org.junit.Assert.assertNotNull(yearMonth15);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.lang.String str11 = property4.getAsShortText();
        int int12 = property4.getMaximumValue();
        java.lang.String str13 = property4.getName();
        java.util.Locale locale14 = null;
        java.lang.String str15 = property4.getAsText(locale14);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Oct" + "'", str11, "Oct");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 12 + "'", int12 == 12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "October" + "'", str15, "October");
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((long) (short) 1, chronology32);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth(chronology32);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology32);
        int int38 = yearMonth36.getValue((int) (short) 1);
        int int39 = yearMonth36.getYear();
        org.joda.time.YearMonth.Property property40 = yearMonth36.monthOfYear();
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.Chronology chronology2 = yearMonth1.getChronology();
        int int4 = yearMonth1.getValue(0);
        int int5 = yearMonth1.size();
        org.joda.time.YearMonth.Property property6 = yearMonth1.monthOfYear();
        java.lang.String str7 = property6.getAsShortText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth9 = property6.setCopy((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Jan" + "'", str7, "Jan");
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property4.getAsShortText(locale11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property4.getFieldType();
        int int14 = property4.getMaximumValue();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth.Property property25 = yearMonth24.monthOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth yearMonth31 = yearMonth29.minusYears((int) (short) 0);
        int int32 = yearMonth29.size();
        org.joda.time.YearMonth yearMonth34 = yearMonth29.plusMonths((int) (byte) 10);
        int int35 = property25.compareTo((org.joda.time.ReadablePartial) yearMonth29);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Interval interval37 = yearMonth29.toInterval(dateTimeZone36);
        org.joda.time.YearMonth yearMonth39 = yearMonth29.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth yearMonth45 = yearMonth43.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth yearMonth51 = yearMonth49.minusYears((int) (short) 0);
        int int52 = yearMonth49.size();
        boolean boolean53 = yearMonth45.isAfter((org.joda.time.ReadablePartial) yearMonth49);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.YearMonth yearMonth57 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology56);
        org.joda.time.YearMonth.Property property58 = yearMonth57.monthOfYear();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology61);
        org.joda.time.YearMonth yearMonth64 = yearMonth62.minusYears((int) (short) 0);
        int int65 = yearMonth62.size();
        org.joda.time.YearMonth yearMonth67 = yearMonth62.plusMonths((int) (byte) 10);
        int int68 = property58.compareTo((org.joda.time.ReadablePartial) yearMonth62);
        org.joda.time.Chronology chronology69 = yearMonth62.getChronology();
        org.joda.time.YearMonth yearMonth70 = yearMonth49.withChronologyRetainFields(chronology69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.YearMonth yearMonth73 = yearMonth70.withPeriodAdded(readablePeriod71, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        int int75 = yearMonth73.indexOf(dateTimeFieldType74);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.YearMonth yearMonth79 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology78);
        org.joda.time.YearMonth.Property property80 = yearMonth79.monthOfYear();
        int int81 = property80.getMaximumValue();
        java.lang.String str82 = property80.getAsShortText();
        java.util.Locale locale83 = null;
        java.lang.String str84 = property80.getAsShortText(locale83);
        org.joda.time.YearMonth yearMonth86 = property80.setCopy("October");
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.DateTime dateTime88 = yearMonth86.toDateTime(readableInstant87);
        org.joda.time.DateTime dateTime89 = yearMonth73.toDateTime(readableInstant87);
        org.joda.time.DateTime dateTime90 = yearMonth29.toDateTime((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.DateTime dateTime91 = yearMonth20.toDateTime((org.joda.time.ReadableInstant) dateTime90);
        int int92 = property4.compareTo((org.joda.time.ReadableInstant) dateTime90);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Oct" + "'", str12, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 12 + "'", int81 == 12);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Oct" + "'", str82, "Oct");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Oct" + "'", str84, "Oct");
        org.junit.Assert.assertNotNull(yearMonth86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        boolean boolean28 = yearMonth20.isAfter((org.joda.time.ReadablePartial) yearMonth24);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.YearMonth yearMonth30 = yearMonth24.minus(readablePeriod29);
        boolean boolean31 = property4.equals((java.lang.Object) yearMonth24);
        org.joda.time.YearMonth yearMonth32 = property4.getYearMonth();
        java.util.Locale locale33 = null;
        int int34 = property4.getMaximumTextLength(locale33);
        java.lang.Class<?> wildcardClass35 = property4.getClass();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth.Property property10 = yearMonth9.monthOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        org.joda.time.YearMonth yearMonth19 = yearMonth14.plusMonths((int) (byte) 10);
        int int20 = property10.compareTo((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = yearMonth14.getChronology();
        org.joda.time.YearMonth yearMonth22 = org.joda.time.YearMonth.now(chronology21);
        org.joda.time.YearMonth yearMonth23 = yearMonth5.withChronologyRetainFields(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.YearMonth yearMonth25 = yearMonth5.minus(readablePeriod24);
        int[] intArray26 = yearMonth5.getValues();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[97, 10]");
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        java.lang.String str25 = yearMonth8.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property4.getAsShortText(locale11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property4.getFieldType();
        int int14 = property4.getMaximumValue();
        java.lang.String str15 = property4.getAsText();
        int int16 = property4.get();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Oct" + "'", str12, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "October" + "'", str15, "October");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.YearMonth.Property property36 = yearMonth3.property(dateTimeFieldType34);
        java.lang.String str37 = property36.getAsText();
        org.joda.time.DateTimeField dateTimeField38 = property36.getField();
        org.joda.time.YearMonth yearMonth40 = property36.addWrapFieldToCopy(3);
        org.joda.time.YearMonth yearMonth42 = property36.addWrapFieldToCopy((int) (short) 10);
        java.lang.String str43 = property36.getName();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "October" + "'", str37, "October");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "monthOfYear" + "'", str43, "monthOfYear");
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.Chronology chronology2 = yearMonth1.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField4 = yearMonth1.getField((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth yearMonth15 = yearMonth9.minusYears((int) (byte) 100);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        boolean boolean29 = yearMonth21.isAfter((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth.Property property34 = yearMonth33.monthOfYear();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth yearMonth40 = yearMonth38.minusYears((int) (short) 0);
        int int41 = yearMonth38.size();
        org.joda.time.YearMonth yearMonth43 = yearMonth38.plusMonths((int) (byte) 10);
        int int44 = property34.compareTo((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology45 = yearMonth38.getChronology();
        org.joda.time.YearMonth yearMonth46 = yearMonth25.withChronologyRetainFields(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.YearMonth yearMonth49 = yearMonth46.withPeriodAdded(readablePeriod47, (int) 'a');
        org.joda.time.YearMonth yearMonth51 = yearMonth46.plusMonths(9);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology54);
        org.joda.time.YearMonth.Property property56 = yearMonth55.monthOfYear();
        int int57 = property56.getMaximumValue();
        java.lang.String str58 = property56.getAsShortText();
        java.util.Locale locale59 = null;
        java.lang.String str60 = property56.getAsShortText(locale59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property56.getFieldType();
        int int62 = yearMonth46.get(dateTimeFieldType61);
        boolean boolean63 = yearMonth9.isSupported(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 12 + "'", int57 == 12);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Oct" + "'", str58, "Oct");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Oct" + "'", str60, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        int int31 = yearMonth28.size();
        boolean boolean32 = yearMonth24.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth.Property property37 = yearMonth36.monthOfYear();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth yearMonth43 = yearMonth41.minusYears((int) (short) 0);
        int int44 = yearMonth41.size();
        org.joda.time.YearMonth yearMonth46 = yearMonth41.plusMonths((int) (byte) 10);
        int int47 = property37.compareTo((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.Chronology chronology48 = yearMonth41.getChronology();
        org.joda.time.YearMonth yearMonth49 = yearMonth28.withChronologyRetainFields(chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.YearMonth yearMonth52 = yearMonth49.withPeriodAdded(readablePeriod50, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        int int54 = yearMonth52.indexOf(dateTimeFieldType53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth.Property property59 = yearMonth58.monthOfYear();
        int int60 = property59.getMaximumValue();
        java.lang.String str61 = property59.getAsShortText();
        java.util.Locale locale62 = null;
        java.lang.String str63 = property59.getAsShortText(locale62);
        org.joda.time.YearMonth yearMonth65 = property59.setCopy("October");
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = yearMonth65.toDateTime(readableInstant66);
        org.joda.time.DateTime dateTime68 = yearMonth52.toDateTime(readableInstant66);
        org.joda.time.DateTime dateTime69 = yearMonth8.toDateTime((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.YearMonth yearMonth71 = yearMonth8.minusMonths((int) (short) 10);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.YearMonth yearMonth75 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology74);
        org.joda.time.YearMonth.Property property76 = yearMonth75.monthOfYear();
        int int77 = property76.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField78 = property76.getField();
        org.joda.time.YearMonth yearMonth80 = property76.addToCopy((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = property76.getFieldType();
        int int82 = yearMonth71.indexOf(dateTimeFieldType81);
        int int83 = yearMonth71.getYear();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 12 + "'", int60 == 12);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Oct" + "'", str61, "Oct");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Oct" + "'", str63, "Oct");
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 96 + "'", int83 == 96);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addToCopy((int) (short) 1);
        java.util.Locale locale10 = null;
        java.lang.String str11 = property4.getAsText(locale10);
        int int12 = property4.getMinimumValue();
        java.util.Locale locale14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth15 = property4.setCopy("", locale14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "October" + "'", str11, "October");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(10L);
        org.joda.time.YearMonth.Property property2 = yearMonth1.monthOfYear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth.Property property7 = yearMonth6.monthOfYear();
        int int8 = property7.getMaximumValue();
        java.util.Locale locale9 = null;
        int int10 = property7.getMaximumShortTextLength(locale9);
        java.util.Locale locale11 = null;
        int int12 = property7.getMaximumTextLength(locale11);
        java.lang.String str13 = property7.getName();
        org.joda.time.YearMonth yearMonth15 = property7.addWrapFieldToCopy(100);
        boolean boolean16 = yearMonth1.isEqual((org.joda.time.ReadablePartial) yearMonth15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.YearMonth yearMonth18 = yearMonth15.minus(readablePeriod17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.minusYears((int) (short) 0);
        boolean boolean40 = yearMonth27.isAfter((org.joda.time.ReadablePartial) yearMonth37);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        int int42 = yearMonth27.indexOf(dateTimeFieldType41);
        int int43 = yearMonth27.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = yearMonth27.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = yearMonth27.getFieldType(1);
        org.joda.time.YearMonth yearMonth48 = yearMonth15.withField(dateTimeFieldType46, 11);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(yearMonth48);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.plusYears((int) '#');
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.YearMonth yearMonth41 = yearMonth37.minus(readablePeriod40);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology47);
        org.joda.time.YearMonth yearMonth50 = yearMonth48.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        boolean boolean58 = yearMonth50.isAfter((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology61);
        org.joda.time.YearMonth.Property property63 = yearMonth62.monthOfYear();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.YearMonth yearMonth67 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology66);
        org.joda.time.YearMonth yearMonth69 = yearMonth67.minusYears((int) (short) 0);
        int int70 = yearMonth67.size();
        org.joda.time.YearMonth yearMonth72 = yearMonth67.plusMonths((int) (byte) 10);
        int int73 = property63.compareTo((org.joda.time.ReadablePartial) yearMonth67);
        org.joda.time.Chronology chronology74 = yearMonth67.getChronology();
        org.joda.time.YearMonth yearMonth75 = yearMonth54.withChronologyRetainFields(chronology74);
        org.joda.time.YearMonth yearMonth76 = new org.joda.time.YearMonth((long) (short) 1, chronology74);
        org.joda.time.YearMonth yearMonth77 = new org.joda.time.YearMonth(chronology74);
        org.joda.time.YearMonth yearMonth78 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology74);
        int int80 = yearMonth78.getValue((int) (short) 1);
        boolean boolean81 = yearMonth41.isEqual((org.joda.time.ReadablePartial) yearMonth78);
        int[] intArray82 = yearMonth78.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate84 = yearMonth78.toLocalDate(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(yearMonth75);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[100, 10]");
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.plusYears((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate41 = yearMonth37.toLocalDate(100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth39);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.lang.String str8 = property4.getName();
        java.util.Locale locale9 = null;
        int int10 = property4.getMaximumShortTextLength(locale9);
        java.lang.String str11 = property4.getAsText();
        java.lang.String str12 = property4.getAsString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "October" + "'", str11, "October");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "10" + "'", str12, "10");
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) 100);
        org.joda.time.YearMonth yearMonth3 = yearMonth1.withYear((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.YearMonth yearMonth5 = yearMonth1.plus(readablePeriod4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        org.joda.time.YearMonth yearMonth14 = yearMonth9.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = yearMonth9.indexOf(dateTimeFieldType15);
        org.joda.time.YearMonth yearMonth18 = yearMonth9.plusMonths((-1));
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        int int29 = yearMonth22.indexOf(dateTimeFieldType28);
        org.joda.time.Interval interval30 = yearMonth22.toInterval();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth.Property property35 = yearMonth34.monthOfYear();
        int int36 = property35.getMaximumValue();
        java.lang.String str37 = property35.getAsShortText();
        java.util.Locale locale38 = null;
        java.lang.String str39 = property35.getAsShortText(locale38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property35.getFieldType();
        int int41 = yearMonth22.get(dateTimeFieldType40);
        org.joda.time.YearMonth.Property property42 = yearMonth9.property(dateTimeFieldType40);
        org.joda.time.Chronology chronology43 = yearMonth9.getChronology();
        int int44 = yearMonth5.compareTo((org.joda.time.ReadablePartial) yearMonth9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth46 = yearMonth9.withMonthOfYear(1980);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1980 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 12 + "'", int36 == 12);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Oct" + "'", str37, "Oct");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Oct" + "'", str39, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth5.getYear();
        org.joda.time.YearMonth yearMonth8 = yearMonth5.plusMonths(2);
        org.joda.time.Chronology chronology9 = yearMonth5.getChronology();
        int int10 = yearMonth5.size();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = yearMonth5.getValue(98);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 98");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        java.lang.String str9 = property4.getAsString();
        int int10 = property4.get();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "10" + "'", str9, "10");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.plusYears((int) '#');
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.YearMonth yearMonth41 = yearMonth37.minus(readablePeriod40);
        org.joda.time.YearMonth.Property property42 = yearMonth41.year();
        java.lang.Class<?> wildcardClass43 = property42.getClass();
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        int int47 = property46.getMinimumValue();
        java.util.Locale locale48 = null;
        int int49 = property46.getMaximumShortTextLength(locale48);
        org.joda.time.YearMonth yearMonth51 = property46.addToCopy((int) (short) 1);
        boolean boolean52 = yearMonth3.equals((java.lang.Object) yearMonth51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        int int59 = yearMonth56.size();
        org.joda.time.YearMonth yearMonth61 = yearMonth56.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        int int63 = yearMonth56.indexOf(dateTimeFieldType62);
        int int64 = yearMonth56.getYear();
        boolean boolean65 = yearMonth51.isBefore((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.YearMonth yearMonth67 = yearMonth56.minus(readablePeriod66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.YearMonth yearMonth70 = yearMonth67.withPeriodAdded(readablePeriod68, 2020);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertNotNull(yearMonth70);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.Interval interval26 = yearMonth18.toInterval();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        int int37 = yearMonth18.get(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth5.property(dateTimeFieldType36);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonth yearMonth40 = yearMonth5.minus(readablePeriod39);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = yearMonth40.getValue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth40);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth.Property property14 = yearMonth9.year();
        org.joda.time.YearMonth.Property property15 = yearMonth9.year();
        org.joda.time.YearMonth yearMonth17 = yearMonth9.plusMonths((int) (byte) 1);
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = yearMonth18.toString(dateTimeFormatter19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        boolean boolean34 = yearMonth26.isAfter((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth.Property property39 = yearMonth38.monthOfYear();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth yearMonth45 = yearMonth43.minusYears((int) (short) 0);
        int int46 = yearMonth43.size();
        org.joda.time.YearMonth yearMonth48 = yearMonth43.plusMonths((int) (byte) 10);
        int int49 = property39.compareTo((org.joda.time.ReadablePartial) yearMonth43);
        org.joda.time.Chronology chronology50 = yearMonth43.getChronology();
        org.joda.time.YearMonth yearMonth51 = yearMonth30.withChronologyRetainFields(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.YearMonth yearMonth54 = yearMonth51.withPeriodAdded(readablePeriod52, (int) 'a');
        org.joda.time.YearMonth yearMonth56 = yearMonth51.plusMonths(9);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.YearMonth yearMonth60 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology59);
        org.joda.time.YearMonth.Property property61 = yearMonth60.monthOfYear();
        int int62 = property61.getMaximumValue();
        java.lang.String str63 = property61.getAsShortText();
        java.util.Locale locale64 = null;
        java.lang.String str65 = property61.getAsShortText(locale64);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = property61.getFieldType();
        int int67 = yearMonth51.get(dateTimeFieldType66);
        int int68 = yearMonth18.get(dateTimeFieldType66);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth70 = yearMonth9.withField(dateTimeFieldType66, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2020-11" + "'", str20, "2020-11");
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 12 + "'", int62 == 12);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Oct" + "'", str63, "Oct");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Oct" + "'", str65, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 11 + "'", int68 == 11);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        int int12 = property4.getMinimumValueOverall();
        org.joda.time.DurationField durationField13 = property4.getRangeDurationField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addToCopy((int) (short) 10);
        int int13 = property4.get();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        int int19 = property18.getMaximumValue();
        java.util.Locale locale20 = null;
        int int21 = property18.getMaximumShortTextLength(locale20);
        java.util.Locale locale22 = null;
        int int23 = property18.getMaximumTextLength(locale22);
        java.lang.String str24 = property18.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property18.getFieldType();
        int int26 = property18.getMinimumValue();
        java.lang.String str27 = property18.getName();
        int int28 = property18.getMinimumValueOverall();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth.Property property33 = yearMonth32.monthOfYear();
        int int34 = property33.getMaximumValue();
        java.lang.String str35 = property33.getAsShortText();
        java.util.Locale locale36 = null;
        java.lang.String str37 = property33.getAsShortText(locale36);
        org.joda.time.YearMonth yearMonth39 = property33.setCopy("October");
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = yearMonth39.toDateTime(readableInstant40);
        int int42 = property18.compareTo((org.joda.time.ReadableInstant) dateTime41);
        int int43 = property4.compareTo((org.joda.time.ReadableInstant) dateTime41);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Oct" + "'", str24, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "monthOfYear" + "'", str27, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 12 + "'", int34 == 12);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Oct" + "'", str37, "Oct");
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.YearMonth.Property property22 = yearMonth18.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.YearMonth yearMonth24 = yearMonth18.minus(readablePeriod23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonth18.getFieldTypes();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        java.lang.String str19 = yearMonth8.toString();
        org.joda.time.YearMonth yearMonth21 = yearMonth8.withMonthOfYear(11);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.YearMonth yearMonth25 = yearMonth21.withPeriodAdded(readablePeriod23, (int) (byte) 100);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0097-10" + "'", str19, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth25);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        int int37 = yearMonth34.size();
        org.joda.time.YearMonth yearMonth39 = yearMonth34.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        int int41 = yearMonth34.indexOf(dateTimeFieldType40);
        org.joda.time.Interval interval42 = yearMonth34.toInterval();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        int int48 = property47.getMaximumValue();
        java.lang.String str49 = property47.getAsShortText();
        java.util.Locale locale50 = null;
        java.lang.String str51 = property47.getAsShortText(locale50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property47.getFieldType();
        int int53 = yearMonth34.get(dateTimeFieldType52);
        boolean boolean54 = yearMonth30.isSupported(dateTimeFieldType52);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth yearMonth60 = yearMonth58.minusYears((int) (short) 0);
        org.joda.time.Interval interval61 = yearMonth58.toInterval();
        org.joda.time.Chronology chronology62 = yearMonth58.getChronology();
        org.joda.time.YearMonth yearMonth63 = yearMonth30.withChronologyRetainFields(chronology62);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 12 + "'", int48 == 12);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Oct" + "'", str49, "Oct");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Oct" + "'", str51, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(yearMonth63);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        org.joda.time.Interval interval31 = yearMonth28.toInterval();
        int int32 = yearMonth8.compareTo((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        org.joda.time.YearMonth yearMonth41 = yearMonth36.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        int int43 = yearMonth36.indexOf(dateTimeFieldType42);
        org.joda.time.YearMonth yearMonth45 = yearMonth36.plusMonths((-1));
        org.joda.time.YearMonth yearMonth47 = yearMonth45.withMonthOfYear((int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology51);
        org.joda.time.YearMonth yearMonth54 = yearMonth52.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth yearMonth60 = yearMonth58.minusYears((int) (short) 0);
        int int61 = yearMonth58.size();
        boolean boolean62 = yearMonth54.isAfter((org.joda.time.ReadablePartial) yearMonth58);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth.Property property67 = yearMonth66.monthOfYear();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.YearMonth yearMonth71 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology70);
        org.joda.time.YearMonth yearMonth73 = yearMonth71.minusYears((int) (short) 0);
        int int74 = yearMonth71.size();
        org.joda.time.YearMonth yearMonth76 = yearMonth71.plusMonths((int) (byte) 10);
        int int77 = property67.compareTo((org.joda.time.ReadablePartial) yearMonth71);
        org.joda.time.Chronology chronology78 = yearMonth71.getChronology();
        org.joda.time.YearMonth yearMonth79 = yearMonth58.withChronologyRetainFields(chronology78);
        org.joda.time.YearMonth yearMonth80 = new org.joda.time.YearMonth((long) (short) 1, chronology78);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.YearMonth yearMonth83 = yearMonth80.withPeriodAdded(readablePeriod81, 100);
        org.joda.time.YearMonth yearMonth85 = yearMonth80.plusYears(10);
        org.joda.time.YearMonth yearMonth87 = yearMonth85.plusYears((int) '#');
        org.joda.time.YearMonth yearMonth90 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.YearMonth yearMonth92 = yearMonth90.withYear((int) (byte) 1);
        boolean boolean93 = yearMonth85.equals((java.lang.Object) yearMonth92);
        org.joda.time.ReadablePeriod readablePeriod94 = null;
        org.joda.time.YearMonth yearMonth96 = yearMonth85.withPeriodAdded(readablePeriod94, 2);
        int int97 = yearMonth45.compareTo((org.joda.time.ReadablePartial) yearMonth96);
        boolean boolean98 = yearMonth8.isEqual((org.joda.time.ReadablePartial) yearMonth45);
        org.joda.time.YearMonth.Property property99 = yearMonth45.monthOfYear();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(yearMonth76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(yearMonth79);
        org.junit.Assert.assertNotNull(yearMonth83);
        org.junit.Assert.assertNotNull(yearMonth85);
        org.junit.Assert.assertNotNull(yearMonth87);
        org.junit.Assert.assertNotNull(yearMonth92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(yearMonth96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(property99);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.plusYears((int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = yearMonth32.getFieldTypes();
        org.joda.time.DateTimeField[] dateTimeFieldArray34 = yearMonth32.getFields();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.YearMonth yearMonth36 = yearMonth32.plus(readablePeriod35);
        int[] intArray37 = yearMonth36.getValues();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(dateTimeFieldArray34);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[96, 10]");
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        org.joda.time.YearMonth yearMonth41 = yearMonth36.plusMonths((int) (byte) 10);
        int int42 = property32.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        boolean boolean49 = yearMonth36.isAfter((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = yearMonth36.indexOf(dateTimeFieldType50);
        int int52 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.YearMonth yearMonth54 = yearMonth36.minusYears(11);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Interval interval56 = yearMonth54.toInterval(dateTimeZone55);
        org.joda.time.Chronology chronology57 = yearMonth54.getChronology();
        org.joda.time.YearMonth yearMonth58 = org.joda.time.YearMonth.now(chronology57);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(yearMonth58);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMinimumValueOverall();
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy((int) ' ');
        org.joda.time.YearMonth yearMonth14 = property4.addWrapFieldToCopy(2);
        org.joda.time.YearMonth yearMonth16 = property4.setCopy(9);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.YearMonth yearMonth18 = yearMonth16.plus(readablePeriod17);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth18);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMinimumValueOverall();
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy((int) ' ');
        java.util.Locale locale13 = null;
        java.lang.String str14 = property4.getAsText(locale13);
        int int15 = property4.getMinimumValue();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        boolean boolean29 = yearMonth21.isAfter((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Interval interval30 = yearMonth21.toInterval();
        org.joda.time.YearMonth.Property property31 = yearMonth21.year();
        int[] intArray32 = yearMonth21.getValues();
        org.joda.time.YearMonth yearMonth34 = yearMonth21.minusMonths(2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = yearMonth34.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth34.withPeriodAdded(readablePeriod36, 9);
        boolean boolean39 = property4.equals((java.lang.Object) yearMonth38);
        java.util.Locale locale41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth42 = property4.setCopy("2020-11", locale41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2020-11\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "October" + "'", str14, "October");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[97, 10]");
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.YearMonth yearMonth8 = property4.addToCopy((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth10 = property4.setCopy((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(yearMonth8);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.getMaximumValue();
        java.lang.String str17 = property15.getAsShortText();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property15.getAsShortText(locale18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property15.getFieldType();
        org.joda.time.YearMonth.Property property21 = yearMonth3.property(dateTimeFieldType20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        boolean boolean35 = yearMonth27.isAfter((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth.Property property40 = yearMonth39.monthOfYear();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        int int47 = yearMonth44.size();
        org.joda.time.YearMonth yearMonth49 = yearMonth44.plusMonths((int) (byte) 10);
        int int50 = property40.compareTo((org.joda.time.ReadablePartial) yearMonth44);
        org.joda.time.Chronology chronology51 = yearMonth44.getChronology();
        org.joda.time.YearMonth yearMonth52 = yearMonth31.withChronologyRetainFields(chronology51);
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3, chronology51);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonth yearMonth56 = yearMonth3.withPeriodAdded(readablePeriod54, (int) (short) -1);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.YearMonth yearMonth59 = yearMonth56.withPeriodAdded(readablePeriod57, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int61 = yearMonth59.getValue(11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Oct" + "'", str17, "Oct");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Oct" + "'", str19, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertNotNull(yearMonth59);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = yearMonth1.toString("0097-12", locale5);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0097-12" + "'", str6, "0097-12");
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) (byte) 0);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((long) (short) 1, chronology32);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth(chronology32);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = yearMonth36.toString(dateTimeFormatter37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonth yearMonth40 = yearMonth36.plus(readablePeriod39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minus(readablePeriod41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        int int48 = property47.getMaximumValue();
        java.lang.String str49 = property47.getAsShortText();
        java.util.Locale locale50 = null;
        java.lang.String str51 = property47.getAsShortText(locale50);
        org.joda.time.YearMonth yearMonth53 = property47.setCopy("October");
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = yearMonth53.toDateTime(readableInstant54);
        org.joda.time.DateTime dateTime56 = yearMonth40.toDateTime(readableInstant54);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0100-10" + "'", str38, "0100-10");
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 12 + "'", int48 == 12);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Oct" + "'", str49, "Oct");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Oct" + "'", str51, "Oct");
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth18 = yearMonth14.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.Chronology chronology21 = yearMonth20.getChronology();
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth(chronology21);
        org.joda.time.YearMonth yearMonth23 = yearMonth18.withChronologyRetainFields(chronology21);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.plusMonths(11);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.withYear(10);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertNotNull(yearMonth27);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy(100);
        int int13 = yearMonth12.getMonthOfYear();
        org.joda.time.YearMonth.Property property14 = yearMonth12.year();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.YearMonth yearMonth27 = yearMonth18.plusMonths((-1));
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        org.joda.time.YearMonth yearMonth36 = yearMonth31.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        int int38 = yearMonth31.indexOf(dateTimeFieldType37);
        org.joda.time.Interval interval39 = yearMonth31.toInterval();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth.Property property44 = yearMonth43.monthOfYear();
        int int45 = property44.getMaximumValue();
        java.lang.String str46 = property44.getAsShortText();
        java.util.Locale locale47 = null;
        java.lang.String str48 = property44.getAsShortText(locale47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property44.getFieldType();
        int int50 = yearMonth31.get(dateTimeFieldType49);
        org.joda.time.YearMonth.Property property51 = yearMonth18.property(dateTimeFieldType49);
        org.joda.time.Chronology chronology52 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth(chronology52);
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth yearMonth60 = yearMonth58.minusYears((int) (short) 0);
        org.joda.time.Interval interval61 = yearMonth58.toInterval();
        org.joda.time.Chronology chronology62 = yearMonth58.getChronology();
        org.joda.time.YearMonth yearMonth63 = yearMonth54.withChronologyRetainFields(chronology62);
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth(chronology62);
        org.joda.time.YearMonth yearMonth65 = yearMonth53.withChronologyRetainFields(chronology62);
        org.joda.time.YearMonth yearMonth66 = yearMonth12.withChronologyRetainFields(chronology62);
        org.joda.time.Interval interval67 = yearMonth12.toInterval();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 12 + "'", int45 == 12);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Oct" + "'", str46, "Oct");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Oct" + "'", str48, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertNotNull(interval67);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        int int11 = property4.getMinimumValueOverall();
        java.util.Locale locale12 = null;
        int int13 = property4.getMaximumTextLength(locale12);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("2020-11");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        int int8 = yearMonth5.size();
        org.joda.time.YearMonth yearMonth10 = yearMonth5.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = yearMonth5.getFieldTypes();
        int[] intArray12 = yearMonth5.getValues();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth.Property property17 = yearMonth16.monthOfYear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        int int24 = yearMonth21.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth21.plusMonths((int) (byte) 10);
        int int27 = property17.compareTo((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.Chronology chronology28 = yearMonth21.getChronology();
        org.joda.time.YearMonth yearMonth29 = org.joda.time.YearMonth.now(chronology28);
        org.joda.time.YearMonth yearMonth30 = org.joda.time.YearMonth.now(chronology28);
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((java.lang.Object) yearMonth5, chronology28);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth.Property property36 = yearMonth35.monthOfYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minusYears((int) (short) 0);
        int int43 = yearMonth40.size();
        org.joda.time.YearMonth yearMonth45 = yearMonth40.plusMonths((int) (byte) 10);
        int int46 = property36.compareTo((org.joda.time.ReadablePartial) yearMonth40);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Interval interval48 = yearMonth40.toInterval(dateTimeZone47);
        org.joda.time.YearMonth yearMonth50 = yearMonth40.minusYears((int) (short) 0);
        boolean boolean51 = yearMonth31.isAfter((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.YearMonth yearMonth53 = yearMonth50.plusYears(12);
        boolean boolean54 = yearMonth1.isAfter((org.joda.time.ReadablePartial) yearMonth53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = yearMonth53.getFieldType((int) (short) 1);
        org.joda.time.YearMonth.Property property57 = yearMonth53.year();
        org.junit.Assert.assertNotNull(yearMonth1);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[97, 10]");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.YearMonth.Property property36 = yearMonth3.property(dateTimeFieldType34);
        java.lang.String str37 = property36.getAsText();
        java.lang.String str38 = property36.getAsString();
        java.lang.String str39 = property36.getAsShortText();
        org.joda.time.YearMonth yearMonth41 = property36.addToCopy(0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = yearMonth41.getFieldTypes();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        int int48 = property47.getMaximumValue();
        java.util.Locale locale49 = null;
        int int50 = property47.getMaximumShortTextLength(locale49);
        java.util.Locale locale51 = null;
        int int52 = property47.getMaximumTextLength(locale51);
        org.joda.time.DurationField durationField53 = property47.getRangeDurationField();
        java.lang.String str54 = property47.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property47.getFieldType();
        java.util.Locale locale57 = null;
        org.joda.time.YearMonth yearMonth58 = property47.setCopy("October", locale57);
        boolean boolean59 = yearMonth41.isAfter((org.joda.time.ReadablePartial) yearMonth58);
        org.joda.time.YearMonth.Property property60 = yearMonth58.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = yearMonth58.toString("Property[monthOfYear]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "October" + "'", str37, "October");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "10" + "'", str38, "10");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Oct" + "'", str39, "Oct");
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 12 + "'", int48 == 12);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Property[monthOfYear]" + "'", str54, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = yearMonth8.getFields();
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((java.lang.Object) yearMonth8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = yearMonth8.toString(dateTimeFormatter11);
        org.joda.time.YearMonth yearMonth14 = yearMonth8.minusMonths(97);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0098-08" + "'", str12, "0098-08");
        org.junit.Assert.assertNotNull(yearMonth14);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.YearMonth.Property property36 = yearMonth3.property(dateTimeFieldType34);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minusYears((int) (short) 0);
        int int43 = yearMonth40.size();
        org.joda.time.YearMonth yearMonth45 = yearMonth40.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        int int47 = yearMonth40.indexOf(dateTimeFieldType46);
        org.joda.time.YearMonth yearMonth49 = yearMonth40.plusMonths((-1));
        org.joda.time.YearMonth yearMonth51 = yearMonth40.plusMonths((-1));
        org.joda.time.YearMonth.Property property52 = yearMonth51.monthOfYear();
        int int53 = property52.get();
        org.joda.time.YearMonth yearMonth54 = property52.getYearMonth();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth yearMonth60 = yearMonth58.minusYears((int) (short) 0);
        int int61 = yearMonth58.size();
        org.joda.time.YearMonth yearMonth63 = yearMonth58.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        int int65 = yearMonth58.indexOf(dateTimeFieldType64);
        org.joda.time.YearMonth yearMonth67 = yearMonth58.plusMonths((-1));
        org.joda.time.YearMonth yearMonth69 = yearMonth58.plusMonths((-1));
        org.joda.time.YearMonth.Property property70 = yearMonth69.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.YearMonth yearMonth73 = yearMonth69.withPeriodAdded(readablePeriod71, (int) (short) -1);
        org.joda.time.YearMonth yearMonth75 = yearMonth69.plusMonths((int) (short) 10);
        boolean boolean76 = yearMonth54.isEqual((org.joda.time.ReadablePartial) yearMonth69);
        int int77 = property36.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.YearMonth yearMonth79 = yearMonth54.plusYears((int) 'a');
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertNotNull(yearMonth75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(yearMonth79);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        int[] intArray4 = yearMonth3.getValues();
        org.joda.time.YearMonth yearMonth6 = yearMonth3.withYear(11);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        boolean boolean21 = yearMonth13.isAfter((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth.Property property26 = yearMonth25.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        int int36 = property26.compareTo((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.Chronology chronology37 = yearMonth30.getChronology();
        org.joda.time.YearMonth yearMonth38 = yearMonth17.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((long) (short) 1, chronology37);
        org.joda.time.YearMonth yearMonth40 = org.joda.time.YearMonth.now(chronology37);
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3, chronology37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = yearMonth41.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 10]");
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth40);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology2 = yearMonth1.getChronology();
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((long) 3, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minus(readablePeriod4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth.Property property10 = yearMonth9.monthOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        org.joda.time.YearMonth yearMonth19 = yearMonth14.plusMonths((int) (byte) 10);
        int int20 = property10.compareTo((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.YearMonth yearMonth21 = property10.getYearMonth();
        java.util.Locale locale22 = null;
        java.lang.String str23 = property10.getAsShortText(locale22);
        org.joda.time.YearMonth yearMonth24 = property10.getYearMonth();
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth yearMonth31 = yearMonth29.minusYears((int) (short) 0);
        org.joda.time.Interval interval32 = yearMonth29.toInterval();
        org.joda.time.Chronology chronology33 = yearMonth29.getChronology();
        org.joda.time.YearMonth yearMonth34 = yearMonth25.withChronologyRetainFields(chronology33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth.Property property39 = yearMonth38.monthOfYear();
        int int40 = property39.getMaximumValue();
        java.util.Locale locale41 = null;
        int int42 = property39.getMaximumShortTextLength(locale41);
        java.util.Locale locale43 = null;
        int int44 = property39.getMaximumTextLength(locale43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology47);
        org.joda.time.YearMonth.Property property49 = yearMonth48.monthOfYear();
        int int50 = property49.getMaximumValue();
        java.util.Locale locale51 = null;
        int int52 = property49.getMaximumShortTextLength(locale51);
        java.util.Locale locale53 = null;
        int int54 = property49.getMaximumTextLength(locale53);
        java.lang.String str55 = property49.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property49.getFieldType();
        boolean boolean57 = property39.equals((java.lang.Object) property49);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property49.getFieldType();
        int int59 = yearMonth34.get(dateTimeFieldType58);
        int int60 = yearMonth24.indexOf(dateTimeFieldType58);
        int int61 = yearMonth3.indexOf(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Oct" + "'", str23, "Oct");
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 12 + "'", int40 == 12);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 12 + "'", int50 == 12);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Oct" + "'", str55, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 11 + "'", int59 == 11);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) 100);
        org.joda.time.YearMonth yearMonth3 = yearMonth1.withYear((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int5 = yearMonth3.getValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth3);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(10L);
        int int2 = yearMonth1.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = yearMonth1.getFieldType((int) (byte) 0);
        int int5 = yearMonth1.size();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        org.joda.time.Chronology chronology24 = yearMonth8.getChronology();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(chronology24);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMaximumValue();
        int int10 = property4.getMinimumValueOverall();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property4.getAsText(locale11);
        int int13 = property4.getMaximumValueOverall();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = yearMonth22.toString(dateTimeFormatter29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth.Property property35 = yearMonth34.monthOfYear();
        int int36 = property35.getMinimumValue();
        java.util.Locale locale37 = null;
        int int38 = property35.getMaximumShortTextLength(locale37);
        org.joda.time.DurationField durationField39 = property35.getDurationField();
        boolean boolean40 = yearMonth22.equals((java.lang.Object) property35);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        int int47 = yearMonth44.size();
        org.joda.time.YearMonth yearMonth49 = yearMonth44.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = yearMonth44.indexOf(dateTimeFieldType50);
        org.joda.time.YearMonth yearMonth53 = yearMonth44.plusMonths((-1));
        boolean boolean55 = yearMonth53.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology58);
        org.joda.time.YearMonth.Property property60 = yearMonth59.monthOfYear();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology63);
        org.joda.time.YearMonth yearMonth66 = yearMonth64.minusYears((int) (short) 0);
        int int67 = yearMonth64.size();
        org.joda.time.YearMonth yearMonth69 = yearMonth64.plusMonths((int) (byte) 10);
        int int70 = property60.compareTo((org.joda.time.ReadablePartial) yearMonth64);
        org.joda.time.YearMonth yearMonth71 = property60.getYearMonth();
        java.lang.String str72 = property60.getAsText();
        org.joda.time.YearMonth yearMonth73 = property60.getYearMonth();
        boolean boolean74 = yearMonth53.isBefore((org.joda.time.ReadablePartial) yearMonth73);
        org.joda.time.YearMonth yearMonth76 = yearMonth53.minusYears(3);
        int int77 = yearMonth22.compareTo((org.joda.time.ReadablePartial) yearMonth53);
        org.joda.time.YearMonth yearMonth79 = yearMonth53.plusMonths(1);
        boolean boolean80 = property4.equals((java.lang.Object) 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "October" + "'", str12, "October");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0097-10" + "'", str30, "0097-10");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "October" + "'", str72, "October");
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(yearMonth76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(yearMonth79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        int int8 = property4.getMaximumValueOverall();
        java.util.Locale locale9 = null;
        java.lang.String str10 = property4.getAsText(locale9);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "October" + "'", str10, "October");
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth.Property property6 = yearMonth5.monthOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        org.joda.time.YearMonth yearMonth15 = yearMonth10.plusMonths((int) (byte) 10);
        int int16 = property6.compareTo((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Interval interval18 = yearMonth10.toInterval(dateTimeZone17);
        org.joda.time.YearMonth yearMonth20 = yearMonth10.minusYears((int) (short) 0);
        java.lang.String str21 = yearMonth10.toString();
        org.joda.time.YearMonth yearMonth23 = yearMonth10.withMonthOfYear(11);
        org.joda.time.YearMonth.Property property24 = yearMonth23.monthOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth yearMonth31 = yearMonth29.minusYears((int) (short) 0);
        int int32 = yearMonth29.size();
        org.joda.time.YearMonth yearMonth34 = yearMonth29.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        int int36 = yearMonth29.indexOf(dateTimeFieldType35);
        org.joda.time.YearMonth yearMonth38 = yearMonth29.plusMonths((-1));
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonth42.indexOf(dateTimeFieldType48);
        org.joda.time.Interval interval50 = yearMonth42.toInterval();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth.Property property55 = yearMonth54.monthOfYear();
        int int56 = property55.getMaximumValue();
        java.lang.String str57 = property55.getAsShortText();
        java.util.Locale locale58 = null;
        java.lang.String str59 = property55.getAsShortText(locale58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property55.getFieldType();
        int int61 = yearMonth42.get(dateTimeFieldType60);
        org.joda.time.YearMonth.Property property62 = yearMonth29.property(dateTimeFieldType60);
        org.joda.time.Chronology chronology63 = yearMonth29.getChronology();
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth(chronology63);
        org.joda.time.YearMonth yearMonth65 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.YearMonth yearMonth69 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology68);
        org.joda.time.YearMonth yearMonth71 = yearMonth69.minusYears((int) (short) 0);
        org.joda.time.Interval interval72 = yearMonth69.toInterval();
        org.joda.time.Chronology chronology73 = yearMonth69.getChronology();
        org.joda.time.YearMonth yearMonth74 = yearMonth65.withChronologyRetainFields(chronology73);
        org.joda.time.YearMonth yearMonth75 = new org.joda.time.YearMonth(chronology73);
        org.joda.time.YearMonth yearMonth76 = yearMonth64.withChronologyRetainFields(chronology73);
        org.joda.time.YearMonth yearMonth77 = new org.joda.time.YearMonth((long) (short) 10, chronology73);
        org.joda.time.YearMonth yearMonth78 = new org.joda.time.YearMonth((java.lang.Object) yearMonth23, chronology73);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth79 = new org.joda.time.YearMonth(0, 292278993, chronology73);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0097-10" + "'", str21, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 12 + "'", int56 == 12);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Oct" + "'", str57, "Oct");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Oct" + "'", str59, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertNotNull(yearMonth76);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.YearMonth.Property property36 = yearMonth3.property(dateTimeFieldType34);
        java.lang.String str37 = property36.getAsText();
        org.joda.time.DateTimeField dateTimeField38 = property36.getField();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth.Property property43 = yearMonth42.monthOfYear();
        int int44 = property43.getMaximumValue();
        java.util.Locale locale45 = null;
        int int46 = property43.getMaximumShortTextLength(locale45);
        java.util.Locale locale47 = null;
        int int48 = property43.getMaximumTextLength(locale47);
        org.joda.time.DurationField durationField49 = property43.getRangeDurationField();
        int int50 = property43.getMinimumValueOverall();
        int int51 = property43.getMinimumValue();
        boolean boolean52 = property36.equals((java.lang.Object) property43);
        org.joda.time.YearMonth yearMonth54 = property43.addWrapFieldToCopy(2);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "October" + "'", str37, "October");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 12 + "'", int44 == 12);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(yearMonth54);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        int int10 = property4.getMinimumValue();
        int int11 = property4.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = yearMonth18.toString(dateTimeFormatter22);
        org.joda.time.Interval interval24 = yearMonth18.toInterval();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.YearMonth yearMonth27 = yearMonth18.withPeriodAdded(readablePeriod25, (int) (byte) -1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        boolean boolean46 = yearMonth38.isAfter((org.joda.time.ReadablePartial) yearMonth42);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth.Property property51 = yearMonth50.monthOfYear();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology54);
        org.joda.time.YearMonth yearMonth57 = yearMonth55.minusYears((int) (short) 0);
        int int58 = yearMonth55.size();
        org.joda.time.YearMonth yearMonth60 = yearMonth55.plusMonths((int) (byte) 10);
        int int61 = property51.compareTo((org.joda.time.ReadablePartial) yearMonth55);
        org.joda.time.Chronology chronology62 = yearMonth55.getChronology();
        org.joda.time.YearMonth yearMonth63 = yearMonth42.withChronologyRetainFields(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.YearMonth yearMonth66 = yearMonth63.withPeriodAdded(readablePeriod64, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = null;
        int int68 = yearMonth66.indexOf(dateTimeFieldType67);
        boolean boolean69 = yearMonth31.isEqual((org.joda.time.ReadablePartial) yearMonth66);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.YearMonth yearMonth73 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology72);
        org.joda.time.YearMonth.Property property74 = yearMonth73.monthOfYear();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.YearMonth yearMonth78 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology77);
        org.joda.time.YearMonth yearMonth80 = yearMonth78.minusYears((int) (short) 0);
        int int81 = yearMonth78.size();
        org.joda.time.YearMonth yearMonth83 = yearMonth78.plusMonths((int) (byte) 10);
        int int84 = property74.compareTo((org.joda.time.ReadablePartial) yearMonth78);
        boolean boolean85 = yearMonth31.isEqual((org.joda.time.ReadablePartial) yearMonth78);
        int[] intArray86 = yearMonth31.getValues();
        int int87 = yearMonth18.compareTo((org.joda.time.ReadablePartial) yearMonth31);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0097-10" + "'", str23, "0097-10");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(yearMonth83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[97, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("0097-09");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth yearMonth9 = yearMonth7.minusYears((int) (short) 0);
        int int10 = yearMonth7.size();
        org.joda.time.YearMonth yearMonth12 = yearMonth7.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = yearMonth7.indexOf(dateTimeFieldType13);
        org.joda.time.YearMonth yearMonth16 = yearMonth7.plusMonths((-1));
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        org.joda.time.YearMonth yearMonth25 = yearMonth20.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        int int27 = yearMonth20.indexOf(dateTimeFieldType26);
        org.joda.time.Interval interval28 = yearMonth20.toInterval();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth.Property property33 = yearMonth32.monthOfYear();
        int int34 = property33.getMaximumValue();
        java.lang.String str35 = property33.getAsShortText();
        java.util.Locale locale36 = null;
        java.lang.String str37 = property33.getAsShortText(locale36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property33.getFieldType();
        int int39 = yearMonth20.get(dateTimeFieldType38);
        org.joda.time.YearMonth.Property property40 = yearMonth7.property(dateTimeFieldType38);
        org.joda.time.Chronology chronology41 = yearMonth7.getChronology();
        org.joda.time.YearMonth yearMonth42 = org.joda.time.YearMonth.now(chronology41);
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth(1, 3, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth1.withChronologyRetainFields(chronology41);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        int int60 = property50.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = yearMonth54.getChronology();
        org.joda.time.YearMonth yearMonth62 = org.joda.time.YearMonth.now(chronology61);
        org.joda.time.YearMonth yearMonth63 = org.joda.time.YearMonth.now(chronology61);
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((java.lang.Object) "0097-10", chronology61);
        org.joda.time.YearMonth yearMonth65 = yearMonth44.withChronologyRetainFields(chronology61);
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.YearMonth yearMonth70 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology69);
        org.joda.time.YearMonth yearMonth72 = yearMonth70.minusYears((int) (short) 0);
        org.joda.time.Interval interval73 = yearMonth70.toInterval();
        org.joda.time.Chronology chronology74 = yearMonth70.getChronology();
        org.joda.time.YearMonth yearMonth75 = yearMonth66.withChronologyRetainFields(chronology74);
        org.joda.time.YearMonth yearMonth76 = new org.joda.time.YearMonth(chronology74);
        org.joda.time.YearMonth yearMonth77 = new org.joda.time.YearMonth(chronology74);
        org.joda.time.YearMonth yearMonth78 = org.joda.time.YearMonth.now(chronology74);
        org.joda.time.YearMonth yearMonth80 = yearMonth78.plusMonths(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = yearMonth78.getFieldType(0);
        boolean boolean83 = yearMonth65.isSupported(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(yearMonth1);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 12 + "'", int34 == 12);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Oct" + "'", str37, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(yearMonth75);
        org.junit.Assert.assertNotNull(yearMonth78);
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(0, 11);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth5 = yearMonth2.withFieldAdded(durationFieldType3, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonth8.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonth8.toInterval(dateTimeZone26);
        int[] intArray28 = yearMonth8.getValues();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.YearMonth yearMonth30 = yearMonth8.minus(readablePeriod29);
        org.joda.time.YearMonth yearMonth32 = yearMonth8.minusYears((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        int int34 = yearMonth32.indexOf(dateTimeFieldType33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate36 = yearMonth32.toLocalDate((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[97, 10]");
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology15 = yearMonth8.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        org.joda.time.YearMonth.Property property37 = yearMonth19.property(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth8.property(dateTimeFieldType36);
        int int39 = property38.getMaximumValue();
        org.joda.time.YearMonth yearMonth41 = property38.addWrapFieldToCopy(12);
        org.joda.time.YearMonth yearMonth43 = property38.addToCopy((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType45 = yearMonth43.getFieldType(97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(yearMonth43);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        int[] intArray16 = yearMonth5.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = yearMonth5.getFieldTypes();
        int[] intArray18 = yearMonth5.getValues();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[97, 10]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[97, 10]");
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        boolean boolean8 = property4.equals((java.lang.Object) false);
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = yearMonth9.toString(dateTimeFormatter10);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = yearMonth9.getFields();
        int int13 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth9);
        java.lang.String str15 = yearMonth9.toString("97");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2020-11" + "'", str11, "2020-11");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "97" + "'", str15, "97");
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth18 = yearMonth14.withPeriodAdded(readablePeriod16, (int) (short) -1);
        org.joda.time.YearMonth yearMonth20 = yearMonth14.plusMonths((int) (short) 10);
        org.joda.time.YearMonth yearMonth22 = yearMonth14.withYear(3);
        java.util.Locale locale24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = yearMonth22.toString("Sep", locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: p");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(yearMonth22);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.Chronology chronology8 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth9 = yearMonth0.withChronologyRetainFields(chronology8);
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth12 = org.joda.time.YearMonth.now(chronology8);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.plusMonths(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = yearMonth12.getFieldType(0);
        org.joda.time.YearMonth.Property property17 = yearMonth12.year();
        int int18 = property17.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth.Property property14 = yearMonth9.year();
        org.joda.time.YearMonth yearMonth16 = property14.addWrapFieldToCopy((int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        boolean boolean38 = yearMonth25.isAfter((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth25.indexOf(dateTimeFieldType39);
        int int41 = yearMonth25.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = yearMonth25.getFieldTypes();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology46);
        org.joda.time.YearMonth yearMonth49 = yearMonth47.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology52);
        org.joda.time.YearMonth yearMonth55 = yearMonth53.minusYears((int) (short) 0);
        int int56 = yearMonth53.size();
        boolean boolean57 = yearMonth49.isAfter((org.joda.time.ReadablePartial) yearMonth53);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology60);
        org.joda.time.YearMonth.Property property62 = yearMonth61.monthOfYear();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth yearMonth68 = yearMonth66.minusYears((int) (short) 0);
        int int69 = yearMonth66.size();
        org.joda.time.YearMonth yearMonth71 = yearMonth66.plusMonths((int) (byte) 10);
        int int72 = property62.compareTo((org.joda.time.ReadablePartial) yearMonth66);
        org.joda.time.Chronology chronology73 = yearMonth66.getChronology();
        org.joda.time.YearMonth yearMonth74 = yearMonth53.withChronologyRetainFields(chronology73);
        org.joda.time.YearMonth yearMonth75 = new org.joda.time.YearMonth((long) (short) 1, chronology73);
        org.joda.time.YearMonth yearMonth76 = new org.joda.time.YearMonth((java.lang.Object) yearMonth25, chronology73);
        org.joda.time.YearMonth yearMonth77 = new org.joda.time.YearMonth((java.lang.Object) yearMonth76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.YearMonth yearMonth79 = yearMonth76.minus(readablePeriod78);
        boolean boolean80 = yearMonth16.isBefore((org.joda.time.ReadablePartial) yearMonth76);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertNotNull(yearMonth79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth.Property property11 = yearMonth10.monthOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth yearMonth17 = yearMonth15.minusYears((int) (short) 0);
        int int18 = yearMonth15.size();
        org.joda.time.YearMonth yearMonth20 = yearMonth15.plusMonths((int) (byte) 10);
        int int21 = property11.compareTo((org.joda.time.ReadablePartial) yearMonth15);
        org.joda.time.Chronology chronology22 = yearMonth15.getChronology();
        org.joda.time.YearMonth yearMonth23 = org.joda.time.YearMonth.now(chronology22);
        org.joda.time.YearMonth yearMonth24 = yearMonth6.withChronologyRetainFields(chronology22);
        org.joda.time.YearMonth.Property property25 = yearMonth24.year();
        int int26 = property25.getMinimumValue();
        org.joda.time.YearMonth yearMonth27 = property25.getYearMonth();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.minusYears((int) (short) 0);
        int int40 = yearMonth37.size();
        boolean boolean41 = yearMonth33.isAfter((org.joda.time.ReadablePartial) yearMonth37);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        int int53 = yearMonth50.size();
        org.joda.time.YearMonth yearMonth55 = yearMonth50.plusMonths((int) (byte) 10);
        int int56 = property46.compareTo((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.Chronology chronology57 = yearMonth50.getChronology();
        org.joda.time.YearMonth yearMonth58 = yearMonth37.withChronologyRetainFields(chronology57);
        org.joda.time.YearMonth yearMonth59 = org.joda.time.YearMonth.now(chronology57);
        org.joda.time.YearMonth yearMonth60 = yearMonth27.withChronologyRetainFields(chronology57);
        org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth((long) 8, chronology57);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-292275054) + "'", int26 == (-292275054));
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertNotNull(yearMonth60);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        int int15 = property4.getMaximumValueOverall();
        int int16 = property4.getMaximumValueOverall();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property4.getAsShortText(locale17);
        org.joda.time.YearMonth yearMonth20 = property4.addToCopy((int) '#');
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertNotNull(yearMonth20);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        int int8 = property4.getMaximumValueOverall();
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        org.joda.time.Interval interval16 = yearMonth13.toInterval();
        org.joda.time.Chronology chronology17 = yearMonth13.getChronology();
        org.joda.time.YearMonth yearMonth18 = yearMonth9.withChronologyRetainFields(chronology17);
        boolean boolean19 = property4.equals((java.lang.Object) yearMonth9);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.YearMonth yearMonth22 = yearMonth9.withPeriodAdded(readablePeriod20, (int) ' ');
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology25 = yearMonth24.getChronology();
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((long) 3, chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = yearMonth26.getFieldType((int) (short) 1);
        org.joda.time.YearMonth.Property property29 = yearMonth9.property(dateTimeFieldType28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = yearMonth9.toString(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2020-11" + "'", str31, "2020-11");
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth.Property property14 = yearMonth9.year();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonth yearMonth16 = yearMonth9.minus(readablePeriod15);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth16);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMaximumValue();
        int int10 = property4.getMinimumValueOverall();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property4.getAsText(locale11);
        java.lang.String str13 = property4.getName();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "October" + "'", str12, "October");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth3.getFieldTypes();
        int[] intArray10 = yearMonth3.getValues();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        int int25 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.Chronology chronology26 = yearMonth19.getChronology();
        org.joda.time.YearMonth yearMonth27 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth28 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3, chronology26);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth33.indexOf(dateTimeFieldType39);
        org.joda.time.YearMonth yearMonth42 = yearMonth33.plusMonths((-1));
        boolean boolean44 = yearMonth42.equals((java.lang.Object) 1);
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((long) 100);
        boolean boolean47 = yearMonth42.isBefore((org.joda.time.ReadablePartial) yearMonth46);
        boolean boolean48 = yearMonth3.isAfter((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.YearMonth yearMonth50 = yearMonth3.withYear((int) (byte) 1);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[97, 10]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(yearMonth50);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        java.lang.String str9 = property4.getAsText();
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Interval interval17 = yearMonth14.toInterval();
        org.joda.time.Chronology chronology18 = yearMonth14.getChronology();
        org.joda.time.YearMonth yearMonth19 = yearMonth10.withChronologyRetainFields(chronology18);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(chronology18);
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth(chronology18);
        org.joda.time.YearMonth yearMonth22 = org.joda.time.YearMonth.now(chronology18);
        org.joda.time.YearMonth yearMonth23 = org.joda.time.YearMonth.now(chronology18);
        boolean boolean24 = property4.equals((java.lang.Object) yearMonth23);
        org.joda.time.DurationFieldType durationFieldType25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth27 = yearMonth23.withFieldAdded(durationFieldType25, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "October" + "'", str9, "October");
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(dateTimeZone0);
        java.lang.String str2 = yearMonth1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2020-11" + "'", str2, "2020-11");
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        int int5 = yearMonth1.getValue((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        org.joda.time.YearMonth yearMonth14 = yearMonth9.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = yearMonth9.indexOf(dateTimeFieldType15);
        org.joda.time.YearMonth yearMonth18 = yearMonth9.plusMonths((-1));
        org.joda.time.YearMonth yearMonth20 = yearMonth9.plusMonths((-1));
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        int int22 = property21.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property21.getFieldType();
        int int24 = property21.getMaximumValueOverall();
        java.util.Locale locale25 = null;
        java.lang.String str26 = property21.getAsShortText(locale25);
        int int27 = property21.getMinimumValueOverall();
        org.joda.time.YearMonth yearMonth29 = property21.addToCopy((int) (byte) 100);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth.Property property34 = yearMonth33.monthOfYear();
        int int35 = property34.getMaximumValue();
        java.util.Locale locale36 = null;
        int int37 = property34.getMaximumShortTextLength(locale36);
        java.util.Locale locale38 = null;
        int int39 = property34.getMaximumTextLength(locale38);
        java.lang.String str40 = property34.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property34.getFieldType();
        boolean boolean42 = yearMonth29.isSupported(dateTimeFieldType41);
        boolean boolean43 = yearMonth1.isAfter((org.joda.time.ReadablePartial) yearMonth29);
        int[] intArray44 = yearMonth29.getValues();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 12 + "'", int24 == 12);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Sep" + "'", str26, "Sep");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 12 + "'", int35 == 12);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Oct" + "'", str40, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[106, 1]");
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth(chronology30);
        org.joda.time.DurationFieldType durationFieldType34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth36 = yearMonth33.withFieldAdded(durationFieldType34, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        java.lang.String str2 = yearMonth1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth12.withYear((int) (byte) 1);
        boolean boolean36 = yearMonth1.isEqual((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.YearMonth.Property property37 = yearMonth1.monthOfYear();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth.Property property42 = yearMonth41.monthOfYear();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        int int49 = yearMonth46.size();
        org.joda.time.YearMonth yearMonth51 = yearMonth46.plusMonths((int) (byte) 10);
        int int52 = property42.compareTo((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        boolean boolean59 = yearMonth46.isAfter((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        int int61 = yearMonth46.indexOf(dateTimeFieldType60);
        int int62 = yearMonth46.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = yearMonth46.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Interval interval65 = yearMonth46.toInterval(dateTimeZone64);
        int[] intArray66 = yearMonth46.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = yearMonth46.getFieldType((int) (short) 1);
        org.joda.time.YearMonth yearMonth70 = yearMonth46.minusMonths((int) (short) -1);
        boolean boolean71 = property37.equals((java.lang.Object) (short) -1);
        org.joda.time.DurationField durationField72 = property37.getDurationField();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01" + "'", str2, "1970-01");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[97, 10]");
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(durationField72);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("0097-09");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth yearMonth9 = yearMonth7.minusYears((int) (short) 0);
        int int10 = yearMonth7.size();
        org.joda.time.YearMonth yearMonth12 = yearMonth7.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = yearMonth7.indexOf(dateTimeFieldType13);
        org.joda.time.YearMonth yearMonth16 = yearMonth7.plusMonths((-1));
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        org.joda.time.YearMonth yearMonth25 = yearMonth20.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        int int27 = yearMonth20.indexOf(dateTimeFieldType26);
        org.joda.time.Interval interval28 = yearMonth20.toInterval();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth.Property property33 = yearMonth32.monthOfYear();
        int int34 = property33.getMaximumValue();
        java.lang.String str35 = property33.getAsShortText();
        java.util.Locale locale36 = null;
        java.lang.String str37 = property33.getAsShortText(locale36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property33.getFieldType();
        int int39 = yearMonth20.get(dateTimeFieldType38);
        org.joda.time.YearMonth.Property property40 = yearMonth7.property(dateTimeFieldType38);
        org.joda.time.Chronology chronology41 = yearMonth7.getChronology();
        org.joda.time.YearMonth yearMonth42 = org.joda.time.YearMonth.now(chronology41);
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth(1, 3, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth1.withChronologyRetainFields(chronology41);
        java.util.Locale locale46 = null;
        java.lang.String str47 = yearMonth44.toString("2015-01", locale46);
        org.junit.Assert.assertNotNull(yearMonth1);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 12 + "'", int34 == 12);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Oct" + "'", str37, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2015-01" + "'", str47, "2015-01");
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        int int8 = property4.getMaximumValueOverall();
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        org.joda.time.Interval interval16 = yearMonth13.toInterval();
        org.joda.time.Chronology chronology17 = yearMonth13.getChronology();
        org.joda.time.YearMonth yearMonth18 = yearMonth9.withChronologyRetainFields(chronology17);
        boolean boolean19 = property4.equals((java.lang.Object) yearMonth9);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = yearMonth9.toInterval(dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.YearMonth yearMonth23 = yearMonth9.plus(readablePeriod22);
        org.joda.time.YearMonth.Property property24 = yearMonth9.monthOfYear();
        java.util.Locale locale26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth27 = property24.setCopy("0097-09", locale26);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0097-09\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        int[] intArray16 = yearMonth5.getValues();
        org.joda.time.YearMonth yearMonth18 = yearMonth5.minusMonths(2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = yearMonth18.getFieldTypes();
        org.joda.time.Chronology chronology20 = yearMonth18.getChronology();
        org.joda.time.Interval interval21 = yearMonth18.toInterval();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[97, 10]");
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(interval21);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        boolean boolean36 = yearMonth28.isAfter((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        int int51 = property41.compareTo((org.joda.time.ReadablePartial) yearMonth45);
        org.joda.time.Chronology chronology52 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth53 = yearMonth32.withChronologyRetainFields(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonth yearMonth56 = yearMonth53.withPeriodAdded(readablePeriod54, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = yearMonth56.indexOf(dateTimeFieldType57);
        boolean boolean59 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology67);
        org.joda.time.YearMonth yearMonth70 = yearMonth68.minusYears((int) (short) 0);
        int int71 = yearMonth68.size();
        org.joda.time.YearMonth yearMonth73 = yearMonth68.plusMonths((int) (byte) 10);
        int int74 = property64.compareTo((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean75 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean76 = yearMonth17.isAfter((org.joda.time.ReadablePartial) yearMonth21);
        java.util.Locale locale78 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = yearMonth17.toString("Sep", locale78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: p");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addWrapFieldToCopy((int) (byte) 10);
        org.joda.time.YearMonth yearMonth10 = property4.getYearMonth();
        int int11 = property4.get();
        java.lang.String str12 = property4.getAsString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth14 = property4.setCopy("1970-01");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "10" + "'", str12, "10");
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("0097-09");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth yearMonth9 = yearMonth7.minusYears((int) (short) 0);
        int int10 = yearMonth7.size();
        org.joda.time.YearMonth yearMonth12 = yearMonth7.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = yearMonth7.indexOf(dateTimeFieldType13);
        org.joda.time.YearMonth yearMonth16 = yearMonth7.plusMonths((-1));
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        org.joda.time.YearMonth yearMonth25 = yearMonth20.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        int int27 = yearMonth20.indexOf(dateTimeFieldType26);
        org.joda.time.Interval interval28 = yearMonth20.toInterval();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth.Property property33 = yearMonth32.monthOfYear();
        int int34 = property33.getMaximumValue();
        java.lang.String str35 = property33.getAsShortText();
        java.util.Locale locale36 = null;
        java.lang.String str37 = property33.getAsShortText(locale36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property33.getFieldType();
        int int39 = yearMonth20.get(dateTimeFieldType38);
        org.joda.time.YearMonth.Property property40 = yearMonth7.property(dateTimeFieldType38);
        org.joda.time.Chronology chronology41 = yearMonth7.getChronology();
        org.joda.time.YearMonth yearMonth42 = org.joda.time.YearMonth.now(chronology41);
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth(1, 3, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth1.withChronologyRetainFields(chronology41);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        int int60 = property50.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = yearMonth54.getChronology();
        org.joda.time.YearMonth yearMonth62 = org.joda.time.YearMonth.now(chronology61);
        org.joda.time.YearMonth yearMonth63 = org.joda.time.YearMonth.now(chronology61);
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((java.lang.Object) "0097-10", chronology61);
        org.joda.time.YearMonth yearMonth65 = yearMonth44.withChronologyRetainFields(chronology61);
        org.joda.time.YearMonth yearMonth67 = yearMonth65.minusYears(0);
        org.junit.Assert.assertNotNull(yearMonth1);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 12 + "'", int34 == 12);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Oct" + "'", str37, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth67);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property4.getAsShortText(locale16);
        org.joda.time.YearMonth yearMonth18 = property4.getYearMonth();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        int int24 = property23.getMaximumValue();
        java.lang.String str25 = property23.getAsShortText();
        org.joda.time.YearMonth yearMonth27 = property23.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property23.getFieldType();
        org.joda.time.YearMonth.Property property29 = yearMonth18.property(dateTimeFieldType28);
        int int30 = property29.getMaximumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Oct" + "'", str17, "Oct");
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 12 + "'", int24 == 12);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Oct" + "'", str25, "Oct");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        int int8 = property4.getMaximumValueOverall();
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        org.joda.time.Interval interval16 = yearMonth13.toInterval();
        org.joda.time.Chronology chronology17 = yearMonth13.getChronology();
        org.joda.time.YearMonth yearMonth18 = yearMonth9.withChronologyRetainFields(chronology17);
        boolean boolean19 = property4.equals((java.lang.Object) yearMonth9);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = yearMonth9.toInterval(dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.YearMonth yearMonth23 = yearMonth9.plus(readablePeriod22);
        org.joda.time.YearMonth.Property property24 = yearMonth9.monthOfYear();
        java.lang.String str25 = yearMonth9.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2020-11" + "'", str25, "2020-11");
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth.Property property38 = yearMonth37.monthOfYear();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        int int48 = property38.compareTo((org.joda.time.ReadablePartial) yearMonth42);
        org.joda.time.Chronology chronology49 = yearMonth42.getChronology();
        org.joda.time.YearMonth yearMonth50 = org.joda.time.YearMonth.now(chronology49);
        org.joda.time.YearMonth yearMonth51 = yearMonth33.withChronologyRetainFields(chronology49);
        org.joda.time.YearMonth.Property property52 = yearMonth51.year();
        int int53 = property52.getMinimumValue();
        org.joda.time.YearMonth yearMonth54 = property52.getYearMonth();
        int int55 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.YearMonth yearMonth57 = yearMonth3.plusYears((int) ' ');
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-292275054) + "'", int53 == (-292275054));
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(yearMonth57);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.YearMonth yearMonth8 = property4.addToCopy((int) (short) 0);
        java.lang.String str9 = property4.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[monthOfYear]" + "'", str9, "Property[monthOfYear]");
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.lang.String str11 = property4.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property4.getFieldType();
        java.lang.String str13 = property4.toString();
        org.joda.time.YearMonth yearMonth15 = property4.addWrapFieldToCopy((int) (short) 1);
        java.util.Locale locale17 = null;
        org.joda.time.YearMonth yearMonth18 = property4.setCopy("1", locale17);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Property[monthOfYear]" + "'", str13, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(yearMonth18);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology2 = yearMonth1.getChronology();
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((long) 3, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth yearMonth9 = yearMonth7.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        int int16 = yearMonth13.size();
        boolean boolean17 = yearMonth9.isAfter((org.joda.time.ReadablePartial) yearMonth13);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        int int29 = yearMonth26.size();
        org.joda.time.YearMonth yearMonth31 = yearMonth26.plusMonths((int) (byte) 10);
        int int32 = property22.compareTo((org.joda.time.ReadablePartial) yearMonth26);
        org.joda.time.Chronology chronology33 = yearMonth26.getChronology();
        org.joda.time.YearMonth yearMonth34 = yearMonth13.withChronologyRetainFields(chronology33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth yearMonth40 = yearMonth38.minusYears((int) (short) 0);
        int int41 = yearMonth38.size();
        org.joda.time.YearMonth yearMonth43 = yearMonth38.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        int int45 = yearMonth38.indexOf(dateTimeFieldType44);
        org.joda.time.YearMonth yearMonth47 = yearMonth38.plusMonths((-1));
        boolean boolean48 = yearMonth13.isEqual((org.joda.time.ReadablePartial) yearMonth47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Interval interval50 = yearMonth13.toInterval(dateTimeZone49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        int int61 = yearMonth54.indexOf(dateTimeFieldType60);
        org.joda.time.YearMonth yearMonth63 = yearMonth54.plusMonths((-1));
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.YearMonth yearMonth67 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology66);
        org.joda.time.YearMonth yearMonth69 = yearMonth67.minusYears((int) (short) 0);
        int int70 = yearMonth67.size();
        org.joda.time.YearMonth yearMonth72 = yearMonth67.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = null;
        int int74 = yearMonth67.indexOf(dateTimeFieldType73);
        org.joda.time.Interval interval75 = yearMonth67.toInterval();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.YearMonth yearMonth79 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology78);
        org.joda.time.YearMonth.Property property80 = yearMonth79.monthOfYear();
        int int81 = property80.getMaximumValue();
        java.lang.String str82 = property80.getAsShortText();
        java.util.Locale locale83 = null;
        java.lang.String str84 = property80.getAsShortText(locale83);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = property80.getFieldType();
        int int86 = yearMonth67.get(dateTimeFieldType85);
        org.joda.time.YearMonth.Property property87 = yearMonth54.property(dateTimeFieldType85);
        boolean boolean88 = yearMonth13.isSupported(dateTimeFieldType85);
        int int89 = yearMonth3.get(dateTimeFieldType85);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 12 + "'", int81 == 12);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Oct" + "'", str82, "Oct");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Oct" + "'", str84, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth.Property property20 = yearMonth19.monthOfYear();
        int int21 = property20.getMaximumValue();
        java.lang.String str22 = property20.getAsShortText();
        org.joda.time.YearMonth yearMonth24 = property20.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property20.getFieldType();
        int int26 = yearMonth5.indexOf(dateTimeFieldType25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonth yearMonth28 = yearMonth5.plus(readablePeriod27);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 12 + "'", int21 == 12);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Oct" + "'", str22, "Oct");
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(yearMonth28);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.Chronology chronology2 = yearMonth1.getChronology();
        int int4 = yearMonth1.getValue(0);
        int int5 = yearMonth1.size();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        org.joda.time.YearMonth yearMonth25 = yearMonth20.plusMonths((int) (byte) 10);
        int int26 = property16.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = yearMonth20.getChronology();
        org.joda.time.YearMonth yearMonth28 = org.joda.time.YearMonth.now(chronology27);
        org.joda.time.YearMonth yearMonth29 = yearMonth11.withChronologyRetainFields(chronology27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonth yearMonth31 = yearMonth11.minus(readablePeriod30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth.Property property36 = yearMonth35.monthOfYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minusYears((int) (short) 0);
        int int43 = yearMonth40.size();
        org.joda.time.YearMonth yearMonth45 = yearMonth40.plusMonths((int) (byte) 10);
        int int46 = property36.compareTo((org.joda.time.ReadablePartial) yearMonth40);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        boolean boolean53 = yearMonth40.isAfter((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = yearMonth40.indexOf(dateTimeFieldType54);
        int int56 = yearMonth40.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = yearMonth40.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.Interval interval59 = yearMonth40.toInterval(dateTimeZone58);
        int[] intArray60 = yearMonth40.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = yearMonth40.getFieldType((int) (short) 1);
        org.joda.time.YearMonth.Property property63 = yearMonth11.property(dateTimeFieldType62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = property63.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth66 = yearMonth1.withField(dateTimeFieldType64, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 10]");
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Interval interval6 = yearMonth3.toInterval();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.minusMonths((int) 'a');
        int[] intArray9 = yearMonth8.getValues();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[89, 9]");
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonth yearMonth33 = yearMonth30.withPeriodAdded(readablePeriod31, (int) 'a');
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths(9);
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = yearMonth30.getFields();
        java.lang.String str37 = yearMonth30.toString();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0097-10" + "'", str37, "0097-10");
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.Interval interval26 = yearMonth18.toInterval();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        int int37 = yearMonth18.get(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth5.property(dateTimeFieldType36);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonth yearMonth40 = yearMonth5.minus(readablePeriod39);
        org.joda.time.YearMonth yearMonth42 = yearMonth5.minusYears((int) (byte) 100);
        java.lang.Class<?> wildcardClass43 = yearMonth42.getClass();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth17 = yearMonth5.minus(readablePeriod16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.year();
        org.joda.time.DurationField durationField19 = property18.getRangeDurationField();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNull(durationField19);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth9.withYear((int) (byte) 1);
        int int33 = yearMonth32.getMonthOfYear();
        org.joda.time.YearMonth.Property property34 = yearMonth32.year();
        org.joda.time.YearMonth yearMonth36 = property34.setCopy("9");
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.YearMonth yearMonth39 = yearMonth36.withPeriodAdded(readablePeriod37, 98);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertNotNull(yearMonth39);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        org.joda.time.YearMonth yearMonth13 = property4.addToCopy(3);
        java.lang.String str14 = property4.getAsString();
        java.lang.Class<?> wildcardClass15 = property4.getClass();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = yearMonth2.getChronology();
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth(12, 9, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.withYear(11);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonth yearMonth8 = yearMonth4.minus(readablePeriod7);
        int int9 = yearMonth8.getMonthOfYear();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth.Property property14 = yearMonth9.year();
        org.joda.time.YearMonth yearMonth16 = property14.addWrapFieldToCopy((int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        int int23 = property22.getMaximumValue();
        java.util.Locale locale24 = null;
        int int25 = property22.getMaximumShortTextLength(locale24);
        java.util.Locale locale26 = null;
        int int27 = property22.getMaximumTextLength(locale26);
        java.lang.String str28 = property22.getName();
        org.joda.time.YearMonth yearMonth30 = property22.addWrapFieldToCopy(100);
        int int31 = yearMonth30.getMonthOfYear();
        org.joda.time.YearMonth.Property property32 = yearMonth30.year();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        org.joda.time.YearMonth yearMonth41 = yearMonth36.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        int int43 = yearMonth36.indexOf(dateTimeFieldType42);
        org.joda.time.YearMonth yearMonth45 = yearMonth36.plusMonths((-1));
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth yearMonth51 = yearMonth49.minusYears((int) (short) 0);
        int int52 = yearMonth49.size();
        org.joda.time.YearMonth yearMonth54 = yearMonth49.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        int int56 = yearMonth49.indexOf(dateTimeFieldType55);
        org.joda.time.Interval interval57 = yearMonth49.toInterval();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology60);
        org.joda.time.YearMonth.Property property62 = yearMonth61.monthOfYear();
        int int63 = property62.getMaximumValue();
        java.lang.String str64 = property62.getAsShortText();
        java.util.Locale locale65 = null;
        java.lang.String str66 = property62.getAsShortText(locale65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property62.getFieldType();
        int int68 = yearMonth49.get(dateTimeFieldType67);
        org.joda.time.YearMonth.Property property69 = yearMonth36.property(dateTimeFieldType67);
        org.joda.time.Chronology chronology70 = yearMonth36.getChronology();
        org.joda.time.YearMonth yearMonth71 = new org.joda.time.YearMonth(chronology70);
        org.joda.time.YearMonth yearMonth72 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.YearMonth yearMonth76 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology75);
        org.joda.time.YearMonth yearMonth78 = yearMonth76.minusYears((int) (short) 0);
        org.joda.time.Interval interval79 = yearMonth76.toInterval();
        org.joda.time.Chronology chronology80 = yearMonth76.getChronology();
        org.joda.time.YearMonth yearMonth81 = yearMonth72.withChronologyRetainFields(chronology80);
        org.joda.time.YearMonth yearMonth82 = new org.joda.time.YearMonth(chronology80);
        org.joda.time.YearMonth yearMonth83 = yearMonth71.withChronologyRetainFields(chronology80);
        org.joda.time.YearMonth yearMonth84 = yearMonth30.withChronologyRetainFields(chronology80);
        org.joda.time.YearMonth yearMonth85 = new org.joda.time.YearMonth((long) (-1), chronology80);
        org.joda.time.YearMonth yearMonth86 = yearMonth16.withChronologyRetainFields(chronology80);
        org.joda.time.YearMonth yearMonth88 = yearMonth16.minusYears((-292275054));
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "monthOfYear" + "'", str28, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 12 + "'", int63 == 12);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Oct" + "'", str64, "Oct");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Oct" + "'", str66, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(yearMonth78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(yearMonth81);
        org.junit.Assert.assertNotNull(yearMonth83);
        org.junit.Assert.assertNotNull(yearMonth84);
        org.junit.Assert.assertNotNull(yearMonth86);
        org.junit.Assert.assertNotNull(yearMonth88);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property15.getFieldType();
        int int18 = property15.getMaximumValueOverall();
        org.joda.time.DurationField durationField19 = property15.getRangeDurationField();
        java.util.Locale locale20 = null;
        int int21 = property15.getMaximumTextLength(locale20);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addToCopy((int) (short) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        boolean boolean31 = yearMonth18.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = yearMonth28.toString(dateTimeFormatter32);
        int int34 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.YearMonth yearMonth35 = property4.getYearMonth();
        // The following exception was thrown during execution in test generation
        try {
            int int37 = yearMonth35.getValue(11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0097-10" + "'", str33, "0097-10");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(yearMonth35);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonth8.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = yearMonth8.getFieldType(1);
        java.util.Locale locale29 = null;
        java.lang.String str30 = yearMonth8.toString("10", locale29);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10" + "'", str30, "10");
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.Chronology chronology8 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth9 = yearMonth0.withChronologyRetainFields(chronology8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        int int25 = property14.getMaximumValueOverall();
        org.joda.time.DurationField durationField26 = property14.getRangeDurationField();
        boolean boolean27 = yearMonth9.equals((java.lang.Object) property14);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        boolean boolean46 = yearMonth38.isAfter((org.joda.time.ReadablePartial) yearMonth42);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth.Property property51 = yearMonth50.monthOfYear();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology54);
        org.joda.time.YearMonth yearMonth57 = yearMonth55.minusYears((int) (short) 0);
        int int58 = yearMonth55.size();
        org.joda.time.YearMonth yearMonth60 = yearMonth55.plusMonths((int) (byte) 10);
        int int61 = property51.compareTo((org.joda.time.ReadablePartial) yearMonth55);
        org.joda.time.Chronology chronology62 = yearMonth55.getChronology();
        org.joda.time.YearMonth yearMonth63 = yearMonth42.withChronologyRetainFields(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.YearMonth yearMonth66 = yearMonth63.withPeriodAdded(readablePeriod64, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = null;
        int int68 = yearMonth66.indexOf(dateTimeFieldType67);
        boolean boolean69 = yearMonth31.isEqual((org.joda.time.ReadablePartial) yearMonth66);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.YearMonth yearMonth73 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology72);
        org.joda.time.YearMonth.Property property74 = yearMonth73.monthOfYear();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.YearMonth yearMonth78 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology77);
        org.joda.time.YearMonth yearMonth80 = yearMonth78.minusYears((int) (short) 0);
        int int81 = yearMonth78.size();
        org.joda.time.YearMonth yearMonth83 = yearMonth78.plusMonths((int) (byte) 10);
        int int84 = property74.compareTo((org.joda.time.ReadablePartial) yearMonth78);
        boolean boolean85 = yearMonth31.isEqual((org.joda.time.ReadablePartial) yearMonth78);
        int[] intArray86 = yearMonth31.getValues();
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.YearMonth yearMonth90 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology89);
        org.joda.time.YearMonth.Property property91 = yearMonth90.monthOfYear();
        int int92 = property91.getMaximumValue();
        java.lang.String str93 = property91.getAsShortText();
        int int94 = property91.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = property91.getFieldType();
        boolean boolean96 = yearMonth31.isSupported(dateTimeFieldType95);
        int int97 = yearMonth9.indexOf(dateTimeFieldType95);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 12 + "'", int25 == 12);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(yearMonth83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[97, 10]");
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 12 + "'", int92 == 12);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Oct" + "'", str93, "Oct");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 10 + "'", int94 == 10);
        org.junit.Assert.assertNotNull(dateTimeFieldType95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth8 = property4.getYearMonth();
        org.joda.time.YearMonth yearMonth9 = property4.getYearMonth();
        org.joda.time.DurationField durationField10 = property4.getDurationField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Interval interval17 = yearMonth8.toInterval();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        int int24 = yearMonth21.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth21.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        int int28 = yearMonth21.indexOf(dateTimeFieldType27);
        org.joda.time.Interval interval29 = yearMonth21.toInterval();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth.Property property34 = yearMonth33.monthOfYear();
        int int35 = property34.getMaximumValue();
        java.lang.String str36 = property34.getAsShortText();
        java.util.Locale locale37 = null;
        java.lang.String str38 = property34.getAsShortText(locale37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property34.getFieldType();
        int int40 = yearMonth21.get(dateTimeFieldType39);
        org.joda.time.YearMonth.Property property41 = yearMonth8.property(dateTimeFieldType39);
        boolean boolean42 = yearMonth2.isSupported(dateTimeFieldType39);
        org.joda.time.YearMonth.Property property43 = yearMonth2.year();
        java.lang.String str44 = property43.toString();
        java.lang.String str45 = property43.getAsText();
        java.lang.String str46 = property43.getName();
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 12 + "'", int35 == 12);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Oct" + "'", str36, "Oct");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Oct" + "'", str38, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Property[year]" + "'", str44, "Property[year]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "year" + "'", str46, "year");
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        int int17 = property15.getMaximumValueOverall();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property15.getAsText(locale18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth21 = property15.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "September" + "'", str19, "September");
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.YearMonth yearMonth5 = property4.getYearMonth();
        org.joda.time.YearMonth.Property property6 = yearMonth5.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((java.lang.Object) property6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.YearMonth$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth8 = property4.getYearMonth();
        org.joda.time.YearMonth yearMonth9 = property4.getYearMonth();
        org.joda.time.YearMonth yearMonth11 = property4.addWrapFieldToCopy((-1));
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth yearMonth17 = yearMonth15.minusYears((int) (short) 0);
        int int18 = yearMonth15.size();
        org.joda.time.YearMonth yearMonth20 = yearMonth15.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = yearMonth15.indexOf(dateTimeFieldType21);
        org.joda.time.YearMonth yearMonth24 = yearMonth15.plusMonths((-1));
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        int int31 = yearMonth28.size();
        org.joda.time.YearMonth yearMonth33 = yearMonth28.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = yearMonth28.indexOf(dateTimeFieldType34);
        org.joda.time.Interval interval36 = yearMonth28.toInterval();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        int int42 = property41.getMaximumValue();
        java.lang.String str43 = property41.getAsShortText();
        java.util.Locale locale44 = null;
        java.lang.String str45 = property41.getAsShortText(locale44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property41.getFieldType();
        int int47 = yearMonth28.get(dateTimeFieldType46);
        org.joda.time.YearMonth.Property property48 = yearMonth15.property(dateTimeFieldType46);
        org.joda.time.Chronology chronology49 = yearMonth15.getChronology();
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth(chronology49);
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology54);
        org.joda.time.YearMonth yearMonth57 = yearMonth55.minusYears((int) (short) 0);
        org.joda.time.Interval interval58 = yearMonth55.toInterval();
        org.joda.time.Chronology chronology59 = yearMonth55.getChronology();
        org.joda.time.YearMonth yearMonth60 = yearMonth51.withChronologyRetainFields(chronology59);
        org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth(chronology59);
        org.joda.time.YearMonth yearMonth62 = yearMonth50.withChronologyRetainFields(chronology59);
        org.joda.time.YearMonth yearMonth63 = yearMonth11.withChronologyRetainFields(chronology59);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 12 + "'", int42 == 12);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Oct" + "'", str43, "Oct");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Oct" + "'", str45, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth63);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        org.joda.time.YearMonth yearMonth41 = yearMonth36.plusMonths((int) (byte) 10);
        int int42 = property32.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        boolean boolean49 = yearMonth36.isAfter((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = yearMonth36.indexOf(dateTimeFieldType50);
        int int52 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.YearMonth yearMonth54 = yearMonth36.minusYears(11);
        int[] intArray55 = yearMonth54.getValues();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[86, 10]");
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth17 = yearMonth5.minus(readablePeriod16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.year();
        int int20 = yearMonth17.getValue((int) (byte) 1);
        int int21 = yearMonth17.getYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth.Property property30 = yearMonth29.monthOfYear();
        int int31 = property30.getMaximumValue();
        java.util.Locale locale32 = null;
        int int33 = property30.getMaximumShortTextLength(locale32);
        java.util.Locale locale34 = null;
        int int35 = property30.getMaximumTextLength(locale34);
        org.joda.time.DurationField durationField36 = property30.getRangeDurationField();
        java.util.Locale locale37 = null;
        java.lang.String str38 = property30.getAsShortText(locale37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property30.getFieldType();
        boolean boolean40 = yearMonth25.isSupported(dateTimeFieldType39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth42 = yearMonth17.withField(dateTimeFieldType39, 1980);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1980 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 12 + "'", int31 == 12);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Oct" + "'", str38, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) 9);
        org.joda.time.DateTimeField[] dateTimeFieldArray2 = yearMonth1.getFields();
        org.junit.Assert.assertNotNull(dateTimeFieldArray2);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property4.getAsShortText(locale11);
        int int13 = property4.getMinimumValueOverall();
        java.util.Locale locale15 = null;
        org.joda.time.YearMonth yearMonth16 = property4.setCopy("9", locale15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property4.getFieldType();
        org.joda.time.YearMonth yearMonth18 = property4.getYearMonth();
        int int19 = property4.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Oct" + "'", str12, "Oct");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        java.lang.String str2 = yearMonth0.toString(dateTimeFormatter1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth.Property property7 = yearMonth6.monthOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        int int14 = yearMonth11.size();
        org.joda.time.YearMonth yearMonth16 = yearMonth11.plusMonths((int) (byte) 10);
        int int17 = property7.compareTo((org.joda.time.ReadablePartial) yearMonth11);
        org.joda.time.YearMonth yearMonth18 = property7.getYearMonth();
        java.lang.String str19 = property7.getAsText();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth yearMonth31 = yearMonth29.minusYears((int) (short) 0);
        int int32 = yearMonth29.size();
        boolean boolean33 = yearMonth25.isAfter((org.joda.time.ReadablePartial) yearMonth29);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth.Property property38 = yearMonth37.monthOfYear();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        int int48 = property38.compareTo((org.joda.time.ReadablePartial) yearMonth42);
        org.joda.time.Chronology chronology49 = yearMonth42.getChronology();
        org.joda.time.YearMonth yearMonth50 = yearMonth29.withChronologyRetainFields(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.YearMonth yearMonth53 = yearMonth50.withPeriodAdded(readablePeriod51, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = yearMonth53.indexOf(dateTimeFieldType54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology58);
        org.joda.time.YearMonth.Property property60 = yearMonth59.monthOfYear();
        int int61 = property60.getMaximumValue();
        java.lang.String str62 = property60.getAsShortText();
        java.util.Locale locale63 = null;
        java.lang.String str64 = property60.getAsShortText(locale63);
        org.joda.time.YearMonth yearMonth66 = property60.setCopy("October");
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = yearMonth66.toDateTime(readableInstant67);
        org.joda.time.DateTime dateTime69 = yearMonth53.toDateTime(readableInstant67);
        int int70 = property7.compareTo((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime71 = yearMonth0.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.YearMonth yearMonth72 = new org.joda.time.YearMonth((java.lang.Object) yearMonth0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType74 = yearMonth72.getFieldType((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2020-11" + "'", str2, "2020-11");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "October" + "'", str19, "October");
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 12 + "'", int61 == 12);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Oct" + "'", str62, "Oct");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Oct" + "'", str64, "Oct");
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        org.joda.time.YearMonth yearMonth10 = property4.getYearMonth();
        org.joda.time.DurationField durationField11 = property4.getDurationField();
        java.lang.String str12 = property4.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[monthOfYear]" + "'", str12, "Property[monthOfYear]");
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth7 = property4.setCopy("2015-01");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2015-01\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.YearMonth.Property property36 = yearMonth3.property(dateTimeFieldType34);
        java.lang.String str37 = property36.getAsText();
        java.lang.String str38 = property36.getAsString();
        java.lang.String str39 = property36.getAsShortText();
        org.joda.time.YearMonth yearMonth41 = property36.addToCopy(0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = yearMonth41.getFieldTypes();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        int int48 = property47.getMaximumValue();
        java.util.Locale locale49 = null;
        int int50 = property47.getMaximumShortTextLength(locale49);
        java.util.Locale locale51 = null;
        int int52 = property47.getMaximumTextLength(locale51);
        org.joda.time.DurationField durationField53 = property47.getRangeDurationField();
        java.lang.String str54 = property47.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property47.getFieldType();
        java.util.Locale locale57 = null;
        org.joda.time.YearMonth yearMonth58 = property47.setCopy("October", locale57);
        boolean boolean59 = yearMonth41.isAfter((org.joda.time.ReadablePartial) yearMonth58);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray60 = yearMonth58.getFieldTypes();
        org.joda.time.DurationFieldType durationFieldType61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth63 = yearMonth58.withFieldAdded(durationFieldType61, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "October" + "'", str37, "October");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "10" + "'", str38, "10");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Oct" + "'", str39, "Oct");
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 12 + "'", int48 == 12);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Property[monthOfYear]" + "'", str54, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray60);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((java.lang.Object) yearMonth9);
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Interval interval18 = yearMonth16.toInterval(dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = yearMonth16.getFieldType((int) (short) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        org.joda.time.YearMonth yearMonth29 = yearMonth24.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = yearMonth24.indexOf(dateTimeFieldType30);
        org.joda.time.YearMonth yearMonth33 = yearMonth24.plusMonths((-1));
        org.joda.time.YearMonth yearMonth35 = yearMonth24.plusMonths((-1));
        org.joda.time.YearMonth.Property property36 = yearMonth35.monthOfYear();
        int int37 = property36.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property36.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property36.getFieldType();
        org.joda.time.YearMonth.Property property40 = yearMonth16.property(dateTimeFieldType39);
        boolean boolean41 = yearMonth9.isAfter((org.joda.time.ReadablePartial) yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property4.getFieldType();
        java.lang.String str11 = property4.getAsText();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "October" + "'", str11, "October");
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth.Property property10 = yearMonth3.year();
        int int11 = property10.get();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.getMaximumValue();
        java.lang.String str17 = property15.getAsShortText();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property15.getAsShortText(locale18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property15.getFieldType();
        org.joda.time.YearMonth.Property property21 = yearMonth3.property(dateTimeFieldType20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        int int32 = yearMonth25.indexOf(dateTimeFieldType31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth.Property property37 = yearMonth36.monthOfYear();
        int int38 = property37.getMaximumValue();
        java.lang.String str39 = property37.getAsShortText();
        java.util.Locale locale40 = null;
        java.lang.String str41 = property37.getAsShortText(locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property37.getFieldType();
        org.joda.time.YearMonth.Property property43 = yearMonth25.property(dateTimeFieldType42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology46);
        org.joda.time.YearMonth yearMonth49 = yearMonth47.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology52);
        org.joda.time.YearMonth yearMonth55 = yearMonth53.minusYears((int) (short) 0);
        int int56 = yearMonth53.size();
        boolean boolean57 = yearMonth49.isAfter((org.joda.time.ReadablePartial) yearMonth53);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology60);
        org.joda.time.YearMonth.Property property62 = yearMonth61.monthOfYear();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth yearMonth68 = yearMonth66.minusYears((int) (short) 0);
        int int69 = yearMonth66.size();
        org.joda.time.YearMonth yearMonth71 = yearMonth66.plusMonths((int) (byte) 10);
        int int72 = property62.compareTo((org.joda.time.ReadablePartial) yearMonth66);
        org.joda.time.Chronology chronology73 = yearMonth66.getChronology();
        org.joda.time.YearMonth yearMonth74 = yearMonth53.withChronologyRetainFields(chronology73);
        org.joda.time.YearMonth yearMonth75 = new org.joda.time.YearMonth((java.lang.Object) yearMonth25, chronology73);
        boolean boolean76 = yearMonth3.isBefore((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = null;
        java.lang.String str78 = yearMonth3.toString(dateTimeFormatter77);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Oct" + "'", str17, "Oct");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Oct" + "'", str19, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 12 + "'", int38 == 12);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Oct" + "'", str39, "Oct");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Oct" + "'", str41, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "0097-10" + "'", str78, "0097-10");
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        int int14 = yearMonth11.size();
        boolean boolean15 = yearMonth7.isAfter((org.joda.time.ReadablePartial) yearMonth11);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth.Property property20 = yearMonth19.monthOfYear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        org.joda.time.YearMonth yearMonth29 = yearMonth24.plusMonths((int) (byte) 10);
        int int30 = property20.compareTo((org.joda.time.ReadablePartial) yearMonth24);
        org.joda.time.Chronology chronology31 = yearMonth24.getChronology();
        org.joda.time.YearMonth yearMonth32 = yearMonth11.withChronologyRetainFields(chronology31);
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((long) (short) 1, chronology31);
        org.joda.time.YearMonth yearMonth34 = org.joda.time.YearMonth.now(chronology31);
        org.joda.time.Chronology chronology35 = yearMonth34.getChronology();
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((long) 2020, chronology35);
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth(chronology35);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertNotNull(chronology35);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        int int14 = yearMonth11.size();
        boolean boolean15 = yearMonth7.isAfter((org.joda.time.ReadablePartial) yearMonth11);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth.Property property20 = yearMonth19.monthOfYear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        org.joda.time.YearMonth yearMonth29 = yearMonth24.plusMonths((int) (byte) 10);
        int int30 = property20.compareTo((org.joda.time.ReadablePartial) yearMonth24);
        org.joda.time.Chronology chronology31 = yearMonth24.getChronology();
        org.joda.time.YearMonth yearMonth32 = yearMonth11.withChronologyRetainFields(chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth11.withYear((int) (byte) 1);
        int int35 = yearMonth34.getMonthOfYear();
        org.joda.time.YearMonth.Property property36 = yearMonth34.year();
        org.joda.time.Chronology chronology37 = yearMonth34.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth(12, (-1), chronology37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology37);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.plusYears((int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = yearMonth32.getFieldTypes();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth.Property property38 = yearMonth37.monthOfYear();
        int int39 = property38.getMaximumValue();
        java.util.Locale locale40 = null;
        int int41 = property38.getMaximumShortTextLength(locale40);
        java.util.Locale locale42 = null;
        int int43 = property38.getMaximumTextLength(locale42);
        org.joda.time.DurationField durationField44 = property38.getRangeDurationField();
        java.util.Locale locale45 = null;
        int int46 = property38.getMaximumShortTextLength(locale45);
        org.joda.time.YearMonth yearMonth48 = property38.addToCopy(100);
        boolean boolean49 = yearMonth32.isAfter((org.joda.time.ReadablePartial) yearMonth48);
        int int50 = yearMonth48.getMonthOfYear();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        int int25 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.YearMonth yearMonth27 = property15.addWrapFieldToCopy((int) '4');
        java.util.Locale locale29 = null;
        org.joda.time.YearMonth yearMonth30 = property15.setCopy("September", locale29);
        boolean boolean31 = yearMonth3.equals((java.lang.Object) property15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate33 = yearMonth3.toLocalDate(96);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 96 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        java.lang.String str11 = property4.getAsString();
        java.lang.String str12 = property4.getAsText();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth.Property property26 = yearMonth25.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        int int36 = property26.compareTo((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.Interval interval38 = yearMonth30.toInterval(dateTimeZone37);
        org.joda.time.YearMonth yearMonth40 = yearMonth30.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        int int53 = yearMonth50.size();
        boolean boolean54 = yearMonth46.isAfter((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth.Property property59 = yearMonth58.monthOfYear();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth yearMonth65 = yearMonth63.minusYears((int) (short) 0);
        int int66 = yearMonth63.size();
        org.joda.time.YearMonth yearMonth68 = yearMonth63.plusMonths((int) (byte) 10);
        int int69 = property59.compareTo((org.joda.time.ReadablePartial) yearMonth63);
        org.joda.time.Chronology chronology70 = yearMonth63.getChronology();
        org.joda.time.YearMonth yearMonth71 = yearMonth50.withChronologyRetainFields(chronology70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.YearMonth yearMonth74 = yearMonth71.withPeriodAdded(readablePeriod72, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = null;
        int int76 = yearMonth74.indexOf(dateTimeFieldType75);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.YearMonth yearMonth80 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology79);
        org.joda.time.YearMonth.Property property81 = yearMonth80.monthOfYear();
        int int82 = property81.getMaximumValue();
        java.lang.String str83 = property81.getAsShortText();
        java.util.Locale locale84 = null;
        java.lang.String str85 = property81.getAsShortText(locale84);
        org.joda.time.YearMonth yearMonth87 = property81.setCopy("October");
        org.joda.time.ReadableInstant readableInstant88 = null;
        org.joda.time.DateTime dateTime89 = yearMonth87.toDateTime(readableInstant88);
        org.joda.time.DateTime dateTime90 = yearMonth74.toDateTime(readableInstant88);
        org.joda.time.DateTime dateTime91 = yearMonth30.toDateTime((org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.DateTime dateTime92 = yearMonth21.toDateTime((org.joda.time.ReadableInstant) dateTime91);
        int int93 = property4.compareTo((org.joda.time.ReadableInstant) dateTime92);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10" + "'", str11, "10");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "October" + "'", str12, "October");
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 12 + "'", int82 == 12);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Oct" + "'", str83, "Oct");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Oct" + "'", str85, "Oct");
        org.junit.Assert.assertNotNull(yearMonth87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        int int33 = property32.getMaximumValue();
        java.lang.String str34 = property32.getAsShortText();
        java.util.Locale locale35 = null;
        java.lang.String str36 = property32.getAsShortText(locale35);
        org.joda.time.YearMonth yearMonth38 = property32.setCopy("October");
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = yearMonth38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology50);
        org.joda.time.YearMonth yearMonth53 = yearMonth51.minusYears((int) (short) 0);
        int int54 = yearMonth51.size();
        boolean boolean55 = yearMonth47.isAfter((org.joda.time.ReadablePartial) yearMonth51);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology58);
        org.joda.time.YearMonth.Property property60 = yearMonth59.monthOfYear();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology63);
        org.joda.time.YearMonth yearMonth66 = yearMonth64.minusYears((int) (short) 0);
        int int67 = yearMonth64.size();
        org.joda.time.YearMonth yearMonth69 = yearMonth64.plusMonths((int) (byte) 10);
        int int70 = property60.compareTo((org.joda.time.ReadablePartial) yearMonth64);
        org.joda.time.Chronology chronology71 = yearMonth64.getChronology();
        org.joda.time.YearMonth yearMonth72 = yearMonth51.withChronologyRetainFields(chronology71);
        org.joda.time.YearMonth yearMonth73 = new org.joda.time.YearMonth((long) (short) 1, chronology71);
        org.joda.time.YearMonth yearMonth74 = new org.joda.time.YearMonth((java.lang.Object) readableInstant39, chronology71);
        boolean boolean75 = yearMonth8.equals((java.lang.Object) yearMonth74);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.YearMonth yearMonth79 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology78);
        org.joda.time.YearMonth.Property property80 = yearMonth79.monthOfYear();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.YearMonth yearMonth84 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology83);
        org.joda.time.YearMonth yearMonth86 = yearMonth84.minusYears((int) (short) 0);
        int int87 = yearMonth84.size();
        org.joda.time.YearMonth yearMonth89 = yearMonth84.plusMonths((int) (byte) 10);
        int int90 = property80.compareTo((org.joda.time.ReadablePartial) yearMonth84);
        org.joda.time.Chronology chronology91 = yearMonth84.getChronology();
        org.joda.time.YearMonth yearMonth92 = org.joda.time.YearMonth.now(chronology91);
        org.joda.time.YearMonth yearMonth93 = org.joda.time.YearMonth.now(chronology91);
        org.joda.time.YearMonth yearMonth94 = yearMonth8.withChronologyRetainFields(chronology91);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Oct" + "'", str34, "Oct");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Oct" + "'", str36, "Oct");
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(yearMonth86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(yearMonth89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(yearMonth92);
        org.junit.Assert.assertNotNull(yearMonth93);
        org.junit.Assert.assertNotNull(yearMonth94);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        int int7 = yearMonth4.size();
        org.joda.time.YearMonth yearMonth9 = yearMonth4.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = yearMonth4.getFieldTypes();
        int[] intArray11 = yearMonth4.getValues();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        org.joda.time.YearMonth yearMonth25 = yearMonth20.plusMonths((int) (byte) 10);
        int int26 = property16.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = yearMonth20.getChronology();
        org.joda.time.YearMonth yearMonth28 = org.joda.time.YearMonth.now(chronology27);
        org.joda.time.YearMonth yearMonth29 = org.joda.time.YearMonth.now(chronology27);
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((java.lang.Object) yearMonth4, chronology27);
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((long) 'a', chronology27);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.withMonthOfYear((int) (byte) 10);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[97, 10]");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth33);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property4.getFieldType();
        int int12 = property4.getMinimumValue();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property4.getAsText(locale13);
        org.joda.time.DurationField durationField15 = property4.getRangeDurationField();
        int int16 = property4.getMinimumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "October" + "'", str14, "October");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth9.withYear((int) (byte) 1);
        int int33 = yearMonth32.getMonthOfYear();
        org.joda.time.YearMonth.Property property34 = yearMonth32.year();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth.Property property39 = yearMonth38.monthOfYear();
        int int40 = property39.getMinimumValue();
        java.util.Locale locale41 = null;
        int int42 = property39.getMaximumShortTextLength(locale41);
        org.joda.time.YearMonth yearMonth44 = property39.addToCopy((int) (short) 1);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology47);
        org.joda.time.YearMonth.Property property49 = yearMonth48.monthOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology52);
        org.joda.time.YearMonth yearMonth55 = yearMonth53.minusYears((int) (short) 0);
        int int56 = yearMonth53.size();
        org.joda.time.YearMonth yearMonth58 = yearMonth53.plusMonths((int) (byte) 10);
        int int59 = property49.compareTo((org.joda.time.ReadablePartial) yearMonth53);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth yearMonth65 = yearMonth63.minusYears((int) (short) 0);
        boolean boolean66 = yearMonth53.isAfter((org.joda.time.ReadablePartial) yearMonth63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = null;
        java.lang.String str68 = yearMonth63.toString(dateTimeFormatter67);
        int int69 = property39.compareTo((org.joda.time.ReadablePartial) yearMonth63);
        boolean boolean70 = yearMonth32.isEqual((org.joda.time.ReadablePartial) yearMonth63);
        org.joda.time.DurationFieldType durationFieldType71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth73 = yearMonth32.withFieldAdded(durationFieldType71, 2020);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0097-10" + "'", str68, "0097-10");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth18 = yearMonth14.withPeriodAdded(readablePeriod16, (int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = yearMonth18.getFieldTypes();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((long) (short) 1, chronology34);
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth(chronology34);
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = yearMonth38.toString(dateTimeFormatter39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.YearMonth yearMonth42 = yearMonth38.plus(readablePeriod41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology50);
        org.joda.time.YearMonth yearMonth53 = yearMonth51.minusYears((int) (short) 0);
        int int54 = yearMonth51.size();
        org.joda.time.YearMonth yearMonth56 = yearMonth51.plusMonths((int) (byte) 10);
        int int57 = property47.compareTo((org.joda.time.ReadablePartial) yearMonth51);
        org.joda.time.Chronology chronology58 = yearMonth51.getChronology();
        org.joda.time.YearMonth yearMonth59 = yearMonth38.withChronologyRetainFields(chronology58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth60 = new org.joda.time.YearMonth((int) (short) -1, (int) (byte) 0, chronology58);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0100-10" + "'", str40, "0100-10");
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(yearMonth59);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonth yearMonth16 = yearMonth14.plus(readablePeriod15);
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = yearMonth16.getFields();
        java.lang.Class<?> wildcardClass18 = yearMonth16.getClass();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonth yearMonth16 = yearMonth14.plus(readablePeriod15);
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = yearMonth16.getFields();
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = yearMonth19.toInterval(dateTimeZone20);
        int int22 = yearMonth16.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        java.util.Locale locale24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = yearMonth19.toString("Oct", locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: O");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.YearMonth yearMonth20 = yearMonth8.plus(readablePeriod19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField22 = yearMonth20.getField((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth20);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.getMaximumValueOverall();
        java.util.Locale locale12 = null;
        int int13 = property4.getMaximumTextLength(locale12);
        java.util.Locale locale15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth16 = property4.setCopy("1970-01", locale15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Interval interval6 = yearMonth3.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonth3.getFieldTypes();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        boolean boolean21 = yearMonth13.isAfter((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth.Property property26 = yearMonth25.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        int int36 = property26.compareTo((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.Chronology chronology37 = yearMonth30.getChronology();
        org.joda.time.YearMonth yearMonth38 = yearMonth17.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonth yearMonth39 = yearMonth3.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonth yearMonth41 = yearMonth39.withMonthOfYear(9);
        int int42 = yearMonth39.size();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth12.withMonthOfYear((int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        boolean boolean29 = yearMonth21.isAfter((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth.Property property34 = yearMonth33.monthOfYear();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth yearMonth40 = yearMonth38.minusYears((int) (short) 0);
        int int41 = yearMonth38.size();
        org.joda.time.YearMonth yearMonth43 = yearMonth38.plusMonths((int) (byte) 10);
        int int44 = property34.compareTo((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology45 = yearMonth38.getChronology();
        org.joda.time.YearMonth yearMonth46 = yearMonth25.withChronologyRetainFields(chronology45);
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth((long) (short) 1, chronology45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.YearMonth yearMonth50 = yearMonth47.withPeriodAdded(readablePeriod48, 100);
        org.joda.time.YearMonth yearMonth52 = yearMonth47.plusYears(10);
        org.joda.time.YearMonth yearMonth54 = yearMonth52.plusYears((int) '#');
        org.joda.time.YearMonth yearMonth57 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.YearMonth yearMonth59 = yearMonth57.withYear((int) (byte) 1);
        boolean boolean60 = yearMonth52.equals((java.lang.Object) yearMonth59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.YearMonth yearMonth63 = yearMonth52.withPeriodAdded(readablePeriod61, 2);
        int int64 = yearMonth12.compareTo((org.joda.time.ReadablePartial) yearMonth63);
        org.joda.time.YearMonth yearMonth66 = yearMonth63.minusMonths(0);
        int int67 = yearMonth63.getMonthOfYear();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.YearMonth yearMonth10 = property4.addToCopy(11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.util.Locale locale18 = null;
        int int19 = property16.getMaximumShortTextLength(locale18);
        java.util.Locale locale20 = null;
        int int21 = property16.getMaximumTextLength(locale20);
        java.lang.String str22 = property16.getName();
        org.joda.time.YearMonth yearMonth24 = property16.addWrapFieldToCopy(100);
        int int25 = yearMonth24.getMonthOfYear();
        org.joda.time.YearMonth.Property property26 = yearMonth24.year();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        int int37 = yearMonth30.indexOf(dateTimeFieldType36);
        org.joda.time.YearMonth yearMonth39 = yearMonth30.plusMonths((-1));
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth yearMonth45 = yearMonth43.minusYears((int) (short) 0);
        int int46 = yearMonth43.size();
        org.joda.time.YearMonth yearMonth48 = yearMonth43.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        int int50 = yearMonth43.indexOf(dateTimeFieldType49);
        org.joda.time.Interval interval51 = yearMonth43.toInterval();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology54);
        org.joda.time.YearMonth.Property property56 = yearMonth55.monthOfYear();
        int int57 = property56.getMaximumValue();
        java.lang.String str58 = property56.getAsShortText();
        java.util.Locale locale59 = null;
        java.lang.String str60 = property56.getAsShortText(locale59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property56.getFieldType();
        int int62 = yearMonth43.get(dateTimeFieldType61);
        org.joda.time.YearMonth.Property property63 = yearMonth30.property(dateTimeFieldType61);
        org.joda.time.Chronology chronology64 = yearMonth30.getChronology();
        org.joda.time.YearMonth yearMonth65 = new org.joda.time.YearMonth(chronology64);
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.YearMonth yearMonth70 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology69);
        org.joda.time.YearMonth yearMonth72 = yearMonth70.minusYears((int) (short) 0);
        org.joda.time.Interval interval73 = yearMonth70.toInterval();
        org.joda.time.Chronology chronology74 = yearMonth70.getChronology();
        org.joda.time.YearMonth yearMonth75 = yearMonth66.withChronologyRetainFields(chronology74);
        org.joda.time.YearMonth yearMonth76 = new org.joda.time.YearMonth(chronology74);
        org.joda.time.YearMonth yearMonth77 = yearMonth65.withChronologyRetainFields(chronology74);
        org.joda.time.YearMonth yearMonth78 = yearMonth24.withChronologyRetainFields(chronology74);
        org.joda.time.YearMonth yearMonth79 = new org.joda.time.YearMonth((long) 12, chronology74);
        int int80 = yearMonth10.compareTo((org.joda.time.ReadablePartial) yearMonth79);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "monthOfYear" + "'", str22, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 12 + "'", int57 == 12);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Oct" + "'", str58, "Oct");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Oct" + "'", str60, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(yearMonth75);
        org.junit.Assert.assertNotNull(yearMonth77);
        org.junit.Assert.assertNotNull(yearMonth78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMinimumValueOverall();
        java.lang.Class<?> wildcardClass10 = property4.getClass();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        int int11 = property4.getMinimumValueOverall();
        org.joda.time.YearMonth yearMonth13 = property4.addToCopy((int) (short) 1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = yearMonth22.toString(dateTimeFormatter29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth.Property property35 = yearMonth34.monthOfYear();
        int int36 = property35.getMinimumValue();
        java.util.Locale locale37 = null;
        int int38 = property35.getMaximumShortTextLength(locale37);
        org.joda.time.DurationField durationField39 = property35.getDurationField();
        boolean boolean40 = yearMonth22.equals((java.lang.Object) property35);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        int int47 = yearMonth44.size();
        org.joda.time.YearMonth yearMonth49 = yearMonth44.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = yearMonth44.indexOf(dateTimeFieldType50);
        org.joda.time.YearMonth yearMonth53 = yearMonth44.plusMonths((-1));
        boolean boolean55 = yearMonth53.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology58);
        org.joda.time.YearMonth.Property property60 = yearMonth59.monthOfYear();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology63);
        org.joda.time.YearMonth yearMonth66 = yearMonth64.minusYears((int) (short) 0);
        int int67 = yearMonth64.size();
        org.joda.time.YearMonth yearMonth69 = yearMonth64.plusMonths((int) (byte) 10);
        int int70 = property60.compareTo((org.joda.time.ReadablePartial) yearMonth64);
        org.joda.time.YearMonth yearMonth71 = property60.getYearMonth();
        java.lang.String str72 = property60.getAsText();
        org.joda.time.YearMonth yearMonth73 = property60.getYearMonth();
        boolean boolean74 = yearMonth53.isBefore((org.joda.time.ReadablePartial) yearMonth73);
        org.joda.time.YearMonth yearMonth76 = yearMonth53.minusYears(3);
        int int77 = yearMonth22.compareTo((org.joda.time.ReadablePartial) yearMonth53);
        int int78 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth53);
        org.joda.time.DateTimeField dateTimeField80 = yearMonth53.getField(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType82 = yearMonth53.getFieldType(1980);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1980");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0097-10" + "'", str30, "0097-10");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "October" + "'", str72, "October");
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(yearMonth76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(dateTimeField80);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property4.getAsShortText(locale11);
        int int13 = property4.getMinimumValueOverall();
        java.lang.String str14 = property4.getName();
        int int15 = property4.getMaximumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Oct" + "'", str12, "Oct");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        boolean boolean24 = yearMonth16.isAfter((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        int int39 = property29.compareTo((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = yearMonth33.getChronology();
        org.joda.time.YearMonth yearMonth41 = yearMonth20.withChronologyRetainFields(chronology40);
        int int42 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        int int48 = property47.getMaximumValue();
        java.util.Locale locale49 = null;
        int int50 = property47.getMaximumShortTextLength(locale49);
        java.util.Locale locale51 = null;
        int int52 = property47.getMaximumTextLength(locale51);
        org.joda.time.DurationField durationField53 = property47.getRangeDurationField();
        java.util.Locale locale54 = null;
        java.lang.String str55 = property47.getAsShortText(locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property47.getFieldType();
        org.joda.time.YearMonth yearMonth58 = yearMonth3.withField(dateTimeFieldType56, 11);
        org.joda.time.DateTimeField[] dateTimeFieldArray59 = yearMonth3.getFields();
        int int60 = yearMonth3.getMonthOfYear();
        java.lang.String str62 = yearMonth3.toString("1970-01");
        org.joda.time.YearMonth.Property property63 = yearMonth3.monthOfYear();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 12 + "'", int48 == 12);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Oct" + "'", str55, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertNotNull(dateTimeFieldArray59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01" + "'", str62, "1970-01");
        org.junit.Assert.assertNotNull(property63);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.YearMonth yearMonth4 = yearMonth2.withYear((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonth yearMonth7 = yearMonth2.withPeriodAdded(readablePeriod5, (int) ' ');
        int int8 = yearMonth2.getYear();
        org.junit.Assert.assertNotNull(yearMonth4);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.YearMonth.Property property36 = yearMonth3.property(dateTimeFieldType34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((java.lang.Object) property36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.YearMonth$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        int int11 = property4.get();
        java.lang.String str12 = property4.getAsString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth14 = property4.setCopy("0097-11");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0097-11\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "10" + "'", str12, "10");
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Interval interval6 = yearMonth3.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonth3.getFieldTypes();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        boolean boolean21 = yearMonth13.isAfter((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth.Property property26 = yearMonth25.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        int int36 = property26.compareTo((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.Chronology chronology37 = yearMonth30.getChronology();
        org.joda.time.YearMonth yearMonth38 = yearMonth17.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonth yearMonth39 = yearMonth3.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonth yearMonth40 = org.joda.time.YearMonth.now(chronology37);
        org.joda.time.YearMonth yearMonth41 = org.joda.time.YearMonth.now(chronology37);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        int int47 = property46.getMaximumValue();
        java.util.Locale locale48 = null;
        int int49 = property46.getMaximumShortTextLength(locale48);
        java.util.Locale locale50 = null;
        int int51 = property46.getMaximumTextLength(locale50);
        java.lang.String str52 = property46.getAsShortText();
        org.joda.time.DateTimeField dateTimeField53 = property46.getField();
        int int54 = property46.getMaximumValue();
        org.joda.time.YearMonth yearMonth56 = property46.setCopy((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property46.getFieldType();
        java.util.Locale locale58 = null;
        java.lang.String str59 = property46.getAsText(locale58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        int int65 = property64.getMaximumValue();
        java.util.Locale locale66 = null;
        int int67 = property64.getMaximumShortTextLength(locale66);
        java.util.Locale locale68 = null;
        int int69 = property64.getMaximumTextLength(locale68);
        java.util.Locale locale70 = null;
        int int71 = property64.getMaximumTextLength(locale70);
        java.lang.String str72 = property64.getAsText();
        boolean boolean73 = property46.equals((java.lang.Object) property64);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = property64.getFieldType();
        org.joda.time.YearMonth.Property property75 = yearMonth41.property(dateTimeFieldType74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth77 = property75.setCopy(1980);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1980 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 12 + "'", int47 == 12);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Oct" + "'", str52, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 12 + "'", int54 == 12);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "October" + "'", str59, "October");
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 12 + "'", int65 == 12);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 9 + "'", int69 == 9);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 9 + "'", int71 == 9);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "October" + "'", str72, "October");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(property75);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        org.joda.time.YearMonth yearMonth10 = property4.getYearMonth();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        int int25 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonth19.toInterval(dateTimeZone26);
        org.joda.time.YearMonth yearMonth29 = yearMonth19.minusYears((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonth yearMonth31 = yearMonth19.plus(readablePeriod30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.plusYears((int) 'a');
        int int34 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth.Property property39 = yearMonth38.monthOfYear();
        int int40 = property39.getMaximumValue();
        java.lang.String str41 = property39.getAsShortText();
        java.util.Locale locale42 = null;
        java.lang.String str43 = property39.getAsShortText(locale42);
        org.joda.time.YearMonth yearMonth45 = property39.setCopy("October");
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property39.getFieldType();
        boolean boolean47 = yearMonth31.isSupported(dateTimeFieldType46);
        int int48 = yearMonth31.getMonthOfYear();
        java.lang.String str49 = yearMonth31.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 12 + "'", int40 == 12);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Oct" + "'", str41, "Oct");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Oct" + "'", str43, "Oct");
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0097-10" + "'", str49, "0097-10");
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addToCopy((int) (short) 10);
        int int13 = property4.get();
        java.lang.String str14 = property4.getAsString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth16 = property4.setCopy("monthOfYear");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"monthOfYear\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth16 = property4.addWrapFieldToCopy((int) '4');
        org.joda.time.DurationField durationField17 = property4.getDurationField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("Jan");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Jan\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology15 = yearMonth8.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        org.joda.time.YearMonth.Property property37 = yearMonth19.property(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth8.property(dateTimeFieldType36);
        int int39 = property38.getMaximumValue();
        org.joda.time.YearMonth yearMonth41 = property38.addWrapFieldToCopy(12);
        java.util.Locale locale43 = null;
        java.lang.String str44 = yearMonth41.toString("9", locale43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        int int46 = yearMonth41.indexOf(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "9" + "'", str44, "9");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth.Property property10 = yearMonth9.monthOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        org.joda.time.YearMonth yearMonth19 = yearMonth14.plusMonths((int) (byte) 10);
        int int20 = property10.compareTo((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = yearMonth14.getChronology();
        org.joda.time.YearMonth yearMonth22 = org.joda.time.YearMonth.now(chronology21);
        org.joda.time.YearMonth yearMonth23 = yearMonth5.withChronologyRetainFields(chronology21);
        org.joda.time.YearMonth.Property property24 = yearMonth23.year();
        int int25 = property24.getMinimumValue();
        java.util.Locale locale26 = null;
        java.lang.String str27 = property24.getAsText(locale26);
        java.lang.String str28 = property24.getAsString();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-292275054) + "'", int25 == (-292275054));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "97" + "'", str27, "97");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "97" + "'", str28, "97");
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) 100);
        org.joda.time.YearMonth.Property property2 = yearMonth1.monthOfYear();
        java.lang.String str3 = property2.getAsString();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth.Property property8 = yearMonth7.monthOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        boolean boolean22 = yearMonth14.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth.Property property27 = yearMonth26.monthOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        org.joda.time.YearMonth yearMonth36 = yearMonth31.plusMonths((int) (byte) 10);
        int int37 = property27.compareTo((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology38 = yearMonth31.getChronology();
        org.joda.time.YearMonth yearMonth39 = yearMonth18.withChronologyRetainFields(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.YearMonth yearMonth42 = yearMonth39.withPeriodAdded(readablePeriod40, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        int int44 = yearMonth42.indexOf(dateTimeFieldType43);
        boolean boolean45 = yearMonth7.isEqual((org.joda.time.ReadablePartial) yearMonth42);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        int int51 = property50.getMaximumValue();
        java.lang.String str52 = property50.getAsShortText();
        java.util.Locale locale53 = null;
        java.lang.String str54 = property50.getAsShortText(locale53);
        org.joda.time.YearMonth yearMonth56 = property50.setCopy("October");
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = yearMonth56.toDateTime(readableInstant57);
        org.joda.time.DateTime dateTime59 = yearMonth42.toDateTime(readableInstant57);
        int int60 = property2.compareTo((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DurationField durationField61 = property2.getRangeDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1" + "'", str3, "1");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 12 + "'", int51 == 12);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Oct" + "'", str52, "Oct");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Oct" + "'", str54, "Oct");
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(durationField61);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField11 = property4.getField();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property4.getAsText(locale12);
        int int14 = property4.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "October" + "'", str13, "October");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        java.util.Locale locale10 = null;
        int int11 = property4.getMaximumTextLength(locale10);
        org.joda.time.DateTimeField dateTimeField12 = property4.getField();
        java.lang.String str13 = property4.getAsString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "10" + "'", str13, "10");
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        boolean boolean24 = yearMonth16.isAfter((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        int int39 = property29.compareTo((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = yearMonth33.getChronology();
        org.joda.time.YearMonth yearMonth41 = yearMonth20.withChronologyRetainFields(chronology40);
        int int42 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        int int48 = property47.getMaximumValue();
        java.util.Locale locale49 = null;
        int int50 = property47.getMaximumShortTextLength(locale49);
        java.util.Locale locale51 = null;
        int int52 = property47.getMaximumTextLength(locale51);
        org.joda.time.DurationField durationField53 = property47.getRangeDurationField();
        java.util.Locale locale54 = null;
        java.lang.String str55 = property47.getAsShortText(locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property47.getFieldType();
        org.joda.time.YearMonth yearMonth58 = yearMonth3.withField(dateTimeFieldType56, 11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = yearMonth58.getFieldTypes();
        org.joda.time.YearMonth yearMonth60 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology63);
        org.joda.time.YearMonth yearMonth66 = yearMonth64.minusYears((int) (short) 0);
        org.joda.time.Interval interval67 = yearMonth64.toInterval();
        org.joda.time.Chronology chronology68 = yearMonth64.getChronology();
        org.joda.time.YearMonth yearMonth69 = yearMonth60.withChronologyRetainFields(chronology68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.YearMonth yearMonth73 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology72);
        org.joda.time.YearMonth.Property property74 = yearMonth73.monthOfYear();
        int int75 = property74.getMaximumValue();
        java.util.Locale locale76 = null;
        int int77 = property74.getMaximumShortTextLength(locale76);
        java.util.Locale locale78 = null;
        int int79 = property74.getMaximumTextLength(locale78);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.YearMonth yearMonth83 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology82);
        org.joda.time.YearMonth.Property property84 = yearMonth83.monthOfYear();
        int int85 = property84.getMaximumValue();
        java.util.Locale locale86 = null;
        int int87 = property84.getMaximumShortTextLength(locale86);
        java.util.Locale locale88 = null;
        int int89 = property84.getMaximumTextLength(locale88);
        java.lang.String str90 = property84.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = property84.getFieldType();
        boolean boolean92 = property74.equals((java.lang.Object) property84);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = property84.getFieldType();
        int int94 = yearMonth69.get(dateTimeFieldType93);
        org.joda.time.YearMonth.Property property95 = yearMonth58.property(dateTimeFieldType93);
        int int96 = property95.getMinimumValue();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 12 + "'", int48 == 12);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Oct" + "'", str55, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 12 + "'", int75 == 12);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 12 + "'", int85 == 12);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 9 + "'", int89 == 9);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Oct" + "'", str90, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 11 + "'", int94 == 11);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("1970-01");
        java.util.Locale locale3 = null;
        java.lang.String str4 = yearMonth1.toString("97", locale3);
        org.junit.Assert.assertNotNull(yearMonth1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "97" + "'", str4, "97");
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        int int37 = yearMonth34.size();
        org.joda.time.YearMonth yearMonth39 = yearMonth34.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        int int41 = yearMonth34.indexOf(dateTimeFieldType40);
        org.joda.time.YearMonth yearMonth43 = yearMonth34.plusMonths((-1));
        boolean boolean44 = yearMonth9.isEqual((org.joda.time.ReadablePartial) yearMonth43);
        org.joda.time.YearMonth yearMonth46 = yearMonth43.withYear((int) '4');
        org.joda.time.YearMonth.Property property47 = yearMonth43.year();
        java.util.Locale locale48 = null;
        int int49 = property47.getMaximumTextLength(locale48);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.Chronology chronology2 = yearMonth1.getChronology();
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = yearMonth3.toDateTime(readableInstant4);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonth yearMonth29 = yearMonth27.plus(readablePeriod28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonth yearMonth31 = yearMonth27.minus(readablePeriod30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth yearMonth43 = yearMonth41.minusYears((int) (short) 0);
        int int44 = yearMonth41.size();
        boolean boolean45 = yearMonth37.isAfter((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        int int60 = property50.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = yearMonth54.getChronology();
        org.joda.time.YearMonth yearMonth62 = yearMonth41.withChronologyRetainFields(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.YearMonth yearMonth65 = yearMonth62.withPeriodAdded(readablePeriod63, (int) 'a');
        org.joda.time.YearMonth yearMonth67 = yearMonth62.plusMonths(9);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.YearMonth yearMonth71 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology70);
        org.joda.time.YearMonth.Property property72 = yearMonth71.monthOfYear();
        int int73 = property72.getMaximumValue();
        java.lang.String str74 = property72.getAsShortText();
        java.util.Locale locale75 = null;
        java.lang.String str76 = property72.getAsShortText(locale75);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = property72.getFieldType();
        int int78 = yearMonth62.get(dateTimeFieldType77);
        int int79 = yearMonth27.get(dateTimeFieldType77);
        int int80 = yearMonth27.size();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 12 + "'", int73 == 12);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Oct" + "'", str74, "Oct");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Oct" + "'", str76, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth17 = yearMonth5.minus(readablePeriod16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.year();
        int int20 = yearMonth17.getValue((int) (byte) 1);
        org.joda.time.YearMonth.Property property21 = yearMonth17.year();
        org.joda.time.YearMonth.Property property22 = yearMonth17.monthOfYear();
        org.joda.time.YearMonth yearMonth24 = yearMonth17.plusMonths((int) ' ');
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth24);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Interval interval6 = yearMonth3.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonth3.getFieldTypes();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        boolean boolean21 = yearMonth13.isAfter((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth.Property property26 = yearMonth25.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        int int36 = property26.compareTo((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.Chronology chronology37 = yearMonth30.getChronology();
        org.joda.time.YearMonth yearMonth38 = yearMonth17.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonth yearMonth39 = yearMonth3.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonth yearMonth41 = yearMonth3.minusYears(3);
        int int42 = yearMonth3.size();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addToCopy((int) (short) 1);
        int int10 = property4.getMaximumValueOverall();
        java.lang.String str11 = property4.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.plusYears((int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = yearMonth32.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = yearMonth32.toString(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0096-10" + "'", str35, "0096-10");
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonth yearMonth20 = yearMonth17.withPeriodAdded(readablePeriod18, 98);
        java.lang.Class<?> wildcardClass21 = yearMonth17.getClass();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property4.getFieldType();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth.Property property13 = yearMonth12.monthOfYear();
        int int14 = property13.getMaximumValue();
        java.util.Locale locale15 = null;
        int int16 = property13.getMaximumShortTextLength(locale15);
        java.util.Locale locale17 = null;
        int int18 = property13.getMaximumTextLength(locale17);
        java.lang.String str19 = property13.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property13.getFieldType();
        int int21 = property13.getMinimumValue();
        java.lang.String str22 = property13.getName();
        int int23 = property13.getMinimumValueOverall();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth.Property property28 = yearMonth27.monthOfYear();
        int int29 = property28.getMaximumValue();
        java.lang.String str30 = property28.getAsShortText();
        java.util.Locale locale31 = null;
        java.lang.String str32 = property28.getAsShortText(locale31);
        org.joda.time.YearMonth yearMonth34 = property28.setCopy("October");
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = yearMonth34.toDateTime(readableInstant35);
        int int37 = property13.compareTo((org.joda.time.ReadableInstant) dateTime36);
        int int38 = property4.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Oct" + "'", str19, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "monthOfYear" + "'", str22, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 12 + "'", int29 == 12);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Oct" + "'", str30, "Oct");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Oct" + "'", str32, "Oct");
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        int[] intArray16 = yearMonth5.getValues();
        org.joda.time.YearMonth yearMonth18 = yearMonth5.minusMonths(2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = yearMonth18.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.YearMonth yearMonth22 = yearMonth18.withPeriodAdded(readablePeriod20, 9);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 10);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[97, 10]");
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth24);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = yearMonth4.getFieldTypes();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        boolean boolean22 = yearMonth14.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth.Property property27 = yearMonth26.monthOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        org.joda.time.YearMonth yearMonth36 = yearMonth31.plusMonths((int) (byte) 10);
        int int37 = property27.compareTo((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology38 = yearMonth31.getChronology();
        org.joda.time.YearMonth yearMonth39 = yearMonth18.withChronologyRetainFields(chronology38);
        org.joda.time.YearMonth yearMonth40 = yearMonth4.withChronologyRetainFields(chronology38);
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((long) (short) -1, chronology38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        int int52 = yearMonth45.indexOf(dateTimeFieldType51);
        org.joda.time.YearMonth yearMonth54 = yearMonth45.plusMonths((-1));
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth yearMonth60 = yearMonth58.minusYears((int) (short) 0);
        int int61 = yearMonth58.size();
        org.joda.time.YearMonth yearMonth63 = yearMonth58.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        int int65 = yearMonth58.indexOf(dateTimeFieldType64);
        org.joda.time.Interval interval66 = yearMonth58.toInterval();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.YearMonth yearMonth70 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology69);
        org.joda.time.YearMonth.Property property71 = yearMonth70.monthOfYear();
        int int72 = property71.getMaximumValue();
        java.lang.String str73 = property71.getAsShortText();
        java.util.Locale locale74 = null;
        java.lang.String str75 = property71.getAsShortText(locale74);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = property71.getFieldType();
        int int77 = yearMonth58.get(dateTimeFieldType76);
        org.joda.time.YearMonth.Property property78 = yearMonth45.property(dateTimeFieldType76);
        org.joda.time.Chronology chronology79 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth80 = org.joda.time.YearMonth.now(chronology79);
        org.joda.time.YearMonth yearMonth81 = org.joda.time.YearMonth.now(chronology79);
        java.lang.String str83 = yearMonth81.toString("10");
        boolean boolean84 = yearMonth41.isEqual((org.joda.time.ReadablePartial) yearMonth81);
        int int85 = yearMonth41.size();
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 12 + "'", int72 == 12);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Oct" + "'", str73, "Oct");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Oct" + "'", str75, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertNotNull(yearMonth81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "10" + "'", str83, "10");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addWrapFieldToCopy((int) (byte) 10);
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Interval interval17 = yearMonth14.toInterval();
        org.joda.time.Chronology chronology18 = yearMonth14.getChronology();
        org.joda.time.YearMonth yearMonth19 = yearMonth10.withChronologyRetainFields(chronology18);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(chronology18);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        org.joda.time.YearMonth yearMonth29 = yearMonth24.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = yearMonth24.indexOf(dateTimeFieldType30);
        org.joda.time.YearMonth yearMonth33 = yearMonth24.plusMonths((-1));
        org.joda.time.YearMonth yearMonth35 = yearMonth24.plusMonths((-1));
        org.joda.time.YearMonth.Property property36 = yearMonth35.monthOfYear();
        int int37 = property36.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property36.getFieldType();
        int int39 = yearMonth20.indexOf(dateTimeFieldType38);
        org.joda.time.YearMonth.Property property40 = yearMonth9.property(dateTimeFieldType38);
        java.lang.String str41 = property40.getName();
        org.joda.time.YearMonth yearMonth42 = property40.getYearMonth();
        org.joda.time.YearMonth yearMonth44 = yearMonth42.plusYears(0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "monthOfYear" + "'", str41, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertNotNull(yearMonth44);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonth yearMonth16 = yearMonth14.plus(readablePeriod15);
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = yearMonth16.getFields();
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = yearMonth19.toInterval(dateTimeZone20);
        int int22 = yearMonth16.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        java.lang.String str23 = yearMonth16.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth.Property property28 = yearMonth27.monthOfYear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusMonths((int) (byte) 10);
        int int38 = property28.compareTo((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.YearMonth yearMonth39 = property28.getYearMonth();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth.Property property44 = yearMonth43.monthOfYear();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology47);
        org.joda.time.YearMonth yearMonth50 = yearMonth48.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        boolean boolean58 = yearMonth50.isAfter((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology61);
        org.joda.time.YearMonth.Property property63 = yearMonth62.monthOfYear();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.YearMonth yearMonth67 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology66);
        org.joda.time.YearMonth yearMonth69 = yearMonth67.minusYears((int) (short) 0);
        int int70 = yearMonth67.size();
        org.joda.time.YearMonth yearMonth72 = yearMonth67.plusMonths((int) (byte) 10);
        int int73 = property63.compareTo((org.joda.time.ReadablePartial) yearMonth67);
        org.joda.time.Chronology chronology74 = yearMonth67.getChronology();
        org.joda.time.YearMonth yearMonth75 = yearMonth54.withChronologyRetainFields(chronology74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.YearMonth yearMonth78 = yearMonth75.withPeriodAdded(readablePeriod76, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = null;
        int int80 = yearMonth78.indexOf(dateTimeFieldType79);
        boolean boolean81 = yearMonth43.isEqual((org.joda.time.ReadablePartial) yearMonth78);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.YearMonth yearMonth85 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology84);
        org.joda.time.YearMonth.Property property86 = yearMonth85.monthOfYear();
        int int87 = property86.getMaximumValue();
        java.lang.String str88 = property86.getAsShortText();
        java.util.Locale locale89 = null;
        java.lang.String str90 = property86.getAsShortText(locale89);
        org.joda.time.YearMonth yearMonth92 = property86.setCopy("October");
        org.joda.time.ReadableInstant readableInstant93 = null;
        org.joda.time.DateTime dateTime94 = yearMonth92.toDateTime(readableInstant93);
        org.joda.time.DateTime dateTime95 = yearMonth78.toDateTime(readableInstant93);
        int int96 = property28.compareTo((org.joda.time.ReadableInstant) dateTime95);
        org.joda.time.DateTime dateTime97 = yearMonth16.toDateTime((org.joda.time.ReadableInstant) dateTime95);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0097-09" + "'", str23, "0097-09");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(yearMonth75);
        org.junit.Assert.assertNotNull(yearMonth78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 12 + "'", int87 == 12);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Oct" + "'", str88, "Oct");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Oct" + "'", str90, "Oct");
        org.junit.Assert.assertNotNull(yearMonth92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property4.getAsShortText(locale11);
        int int13 = property4.getMinimumValueOverall();
        java.util.Locale locale15 = null;
        org.joda.time.YearMonth yearMonth16 = property4.setCopy("9", locale15);
        org.joda.time.YearMonth.Property property17 = yearMonth16.monthOfYear();
        java.util.Locale locale18 = null;
        int int19 = property17.getMaximumTextLength(locale18);
        int int20 = property17.getMaximumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Oct" + "'", str12, "Oct");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeField dateTimeField29 = yearMonth27.getField((int) (short) 1);
        java.util.Locale locale31 = null;
        java.lang.String str32 = yearMonth27.toString("0097-09", locale31);
        org.joda.time.DurationFieldType durationFieldType33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth35 = yearMonth27.withFieldAdded(durationFieldType33, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0097-09" + "'", str32, "0097-09");
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        java.util.Locale locale15 = null;
        java.lang.String str16 = property4.getAsText(locale15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth.Property property27 = yearMonth26.monthOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        org.joda.time.YearMonth yearMonth36 = yearMonth31.plusMonths((int) (byte) 10);
        int int37 = property27.compareTo((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Interval interval39 = yearMonth31.toInterval(dateTimeZone38);
        org.joda.time.YearMonth yearMonth41 = yearMonth31.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology50);
        org.joda.time.YearMonth yearMonth53 = yearMonth51.minusYears((int) (short) 0);
        int int54 = yearMonth51.size();
        boolean boolean55 = yearMonth47.isAfter((org.joda.time.ReadablePartial) yearMonth51);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology58);
        org.joda.time.YearMonth.Property property60 = yearMonth59.monthOfYear();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology63);
        org.joda.time.YearMonth yearMonth66 = yearMonth64.minusYears((int) (short) 0);
        int int67 = yearMonth64.size();
        org.joda.time.YearMonth yearMonth69 = yearMonth64.plusMonths((int) (byte) 10);
        int int70 = property60.compareTo((org.joda.time.ReadablePartial) yearMonth64);
        org.joda.time.Chronology chronology71 = yearMonth64.getChronology();
        org.joda.time.YearMonth yearMonth72 = yearMonth51.withChronologyRetainFields(chronology71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.YearMonth yearMonth75 = yearMonth72.withPeriodAdded(readablePeriod73, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = null;
        int int77 = yearMonth75.indexOf(dateTimeFieldType76);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.YearMonth yearMonth81 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology80);
        org.joda.time.YearMonth.Property property82 = yearMonth81.monthOfYear();
        int int83 = property82.getMaximumValue();
        java.lang.String str84 = property82.getAsShortText();
        java.util.Locale locale85 = null;
        java.lang.String str86 = property82.getAsShortText(locale85);
        org.joda.time.YearMonth yearMonth88 = property82.setCopy("October");
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.DateTime dateTime90 = yearMonth88.toDateTime(readableInstant89);
        org.joda.time.DateTime dateTime91 = yearMonth75.toDateTime(readableInstant89);
        org.joda.time.DateTime dateTime92 = yearMonth31.toDateTime((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.DateTime dateTime93 = yearMonth22.toDateTime((org.joda.time.ReadableInstant) dateTime92);
        int int94 = property4.compareTo((org.joda.time.ReadableInstant) dateTime93);
        java.util.Locale locale95 = null;
        java.lang.String str96 = property4.getAsShortText(locale95);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertNotNull(yearMonth75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 12 + "'", int83 == 12);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Oct" + "'", str84, "Oct");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Oct" + "'", str86, "Oct");
        org.junit.Assert.assertNotNull(yearMonth88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Oct" + "'", str96, "Oct");
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField7 = property4.getField();
        org.joda.time.YearMonth yearMonth9 = property4.setCopy("Oct");
        org.joda.time.YearMonth yearMonth11 = property4.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.plusMonths(0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        int int20 = property19.getMaximumValue();
        java.util.Locale locale21 = null;
        int int22 = property19.getMaximumShortTextLength(locale21);
        java.util.Locale locale23 = null;
        int int24 = property19.getMaximumTextLength(locale23);
        java.lang.String str25 = property19.getName();
        org.joda.time.YearMonth yearMonth27 = property19.addWrapFieldToCopy(100);
        int int28 = yearMonth27.getMonthOfYear();
        org.joda.time.YearMonth.Property property29 = yearMonth27.year();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth33.indexOf(dateTimeFieldType39);
        org.joda.time.YearMonth yearMonth42 = yearMonth33.plusMonths((-1));
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        int int49 = yearMonth46.size();
        org.joda.time.YearMonth yearMonth51 = yearMonth46.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        int int53 = yearMonth46.indexOf(dateTimeFieldType52);
        org.joda.time.Interval interval54 = yearMonth46.toInterval();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth.Property property59 = yearMonth58.monthOfYear();
        int int60 = property59.getMaximumValue();
        java.lang.String str61 = property59.getAsShortText();
        java.util.Locale locale62 = null;
        java.lang.String str63 = property59.getAsShortText(locale62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = property59.getFieldType();
        int int65 = yearMonth46.get(dateTimeFieldType64);
        org.joda.time.YearMonth.Property property66 = yearMonth33.property(dateTimeFieldType64);
        org.joda.time.Chronology chronology67 = yearMonth33.getChronology();
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth(chronology67);
        org.joda.time.YearMonth yearMonth69 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.YearMonth yearMonth73 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology72);
        org.joda.time.YearMonth yearMonth75 = yearMonth73.minusYears((int) (short) 0);
        org.joda.time.Interval interval76 = yearMonth73.toInterval();
        org.joda.time.Chronology chronology77 = yearMonth73.getChronology();
        org.joda.time.YearMonth yearMonth78 = yearMonth69.withChronologyRetainFields(chronology77);
        org.joda.time.YearMonth yearMonth79 = new org.joda.time.YearMonth(chronology77);
        org.joda.time.YearMonth yearMonth80 = yearMonth68.withChronologyRetainFields(chronology77);
        org.joda.time.YearMonth yearMonth81 = yearMonth27.withChronologyRetainFields(chronology77);
        org.joda.time.YearMonth yearMonth82 = new org.joda.time.YearMonth((long) 12, chronology77);
        org.joda.time.YearMonth yearMonth83 = org.joda.time.YearMonth.now(chronology77);
        org.joda.time.YearMonth yearMonth84 = new org.joda.time.YearMonth((java.lang.Object) yearMonth11, chronology77);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "monthOfYear" + "'", str25, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 12 + "'", int60 == 12);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Oct" + "'", str61, "Oct");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Oct" + "'", str63, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(yearMonth75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(yearMonth78);
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertNotNull(yearMonth81);
        org.junit.Assert.assertNotNull(yearMonth83);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property4.getAsShortText(locale16);
        org.joda.time.YearMonth yearMonth18 = property4.getYearMonth();
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        org.joda.time.Interval interval26 = yearMonth23.toInterval();
        org.joda.time.Chronology chronology27 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth28 = yearMonth19.withChronologyRetainFields(chronology27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth.Property property33 = yearMonth32.monthOfYear();
        int int34 = property33.getMaximumValue();
        java.util.Locale locale35 = null;
        int int36 = property33.getMaximumShortTextLength(locale35);
        java.util.Locale locale37 = null;
        int int38 = property33.getMaximumTextLength(locale37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth.Property property43 = yearMonth42.monthOfYear();
        int int44 = property43.getMaximumValue();
        java.util.Locale locale45 = null;
        int int46 = property43.getMaximumShortTextLength(locale45);
        java.util.Locale locale47 = null;
        int int48 = property43.getMaximumTextLength(locale47);
        java.lang.String str49 = property43.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property43.getFieldType();
        boolean boolean51 = property33.equals((java.lang.Object) property43);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property43.getFieldType();
        int int53 = yearMonth28.get(dateTimeFieldType52);
        int int54 = yearMonth18.indexOf(dateTimeFieldType52);
        org.joda.time.YearMonth.Property property55 = yearMonth18.year();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Oct" + "'", str17, "Oct");
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 12 + "'", int34 == 12);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 12 + "'", int44 == 12);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Oct" + "'", str49, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 11 + "'", int53 == 11);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        java.lang.String str19 = yearMonth8.toString();
        org.joda.time.YearMonth yearMonth21 = yearMonth8.withMonthOfYear(11);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        int int23 = yearMonth21.size();
        org.joda.time.Interval interval24 = yearMonth21.toInterval();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0097-10" + "'", str19, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(interval24);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.YearMonth yearMonth15 = yearMonth9.minus(readablePeriod14);
        int int16 = yearMonth9.getMonthOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        boolean boolean38 = yearMonth25.isAfter((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonth yearMonth40 = yearMonth25.minus(readablePeriod39);
        boolean boolean41 = yearMonth9.isEqual((org.joda.time.ReadablePartial) yearMonth25);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        int int14 = yearMonth11.size();
        boolean boolean15 = yearMonth7.isAfter((org.joda.time.ReadablePartial) yearMonth11);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth.Property property20 = yearMonth19.monthOfYear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        org.joda.time.YearMonth yearMonth29 = yearMonth24.plusMonths((int) (byte) 10);
        int int30 = property20.compareTo((org.joda.time.ReadablePartial) yearMonth24);
        org.joda.time.Chronology chronology31 = yearMonth24.getChronology();
        org.joda.time.YearMonth yearMonth32 = yearMonth11.withChronologyRetainFields(chronology31);
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((long) (short) 1, chronology31);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth(chronology31);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((long) 0, chronology31);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(yearMonth32);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(1L);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.YearMonth yearMonth3 = yearMonth1.minus(readablePeriod2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = yearMonth3.toString("September");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: p");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth3);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = yearMonth8.getFields();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        int int16 = yearMonth13.size();
        org.joda.time.YearMonth yearMonth18 = yearMonth13.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonth13.indexOf(dateTimeFieldType19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth.Property property25 = yearMonth24.monthOfYear();
        int int26 = property25.getMaximumValue();
        java.lang.String str27 = property25.getAsShortText();
        java.util.Locale locale28 = null;
        java.lang.String str29 = property25.getAsShortText(locale28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property25.getFieldType();
        org.joda.time.YearMonth.Property property31 = yearMonth13.property(dateTimeFieldType30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth yearMonth43 = yearMonth41.minusYears((int) (short) 0);
        int int44 = yearMonth41.size();
        boolean boolean45 = yearMonth37.isAfter((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        int int60 = property50.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = yearMonth54.getChronology();
        org.joda.time.YearMonth yearMonth62 = yearMonth41.withChronologyRetainFields(chronology61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth yearMonth68 = yearMonth66.minusYears((int) (short) 0);
        int int69 = yearMonth66.size();
        org.joda.time.YearMonth yearMonth71 = yearMonth66.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        int int73 = yearMonth66.indexOf(dateTimeFieldType72);
        org.joda.time.Interval interval74 = yearMonth66.toInterval();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.YearMonth yearMonth78 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology77);
        org.joda.time.YearMonth.Property property79 = yearMonth78.monthOfYear();
        int int80 = property79.getMaximumValue();
        java.lang.String str81 = property79.getAsShortText();
        java.util.Locale locale82 = null;
        java.lang.String str83 = property79.getAsShortText(locale82);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = property79.getFieldType();
        int int85 = yearMonth66.get(dateTimeFieldType84);
        boolean boolean86 = yearMonth62.isSupported(dateTimeFieldType84);
        boolean boolean87 = yearMonth13.isSupported(dateTimeFieldType84);
        boolean boolean88 = yearMonth8.isSupported(dateTimeFieldType84);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.YearMonth yearMonth90 = yearMonth8.minus(readablePeriod89);
        org.joda.time.YearMonth yearMonth92 = yearMonth8.plusMonths(1970);
        java.lang.Class<?> wildcardClass93 = yearMonth92.getClass();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Oct" + "'", str27, "Oct");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Oct" + "'", str29, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 12 + "'", int80 == 12);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Oct" + "'", str81, "Oct");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Oct" + "'", str83, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(yearMonth90);
        org.junit.Assert.assertNotNull(yearMonth92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.YearMonth yearMonth5 = property4.getYearMonth();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth.Property property10 = yearMonth9.monthOfYear();
        int int11 = property10.getMaximumValue();
        java.lang.String str12 = property10.getAsShortText();
        org.joda.time.YearMonth yearMonth14 = property10.addWrapFieldToCopy((int) (short) -1);
        int[] intArray15 = yearMonth14.getValues();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth.Property property20 = yearMonth19.monthOfYear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        org.joda.time.YearMonth yearMonth29 = yearMonth24.plusMonths((int) (byte) 10);
        int int30 = property20.compareTo((org.joda.time.ReadablePartial) yearMonth24);
        org.joda.time.Chronology chronology31 = yearMonth24.getChronology();
        org.joda.time.YearMonth yearMonth32 = org.joda.time.YearMonth.now(chronology31);
        org.joda.time.YearMonth yearMonth33 = yearMonth14.withChronologyRetainFields(chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth5.withChronologyRetainFields(chronology31);
        org.joda.time.YearMonth yearMonth35 = org.joda.time.YearMonth.now(chronology31);
        org.joda.time.YearMonth.Property property36 = yearMonth35.monthOfYear();
        org.joda.time.DurationField durationField37 = property36.getDurationField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Oct" + "'", str12, "Oct");
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[97, 9]");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.YearMonth yearMonth10 = property4.addToCopy(11);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusMonths(10);
        org.joda.time.ReadablePartial readablePartial13 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = yearMonth10.isBefore(readablePartial13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth12);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField11 = property4.getField();
        org.joda.time.DurationField durationField12 = property4.getDurationField();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property4.getAsShortText(locale13);
        int int15 = property4.getMaximumValueOverall();
        int int16 = property4.getMinimumValue();
        int int17 = property4.getMaximumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Oct" + "'", str14, "Oct");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth yearMonth17 = yearMonth3.minusMonths(0);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.Chronology chronology20 = yearMonth19.getChronology();
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth(chronology20);
        int int22 = yearMonth17.compareTo((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.Chronology chronology23 = yearMonth17.getChronology();
        org.joda.time.YearMonth yearMonth24 = org.joda.time.YearMonth.now(chronology23);
        java.lang.Class<?> wildcardClass25 = chronology23.getClass();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMinimumValueOverall();
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy((int) ' ');
        org.joda.time.YearMonth yearMonth14 = property4.addWrapFieldToCopy(2);
        org.joda.time.YearMonth yearMonth16 = property4.setCopy(9);
        java.util.Locale locale18 = null;
        java.lang.String str19 = yearMonth16.toString("1980-01", locale18);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1980-01" + "'", str19, "1980-01");
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.lang.String str11 = property4.toString();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property4.getAsText(locale12);
        int int14 = property4.getMaximumValue();
        java.lang.String str15 = property4.getAsText();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "October" + "'", str13, "October");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "October" + "'", str15, "October");
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth31 = org.joda.time.YearMonth.now(chronology29);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth(chronology29);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth.Property property39 = yearMonth38.monthOfYear();
        org.joda.time.YearMonth yearMonth40 = property39.getYearMonth();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        int int46 = property45.getMaximumValue();
        java.lang.String str47 = property45.getAsShortText();
        org.joda.time.YearMonth yearMonth49 = property45.addWrapFieldToCopy((int) (short) -1);
        int[] intArray50 = yearMonth49.getValues();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth.Property property55 = yearMonth54.monthOfYear();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology58);
        org.joda.time.YearMonth yearMonth61 = yearMonth59.minusYears((int) (short) 0);
        int int62 = yearMonth59.size();
        org.joda.time.YearMonth yearMonth64 = yearMonth59.plusMonths((int) (byte) 10);
        int int65 = property55.compareTo((org.joda.time.ReadablePartial) yearMonth59);
        org.joda.time.Chronology chronology66 = yearMonth59.getChronology();
        org.joda.time.YearMonth yearMonth67 = org.joda.time.YearMonth.now(chronology66);
        org.joda.time.YearMonth yearMonth68 = yearMonth49.withChronologyRetainFields(chronology66);
        org.joda.time.YearMonth yearMonth69 = yearMonth40.withChronologyRetainFields(chronology66);
        org.joda.time.YearMonth yearMonth70 = new org.joda.time.YearMonth(1L, chronology66);
        org.joda.time.YearMonth yearMonth71 = new org.joda.time.YearMonth((long) (byte) 1, chronology66);
        org.joda.time.YearMonth yearMonth72 = yearMonth32.withChronologyRetainFields(chronology66);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Oct" + "'", str47, "Oct");
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 9]");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertNotNull(yearMonth72);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth yearMonth15 = yearMonth9.minusYears((int) (byte) 100);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.YearMonth yearMonth28 = yearMonth19.plusMonths((-1));
        org.joda.time.YearMonth yearMonth30 = yearMonth19.plusMonths((-1));
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property31.getFieldType();
        org.joda.time.YearMonth.Property property34 = yearMonth9.property(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("0097-09");
        int int2 = yearMonth1.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = yearMonth1.toString(dateTimeFormatter3);
        org.joda.time.YearMonth yearMonth6 = yearMonth1.withYear((int) (byte) 1);
        org.junit.Assert.assertNotNull(yearMonth1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 9 + "'", int2 == 9);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0097-09" + "'", str4, "0097-09");
        org.junit.Assert.assertNotNull(yearMonth6);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.lang.String str8 = property4.getName();
        java.util.Locale locale9 = null;
        int int10 = property4.getMaximumShortTextLength(locale9);
        java.lang.String str11 = property4.getAsString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10" + "'", str11, "10");
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonth8.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonth8.toInterval(dateTimeZone26);
        int[] intArray28 = yearMonth8.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = yearMonth8.getFieldType((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonth yearMonth32 = yearMonth8.minus(readablePeriod31);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[97, 10]");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(yearMonth32);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        org.joda.time.YearMonth yearMonth41 = yearMonth36.plusMonths((int) (byte) 10);
        int int42 = property32.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        boolean boolean49 = yearMonth36.isAfter((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = yearMonth36.indexOf(dateTimeFieldType50);
        int int52 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.YearMonth yearMonth54 = yearMonth36.minusYears(11);
        org.joda.time.YearMonth.Property property55 = yearMonth36.monthOfYear();
        java.util.Locale locale56 = null;
        int int57 = property55.getMaximumTextLength(locale56);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.lang.String str8 = property4.getAsString();
        java.util.Locale locale10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth11 = property4.setCopy("", locale10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10" + "'", str8, "10");
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        java.lang.String str9 = property4.getAsText();
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Interval interval17 = yearMonth14.toInterval();
        org.joda.time.Chronology chronology18 = yearMonth14.getChronology();
        org.joda.time.YearMonth yearMonth19 = yearMonth10.withChronologyRetainFields(chronology18);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(chronology18);
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth(chronology18);
        org.joda.time.YearMonth yearMonth22 = org.joda.time.YearMonth.now(chronology18);
        org.joda.time.YearMonth yearMonth23 = org.joda.time.YearMonth.now(chronology18);
        boolean boolean24 = property4.equals((java.lang.Object) yearMonth23);
        org.joda.time.Chronology chronology25 = yearMonth23.getChronology();
        org.joda.time.Interval interval26 = yearMonth23.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = yearMonth23.getFieldType((int) (short) 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "October" + "'", str9, "October");
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((int) (byte) -1, (int) (byte) 1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth.Property property7 = yearMonth6.monthOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        boolean boolean21 = yearMonth13.isAfter((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth.Property property26 = yearMonth25.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        int int36 = property26.compareTo((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.Chronology chronology37 = yearMonth30.getChronology();
        org.joda.time.YearMonth yearMonth38 = yearMonth17.withChronologyRetainFields(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonth yearMonth41 = yearMonth38.withPeriodAdded(readablePeriod39, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        int int43 = yearMonth41.indexOf(dateTimeFieldType42);
        boolean boolean44 = yearMonth6.isEqual((org.joda.time.ReadablePartial) yearMonth41);
        java.lang.String str45 = yearMonth41.toString();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.YearMonth yearMonth47 = yearMonth41.minus(readablePeriod46);
        boolean boolean48 = yearMonth2.isAfter((org.joda.time.ReadablePartial) yearMonth47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology51);
        org.joda.time.YearMonth yearMonth54 = yearMonth52.minusYears((int) (short) 0);
        int int55 = yearMonth52.size();
        org.joda.time.YearMonth yearMonth57 = yearMonth52.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        int int59 = yearMonth52.indexOf(dateTimeFieldType58);
        org.joda.time.YearMonth yearMonth61 = yearMonth52.plusMonths((-1));
        org.joda.time.YearMonth yearMonth63 = yearMonth52.plusMonths((-1));
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        int int65 = property64.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = property64.getFieldType();
        int int67 = property64.getMaximumValueOverall();
        java.util.Locale locale68 = null;
        java.lang.String str69 = property64.getAsShortText(locale68);
        int int70 = property64.getMinimumValueOverall();
        org.joda.time.YearMonth yearMonth72 = property64.addToCopy((int) (byte) 100);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.YearMonth yearMonth76 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology75);
        org.joda.time.YearMonth.Property property77 = yearMonth76.monthOfYear();
        int int78 = property77.getMaximumValue();
        java.util.Locale locale79 = null;
        int int80 = property77.getMaximumShortTextLength(locale79);
        java.util.Locale locale81 = null;
        int int82 = property77.getMaximumTextLength(locale81);
        java.lang.String str83 = property77.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = property77.getFieldType();
        boolean boolean85 = yearMonth72.isSupported(dateTimeFieldType84);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth87 = yearMonth2.withField(dateTimeFieldType84, 1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0097-10" + "'", str45, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 12 + "'", int67 == 12);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Sep" + "'", str69, "Sep");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 12 + "'", int78 == 12);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 3 + "'", int80 == 3);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 9 + "'", int82 == 9);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Oct" + "'", str83, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonth8.getFieldTypes();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        boolean boolean40 = yearMonth32.isAfter((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth yearMonth51 = yearMonth49.minusYears((int) (short) 0);
        int int52 = yearMonth49.size();
        org.joda.time.YearMonth yearMonth54 = yearMonth49.plusMonths((int) (byte) 10);
        int int55 = property45.compareTo((org.joda.time.ReadablePartial) yearMonth49);
        org.joda.time.Chronology chronology56 = yearMonth49.getChronology();
        org.joda.time.YearMonth yearMonth57 = yearMonth36.withChronologyRetainFields(chronology56);
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((long) (short) 1, chronology56);
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((java.lang.Object) yearMonth8, chronology56);
        org.joda.time.YearMonth yearMonth61 = yearMonth8.plusYears((int) (short) 1);
        java.lang.String str62 = yearMonth61.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0098-10" + "'", str62, "0098-10");
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((java.lang.Object) 98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth3.getFieldTypes();
        int[] intArray10 = yearMonth3.getValues();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        int int25 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.Chronology chronology26 = yearMonth19.getChronology();
        org.joda.time.YearMonth yearMonth27 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth28 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3, chronology26);
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth(chronology26);
        int int31 = yearMonth30.getMonthOfYear();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[97, 10]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 11 + "'", int31 == 11);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        org.joda.time.YearMonth yearMonth17 = yearMonth5.plusMonths((int) '4');
        org.joda.time.DurationFieldType durationFieldType18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth20 = yearMonth17.withFieldAdded(durationFieldType18, 292278993);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth17);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonth yearMonth29 = yearMonth27.plus(readablePeriod28);
        org.joda.time.YearMonth yearMonth31 = yearMonth27.withYear((int) (short) 10);
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth(0L);
        java.lang.String str34 = yearMonth33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth yearMonth40 = yearMonth38.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        int int47 = yearMonth44.size();
        boolean boolean48 = yearMonth40.isAfter((org.joda.time.ReadablePartial) yearMonth44);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology51);
        org.joda.time.YearMonth.Property property53 = yearMonth52.monthOfYear();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.YearMonth yearMonth57 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology56);
        org.joda.time.YearMonth yearMonth59 = yearMonth57.minusYears((int) (short) 0);
        int int60 = yearMonth57.size();
        org.joda.time.YearMonth yearMonth62 = yearMonth57.plusMonths((int) (byte) 10);
        int int63 = property53.compareTo((org.joda.time.ReadablePartial) yearMonth57);
        org.joda.time.Chronology chronology64 = yearMonth57.getChronology();
        org.joda.time.YearMonth yearMonth65 = yearMonth44.withChronologyRetainFields(chronology64);
        org.joda.time.YearMonth yearMonth67 = yearMonth44.withYear((int) (byte) 1);
        boolean boolean68 = yearMonth33.isEqual((org.joda.time.ReadablePartial) yearMonth67);
        boolean boolean69 = yearMonth27.equals((java.lang.Object) yearMonth67);
        int int70 = yearMonth27.size();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01" + "'", str34, "1970-01");
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.YearMonth yearMonth15 = yearMonth12.withPeriodAdded(readablePeriod13, 3);
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology17 = yearMonth16.getChronology();
        org.joda.time.YearMonth yearMonth18 = yearMonth12.withChronologyRetainFields(chronology17);
        int[] intArray19 = yearMonth12.getValues();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = yearMonth12.toInterval(dateTimeZone20);
        org.joda.time.YearMonth.Property property22 = yearMonth12.year();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[97, 9]");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        org.joda.time.YearMonth yearMonth10 = property4.getYearMonth();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        int int25 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonth19.toInterval(dateTimeZone26);
        org.joda.time.YearMonth yearMonth29 = yearMonth19.minusYears((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonth yearMonth31 = yearMonth19.plus(readablePeriod30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.plusYears((int) 'a');
        int int34 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = yearMonth31.getFieldTypes();
        int int36 = yearMonth31.getMonthOfYear();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property4.getFieldType();
        int int12 = property4.getMinimumValue();
        java.lang.String str13 = property4.getName();
        org.joda.time.YearMonth yearMonth15 = property4.addWrapFieldToCopy(12);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth15);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        java.lang.String str19 = yearMonth8.toString();
        org.joda.time.YearMonth yearMonth21 = yearMonth8.withMonthOfYear(11);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        int int34 = yearMonth27.indexOf(dateTimeFieldType33);
        org.joda.time.YearMonth yearMonth36 = yearMonth27.plusMonths((-1));
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minusYears((int) (short) 0);
        int int43 = yearMonth40.size();
        org.joda.time.YearMonth yearMonth45 = yearMonth40.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        int int47 = yearMonth40.indexOf(dateTimeFieldType46);
        org.joda.time.Interval interval48 = yearMonth40.toInterval();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology51);
        org.joda.time.YearMonth.Property property53 = yearMonth52.monthOfYear();
        int int54 = property53.getMaximumValue();
        java.lang.String str55 = property53.getAsShortText();
        java.util.Locale locale56 = null;
        java.lang.String str57 = property53.getAsShortText(locale56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property53.getFieldType();
        int int59 = yearMonth40.get(dateTimeFieldType58);
        org.joda.time.YearMonth.Property property60 = yearMonth27.property(dateTimeFieldType58);
        org.joda.time.Chronology chronology61 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth(chronology61);
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.YearMonth yearMonth67 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology66);
        org.joda.time.YearMonth yearMonth69 = yearMonth67.minusYears((int) (short) 0);
        org.joda.time.Interval interval70 = yearMonth67.toInterval();
        org.joda.time.Chronology chronology71 = yearMonth67.getChronology();
        org.joda.time.YearMonth yearMonth72 = yearMonth63.withChronologyRetainFields(chronology71);
        org.joda.time.YearMonth yearMonth73 = new org.joda.time.YearMonth(chronology71);
        org.joda.time.YearMonth yearMonth74 = yearMonth62.withChronologyRetainFields(chronology71);
        org.joda.time.YearMonth yearMonth75 = new org.joda.time.YearMonth((long) (short) 10, chronology71);
        org.joda.time.YearMonth yearMonth76 = new org.joda.time.YearMonth((java.lang.Object) yearMonth21, chronology71);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray77 = yearMonth76.getFieldTypes();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0097-10" + "'", str19, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 12 + "'", int54 == 12);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Oct" + "'", str55, "Oct");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Oct" + "'", str57, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray77);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Interval interval6 = yearMonth3.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonth3.getFieldTypes();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        boolean boolean21 = yearMonth13.isAfter((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth.Property property26 = yearMonth25.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        int int36 = property26.compareTo((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.Chronology chronology37 = yearMonth30.getChronology();
        org.joda.time.YearMonth yearMonth38 = yearMonth17.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonth yearMonth39 = yearMonth3.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonth yearMonth41 = yearMonth39.withMonthOfYear(9);
        org.joda.time.YearMonth yearMonth43 = yearMonth39.withYear(2);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(yearMonth43);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.lang.String str8 = property4.getAsText();
        java.lang.Class<?> wildcardClass9 = property4.getClass();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "October" + "'", str8, "October");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField11 = property4.getField();
        int int12 = property4.getMaximumValue();
        org.joda.time.YearMonth yearMonth14 = property4.setCopy((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property4.getFieldType();
        org.joda.time.DurationField durationField16 = property4.getDurationField();
        java.util.Locale locale17 = null;
        int int18 = property4.getMaximumShortTextLength(locale17);
        org.joda.time.YearMonth yearMonth19 = property4.getYearMonth();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 12 + "'", int12 == 12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(yearMonth19);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.YearMonth.Property property36 = yearMonth3.property(dateTimeFieldType34);
        java.lang.String str37 = property36.getAsText();
        java.lang.String str38 = property36.getAsString();
        java.lang.String str39 = property36.getAsShortText();
        int int40 = property36.get();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "October" + "'", str37, "October");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "10" + "'", str38, "10");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Oct" + "'", str39, "Oct");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        org.joda.time.YearMonth yearMonth41 = yearMonth36.plusMonths((int) (byte) 10);
        int int42 = property32.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        boolean boolean49 = yearMonth36.isAfter((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = yearMonth36.indexOf(dateTimeFieldType50);
        int int52 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        java.lang.Class<?> wildcardClass53 = yearMonth36.getClass();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.Chronology chronology8 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(obj0, chronology8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = yearMonth9.toLocalDate((int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        java.lang.String str20 = yearMonth8.toString("0097-10");
        org.joda.time.YearMonth yearMonth22 = yearMonth8.minusMonths(11);
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth yearMonth31 = yearMonth29.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        int int38 = yearMonth35.size();
        boolean boolean39 = yearMonth31.isAfter((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.Interval interval40 = yearMonth31.toInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        int int47 = yearMonth44.size();
        org.joda.time.YearMonth yearMonth49 = yearMonth44.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = yearMonth44.indexOf(dateTimeFieldType50);
        org.joda.time.Interval interval52 = yearMonth44.toInterval();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth.Property property57 = yearMonth56.monthOfYear();
        int int58 = property57.getMaximumValue();
        java.lang.String str59 = property57.getAsShortText();
        java.util.Locale locale60 = null;
        java.lang.String str61 = property57.getAsShortText(locale60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property57.getFieldType();
        int int63 = yearMonth44.get(dateTimeFieldType62);
        org.joda.time.YearMonth.Property property64 = yearMonth31.property(dateTimeFieldType62);
        boolean boolean65 = yearMonth25.isSupported(dateTimeFieldType62);
        int int66 = yearMonth22.get(dateTimeFieldType62);
        org.joda.time.YearMonth yearMonth68 = yearMonth22.plusMonths((int) (byte) -1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0097-10" + "'", str20, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 12 + "'", int58 == 12);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Oct" + "'", str59, "Oct");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Oct" + "'", str61, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 11 + "'", int66 == 11);
        org.junit.Assert.assertNotNull(yearMonth68);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMaximumValue();
        int int10 = property4.getMinimumValueOverall();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property4.getAsText(locale11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth.Property property17 = yearMonth16.monthOfYear();
        int int18 = property17.getMaximumValue();
        java.lang.String str19 = property17.getAsShortText();
        org.joda.time.DateTimeField dateTimeField20 = property17.getField();
        org.joda.time.YearMonth yearMonth22 = property17.setCopy("Oct");
        int int23 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        int int24 = property4.get();
        int int25 = property4.getMinimumValue();
        java.util.Locale locale27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth28 = property4.setCopy("0097-11", locale27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0097-11\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "October" + "'", str12, "October");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Oct" + "'", str19, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.lang.String str11 = property4.toString();
        java.lang.String str12 = property4.getName();
        int int13 = property4.getMaximumValue();
        java.lang.String str14 = property4.getAsString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "monthOfYear" + "'", str12, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.lang.String str11 = property4.toString();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property4.getAsText(locale12);
        int int14 = property4.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth16 = property4.setCopy("2015-01");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2015-01\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "October" + "'", str13, "October");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        java.lang.String str20 = yearMonth8.toString("0097-10");
        org.joda.time.YearMonth yearMonth22 = yearMonth8.minusMonths(11);
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth yearMonth31 = yearMonth29.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        int int38 = yearMonth35.size();
        boolean boolean39 = yearMonth31.isAfter((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.Interval interval40 = yearMonth31.toInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        int int47 = yearMonth44.size();
        org.joda.time.YearMonth yearMonth49 = yearMonth44.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = yearMonth44.indexOf(dateTimeFieldType50);
        org.joda.time.Interval interval52 = yearMonth44.toInterval();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth.Property property57 = yearMonth56.monthOfYear();
        int int58 = property57.getMaximumValue();
        java.lang.String str59 = property57.getAsShortText();
        java.util.Locale locale60 = null;
        java.lang.String str61 = property57.getAsShortText(locale60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property57.getFieldType();
        int int63 = yearMonth44.get(dateTimeFieldType62);
        org.joda.time.YearMonth.Property property64 = yearMonth31.property(dateTimeFieldType62);
        boolean boolean65 = yearMonth25.isSupported(dateTimeFieldType62);
        int int66 = yearMonth22.get(dateTimeFieldType62);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.YearMonth yearMonth70 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology69);
        org.joda.time.YearMonth yearMonth72 = yearMonth70.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.YearMonth yearMonth76 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology75);
        org.joda.time.YearMonth yearMonth78 = yearMonth76.minusYears((int) (short) 0);
        int int79 = yearMonth76.size();
        boolean boolean80 = yearMonth72.isAfter((org.joda.time.ReadablePartial) yearMonth76);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.YearMonth yearMonth82 = yearMonth76.minus(readablePeriod81);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.YearMonth yearMonth85 = yearMonth82.withPeriodAdded(readablePeriod83, (int) (short) 0);
        boolean boolean86 = yearMonth22.isBefore((org.joda.time.ReadablePartial) yearMonth85);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0097-10" + "'", str20, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 12 + "'", int58 == 12);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Oct" + "'", str59, "Oct");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Oct" + "'", str61, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 11 + "'", int66 == 11);
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertNotNull(yearMonth78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(yearMonth82);
        org.junit.Assert.assertNotNull(yearMonth85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.YearMonth yearMonth20 = yearMonth8.plus(readablePeriod19);
        int int21 = yearMonth8.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Interval interval23 = yearMonth8.toInterval(dateTimeZone22);
        org.joda.time.Chronology chronology24 = yearMonth8.getChronology();
        int[] intArray25 = yearMonth8.getValues();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[97, 10]");
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth yearMonth17 = yearMonth3.minusMonths(0);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = yearMonth17.getValue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(yearMonth17);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth yearMonth15 = yearMonth9.minusYears((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth17 = yearMonth9.withMonthOfYear((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(yearMonth15);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth3.getFieldTypes();
        int[] intArray10 = yearMonth3.getValues();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        int int25 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.Chronology chronology26 = yearMonth19.getChronology();
        org.joda.time.YearMonth yearMonth27 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth28 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3, chronology26);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth.Property property34 = yearMonth33.monthOfYear();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth yearMonth40 = yearMonth38.minusYears((int) (short) 0);
        int int41 = yearMonth38.size();
        org.joda.time.YearMonth yearMonth43 = yearMonth38.plusMonths((int) (byte) 10);
        int int44 = property34.compareTo((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Interval interval46 = yearMonth38.toInterval(dateTimeZone45);
        org.joda.time.YearMonth yearMonth48 = yearMonth38.minusYears((int) (short) 0);
        boolean boolean49 = yearMonth29.isAfter((org.joda.time.ReadablePartial) yearMonth48);
        org.joda.time.YearMonth yearMonth51 = yearMonth48.plusYears(12);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.YearMonth yearMonth54 = yearMonth48.withPeriodAdded(readablePeriod52, 11);
        org.joda.time.DateTimeField[] dateTimeFieldArray55 = yearMonth54.getFields();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[97, 10]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(dateTimeFieldArray55);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addToCopy((int) (short) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        boolean boolean31 = yearMonth18.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = yearMonth28.toString(dateTimeFormatter32);
        int int34 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth28);
        java.lang.String str35 = property4.getAsShortText();
        java.util.Locale locale36 = null;
        java.lang.String str37 = property4.getAsShortText(locale36);
        java.util.Locale locale38 = null;
        java.lang.String str39 = property4.getAsText(locale38);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0097-10" + "'", str33, "0097-10");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Oct" + "'", str37, "Oct");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "October" + "'", str39, "October");
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology15 = yearMonth8.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        org.joda.time.YearMonth.Property property37 = yearMonth19.property(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth8.property(dateTimeFieldType36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonth42.indexOf(dateTimeFieldType48);
        org.joda.time.YearMonth yearMonth51 = yearMonth42.plusMonths((-1));
        boolean boolean53 = yearMonth51.equals((java.lang.Object) 1);
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((long) 100);
        boolean boolean56 = yearMonth51.isBefore((org.joda.time.ReadablePartial) yearMonth55);
        int int57 = yearMonth8.compareTo((org.joda.time.ReadablePartial) yearMonth51);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.YearMonth yearMonth60 = yearMonth51.withPeriodAdded(readablePeriod58, (int) (byte) -1);
        org.joda.time.Interval interval61 = yearMonth51.toInterval();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.YearMonth yearMonth63 = yearMonth51.plus(readablePeriod62);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(yearMonth63);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = yearMonth2.getChronology();
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth(12, 9, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.withYear(11);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonth yearMonth8 = yearMonth4.minus(readablePeriod7);
        org.joda.time.DurationFieldType durationFieldType9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth11 = yearMonth4.withFieldAdded(durationFieldType9, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth8);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        boolean boolean24 = yearMonth16.isAfter((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        int int39 = property29.compareTo((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = yearMonth33.getChronology();
        org.joda.time.YearMonth yearMonth41 = yearMonth20.withChronologyRetainFields(chronology40);
        int int42 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        int int48 = property47.getMaximumValue();
        java.util.Locale locale49 = null;
        int int50 = property47.getMaximumShortTextLength(locale49);
        java.util.Locale locale51 = null;
        int int52 = property47.getMaximumTextLength(locale51);
        org.joda.time.DurationField durationField53 = property47.getRangeDurationField();
        java.util.Locale locale54 = null;
        java.lang.String str55 = property47.getAsShortText(locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property47.getFieldType();
        org.joda.time.YearMonth yearMonth58 = yearMonth3.withField(dateTimeFieldType56, 11);
        org.joda.time.DateTimeField[] dateTimeFieldArray59 = yearMonth3.getFields();
        org.joda.time.DateTimeField[] dateTimeFieldArray60 = yearMonth3.getFields();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 12 + "'", int48 == 12);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Oct" + "'", str55, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertNotNull(dateTimeFieldArray59);
        org.junit.Assert.assertNotNull(dateTimeFieldArray60);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.getMaximumValue();
        java.lang.String str17 = property15.getAsShortText();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property15.getAsShortText(locale18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property15.getFieldType();
        org.joda.time.YearMonth.Property property21 = yearMonth3.property(dateTimeFieldType20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        int int32 = yearMonth25.indexOf(dateTimeFieldType31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth.Property property37 = yearMonth36.monthOfYear();
        int int38 = property37.getMaximumValue();
        java.lang.String str39 = property37.getAsShortText();
        java.util.Locale locale40 = null;
        java.lang.String str41 = property37.getAsShortText(locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property37.getFieldType();
        org.joda.time.YearMonth.Property property43 = yearMonth25.property(dateTimeFieldType42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology46);
        org.joda.time.YearMonth yearMonth49 = yearMonth47.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology52);
        org.joda.time.YearMonth yearMonth55 = yearMonth53.minusYears((int) (short) 0);
        int int56 = yearMonth53.size();
        boolean boolean57 = yearMonth49.isAfter((org.joda.time.ReadablePartial) yearMonth53);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology60);
        org.joda.time.YearMonth.Property property62 = yearMonth61.monthOfYear();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth yearMonth68 = yearMonth66.minusYears((int) (short) 0);
        int int69 = yearMonth66.size();
        org.joda.time.YearMonth yearMonth71 = yearMonth66.plusMonths((int) (byte) 10);
        int int72 = property62.compareTo((org.joda.time.ReadablePartial) yearMonth66);
        org.joda.time.Chronology chronology73 = yearMonth66.getChronology();
        org.joda.time.YearMonth yearMonth74 = yearMonth53.withChronologyRetainFields(chronology73);
        org.joda.time.YearMonth yearMonth75 = new org.joda.time.YearMonth((java.lang.Object) yearMonth25, chronology73);
        boolean boolean76 = yearMonth3.isBefore((org.joda.time.ReadablePartial) yearMonth25);
        int[] intArray77 = yearMonth3.getValues();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Oct" + "'", str17, "Oct");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Oct" + "'", str19, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 12 + "'", int38 == 12);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Oct" + "'", str39, "Oct");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Oct" + "'", str41, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[97, 10]");
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.YearMonth yearMonth2 = yearMonth0.plusYears(2);
        org.junit.Assert.assertNotNull(yearMonth2);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        org.joda.time.Interval interval31 = yearMonth28.toInterval();
        int int32 = yearMonth8.compareTo((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.ReadablePartial readablePartial33 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = yearMonth8.isEqual(readablePartial33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology1 = yearMonth0.getChronology();
        org.joda.time.YearMonth yearMonth3 = yearMonth0.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth0.getFieldTypes();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth.Property property9 = yearMonth8.monthOfYear();
        int int10 = property9.getMaximumValue();
        java.lang.String str11 = property9.getAsString();
        java.util.Locale locale13 = null;
        org.joda.time.YearMonth yearMonth14 = property9.setCopy("Sep", locale13);
        java.lang.String str15 = property9.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property9.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth18 = yearMonth0.withField(dateTimeFieldType16, 98);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 98 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10" + "'", str11, "10");
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "monthOfYear" + "'", str15, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        int int14 = yearMonth11.size();
        boolean boolean15 = yearMonth7.isAfter((org.joda.time.ReadablePartial) yearMonth11);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth.Property property20 = yearMonth19.monthOfYear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        org.joda.time.YearMonth yearMonth29 = yearMonth24.plusMonths((int) (byte) 10);
        int int30 = property20.compareTo((org.joda.time.ReadablePartial) yearMonth24);
        org.joda.time.Chronology chronology31 = yearMonth24.getChronology();
        org.joda.time.YearMonth yearMonth32 = yearMonth11.withChronologyRetainFields(chronology31);
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((long) (short) 1, chronology31);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth(chronology31);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth(0L, chronology31);
        int int36 = yearMonth35.size();
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.Chronology chronology8 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth9 = yearMonth0.withChronologyRetainFields(chronology8);
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth12 = org.joda.time.YearMonth.now(chronology8);
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth(chronology8);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth12);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth(chronology29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField33 = yearMonth31.getField((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        org.joda.time.YearMonth yearMonth41 = yearMonth36.plusMonths((int) (byte) 10);
        int int42 = property32.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        boolean boolean49 = yearMonth36.isAfter((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = yearMonth36.indexOf(dateTimeFieldType50);
        int int52 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.YearMonth yearMonth54 = yearMonth36.minusYears(11);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Interval interval56 = yearMonth54.toInterval(dateTimeZone55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = null;
        java.lang.String str58 = yearMonth54.toString(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0086-10" + "'", str58, "0086-10");
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(10L);
        org.joda.time.YearMonth.Property property2 = yearMonth1.monthOfYear();
        java.util.Locale locale4 = null;
        org.joda.time.YearMonth yearMonth5 = property2.setCopy("9", locale4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth7 = property2.setCopy("2015-01");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2015-01\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonth5);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        java.util.Locale locale17 = null;
        int int18 = property4.getMaximumShortTextLength(locale17);
        int int19 = property4.getMaximumValueOverall();
        int int20 = property4.getMaximumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        org.joda.time.YearMonth yearMonth33 = property32.getYearMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property32.getFieldType();
        int int35 = yearMonth8.get(dateTimeFieldType34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth.Property property40 = yearMonth39.monthOfYear();
        int int41 = property40.getMaximumValue();
        java.lang.String str42 = property40.getAsShortText();
        java.util.Locale locale43 = null;
        java.lang.String str44 = property40.getAsShortText(locale43);
        org.joda.time.YearMonth yearMonth46 = property40.setCopy("October");
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = yearMonth46.toDateTime(readableInstant47);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology52);
        org.joda.time.YearMonth yearMonth55 = yearMonth53.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology58);
        org.joda.time.YearMonth yearMonth61 = yearMonth59.minusYears((int) (short) 0);
        int int62 = yearMonth59.size();
        boolean boolean63 = yearMonth55.isAfter((org.joda.time.ReadablePartial) yearMonth59);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.YearMonth yearMonth67 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology66);
        org.joda.time.YearMonth.Property property68 = yearMonth67.monthOfYear();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.YearMonth yearMonth72 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology71);
        org.joda.time.YearMonth yearMonth74 = yearMonth72.minusYears((int) (short) 0);
        int int75 = yearMonth72.size();
        org.joda.time.YearMonth yearMonth77 = yearMonth72.plusMonths((int) (byte) 10);
        int int78 = property68.compareTo((org.joda.time.ReadablePartial) yearMonth72);
        org.joda.time.Chronology chronology79 = yearMonth72.getChronology();
        org.joda.time.YearMonth yearMonth80 = yearMonth59.withChronologyRetainFields(chronology79);
        org.joda.time.YearMonth yearMonth81 = new org.joda.time.YearMonth((long) (short) 1, chronology79);
        org.joda.time.YearMonth yearMonth82 = new org.joda.time.YearMonth((java.lang.Object) readableInstant47, chronology79);
        org.joda.time.YearMonth yearMonth83 = new org.joda.time.YearMonth((java.lang.Object) yearMonth8, chronology79);
        org.joda.time.YearMonth yearMonth84 = new org.joda.time.YearMonth(chronology79);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 12 + "'", int41 == 12);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Oct" + "'", str42, "Oct");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Oct" + "'", str44, "Oct");
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(yearMonth77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(yearMonth80);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.util.Locale locale11 = null;
        int int12 = property4.getMaximumShortTextLength(locale11);
        org.joda.time.YearMonth yearMonth14 = property4.addToCopy(100);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.plusYears(12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth.Property property27 = yearMonth26.monthOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        org.joda.time.YearMonth yearMonth36 = yearMonth31.plusMonths((int) (byte) 10);
        int int37 = property27.compareTo((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Interval interval39 = yearMonth31.toInterval(dateTimeZone38);
        org.joda.time.YearMonth yearMonth41 = yearMonth31.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology50);
        org.joda.time.YearMonth yearMonth53 = yearMonth51.minusYears((int) (short) 0);
        int int54 = yearMonth51.size();
        boolean boolean55 = yearMonth47.isAfter((org.joda.time.ReadablePartial) yearMonth51);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology58);
        org.joda.time.YearMonth.Property property60 = yearMonth59.monthOfYear();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology63);
        org.joda.time.YearMonth yearMonth66 = yearMonth64.minusYears((int) (short) 0);
        int int67 = yearMonth64.size();
        org.joda.time.YearMonth yearMonth69 = yearMonth64.plusMonths((int) (byte) 10);
        int int70 = property60.compareTo((org.joda.time.ReadablePartial) yearMonth64);
        org.joda.time.Chronology chronology71 = yearMonth64.getChronology();
        org.joda.time.YearMonth yearMonth72 = yearMonth51.withChronologyRetainFields(chronology71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.YearMonth yearMonth75 = yearMonth72.withPeriodAdded(readablePeriod73, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = null;
        int int77 = yearMonth75.indexOf(dateTimeFieldType76);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.YearMonth yearMonth81 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology80);
        org.joda.time.YearMonth.Property property82 = yearMonth81.monthOfYear();
        int int83 = property82.getMaximumValue();
        java.lang.String str84 = property82.getAsShortText();
        java.util.Locale locale85 = null;
        java.lang.String str86 = property82.getAsShortText(locale85);
        org.joda.time.YearMonth yearMonth88 = property82.setCopy("October");
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.DateTime dateTime90 = yearMonth88.toDateTime(readableInstant89);
        org.joda.time.DateTime dateTime91 = yearMonth75.toDateTime(readableInstant89);
        org.joda.time.DateTime dateTime92 = yearMonth31.toDateTime((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.DateTime dateTime93 = yearMonth22.toDateTime((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = yearMonth22.getFieldType((int) (short) 1);
        int int96 = yearMonth14.indexOf(dateTimeFieldType95);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertNotNull(yearMonth75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 12 + "'", int83 == 12);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Oct" + "'", str84, "Oct");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Oct" + "'", str86, "Oct");
        org.junit.Assert.assertNotNull(yearMonth88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTimeFieldType95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        int int8 = yearMonth5.size();
        org.joda.time.YearMonth yearMonth10 = yearMonth5.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonth5.indexOf(dateTimeFieldType11);
        org.joda.time.YearMonth yearMonth14 = yearMonth5.plusMonths((-1));
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.Interval interval26 = yearMonth18.toInterval();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        int int37 = yearMonth18.get(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth5.property(dateTimeFieldType36);
        org.joda.time.Chronology chronology39 = yearMonth5.getChronology();
        org.joda.time.YearMonth yearMonth40 = org.joda.time.YearMonth.now(chronology39);
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth(1, 3, chronology39);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology50);
        org.joda.time.YearMonth yearMonth53 = yearMonth51.minusYears((int) (short) 0);
        int int54 = yearMonth51.size();
        boolean boolean55 = yearMonth47.isAfter((org.joda.time.ReadablePartial) yearMonth51);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.YearMonth yearMonth57 = yearMonth51.minus(readablePeriod56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.Interval interval59 = yearMonth57.toInterval(dateTimeZone58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth yearMonth65 = yearMonth63.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.YearMonth yearMonth69 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology68);
        org.joda.time.YearMonth yearMonth71 = yearMonth69.minusYears((int) (short) 0);
        int int72 = yearMonth69.size();
        boolean boolean73 = yearMonth65.isAfter((org.joda.time.ReadablePartial) yearMonth69);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.YearMonth yearMonth77 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology76);
        org.joda.time.YearMonth.Property property78 = yearMonth77.monthOfYear();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.YearMonth yearMonth82 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology81);
        org.joda.time.YearMonth yearMonth84 = yearMonth82.minusYears((int) (short) 0);
        int int85 = yearMonth82.size();
        org.joda.time.YearMonth yearMonth87 = yearMonth82.plusMonths((int) (byte) 10);
        int int88 = property78.compareTo((org.joda.time.ReadablePartial) yearMonth82);
        org.joda.time.Chronology chronology89 = yearMonth82.getChronology();
        org.joda.time.YearMonth yearMonth90 = yearMonth69.withChronologyRetainFields(chronology89);
        org.joda.time.YearMonth yearMonth92 = yearMonth69.withYear((int) (byte) 1);
        int int93 = yearMonth92.getMonthOfYear();
        org.joda.time.YearMonth.Property property94 = yearMonth92.year();
        org.joda.time.Chronology chronology95 = yearMonth92.getChronology();
        org.joda.time.YearMonth yearMonth96 = new org.joda.time.YearMonth((java.lang.Object) yearMonth57, chronology95);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth97 = new org.joda.time.YearMonth((java.lang.Object) 1, chronology95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(yearMonth84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(yearMonth87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(yearMonth90);
        org.junit.Assert.assertNotNull(yearMonth92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10 + "'", int93 == 10);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertNotNull(chronology95);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.YearMonth.Property property42 = yearMonth38.year();
        java.util.Locale locale43 = null;
        java.lang.String str44 = property42.getAsShortText(locale43);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = yearMonth18.toString(dateTimeFormatter22);
        org.joda.time.YearMonth.Property property24 = yearMonth18.year();
        org.joda.time.DurationFieldType durationFieldType25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth27 = yearMonth18.withFieldAdded(durationFieldType25, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0097-10" + "'", str23, "0097-10");
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        int int47 = property46.getMinimumValue();
        java.util.Locale locale48 = null;
        int int49 = property46.getMaximumShortTextLength(locale48);
        org.joda.time.YearMonth yearMonth51 = property46.addToCopy((int) (short) 1);
        boolean boolean52 = yearMonth3.equals((java.lang.Object) yearMonth51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        int int59 = yearMonth56.size();
        org.joda.time.YearMonth yearMonth61 = yearMonth56.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        int int63 = yearMonth56.indexOf(dateTimeFieldType62);
        int int64 = yearMonth56.getYear();
        boolean boolean65 = yearMonth51.isBefore((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.DateTimeField[] dateTimeFieldArray66 = yearMonth56.getFields();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.YearMonth yearMonth68 = yearMonth56.minus(readablePeriod67);
        int int69 = yearMonth56.size();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray66);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((int) (short) 0, 8);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = yearMonth18.toString(dateTimeFormatter22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth.Property property28 = yearMonth27.monthOfYear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusMonths((int) (byte) 10);
        int int38 = property28.compareTo((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology39 = yearMonth32.getChronology();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth yearMonth45 = yearMonth43.minusYears((int) (short) 0);
        int int46 = yearMonth43.size();
        org.joda.time.YearMonth yearMonth48 = yearMonth43.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        int int50 = yearMonth43.indexOf(dateTimeFieldType49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth.Property property55 = yearMonth54.monthOfYear();
        int int56 = property55.getMaximumValue();
        java.lang.String str57 = property55.getAsShortText();
        java.util.Locale locale58 = null;
        java.lang.String str59 = property55.getAsShortText(locale58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property55.getFieldType();
        org.joda.time.YearMonth.Property property61 = yearMonth43.property(dateTimeFieldType60);
        org.joda.time.YearMonth.Property property62 = yearMonth32.property(dateTimeFieldType60);
        boolean boolean63 = yearMonth18.equals((java.lang.Object) property62);
        java.lang.String str64 = property62.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth66 = property62.setCopy(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0097-10" + "'", str23, "0097-10");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 12 + "'", int56 == 12);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Oct" + "'", str57, "Oct");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Oct" + "'", str59, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "monthOfYear" + "'", str64, "monthOfYear");
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.Chronology chronology8 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth9 = yearMonth0.withChronologyRetainFields(chronology8);
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth12 = org.joda.time.YearMonth.now(chronology8);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.plusMonths(3);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth yearMonth31 = yearMonth29.minusYears((int) (short) 0);
        int int32 = yearMonth29.size();
        org.joda.time.YearMonth yearMonth34 = yearMonth29.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        int int36 = yearMonth29.indexOf(dateTimeFieldType35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        int int49 = yearMonth46.size();
        boolean boolean50 = yearMonth42.isAfter((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth.Property property55 = yearMonth54.monthOfYear();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology58);
        org.joda.time.YearMonth yearMonth61 = yearMonth59.minusYears((int) (short) 0);
        int int62 = yearMonth59.size();
        org.joda.time.YearMonth yearMonth64 = yearMonth59.plusMonths((int) (byte) 10);
        int int65 = property55.compareTo((org.joda.time.ReadablePartial) yearMonth59);
        org.joda.time.Chronology chronology66 = yearMonth59.getChronology();
        org.joda.time.YearMonth yearMonth67 = yearMonth46.withChronologyRetainFields(chronology66);
        int int68 = yearMonth29.compareTo((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.YearMonth yearMonth72 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology71);
        org.joda.time.YearMonth.Property property73 = yearMonth72.monthOfYear();
        int int74 = property73.getMaximumValue();
        java.util.Locale locale75 = null;
        int int76 = property73.getMaximumShortTextLength(locale75);
        java.util.Locale locale77 = null;
        int int78 = property73.getMaximumTextLength(locale77);
        org.joda.time.DurationField durationField79 = property73.getRangeDurationField();
        java.util.Locale locale80 = null;
        java.lang.String str81 = property73.getAsShortText(locale80);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = property73.getFieldType();
        org.joda.time.YearMonth yearMonth84 = yearMonth29.withField(dateTimeFieldType82, 11);
        org.joda.time.DateTimeField[] dateTimeFieldArray85 = yearMonth29.getFields();
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.YearMonth yearMonth89 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology88);
        org.joda.time.YearMonth.Property property90 = yearMonth89.monthOfYear();
        int int91 = property90.getMaximumValue();
        java.lang.String str92 = property90.getAsShortText();
        org.joda.time.YearMonth yearMonth94 = property90.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = property90.getFieldType();
        org.joda.time.YearMonth.Property property96 = yearMonth29.property(dateTimeFieldType95);
        org.joda.time.YearMonth.Property property97 = yearMonth18.property(dateTimeFieldType95);
        org.joda.time.YearMonth.Property property98 = yearMonth14.property(dateTimeFieldType95);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 12 + "'", int74 == 12);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 9 + "'", int78 == 9);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Oct" + "'", str81, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(yearMonth84);
        org.junit.Assert.assertNotNull(dateTimeFieldArray85);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 12 + "'", int91 == 12);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Oct" + "'", str92, "Oct");
        org.junit.Assert.assertNotNull(yearMonth94);
        org.junit.Assert.assertNotNull(dateTimeFieldType95);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertNotNull(property97);
        org.junit.Assert.assertNotNull(property98);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth.Property property38 = yearMonth37.monthOfYear();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        int int48 = property38.compareTo((org.joda.time.ReadablePartial) yearMonth42);
        org.joda.time.Chronology chronology49 = yearMonth42.getChronology();
        org.joda.time.YearMonth yearMonth50 = org.joda.time.YearMonth.now(chronology49);
        org.joda.time.YearMonth yearMonth51 = yearMonth33.withChronologyRetainFields(chronology49);
        org.joda.time.YearMonth.Property property52 = yearMonth51.year();
        int int53 = property52.getMinimumValue();
        org.joda.time.YearMonth yearMonth54 = property52.getYearMonth();
        int int55 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        java.lang.String str56 = yearMonth3.toString();
        int int57 = yearMonth3.getMonthOfYear();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-292275054) + "'", int53 == (-292275054));
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0097-10" + "'", str56, "0097-10");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth.Property property5 = yearMonth4.monthOfYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        org.joda.time.YearMonth yearMonth14 = yearMonth9.plusMonths((int) (byte) 10);
        int int15 = property5.compareTo((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = yearMonth9.getChronology();
        org.joda.time.YearMonth yearMonth17 = org.joda.time.YearMonth.now(chronology16);
        org.joda.time.YearMonth yearMonth18 = org.joda.time.YearMonth.now(chronology16);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((java.lang.Object) "0097-10", chronology16);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(chronology16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType22 = yearMonth20.getFieldType((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth18);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        int int47 = property46.getMinimumValue();
        java.util.Locale locale48 = null;
        int int49 = property46.getMaximumShortTextLength(locale48);
        org.joda.time.YearMonth yearMonth51 = property46.addToCopy((int) (short) 1);
        boolean boolean52 = yearMonth3.equals((java.lang.Object) yearMonth51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology61);
        org.joda.time.YearMonth yearMonth64 = yearMonth62.minusYears((int) (short) 0);
        int int65 = yearMonth62.size();
        boolean boolean66 = yearMonth58.isAfter((org.joda.time.ReadablePartial) yearMonth62);
        org.joda.time.Interval interval67 = yearMonth58.toInterval();
        org.joda.time.YearMonth.Property property68 = yearMonth58.year();
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.YearMonth yearMonth70 = yearMonth58.minus(readablePeriod69);
        boolean boolean71 = yearMonth51.isEqual((org.joda.time.ReadablePartial) yearMonth70);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.YearMonth yearMonth75 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology74);
        org.joda.time.YearMonth yearMonth77 = yearMonth75.minusYears((int) (short) 0);
        int int78 = yearMonth75.size();
        org.joda.time.YearMonth yearMonth80 = yearMonth75.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = null;
        int int82 = yearMonth75.indexOf(dateTimeFieldType81);
        org.joda.time.YearMonth yearMonth84 = yearMonth75.plusMonths((-1));
        org.joda.time.YearMonth yearMonth86 = yearMonth75.plusMonths((-1));
        org.joda.time.YearMonth.Property property87 = yearMonth86.monthOfYear();
        int int88 = property87.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = property87.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = property87.getFieldType();
        org.joda.time.YearMonth.Property property91 = yearMonth51.property(dateTimeFieldType90);
        org.joda.time.YearMonth.Property property92 = yearMonth51.monthOfYear();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(yearMonth77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(yearMonth84);
        org.junit.Assert.assertNotNull(yearMonth86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 9 + "'", int88 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(property92);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.YearMonth yearMonth10 = property4.addToCopy(11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        org.joda.time.YearMonth yearMonth19 = yearMonth14.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonth14.indexOf(dateTimeFieldType20);
        org.joda.time.Interval interval22 = yearMonth14.toInterval();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth.Property property27 = yearMonth26.monthOfYear();
        int int28 = property27.getMaximumValue();
        java.lang.String str29 = property27.getAsShortText();
        java.util.Locale locale30 = null;
        java.lang.String str31 = property27.getAsShortText(locale30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property27.getFieldType();
        int int33 = yearMonth14.get(dateTimeFieldType32);
        org.joda.time.Interval interval34 = yearMonth14.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = yearMonth14.toString(dateTimeFormatter35);
        int int37 = yearMonth14.getMonthOfYear();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth yearMonth43 = yearMonth41.minusYears((int) (short) 0);
        int int44 = yearMonth41.size();
        org.joda.time.YearMonth yearMonth46 = yearMonth41.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        int int48 = yearMonth41.indexOf(dateTimeFieldType47);
        org.joda.time.YearMonth yearMonth50 = yearMonth41.plusMonths((-1));
        org.joda.time.YearMonth yearMonth52 = yearMonth41.plusMonths((-1));
        org.joda.time.YearMonth.Property property53 = yearMonth52.monthOfYear();
        int int54 = property53.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property53.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property53.getFieldType();
        org.joda.time.YearMonth.Property property57 = yearMonth14.property(dateTimeFieldType56);
        boolean boolean58 = yearMonth10.isSupported(dateTimeFieldType56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Interval interval60 = yearMonth10.toInterval(dateTimeZone59);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 12 + "'", int28 == 12);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Oct" + "'", str29, "Oct");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0097-10" + "'", str36, "0097-10");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(interval60);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addToCopy((int) (short) 10);
        int[] intArray13 = yearMonth12.getValues();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        boolean boolean27 = yearMonth19.isAfter((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.YearMonth.Property property28 = yearMonth23.year();
        boolean boolean29 = yearMonth12.equals((java.lang.Object) property28);
        java.util.Locale locale30 = null;
        int int31 = property28.getMaximumShortTextLength(locale30);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[98, 8]");
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.getMaximumValue();
        java.lang.String str17 = property15.getAsShortText();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property15.getAsShortText(locale18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property15.getFieldType();
        org.joda.time.YearMonth.Property property21 = yearMonth3.property(dateTimeFieldType20);
        int int22 = yearMonth3.getYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.util.Locale locale33 = null;
        int int34 = property31.getMaximumShortTextLength(locale33);
        java.util.Locale locale35 = null;
        int int36 = property31.getMaximumTextLength(locale35);
        org.joda.time.DurationField durationField37 = property31.getRangeDurationField();
        java.util.Locale locale38 = null;
        java.lang.String str39 = property31.getAsShortText(locale38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property31.getFieldType();
        boolean boolean41 = yearMonth26.isSupported(dateTimeFieldType40);
        int int42 = yearMonth3.indexOf(dateTimeFieldType40);
        java.lang.Class<?> wildcardClass43 = dateTimeFieldType40.getClass();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Oct" + "'", str17, "Oct");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Oct" + "'", str19, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Oct" + "'", str39, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1980, (int) (byte) 10);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = yearMonth8.toString(dateTimeFormatter15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        int int22 = property21.getMinimumValue();
        java.util.Locale locale23 = null;
        int int24 = property21.getMaximumShortTextLength(locale23);
        org.joda.time.DurationField durationField25 = property21.getDurationField();
        boolean boolean26 = yearMonth8.equals((java.lang.Object) property21);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        int int37 = yearMonth30.indexOf(dateTimeFieldType36);
        org.joda.time.YearMonth yearMonth39 = yearMonth30.plusMonths((-1));
        boolean boolean41 = yearMonth39.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        int int53 = yearMonth50.size();
        org.joda.time.YearMonth yearMonth55 = yearMonth50.plusMonths((int) (byte) 10);
        int int56 = property46.compareTo((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.YearMonth yearMonth57 = property46.getYearMonth();
        java.lang.String str58 = property46.getAsText();
        org.joda.time.YearMonth yearMonth59 = property46.getYearMonth();
        boolean boolean60 = yearMonth39.isBefore((org.joda.time.ReadablePartial) yearMonth59);
        org.joda.time.YearMonth yearMonth62 = yearMonth39.minusYears(3);
        int int63 = yearMonth8.compareTo((org.joda.time.ReadablePartial) yearMonth39);
        org.joda.time.YearMonth yearMonth65 = yearMonth8.withYear((int) (short) 10);
        org.joda.time.YearMonth yearMonth67 = yearMonth8.plusYears((int) (short) -1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0097-10" + "'", str16, "0097-10");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "October" + "'", str58, "October");
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth67);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((long) (byte) 0, chronology4);
        org.joda.time.Chronology chronology6 = yearMonth5.getChronology();
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth(0L, chronology6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) (short) 100, 100, chronology6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMaximumValue();
        int int10 = property4.getMinimumValueOverall();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property4.getAsText(locale11);
        org.joda.time.DurationField durationField13 = property4.getRangeDurationField();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        int int19 = property18.getMaximumValue();
        java.util.Locale locale20 = null;
        int int21 = property18.getMaximumShortTextLength(locale20);
        java.util.Locale locale22 = null;
        int int23 = property18.getMaximumTextLength(locale22);
        org.joda.time.DurationField durationField24 = property18.getRangeDurationField();
        java.lang.String str25 = property18.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property18.getFieldType();
        java.util.Locale locale28 = null;
        org.joda.time.YearMonth yearMonth29 = property18.setCopy("October", locale28);
        boolean boolean30 = property4.equals((java.lang.Object) "October");
        int int31 = property4.get();
        org.joda.time.DurationField durationField32 = property4.getDurationField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "October" + "'", str12, "October");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Property[monthOfYear]" + "'", str25, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.Chronology chronology8 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth9 = yearMonth0.withChronologyRetainFields(chronology8);
        org.joda.time.YearMonth yearMonth10 = org.joda.time.YearMonth.now(chronology8);
        org.joda.time.YearMonth.Property property11 = yearMonth10.monthOfYear();
        org.joda.time.YearMonth yearMonth12 = property11.getYearMonth();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property11.getAsText(locale13);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth.Property property20 = yearMonth19.monthOfYear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        org.joda.time.YearMonth yearMonth29 = yearMonth24.plusMonths((int) (byte) 10);
        int int30 = property20.compareTo((org.joda.time.ReadablePartial) yearMonth24);
        org.joda.time.Chronology chronology31 = yearMonth24.getChronology();
        org.joda.time.YearMonth yearMonth32 = org.joda.time.YearMonth.now(chronology31);
        org.joda.time.YearMonth yearMonth33 = org.joda.time.YearMonth.now(chronology31);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((java.lang.Object) "0097-10", chronology31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = yearMonth34.toString(dateTimeFormatter35);
        org.joda.time.Chronology chronology37 = yearMonth34.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((java.lang.Object) str14, chronology37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"November\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "November" + "'", str14, "November");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0097-10" + "'", str36, "0097-10");
        org.junit.Assert.assertNotNull(chronology37);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.lang.String str8 = property4.getAsString();
        java.util.Locale locale9 = null;
        java.lang.String str10 = property4.getAsShortText(locale9);
        org.joda.time.DurationField durationField11 = property4.getRangeDurationField();
        org.joda.time.DurationField durationField12 = property4.getRangeDurationField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10" + "'", str8, "10");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.YearMonth yearMonth5 = property4.getYearMonth();
        org.joda.time.YearMonth.Property property6 = yearMonth5.year();
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((java.lang.Object) yearMonth5);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Interval interval6 = yearMonth3.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonth3.getFieldTypes();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        boolean boolean21 = yearMonth13.isAfter((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth.Property property26 = yearMonth25.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        int int36 = property26.compareTo((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.Chronology chronology37 = yearMonth30.getChronology();
        org.joda.time.YearMonth yearMonth38 = yearMonth17.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonth yearMonth39 = yearMonth3.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonth yearMonth40 = org.joda.time.YearMonth.now(chronology37);
        org.joda.time.YearMonth yearMonth41 = org.joda.time.YearMonth.now(chronology37);
        java.lang.String str42 = yearMonth41.toString();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2020-11" + "'", str42, "2020-11");
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonth yearMonth29 = yearMonth27.plus(readablePeriod28);
        org.joda.time.YearMonth yearMonth31 = yearMonth27.withYear((int) (short) 10);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.withYear((-1));
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.YearMonth yearMonth36 = yearMonth31.withPeriodAdded(readablePeriod34, (int) (byte) -1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth36);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonth yearMonth33 = yearMonth30.withPeriodAdded(readablePeriod31, (int) 'a');
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths(9);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minusYears((int) (short) 0);
        int int43 = yearMonth40.size();
        org.joda.time.YearMonth yearMonth45 = yearMonth40.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = yearMonth40.getFieldTypes();
        int[] intArray47 = yearMonth40.getValues();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology50);
        org.joda.time.YearMonth.Property property52 = yearMonth51.monthOfYear();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        int int59 = yearMonth56.size();
        org.joda.time.YearMonth yearMonth61 = yearMonth56.plusMonths((int) (byte) 10);
        int int62 = property52.compareTo((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology63 = yearMonth56.getChronology();
        org.joda.time.YearMonth yearMonth64 = org.joda.time.YearMonth.now(chronology63);
        org.joda.time.YearMonth yearMonth65 = org.joda.time.YearMonth.now(chronology63);
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((java.lang.Object) yearMonth40, chronology63);
        org.joda.time.YearMonth yearMonth67 = new org.joda.time.YearMonth((long) 'a', chronology63);
        org.joda.time.YearMonth yearMonth68 = yearMonth30.withChronologyRetainFields(chronology63);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[97, 10]");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth68);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        int int10 = property4.getMinimumValue();
        int int11 = property4.getMinimumValue();
        org.joda.time.YearMonth yearMonth13 = property4.addWrapFieldToCopy((int) 'a');
        int int14 = yearMonth13.getYear();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        org.joda.time.Interval interval8 = yearMonth5.toInterval();
        org.joda.time.Chronology chronology9 = yearMonth5.getChronology();
        org.joda.time.YearMonth yearMonth10 = yearMonth1.withChronologyRetainFields(chronology9);
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((long) (byte) 0, chronology9);
        org.joda.time.YearMonth yearMonth12 = org.joda.time.YearMonth.now(chronology9);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.YearMonth yearMonth14 = yearMonth12.plus(readablePeriod13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        int int20 = property19.getMaximumValue();
        java.util.Locale locale21 = null;
        int int22 = property19.getMaximumShortTextLength(locale21);
        java.util.Locale locale23 = null;
        int int24 = property19.getMaximumTextLength(locale23);
        org.joda.time.DurationField durationField25 = property19.getRangeDurationField();
        java.lang.String str26 = property19.getAsShortText();
        int int27 = property19.getMaximumValue();
        java.lang.String str28 = property19.getName();
        org.joda.time.YearMonth yearMonth30 = property19.addWrapFieldToCopy(0);
        boolean boolean31 = yearMonth12.equals((java.lang.Object) 0);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Oct" + "'", str26, "Oct");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 12 + "'", int27 == 12);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "monthOfYear" + "'", str28, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.YearMonth.Property property36 = yearMonth3.property(dateTimeFieldType34);
        org.joda.time.Chronology chronology37 = yearMonth3.getChronology();
        org.joda.time.YearMonth yearMonth39 = yearMonth3.minusMonths(10);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth39);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        int[] intArray16 = yearMonth5.getValues();
        org.joda.time.YearMonth yearMonth18 = yearMonth5.minusMonths(2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = yearMonth18.getFieldTypes();
        org.joda.time.DurationFieldType durationFieldType20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth22 = yearMonth18.withFieldAdded(durationFieldType20, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[97, 10]");
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMinimumValueOverall();
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy((int) ' ');
        org.joda.time.YearMonth yearMonth14 = property4.addWrapFieldToCopy(2);
        java.lang.String str15 = yearMonth14.toString();
        java.lang.String str16 = yearMonth14.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0097-12" + "'", str15, "0097-12");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0097-12" + "'", str16, "0097-12");
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMinimumValueOverall();
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy((int) ' ');
        org.joda.time.YearMonth yearMonth14 = property4.addWrapFieldToCopy(2);
        org.joda.time.YearMonth yearMonth16 = property4.setCopy(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property4.getFieldType();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        int int29 = yearMonth26.size();
        boolean boolean30 = yearMonth22.isAfter((org.joda.time.ReadablePartial) yearMonth26);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth.Property property35 = yearMonth34.monthOfYear();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth yearMonth41 = yearMonth39.minusYears((int) (short) 0);
        int int42 = yearMonth39.size();
        org.joda.time.YearMonth yearMonth44 = yearMonth39.plusMonths((int) (byte) 10);
        int int45 = property35.compareTo((org.joda.time.ReadablePartial) yearMonth39);
        org.joda.time.Chronology chronology46 = yearMonth39.getChronology();
        org.joda.time.YearMonth yearMonth47 = yearMonth26.withChronologyRetainFields(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.YearMonth yearMonth50 = yearMonth47.withPeriodAdded(readablePeriod48, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        int int52 = yearMonth50.indexOf(dateTimeFieldType51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth.Property property57 = yearMonth56.monthOfYear();
        int int58 = property57.getMaximumValue();
        java.lang.String str59 = property57.getAsShortText();
        java.util.Locale locale60 = null;
        java.lang.String str61 = property57.getAsShortText(locale60);
        org.joda.time.YearMonth yearMonth63 = property57.setCopy("October");
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = yearMonth63.toDateTime(readableInstant64);
        org.joda.time.DateTime dateTime66 = yearMonth50.toDateTime(readableInstant64);
        int int67 = property4.compareTo((org.joda.time.ReadableInstant) dateTime66);
        java.util.Locale locale68 = null;
        java.lang.String str69 = property4.getAsShortText(locale68);
        org.joda.time.YearMonth yearMonth70 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.YearMonth yearMonth74 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology73);
        org.joda.time.YearMonth yearMonth76 = yearMonth74.minusYears((int) (short) 0);
        org.joda.time.Interval interval77 = yearMonth74.toInterval();
        org.joda.time.Chronology chronology78 = yearMonth74.getChronology();
        org.joda.time.YearMonth yearMonth79 = yearMonth70.withChronologyRetainFields(chronology78);
        org.joda.time.YearMonth yearMonth80 = new org.joda.time.YearMonth(chronology78);
        org.joda.time.YearMonth yearMonth81 = new org.joda.time.YearMonth(chronology78);
        org.joda.time.YearMonth yearMonth82 = new org.joda.time.YearMonth(chronology78);
        int int83 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth82);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth85 = property4.setCopy(1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 12 + "'", int58 == 12);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Oct" + "'", str59, "Oct");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Oct" + "'", str61, "Oct");
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Oct" + "'", str69, "Oct");
        org.junit.Assert.assertNotNull(yearMonth76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(yearMonth79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        org.joda.time.DateTimeField dateTimeField10 = property4.getField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addWrapFieldToCopy((int) (byte) 10);
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Interval interval17 = yearMonth14.toInterval();
        org.joda.time.Chronology chronology18 = yearMonth14.getChronology();
        org.joda.time.YearMonth yearMonth19 = yearMonth10.withChronologyRetainFields(chronology18);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(chronology18);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        org.joda.time.YearMonth yearMonth29 = yearMonth24.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = yearMonth24.indexOf(dateTimeFieldType30);
        org.joda.time.YearMonth yearMonth33 = yearMonth24.plusMonths((-1));
        org.joda.time.YearMonth yearMonth35 = yearMonth24.plusMonths((-1));
        org.joda.time.YearMonth.Property property36 = yearMonth35.monthOfYear();
        int int37 = property36.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property36.getFieldType();
        int int39 = yearMonth20.indexOf(dateTimeFieldType38);
        org.joda.time.YearMonth.Property property40 = yearMonth9.property(dateTimeFieldType38);
        int int41 = property40.getMinimumValueOverall();
        java.util.Locale locale42 = null;
        java.lang.String str43 = property40.getAsShortText(locale42);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Aug" + "'", str43, "Aug");
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.getMaximumValueOverall();
        java.util.Locale locale12 = null;
        int int13 = property4.getMaximumTextLength(locale12);
        org.joda.time.DurationField durationField14 = property4.getDurationField();
        java.util.Locale locale15 = null;
        java.lang.String str16 = property4.getAsShortText(locale15);
        java.util.Locale locale17 = null;
        int int18 = property4.getMaximumShortTextLength(locale17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int20 = property4.compareTo(readableInstant19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Oct" + "'", str16, "Oct");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth.Property property10 = yearMonth9.monthOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        org.joda.time.YearMonth yearMonth19 = yearMonth14.plusMonths((int) (byte) 10);
        int int20 = property10.compareTo((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = yearMonth14.getChronology();
        org.joda.time.YearMonth yearMonth22 = org.joda.time.YearMonth.now(chronology21);
        org.joda.time.YearMonth yearMonth23 = yearMonth5.withChronologyRetainFields(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.YearMonth yearMonth25 = yearMonth5.minus(readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth.Property property30 = yearMonth29.monthOfYear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        int int37 = yearMonth34.size();
        org.joda.time.YearMonth yearMonth39 = yearMonth34.plusMonths((int) (byte) 10);
        int int40 = property30.compareTo((org.joda.time.ReadablePartial) yearMonth34);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        boolean boolean47 = yearMonth34.isAfter((org.joda.time.ReadablePartial) yearMonth44);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonth34.indexOf(dateTimeFieldType48);
        int int50 = yearMonth34.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = yearMonth34.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.Interval interval53 = yearMonth34.toInterval(dateTimeZone52);
        int[] intArray54 = yearMonth34.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = yearMonth34.getFieldType((int) (short) 1);
        org.joda.time.YearMonth.Property property57 = yearMonth5.property(dateTimeFieldType56);
        org.joda.time.YearMonth yearMonth59 = yearMonth5.plusYears(9);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth yearMonth65 = yearMonth63.minusYears((int) (short) 0);
        int int66 = yearMonth63.size();
        org.joda.time.YearMonth yearMonth68 = yearMonth63.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        int int70 = yearMonth63.indexOf(dateTimeFieldType69);
        org.joda.time.YearMonth yearMonth72 = yearMonth63.plusMonths((-1));
        org.joda.time.YearMonth yearMonth74 = yearMonth63.plusMonths((-1));
        org.joda.time.YearMonth.Property property75 = yearMonth74.monthOfYear();
        int int76 = property75.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = property75.getFieldType();
        int int78 = property75.getMaximumValueOverall();
        java.util.Locale locale79 = null;
        java.lang.String str80 = property75.getAsShortText(locale79);
        int int81 = property75.getMinimumValueOverall();
        org.joda.time.YearMonth yearMonth83 = property75.addToCopy((int) (byte) 100);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.YearMonth yearMonth87 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology86);
        org.joda.time.YearMonth.Property property88 = yearMonth87.monthOfYear();
        int int89 = property88.getMaximumValue();
        java.util.Locale locale90 = null;
        int int91 = property88.getMaximumShortTextLength(locale90);
        java.util.Locale locale92 = null;
        int int93 = property88.getMaximumTextLength(locale92);
        java.lang.String str94 = property88.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = property88.getFieldType();
        boolean boolean96 = yearMonth83.isSupported(dateTimeFieldType95);
        org.joda.time.YearMonth yearMonth98 = yearMonth59.withField(dateTimeFieldType95, 9);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 10]");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 9 + "'", int76 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 12 + "'", int78 == 12);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Sep" + "'", str80, "Sep");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(yearMonth83);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 12 + "'", int89 == 12);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 3 + "'", int91 == 3);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 9 + "'", int93 == 9);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Oct" + "'", str94, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(yearMonth98);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.lang.String str8 = property4.getAsString();
        java.util.Locale locale9 = null;
        java.lang.String str10 = property4.getAsShortText(locale9);
        org.joda.time.DurationField durationField11 = property4.getRangeDurationField();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        org.joda.time.YearMonth yearMonth25 = yearMonth20.plusMonths((int) (byte) 10);
        int int26 = property16.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Interval interval28 = yearMonth20.toInterval(dateTimeZone27);
        org.joda.time.YearMonth yearMonth30 = yearMonth20.minusYears((int) (short) 0);
        java.lang.String str31 = yearMonth20.toString();
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology33 = yearMonth32.getChronology();
        org.joda.time.YearMonth yearMonth34 = yearMonth20.withChronologyRetainFields(chronology33);
        int int35 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        int[] intArray36 = yearMonth20.getValues();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10" + "'", str8, "10");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0097-10" + "'", str31, "0097-10");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[97, 10]");
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.YearMonth yearMonth8 = property4.addToCopy((int) ' ');
        java.lang.String str9 = property4.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[monthOfYear]" + "'", str9, "Property[monthOfYear]");
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.lang.String str8 = property4.getName();
        org.joda.time.YearMonth yearMonth10 = property4.addWrapFieldToCopy(12);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.YearMonth yearMonth13 = yearMonth10.withPeriodAdded(readablePeriod11, 3);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth16 = property14.setCopy((int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth.Property property38 = yearMonth37.monthOfYear();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        int int48 = property38.compareTo((org.joda.time.ReadablePartial) yearMonth42);
        org.joda.time.Chronology chronology49 = yearMonth42.getChronology();
        org.joda.time.YearMonth yearMonth50 = org.joda.time.YearMonth.now(chronology49);
        org.joda.time.YearMonth yearMonth51 = yearMonth33.withChronologyRetainFields(chronology49);
        org.joda.time.YearMonth.Property property52 = yearMonth51.year();
        int int53 = property52.getMinimumValue();
        org.joda.time.YearMonth yearMonth54 = property52.getYearMonth();
        int int55 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        java.lang.String str56 = yearMonth3.toString();
        org.joda.time.YearMonth.Property property57 = yearMonth3.monthOfYear();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-292275054) + "'", int53 == (-292275054));
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0097-10" + "'", str56, "0097-10");
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((int) (byte) 1, 9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField4 = yearMonth2.getField(2020);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2020");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.YearMonth yearMonth8 = property4.addToCopy((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth.Property property13 = yearMonth12.monthOfYear();
        int int14 = property13.getMaximumValue();
        java.util.Locale locale15 = null;
        int int16 = property13.getMaximumShortTextLength(locale15);
        java.util.Locale locale17 = null;
        int int18 = property13.getMaximumTextLength(locale17);
        java.lang.String str19 = property13.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property13.getFieldType();
        boolean boolean21 = yearMonth8.isSupported(dateTimeFieldType20);
        org.joda.time.Chronology chronology22 = yearMonth8.getChronology();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Oct" + "'", str19, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = yearMonth1.getFieldType((int) (short) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        org.joda.time.YearMonth yearMonth14 = yearMonth9.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = yearMonth9.indexOf(dateTimeFieldType15);
        org.joda.time.YearMonth yearMonth18 = yearMonth9.plusMonths((-1));
        org.joda.time.YearMonth yearMonth20 = yearMonth9.plusMonths((-1));
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        int int22 = property21.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property21.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property21.getFieldType();
        org.joda.time.YearMonth.Property property25 = yearMonth1.property(dateTimeFieldType24);
        org.joda.time.YearMonth yearMonth26 = property25.getYearMonth();
        int int27 = property25.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 12 + "'", int27 == 12);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMinimumValueOverall();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        boolean boolean23 = yearMonth15.isAfter((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.Interval interval24 = yearMonth15.toInterval();
        org.joda.time.YearMonth.Property property25 = yearMonth15.year();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonth yearMonth27 = yearMonth15.minus(readablePeriod26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        int int33 = property32.getMaximumValue();
        java.lang.String str34 = property32.getAsShortText();
        org.joda.time.DateTimeField dateTimeField35 = property32.getField();
        org.joda.time.YearMonth yearMonth37 = property32.setCopy("Oct");
        boolean boolean38 = yearMonth27.equals((java.lang.Object) yearMonth37);
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((java.lang.Object) yearMonth27);
        int int40 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth39);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Oct" + "'", str34, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.YearMonth.Property property36 = yearMonth3.property(dateTimeFieldType34);
        java.lang.String str37 = property36.getAsText();
        java.lang.String str38 = property36.getAsString();
        java.lang.String str39 = property36.getAsShortText();
        org.joda.time.YearMonth yearMonth41 = property36.addToCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth43 = property36.setCopy((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "October" + "'", str37, "October");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "10" + "'", str38, "10");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Oct" + "'", str39, "Oct");
        org.junit.Assert.assertNotNull(yearMonth41);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        java.lang.String str11 = property4.getAsString();
        java.lang.Class<?> wildcardClass12 = property4.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((java.lang.Object) wildcardClass12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Class");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10" + "'", str11, "10");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addToCopy(1);
        java.lang.String str9 = yearMonth8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        int int16 = yearMonth13.size();
        org.joda.time.YearMonth yearMonth18 = yearMonth13.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonth13.indexOf(dateTimeFieldType19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth.Property property25 = yearMonth24.monthOfYear();
        int int26 = property25.getMaximumValue();
        java.lang.String str27 = property25.getAsShortText();
        java.util.Locale locale28 = null;
        java.lang.String str29 = property25.getAsShortText(locale28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property25.getFieldType();
        org.joda.time.YearMonth.Property property31 = yearMonth13.property(dateTimeFieldType30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth yearMonth43 = yearMonth41.minusYears((int) (short) 0);
        int int44 = yearMonth41.size();
        boolean boolean45 = yearMonth37.isAfter((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        int int60 = property50.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = yearMonth54.getChronology();
        org.joda.time.YearMonth yearMonth62 = yearMonth41.withChronologyRetainFields(chronology61);
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((java.lang.Object) yearMonth13, chronology61);
        org.joda.time.YearMonth yearMonth64 = org.joda.time.YearMonth.now(chronology61);
        org.joda.time.YearMonth yearMonth65 = org.joda.time.YearMonth.now(chronology61);
        org.joda.time.YearMonth yearMonth66 = yearMonth8.withChronologyRetainFields(chronology61);
        org.joda.time.YearMonth yearMonth67 = new org.joda.time.YearMonth(chronology61);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0097-11" + "'", str9, "0097-11");
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Oct" + "'", str27, "Oct");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Oct" + "'", str29, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth66);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonth8.getFieldTypes();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        boolean boolean40 = yearMonth32.isAfter((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth yearMonth51 = yearMonth49.minusYears((int) (short) 0);
        int int52 = yearMonth49.size();
        org.joda.time.YearMonth yearMonth54 = yearMonth49.plusMonths((int) (byte) 10);
        int int55 = property45.compareTo((org.joda.time.ReadablePartial) yearMonth49);
        org.joda.time.Chronology chronology56 = yearMonth49.getChronology();
        org.joda.time.YearMonth yearMonth57 = yearMonth36.withChronologyRetainFields(chronology56);
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((long) (short) 1, chronology56);
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((java.lang.Object) yearMonth8, chronology56);
        org.joda.time.YearMonth yearMonth60 = new org.joda.time.YearMonth(chronology56);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.YearMonth yearMonth62 = yearMonth60.plus(readablePeriod61);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = yearMonth62.getValue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertNotNull(yearMonth62);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology15 = yearMonth8.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        org.joda.time.YearMonth.Property property37 = yearMonth19.property(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth8.property(dateTimeFieldType36);
        int int39 = property38.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property38.getFieldType();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        int int15 = property14.getMaximumValue();
        java.util.Locale locale16 = null;
        int int17 = property14.getMaximumShortTextLength(locale16);
        java.util.Locale locale18 = null;
        int int19 = property14.getMaximumTextLength(locale18);
        java.lang.String str20 = property14.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property14.getFieldType();
        boolean boolean22 = property4.equals((java.lang.Object) property14);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth.Property property27 = yearMonth26.monthOfYear();
        int int28 = property27.getMinimumValue();
        java.util.Locale locale29 = null;
        int int30 = property27.getMaximumShortTextLength(locale29);
        org.joda.time.YearMonth yearMonth32 = property27.addToCopy((int) (short) 1);
        java.util.Locale locale33 = null;
        java.lang.String str34 = property27.getAsText(locale33);
        int int35 = property27.getMinimumValue();
        java.lang.String str36 = property27.getAsText();
        java.lang.String str37 = property27.toString();
        boolean boolean38 = property4.equals((java.lang.Object) property27);
        int int39 = property4.get();
        java.lang.String str40 = property4.getAsString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "October" + "'", str34, "October");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "October" + "'", str36, "October");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Property[monthOfYear]" + "'", str37, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "10" + "'", str40, "10");
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        boolean boolean23 = yearMonth15.isAfter((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.Interval interval24 = yearMonth15.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        int int31 = yearMonth28.size();
        org.joda.time.YearMonth yearMonth33 = yearMonth28.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = yearMonth28.indexOf(dateTimeFieldType34);
        org.joda.time.Interval interval36 = yearMonth28.toInterval();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        int int42 = property41.getMaximumValue();
        java.lang.String str43 = property41.getAsShortText();
        java.util.Locale locale44 = null;
        java.lang.String str45 = property41.getAsShortText(locale44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property41.getFieldType();
        int int47 = yearMonth28.get(dateTimeFieldType46);
        org.joda.time.YearMonth.Property property48 = yearMonth15.property(dateTimeFieldType46);
        boolean boolean49 = yearMonth9.isSupported(dateTimeFieldType46);
        org.joda.time.YearMonth yearMonth51 = yearMonth3.withField(dateTimeFieldType46, (int) (short) 10);
        org.joda.time.YearMonth yearMonth53 = yearMonth3.minusMonths((int) (byte) 100);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 12 + "'", int42 == 12);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Oct" + "'", str43, "Oct");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Oct" + "'", str45, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(yearMonth53);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth16 = yearMonth8.plusYears((int) (byte) 10);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.plusYears(100);
        org.joda.time.YearMonth.Property property19 = yearMonth8.monthOfYear();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) '#');
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = yearMonth8.getFields();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        int int16 = yearMonth13.size();
        org.joda.time.YearMonth yearMonth18 = yearMonth13.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonth13.indexOf(dateTimeFieldType19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth.Property property25 = yearMonth24.monthOfYear();
        int int26 = property25.getMaximumValue();
        java.lang.String str27 = property25.getAsShortText();
        java.util.Locale locale28 = null;
        java.lang.String str29 = property25.getAsShortText(locale28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property25.getFieldType();
        org.joda.time.YearMonth.Property property31 = yearMonth13.property(dateTimeFieldType30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth yearMonth43 = yearMonth41.minusYears((int) (short) 0);
        int int44 = yearMonth41.size();
        boolean boolean45 = yearMonth37.isAfter((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        int int60 = property50.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = yearMonth54.getChronology();
        org.joda.time.YearMonth yearMonth62 = yearMonth41.withChronologyRetainFields(chronology61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth yearMonth68 = yearMonth66.minusYears((int) (short) 0);
        int int69 = yearMonth66.size();
        org.joda.time.YearMonth yearMonth71 = yearMonth66.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        int int73 = yearMonth66.indexOf(dateTimeFieldType72);
        org.joda.time.Interval interval74 = yearMonth66.toInterval();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.YearMonth yearMonth78 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology77);
        org.joda.time.YearMonth.Property property79 = yearMonth78.monthOfYear();
        int int80 = property79.getMaximumValue();
        java.lang.String str81 = property79.getAsShortText();
        java.util.Locale locale82 = null;
        java.lang.String str83 = property79.getAsShortText(locale82);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = property79.getFieldType();
        int int85 = yearMonth66.get(dateTimeFieldType84);
        boolean boolean86 = yearMonth62.isSupported(dateTimeFieldType84);
        boolean boolean87 = yearMonth13.isSupported(dateTimeFieldType84);
        boolean boolean88 = yearMonth8.isSupported(dateTimeFieldType84);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.YearMonth yearMonth90 = yearMonth8.minus(readablePeriod89);
        org.joda.time.YearMonth yearMonth92 = new org.joda.time.YearMonth((long) 100);
        org.joda.time.YearMonth.Property property93 = yearMonth92.monthOfYear();
        boolean boolean94 = yearMonth8.equals((java.lang.Object) property93);
        org.joda.time.YearMonth.Property property95 = yearMonth8.year();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Oct" + "'", str27, "Oct");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Oct" + "'", str29, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 12 + "'", int80 == 12);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Oct" + "'", str81, "Oct");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Oct" + "'", str83, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(yearMonth90);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(property95);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.YearMonth yearMonth20 = org.joda.time.YearMonth.parse("0086-10");
        int int21 = yearMonth8.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(10, 12);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = yearMonth8.getFields();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        int int16 = yearMonth13.size();
        org.joda.time.YearMonth yearMonth18 = yearMonth13.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonth13.indexOf(dateTimeFieldType19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth.Property property25 = yearMonth24.monthOfYear();
        int int26 = property25.getMaximumValue();
        java.lang.String str27 = property25.getAsShortText();
        java.util.Locale locale28 = null;
        java.lang.String str29 = property25.getAsShortText(locale28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property25.getFieldType();
        org.joda.time.YearMonth.Property property31 = yearMonth13.property(dateTimeFieldType30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth yearMonth43 = yearMonth41.minusYears((int) (short) 0);
        int int44 = yearMonth41.size();
        boolean boolean45 = yearMonth37.isAfter((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        int int60 = property50.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = yearMonth54.getChronology();
        org.joda.time.YearMonth yearMonth62 = yearMonth41.withChronologyRetainFields(chronology61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth yearMonth68 = yearMonth66.minusYears((int) (short) 0);
        int int69 = yearMonth66.size();
        org.joda.time.YearMonth yearMonth71 = yearMonth66.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        int int73 = yearMonth66.indexOf(dateTimeFieldType72);
        org.joda.time.Interval interval74 = yearMonth66.toInterval();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.YearMonth yearMonth78 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology77);
        org.joda.time.YearMonth.Property property79 = yearMonth78.monthOfYear();
        int int80 = property79.getMaximumValue();
        java.lang.String str81 = property79.getAsShortText();
        java.util.Locale locale82 = null;
        java.lang.String str83 = property79.getAsShortText(locale82);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = property79.getFieldType();
        int int85 = yearMonth66.get(dateTimeFieldType84);
        boolean boolean86 = yearMonth62.isSupported(dateTimeFieldType84);
        boolean boolean87 = yearMonth13.isSupported(dateTimeFieldType84);
        boolean boolean88 = yearMonth8.isSupported(dateTimeFieldType84);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.YearMonth yearMonth90 = yearMonth8.minus(readablePeriod89);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray91 = yearMonth8.getFieldTypes();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Oct" + "'", str27, "Oct");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Oct" + "'", str29, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 12 + "'", int80 == 12);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Oct" + "'", str81, "Oct");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Oct" + "'", str83, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(yearMonth90);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray91);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = yearMonth18.toString(dateTimeFormatter22);
        int int25 = yearMonth18.getValue(1);
        java.util.Locale locale27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = yearMonth18.toString("Jan", locale27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: J");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0097-10" + "'", str23, "0097-10");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth yearMonth9 = yearMonth7.minusYears((int) (short) 0);
        int int10 = yearMonth7.size();
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        boolean boolean27 = yearMonth19.isAfter((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Interval interval28 = yearMonth19.toInterval();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = yearMonth32.indexOf(dateTimeFieldType38);
        org.joda.time.Interval interval40 = yearMonth32.toInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        int int46 = property45.getMaximumValue();
        java.lang.String str47 = property45.getAsShortText();
        java.util.Locale locale48 = null;
        java.lang.String str49 = property45.getAsShortText(locale48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property45.getFieldType();
        int int51 = yearMonth32.get(dateTimeFieldType50);
        org.joda.time.YearMonth.Property property52 = yearMonth19.property(dateTimeFieldType50);
        boolean boolean53 = yearMonth13.isSupported(dateTimeFieldType50);
        org.joda.time.YearMonth yearMonth55 = yearMonth7.withField(dateTimeFieldType50, (int) (short) 10);
        boolean boolean56 = yearMonth3.isBefore((org.joda.time.ReadablePartial) yearMonth7);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.YearMonth yearMonth60 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology59);
        org.joda.time.YearMonth.Property property61 = yearMonth60.monthOfYear();
        int int62 = property61.getMaximumValue();
        java.util.Locale locale63 = null;
        int int64 = property61.getMaximumShortTextLength(locale63);
        java.util.Locale locale65 = null;
        int int66 = property61.getMaximumTextLength(locale65);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.YearMonth yearMonth70 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology69);
        org.joda.time.YearMonth.Property property71 = yearMonth70.monthOfYear();
        int int72 = property71.getMaximumValue();
        java.util.Locale locale73 = null;
        int int74 = property71.getMaximumShortTextLength(locale73);
        java.util.Locale locale75 = null;
        int int76 = property71.getMaximumTextLength(locale75);
        java.lang.String str77 = property71.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = property71.getFieldType();
        boolean boolean79 = property61.equals((java.lang.Object) property71);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = property71.getFieldType();
        org.joda.time.YearMonth.Property property81 = yearMonth7.property(dateTimeFieldType80);
        java.util.Locale locale82 = null;
        java.lang.String str83 = property81.getAsText(locale82);
        org.joda.time.YearMonth yearMonth85 = property81.addToCopy((int) (short) 10);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Oct" + "'", str47, "Oct");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Oct" + "'", str49, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 12 + "'", int62 == 12);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 12 + "'", int72 == 12);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 9 + "'", int76 == 9);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Oct" + "'", str77, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "October" + "'", str83, "October");
        org.junit.Assert.assertNotNull(yearMonth85);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonth yearMonth29 = yearMonth27.plus(readablePeriod28);
        org.joda.time.YearMonth yearMonth31 = yearMonth27.withYear((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.YearMonth yearMonth33 = yearMonth27.minus(readablePeriod32);
        java.lang.Class<?> wildcardClass34 = yearMonth33.getClass();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth.Property property8 = yearMonth7.monthOfYear();
        int int9 = property8.getMaximumValue();
        java.util.Locale locale10 = null;
        int int11 = property8.getMaximumShortTextLength(locale10);
        java.util.Locale locale12 = null;
        int int13 = property8.getMaximumTextLength(locale12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        int int19 = property18.getMaximumValue();
        java.util.Locale locale20 = null;
        int int21 = property18.getMaximumShortTextLength(locale20);
        java.util.Locale locale22 = null;
        int int23 = property18.getMaximumTextLength(locale22);
        java.lang.String str24 = property18.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property18.getFieldType();
        boolean boolean26 = property8.equals((java.lang.Object) property18);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property18.getFieldType();
        org.joda.time.YearMonth.Property property28 = yearMonth1.property(dateTimeFieldType27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property28.getFieldType();
        org.joda.time.DurationField durationField30 = property28.getRangeDurationField();
        int int31 = property28.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Oct" + "'", str24, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 12 + "'", int31 == 12);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) (short) -1);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property4.getFieldType();
        int int12 = property4.getMinimumValue();
        java.lang.String str13 = property4.getName();
        int int14 = property4.getMinimumValueOverall();
        java.lang.String str15 = property4.getAsShortText();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Oct" + "'", str15, "Oct");
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((long) (short) 1, chronology32);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth(chronology32);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology32);
        int int38 = yearMonth36.getValue((int) (short) 1);
        int int39 = yearMonth36.getYear();
        org.joda.time.YearMonth.Property property40 = yearMonth36.year();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        int int46 = property45.getMaximumValue();
        java.util.Locale locale47 = null;
        int int48 = property45.getMaximumShortTextLength(locale47);
        java.util.Locale locale49 = null;
        int int50 = property45.getMaximumTextLength(locale49);
        org.joda.time.DurationField durationField51 = property45.getRangeDurationField();
        java.lang.String str52 = property45.toString();
        boolean boolean53 = property40.equals((java.lang.Object) property45);
        int int54 = property40.getMinimumValue();
        java.lang.String str55 = property40.getAsText();
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Property[monthOfYear]" + "'", str52, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-292275054) + "'", int54 == (-292275054));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "100" + "'", str55, "100");
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        int[] intArray16 = yearMonth5.getValues();
        org.joda.time.YearMonth yearMonth18 = yearMonth5.minusMonths(2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = yearMonth18.getFieldTypes();
        org.joda.time.DateTimeField dateTimeField21 = yearMonth18.getField(0);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[97, 10]");
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        org.joda.time.YearMonth yearMonth10 = property4.getYearMonth();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        int int25 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonth19.toInterval(dateTimeZone26);
        org.joda.time.YearMonth yearMonth29 = yearMonth19.minusYears((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonth yearMonth31 = yearMonth19.plus(readablePeriod30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.plusYears((int) 'a');
        int int34 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth.Property property39 = yearMonth38.monthOfYear();
        int int40 = property39.getMaximumValue();
        java.lang.String str41 = property39.getAsShortText();
        java.util.Locale locale42 = null;
        java.lang.String str43 = property39.getAsShortText(locale42);
        org.joda.time.YearMonth yearMonth45 = property39.setCopy("October");
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property39.getFieldType();
        boolean boolean47 = yearMonth31.isSupported(dateTimeFieldType46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth((java.lang.Object) dateTimeFieldType46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 12 + "'", int40 == 12);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Oct" + "'", str41, "Oct");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Oct" + "'", str43, "Oct");
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        int int11 = yearMonth3.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = yearMonth3.getFieldType(1);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = yearMonth3.getFields();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.YearMonth yearMonth5 = property4.getYearMonth();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth.Property property10 = yearMonth9.monthOfYear();
        int int11 = property10.getMaximumValue();
        java.lang.String str12 = property10.getAsShortText();
        org.joda.time.YearMonth yearMonth14 = property10.addWrapFieldToCopy((int) (short) -1);
        int[] intArray15 = yearMonth14.getValues();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth.Property property20 = yearMonth19.monthOfYear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        org.joda.time.YearMonth yearMonth29 = yearMonth24.plusMonths((int) (byte) 10);
        int int30 = property20.compareTo((org.joda.time.ReadablePartial) yearMonth24);
        org.joda.time.Chronology chronology31 = yearMonth24.getChronology();
        org.joda.time.YearMonth yearMonth32 = org.joda.time.YearMonth.now(chronology31);
        org.joda.time.YearMonth yearMonth33 = yearMonth14.withChronologyRetainFields(chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth5.withChronologyRetainFields(chronology31);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth(chronology31);
        int int36 = yearMonth35.size();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Oct" + "'", str12, "Oct");
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[97, 9]");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology15 = yearMonth8.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        org.joda.time.YearMonth.Property property37 = yearMonth19.property(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth8.property(dateTimeFieldType36);
        int int39 = property38.getMaximumValue();
        org.joda.time.YearMonth yearMonth41 = property38.addWrapFieldToCopy(12);
        org.joda.time.YearMonth yearMonth43 = property38.addToCopy((int) (short) 100);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology46);
        org.joda.time.YearMonth yearMonth49 = yearMonth47.minusYears((int) (short) 0);
        int int50 = yearMonth47.size();
        org.joda.time.YearMonth yearMonth52 = yearMonth47.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = yearMonth47.getFieldTypes();
        int[] intArray54 = yearMonth47.getValues();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth.Property property59 = yearMonth58.monthOfYear();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth yearMonth65 = yearMonth63.minusYears((int) (short) 0);
        int int66 = yearMonth63.size();
        org.joda.time.YearMonth yearMonth68 = yearMonth63.plusMonths((int) (byte) 10);
        int int69 = property59.compareTo((org.joda.time.ReadablePartial) yearMonth63);
        org.joda.time.Chronology chronology70 = yearMonth63.getChronology();
        org.joda.time.YearMonth yearMonth71 = org.joda.time.YearMonth.now(chronology70);
        org.joda.time.YearMonth yearMonth72 = org.joda.time.YearMonth.now(chronology70);
        org.joda.time.YearMonth yearMonth73 = new org.joda.time.YearMonth((java.lang.Object) yearMonth47, chronology70);
        boolean boolean74 = property38.equals((java.lang.Object) chronology70);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[97, 10]");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.Chronology chronology2 = yearMonth1.getChronology();
        int int4 = yearMonth1.getValue(0);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonth yearMonth7 = yearMonth1.withPeriodAdded(readablePeriod5, 6);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(yearMonth7);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        int int10 = property4.getMinimumValue();
        java.lang.String str11 = property4.getName();
        java.lang.String str12 = property4.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "monthOfYear" + "'", str11, "monthOfYear");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[monthOfYear]" + "'", str12, "Property[monthOfYear]");
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((long) (short) 1, chronology32);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth(chronology32);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = yearMonth36.toString(dateTimeFormatter37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonth yearMonth40 = yearMonth36.plus(readablePeriod39);
        int int41 = yearMonth36.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth.Property property43 = yearMonth36.property(dateTimeFieldType42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0100-10" + "'", str38, "0100-10");
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.Chronology chronology8 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth9 = yearMonth0.withChronologyRetainFields(chronology8);
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth(chronology8);
        int int13 = yearMonth12.getMonthOfYear();
        int int14 = yearMonth12.getMonthOfYear();
        org.joda.time.YearMonth yearMonth16 = yearMonth12.minusYears(98);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 11 + "'", int13 == 11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 11 + "'", int14 == 11);
        org.junit.Assert.assertNotNull(yearMonth16);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        org.joda.time.YearMonth yearMonth17 = property15.getYearMonth();
        org.joda.time.DateTimeField[] dateTimeFieldArray18 = yearMonth17.getFields();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(dateTimeFieldArray18);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth.Property property14 = yearMonth9.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property14.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property14.getFieldType();
        int int17 = property14.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property14.getFieldType();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        int int39 = property29.compareTo((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Interval interval41 = yearMonth33.toInterval(dateTimeZone40);
        org.joda.time.YearMonth yearMonth43 = yearMonth33.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology46);
        org.joda.time.YearMonth yearMonth49 = yearMonth47.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology52);
        org.joda.time.YearMonth yearMonth55 = yearMonth53.minusYears((int) (short) 0);
        int int56 = yearMonth53.size();
        boolean boolean57 = yearMonth49.isAfter((org.joda.time.ReadablePartial) yearMonth53);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology60);
        org.joda.time.YearMonth.Property property62 = yearMonth61.monthOfYear();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth yearMonth68 = yearMonth66.minusYears((int) (short) 0);
        int int69 = yearMonth66.size();
        org.joda.time.YearMonth yearMonth71 = yearMonth66.plusMonths((int) (byte) 10);
        int int72 = property62.compareTo((org.joda.time.ReadablePartial) yearMonth66);
        org.joda.time.Chronology chronology73 = yearMonth66.getChronology();
        org.joda.time.YearMonth yearMonth74 = yearMonth53.withChronologyRetainFields(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.YearMonth yearMonth77 = yearMonth74.withPeriodAdded(readablePeriod75, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = null;
        int int79 = yearMonth77.indexOf(dateTimeFieldType78);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.YearMonth yearMonth83 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology82);
        org.joda.time.YearMonth.Property property84 = yearMonth83.monthOfYear();
        int int85 = property84.getMaximumValue();
        java.lang.String str86 = property84.getAsShortText();
        java.util.Locale locale87 = null;
        java.lang.String str88 = property84.getAsShortText(locale87);
        org.joda.time.YearMonth yearMonth90 = property84.setCopy("October");
        org.joda.time.ReadableInstant readableInstant91 = null;
        org.joda.time.DateTime dateTime92 = yearMonth90.toDateTime(readableInstant91);
        org.joda.time.DateTime dateTime93 = yearMonth77.toDateTime(readableInstant91);
        org.joda.time.DateTime dateTime94 = yearMonth33.toDateTime((org.joda.time.ReadableInstant) dateTime93);
        org.joda.time.DateTime dateTime95 = yearMonth24.toDateTime((org.joda.time.ReadableInstant) dateTime94);
        int int96 = property14.compareTo((org.joda.time.ReadableInstant) dateTime94);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertNotNull(yearMonth77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 12 + "'", int85 == 12);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Oct" + "'", str86, "Oct");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Oct" + "'", str88, "Oct");
        org.junit.Assert.assertNotNull(yearMonth90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth9.withYear((int) (byte) 1);
        int int33 = yearMonth32.getMonthOfYear();
        org.joda.time.YearMonth.Property property34 = yearMonth32.year();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth yearMonth41 = yearMonth39.minusYears((int) (short) 0);
        int int42 = yearMonth39.size();
        org.joda.time.YearMonth yearMonth44 = yearMonth39.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        int int46 = yearMonth39.indexOf(dateTimeFieldType45);
        org.joda.time.YearMonth yearMonth48 = yearMonth39.plusMonths((-1));
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology51);
        org.joda.time.YearMonth yearMonth54 = yearMonth52.minusYears((int) (short) 0);
        int int55 = yearMonth52.size();
        org.joda.time.YearMonth yearMonth57 = yearMonth52.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        int int59 = yearMonth52.indexOf(dateTimeFieldType58);
        org.joda.time.Interval interval60 = yearMonth52.toInterval();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology63);
        org.joda.time.YearMonth.Property property65 = yearMonth64.monthOfYear();
        int int66 = property65.getMaximumValue();
        java.lang.String str67 = property65.getAsShortText();
        java.util.Locale locale68 = null;
        java.lang.String str69 = property65.getAsShortText(locale68);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = property65.getFieldType();
        int int71 = yearMonth52.get(dateTimeFieldType70);
        org.joda.time.YearMonth.Property property72 = yearMonth39.property(dateTimeFieldType70);
        org.joda.time.Chronology chronology73 = yearMonth39.getChronology();
        org.joda.time.YearMonth yearMonth74 = new org.joda.time.YearMonth(chronology73);
        org.joda.time.YearMonth yearMonth75 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.YearMonth yearMonth79 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology78);
        org.joda.time.YearMonth yearMonth81 = yearMonth79.minusYears((int) (short) 0);
        org.joda.time.Interval interval82 = yearMonth79.toInterval();
        org.joda.time.Chronology chronology83 = yearMonth79.getChronology();
        org.joda.time.YearMonth yearMonth84 = yearMonth75.withChronologyRetainFields(chronology83);
        org.joda.time.YearMonth yearMonth85 = new org.joda.time.YearMonth(chronology83);
        org.joda.time.YearMonth yearMonth86 = yearMonth74.withChronologyRetainFields(chronology83);
        org.joda.time.YearMonth yearMonth87 = new org.joda.time.YearMonth((long) (short) 10, chronology83);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter88 = null;
        java.lang.String str89 = yearMonth87.toString(dateTimeFormatter88);
        org.joda.time.YearMonth yearMonth91 = yearMonth87.minusMonths((int) (byte) 0);
        boolean boolean92 = property34.equals((java.lang.Object) yearMonth87);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 12 + "'", int66 == 12);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Oct" + "'", str67, "Oct");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Oct" + "'", str69, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(yearMonth81);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(yearMonth84);
        org.junit.Assert.assertNotNull(yearMonth86);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1970-01" + "'", str89, "1970-01");
        org.junit.Assert.assertNotNull(yearMonth91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMaximumValue();
        int int10 = property4.getMinimumValueOverall();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property4.getAsText(locale11);
        org.joda.time.DurationField durationField13 = property4.getRangeDurationField();
        int int14 = property4.getMinimumValueOverall();
        java.lang.String str15 = property4.getName();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "October" + "'", str12, "October");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "monthOfYear" + "'", str15, "monthOfYear");
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth(chronology29);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.plusMonths(10);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth33);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) 100);
        org.joda.time.YearMonth yearMonth3 = yearMonth1.withYear((int) (short) 1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth yearMonth9 = yearMonth7.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth9.withChronologyRetainFields(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonth yearMonth29 = yearMonth9.minus(readablePeriod28);
        int int30 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth29);
        java.lang.String str31 = yearMonth29.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth.Property property36 = yearMonth35.monthOfYear();
        int int37 = property36.getMaximumValue();
        java.lang.String str38 = property36.getAsShortText();
        java.util.Locale locale39 = null;
        java.lang.String str40 = property36.getAsShortText(locale39);
        int int41 = property36.getMaximumValue();
        java.util.Locale locale42 = null;
        int int43 = property36.getMaximumShortTextLength(locale42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property36.getFieldType();
        boolean boolean45 = yearMonth29.isSupported(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0097-10" + "'", str31, "0097-10");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 12 + "'", int37 == 12);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Oct" + "'", str38, "Oct");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Oct" + "'", str40, "Oct");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 12 + "'", int41 == 12);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth yearMonth17 = yearMonth3.minusMonths(0);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.Chronology chronology20 = yearMonth19.getChronology();
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth(chronology20);
        int int22 = yearMonth17.compareTo((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.Chronology chronology23 = yearMonth17.getChronology();
        java.lang.String str24 = yearMonth17.toString();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0097-10" + "'", str24, "0097-10");
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        int int15 = property14.getMaximumValue();
        java.util.Locale locale16 = null;
        int int17 = property14.getMaximumShortTextLength(locale16);
        java.util.Locale locale18 = null;
        int int19 = property14.getMaximumTextLength(locale18);
        java.lang.String str20 = property14.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property14.getFieldType();
        boolean boolean22 = property4.equals((java.lang.Object) property14);
        org.joda.time.DateTimeField dateTimeField23 = property4.getField();
        java.lang.String str24 = property4.toString();
        int int25 = property4.getMinimumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Property[monthOfYear]" + "'", str24, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth.Property property5 = yearMonth4.monthOfYear();
        int int6 = property5.getMaximumValue();
        java.lang.String str7 = property5.getAsShortText();
        org.joda.time.YearMonth yearMonth9 = property5.addWrapFieldToCopy((int) (short) -1);
        int[] intArray10 = yearMonth9.getValues();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        int int25 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.Chronology chronology26 = yearMonth19.getChronology();
        org.joda.time.YearMonth yearMonth27 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth28 = yearMonth9.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((long) 9, chronology26);
        java.lang.Class<?> wildcardClass30 = chronology26.getClass();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Oct" + "'", str7, "Oct");
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[97, 9]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.YearMonth.Property property36 = yearMonth3.property(dateTimeFieldType34);
        java.lang.String str37 = property36.getAsText();
        java.lang.String str38 = property36.getAsString();
        java.lang.String str39 = property36.getAsShortText();
        org.joda.time.YearMonth yearMonth41 = property36.addToCopy(0);
        org.joda.time.DurationField durationField42 = property36.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property36.getFieldType();
        int int44 = property36.getMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((java.lang.Object) int44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "October" + "'", str37, "October");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "10" + "'", str38, "10");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Oct" + "'", str39, "Oct");
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.Chronology chronology8 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth9 = yearMonth0.withChronologyRetainFields(chronology8);
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth12 = org.joda.time.YearMonth.now(chronology8);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.plusMonths(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = yearMonth12.getFieldType(0);
        java.lang.Class<?> wildcardClass17 = yearMonth12.getClass();
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        java.lang.String str11 = property4.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property4.getFieldType();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property4.getAsShortText(locale13);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Oct" + "'", str14, "Oct");
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        boolean boolean8 = property4.equals((java.lang.Object) false);
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = yearMonth9.toString(dateTimeFormatter10);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = yearMonth9.getFields();
        int int13 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth9);
        java.lang.Class<?> wildcardClass14 = property4.getClass();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2020-11" + "'", str11, "2020-11");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology1 = yearMonth0.getChronology();
        org.joda.time.YearMonth yearMonth3 = yearMonth0.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth.Property property8 = yearMonth7.monthOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        org.joda.time.YearMonth yearMonth17 = yearMonth12.plusMonths((int) (byte) 10);
        int int18 = property8.compareTo((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.YearMonth yearMonth19 = property8.getYearMonth();
        java.lang.String str20 = property8.getAsText();
        org.joda.time.YearMonth yearMonth21 = property8.getYearMonth();
        org.joda.time.YearMonth yearMonth23 = property8.setCopy("October");
        boolean boolean24 = yearMonth0.isEqual((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.DurationFieldType durationFieldType25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth27 = yearMonth0.withFieldAdded(durationFieldType25, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "October" + "'", str20, "October");
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(8, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((int) ' ', 3);
        java.lang.String str4 = yearMonth2.toString("0097-09");
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = yearMonth2.isSupported(dateTimeFieldType5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType8 = yearMonth2.getFieldType(1980);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1980");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0097-09" + "'", str4, "0097-09");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        boolean boolean24 = yearMonth16.isAfter((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        int int39 = property29.compareTo((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = yearMonth33.getChronology();
        org.joda.time.YearMonth yearMonth41 = yearMonth20.withChronologyRetainFields(chronology40);
        int int42 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        int int48 = property47.getMaximumValue();
        java.util.Locale locale49 = null;
        int int50 = property47.getMaximumShortTextLength(locale49);
        java.util.Locale locale51 = null;
        int int52 = property47.getMaximumTextLength(locale51);
        org.joda.time.DurationField durationField53 = property47.getRangeDurationField();
        java.util.Locale locale54 = null;
        java.lang.String str55 = property47.getAsShortText(locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property47.getFieldType();
        org.joda.time.YearMonth yearMonth58 = yearMonth3.withField(dateTimeFieldType56, 11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = yearMonth58.getFieldTypes();
        org.joda.time.YearMonth yearMonth60 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology63);
        org.joda.time.YearMonth yearMonth66 = yearMonth64.minusYears((int) (short) 0);
        org.joda.time.Interval interval67 = yearMonth64.toInterval();
        org.joda.time.Chronology chronology68 = yearMonth64.getChronology();
        org.joda.time.YearMonth yearMonth69 = yearMonth60.withChronologyRetainFields(chronology68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.YearMonth yearMonth73 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology72);
        org.joda.time.YearMonth.Property property74 = yearMonth73.monthOfYear();
        int int75 = property74.getMaximumValue();
        java.util.Locale locale76 = null;
        int int77 = property74.getMaximumShortTextLength(locale76);
        java.util.Locale locale78 = null;
        int int79 = property74.getMaximumTextLength(locale78);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.YearMonth yearMonth83 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology82);
        org.joda.time.YearMonth.Property property84 = yearMonth83.monthOfYear();
        int int85 = property84.getMaximumValue();
        java.util.Locale locale86 = null;
        int int87 = property84.getMaximumShortTextLength(locale86);
        java.util.Locale locale88 = null;
        int int89 = property84.getMaximumTextLength(locale88);
        java.lang.String str90 = property84.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = property84.getFieldType();
        boolean boolean92 = property74.equals((java.lang.Object) property84);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = property84.getFieldType();
        int int94 = yearMonth69.get(dateTimeFieldType93);
        org.joda.time.YearMonth.Property property95 = yearMonth58.property(dateTimeFieldType93);
        java.util.Locale locale97 = null;
        java.lang.String str98 = yearMonth58.toString("1970-01", locale97);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 12 + "'", int48 == 12);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Oct" + "'", str55, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 12 + "'", int75 == 12);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 12 + "'", int85 == 12);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 9 + "'", int89 == 9);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Oct" + "'", str90, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 11 + "'", int94 == 11);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "1970-01" + "'", str98, "1970-01");
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth5.getYear();
        org.joda.time.YearMonth yearMonth8 = yearMonth5.plusMonths(2);
        org.joda.time.Interval interval9 = yearMonth5.toInterval();
        int[] intArray10 = yearMonth5.getValues();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[97, 10]");
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minusYears((int) (short) 0);
        int int43 = yearMonth40.size();
        boolean boolean44 = yearMonth36.isAfter((org.joda.time.ReadablePartial) yearMonth40);
        int int45 = yearMonth30.compareTo((org.joda.time.ReadablePartial) yearMonth40);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.YearMonth yearMonth48 = yearMonth30.withPeriodAdded(readablePeriod46, 0);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(yearMonth48);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        boolean boolean36 = yearMonth28.isAfter((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        int int51 = property41.compareTo((org.joda.time.ReadablePartial) yearMonth45);
        org.joda.time.Chronology chronology52 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth53 = yearMonth32.withChronologyRetainFields(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonth yearMonth56 = yearMonth53.withPeriodAdded(readablePeriod54, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = yearMonth56.indexOf(dateTimeFieldType57);
        boolean boolean59 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology67);
        org.joda.time.YearMonth yearMonth70 = yearMonth68.minusYears((int) (short) 0);
        int int71 = yearMonth68.size();
        org.joda.time.YearMonth yearMonth73 = yearMonth68.plusMonths((int) (byte) 10);
        int int74 = property64.compareTo((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean75 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean76 = yearMonth17.isAfter((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.YearMonth yearMonth78 = yearMonth17.plusMonths(2);
        org.joda.time.YearMonth yearMonth80 = yearMonth17.minusYears(3);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.YearMonth yearMonth82 = yearMonth17.minus(readablePeriod81);
        org.joda.time.YearMonth yearMonth84 = yearMonth17.minusYears(10);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.YearMonth yearMonth86 = yearMonth84.minus(readablePeriod85);
        org.joda.time.YearMonth yearMonth88 = yearMonth84.minusMonths((-292275054));
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(yearMonth78);
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertNotNull(yearMonth82);
        org.junit.Assert.assertNotNull(yearMonth84);
        org.junit.Assert.assertNotNull(yearMonth86);
        org.junit.Assert.assertNotNull(yearMonth88);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addToCopy((int) (short) 1);
        int int10 = property4.getMaximumValueOverall();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy((int) (byte) 100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = property4.getAsText(locale13);
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.withYear((int) (byte) 1);
        int int20 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonth yearMonth22 = yearMonth19.plus(readablePeriod21);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "October" + "'", str14, "October");
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(yearMonth22);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth.Property property6 = yearMonth5.monthOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        org.joda.time.YearMonth yearMonth15 = yearMonth10.plusMonths((int) (byte) 10);
        int int16 = property6.compareTo((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = yearMonth10.getChronology();
        org.joda.time.YearMonth yearMonth18 = org.joda.time.YearMonth.now(chronology17);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth(100, (int) (short) 1, chronology17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = yearMonth19.toInterval(dateTimeZone20);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(interval21);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        int int14 = yearMonth11.size();
        org.joda.time.YearMonth yearMonth16 = yearMonth11.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        int int18 = yearMonth11.indexOf(dateTimeFieldType17);
        org.joda.time.YearMonth yearMonth20 = yearMonth11.plusMonths((-1));
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        org.joda.time.YearMonth yearMonth29 = yearMonth24.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = yearMonth24.indexOf(dateTimeFieldType30);
        org.joda.time.Interval interval32 = yearMonth24.toInterval();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth.Property property37 = yearMonth36.monthOfYear();
        int int38 = property37.getMaximumValue();
        java.lang.String str39 = property37.getAsShortText();
        java.util.Locale locale40 = null;
        java.lang.String str41 = property37.getAsShortText(locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property37.getFieldType();
        int int43 = yearMonth24.get(dateTimeFieldType42);
        org.joda.time.YearMonth.Property property44 = yearMonth11.property(dateTimeFieldType42);
        java.lang.String str45 = property44.getAsText();
        org.joda.time.DateTimeField dateTimeField46 = property44.getField();
        boolean boolean47 = property4.equals((java.lang.Object) property44);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 12 + "'", int38 == 12);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Oct" + "'", str39, "Oct");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Oct" + "'", str41, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "October" + "'", str45, "October");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonth yearMonth20 = yearMonth17.withPeriodAdded(readablePeriod18, 98);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = yearMonth20.toInterval(dateTimeZone21);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(interval22);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology6 = yearMonth5.getChronology();
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth(12, 9, chronology6);
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth(chronology6);
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((long) (short) -1, chronology6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth(12, 0, chronology6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((long) (short) 1, chronology32);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth(chronology32);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology32);
        int int38 = yearMonth36.getValue((int) (short) 1);
        org.joda.time.YearMonth yearMonth40 = yearMonth36.minusMonths(2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(yearMonth40);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.YearMonth yearMonth15 = yearMonth9.minus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth18 = yearMonth15.withPeriodAdded(readablePeriod16, (int) (short) 0);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.plusYears((int) ' ');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        org.joda.time.YearMonth yearMonth29 = yearMonth24.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = yearMonth24.indexOf(dateTimeFieldType30);
        org.joda.time.YearMonth yearMonth33 = yearMonth24.plusMonths((-1));
        org.joda.time.YearMonth yearMonth35 = yearMonth24.plusMonths((-1));
        org.joda.time.YearMonth.Property property36 = yearMonth35.monthOfYear();
        int int37 = property36.get();
        java.util.Locale locale38 = null;
        int int39 = property36.getMaximumShortTextLength(locale38);
        org.joda.time.DateTimeField dateTimeField40 = property36.getField();
        boolean boolean41 = yearMonth18.equals((java.lang.Object) property36);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology15 = yearMonth8.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        org.joda.time.YearMonth.Property property37 = yearMonth19.property(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth8.property(dateTimeFieldType36);
        int int39 = property38.getMaximumValue();
        int int40 = property38.getMinimumValueOverall();
        org.joda.time.DateTimeField dateTimeField41 = property38.getField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.YearMonth yearMonth20 = yearMonth8.plus(readablePeriod19);
        int int21 = yearMonth8.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Interval interval23 = yearMonth8.toInterval(dateTimeZone22);
        org.joda.time.Chronology chronology24 = yearMonth8.getChronology();
        org.joda.time.Interval interval25 = yearMonth8.toInterval();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(interval25);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology1 = yearMonth0.getChronology();
        org.joda.time.YearMonth yearMonth3 = yearMonth0.withMonthOfYear((int) (short) 1);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth6 = yearMonth3.withMonthOfYear(98);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 98 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth.Property property12 = yearMonth11.monthOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        int int22 = property12.compareTo((org.joda.time.ReadablePartial) yearMonth16);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = yearMonth16.toInterval(dateTimeZone23);
        org.joda.time.YearMonth yearMonth26 = yearMonth16.minusYears((int) (short) 0);
        java.lang.String str27 = yearMonth16.toString();
        org.joda.time.YearMonth yearMonth29 = yearMonth16.withMonthOfYear(11);
        boolean boolean30 = property4.equals((java.lang.Object) 11);
        int int31 = property4.getMinimumValueOverall();
        java.util.Locale locale32 = null;
        int int33 = property4.getMaximumTextLength(locale32);
        org.joda.time.YearMonth yearMonth34 = property4.getYearMonth();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0097-10" + "'", str27, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNotNull(yearMonth34);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth16 = property4.addWrapFieldToCopy((int) '4');
        int int17 = yearMonth16.getMonthOfYear();
        org.joda.time.Chronology chronology18 = yearMonth16.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Interval interval35 = yearMonth27.toInterval(dateTimeZone34);
        org.joda.time.YearMonth yearMonth37 = yearMonth27.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth yearMonth43 = yearMonth41.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology46);
        org.joda.time.YearMonth yearMonth49 = yearMonth47.minusYears((int) (short) 0);
        int int50 = yearMonth47.size();
        boolean boolean51 = yearMonth43.isAfter((org.joda.time.ReadablePartial) yearMonth47);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology54);
        org.joda.time.YearMonth.Property property56 = yearMonth55.monthOfYear();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.YearMonth yearMonth60 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology59);
        org.joda.time.YearMonth yearMonth62 = yearMonth60.minusYears((int) (short) 0);
        int int63 = yearMonth60.size();
        org.joda.time.YearMonth yearMonth65 = yearMonth60.plusMonths((int) (byte) 10);
        int int66 = property56.compareTo((org.joda.time.ReadablePartial) yearMonth60);
        org.joda.time.Chronology chronology67 = yearMonth60.getChronology();
        org.joda.time.YearMonth yearMonth68 = yearMonth47.withChronologyRetainFields(chronology67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.YearMonth yearMonth71 = yearMonth68.withPeriodAdded(readablePeriod69, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        int int73 = yearMonth71.indexOf(dateTimeFieldType72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.YearMonth yearMonth77 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology76);
        org.joda.time.YearMonth.Property property78 = yearMonth77.monthOfYear();
        int int79 = property78.getMaximumValue();
        java.lang.String str80 = property78.getAsShortText();
        java.util.Locale locale81 = null;
        java.lang.String str82 = property78.getAsShortText(locale81);
        org.joda.time.YearMonth yearMonth84 = property78.setCopy("October");
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.DateTime dateTime86 = yearMonth84.toDateTime(readableInstant85);
        org.joda.time.DateTime dateTime87 = yearMonth71.toDateTime(readableInstant85);
        org.joda.time.DateTime dateTime88 = yearMonth27.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTime dateTime89 = yearMonth16.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 12 + "'", int79 == 12);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Oct" + "'", str80, "Oct");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Oct" + "'", str82, "Oct");
        org.junit.Assert.assertNotNull(yearMonth84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMaximumValue();
        int int10 = property4.getMinimumValueOverall();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        int int25 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.YearMonth yearMonth26 = property15.getYearMonth();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth yearMonth43 = yearMonth41.minusYears((int) (short) 0);
        int int44 = yearMonth41.size();
        boolean boolean45 = yearMonth37.isAfter((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        int int60 = property50.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = yearMonth54.getChronology();
        org.joda.time.YearMonth yearMonth62 = yearMonth41.withChronologyRetainFields(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.YearMonth yearMonth65 = yearMonth62.withPeriodAdded(readablePeriod63, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        int int67 = yearMonth65.indexOf(dateTimeFieldType66);
        boolean boolean68 = yearMonth30.isEqual((org.joda.time.ReadablePartial) yearMonth65);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.YearMonth yearMonth72 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology71);
        org.joda.time.YearMonth.Property property73 = yearMonth72.monthOfYear();
        int int74 = property73.getMaximumValue();
        java.lang.String str75 = property73.getAsShortText();
        java.util.Locale locale76 = null;
        java.lang.String str77 = property73.getAsShortText(locale76);
        org.joda.time.YearMonth yearMonth79 = property73.setCopy("October");
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = yearMonth79.toDateTime(readableInstant80);
        org.joda.time.DateTime dateTime82 = yearMonth65.toDateTime(readableInstant80);
        int int83 = property15.compareTo((org.joda.time.ReadableInstant) dateTime82);
        int int84 = property4.compareTo((org.joda.time.ReadableInstant) dateTime82);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 12 + "'", int74 == 12);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Oct" + "'", str75, "Oct");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Oct" + "'", str77, "Oct");
        org.junit.Assert.assertNotNull(yearMonth79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.lang.String str11 = property4.getAsText();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "October" + "'", str11, "October");
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) '4');
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = yearMonth8.getValue(1970);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1970");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        int int9 = yearMonth6.size();
        org.joda.time.YearMonth yearMonth11 = yearMonth6.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = yearMonth6.indexOf(dateTimeFieldType12);
        org.joda.time.YearMonth yearMonth15 = yearMonth6.plusMonths((-1));
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.Interval interval27 = yearMonth19.toInterval();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        int int33 = property32.getMaximumValue();
        java.lang.String str34 = property32.getAsShortText();
        java.util.Locale locale35 = null;
        java.lang.String str36 = property32.getAsShortText(locale35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property32.getFieldType();
        int int38 = yearMonth19.get(dateTimeFieldType37);
        org.joda.time.YearMonth.Property property39 = yearMonth6.property(dateTimeFieldType37);
        org.joda.time.Chronology chronology40 = yearMonth6.getChronology();
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth(chronology40);
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((long) 9, chronology40);
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((long) 'a', chronology40);
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((long) (short) 1, chronology40);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Oct" + "'", str34, "Oct");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Oct" + "'", str36, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(chronology40);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = yearMonth4.getFieldTypes();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        boolean boolean22 = yearMonth14.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth.Property property27 = yearMonth26.monthOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        org.joda.time.YearMonth yearMonth36 = yearMonth31.plusMonths((int) (byte) 10);
        int int37 = property27.compareTo((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology38 = yearMonth31.getChronology();
        org.joda.time.YearMonth yearMonth39 = yearMonth18.withChronologyRetainFields(chronology38);
        org.joda.time.YearMonth yearMonth40 = yearMonth4.withChronologyRetainFields(chronology38);
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((long) (short) -1, chronology38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        int int52 = yearMonth45.indexOf(dateTimeFieldType51);
        org.joda.time.YearMonth yearMonth54 = yearMonth45.plusMonths((-1));
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth yearMonth60 = yearMonth58.minusYears((int) (short) 0);
        int int61 = yearMonth58.size();
        org.joda.time.YearMonth yearMonth63 = yearMonth58.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        int int65 = yearMonth58.indexOf(dateTimeFieldType64);
        org.joda.time.Interval interval66 = yearMonth58.toInterval();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.YearMonth yearMonth70 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology69);
        org.joda.time.YearMonth.Property property71 = yearMonth70.monthOfYear();
        int int72 = property71.getMaximumValue();
        java.lang.String str73 = property71.getAsShortText();
        java.util.Locale locale74 = null;
        java.lang.String str75 = property71.getAsShortText(locale74);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = property71.getFieldType();
        int int77 = yearMonth58.get(dateTimeFieldType76);
        org.joda.time.YearMonth.Property property78 = yearMonth45.property(dateTimeFieldType76);
        org.joda.time.Chronology chronology79 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth80 = org.joda.time.YearMonth.now(chronology79);
        org.joda.time.YearMonth yearMonth81 = org.joda.time.YearMonth.now(chronology79);
        java.lang.String str83 = yearMonth81.toString("10");
        boolean boolean84 = yearMonth41.isEqual((org.joda.time.ReadablePartial) yearMonth81);
        int int86 = yearMonth81.getValue((int) (short) 0);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 12 + "'", int72 == 12);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Oct" + "'", str73, "Oct");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Oct" + "'", str75, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertNotNull(yearMonth81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "10" + "'", str83, "10");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2020 + "'", int86 == 2020);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        java.lang.String str19 = yearMonth8.toString();
        org.joda.time.YearMonth yearMonth21 = yearMonth8.withMonthOfYear(11);
        org.joda.time.Chronology chronology22 = yearMonth21.getChronology();
        org.joda.time.YearMonth yearMonth23 = org.joda.time.YearMonth.now(chronology22);
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth(chronology22);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0097-10" + "'", str19, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(yearMonth23);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth17 = yearMonth5.minus(readablePeriod16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        int int23 = property22.getMaximumValue();
        java.lang.String str24 = property22.getAsShortText();
        org.joda.time.DateTimeField dateTimeField25 = property22.getField();
        org.joda.time.YearMonth yearMonth27 = property22.setCopy("Oct");
        boolean boolean28 = yearMonth17.equals((java.lang.Object) yearMonth27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Interval interval30 = yearMonth17.toInterval(dateTimeZone29);
        org.joda.time.YearMonth.Property property31 = yearMonth17.monthOfYear();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Oct" + "'", str24, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.YearMonth yearMonth24 = yearMonth3.plusYears((-1));
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = yearMonth3.getFields();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property15.getFieldType();
        int int18 = property15.getMaximumValueOverall();
        org.joda.time.DurationField durationField19 = property15.getRangeDurationField();
        org.joda.time.YearMonth yearMonth20 = property15.getYearMonth();
        java.lang.Class<?> wildcardClass21 = yearMonth20.getClass();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth.Property property30 = yearMonth29.monthOfYear();
        int int31 = property30.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField32 = property30.getField();
        org.joda.time.YearMonth yearMonth34 = property30.addToCopy((int) (short) 0);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth.Property property39 = yearMonth38.monthOfYear();
        int int40 = property39.getMaximumValue();
        java.util.Locale locale41 = null;
        int int42 = property39.getMaximumShortTextLength(locale41);
        java.util.Locale locale43 = null;
        int int44 = property39.getMaximumTextLength(locale43);
        java.lang.String str45 = property39.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property39.getFieldType();
        boolean boolean47 = yearMonth34.isSupported(dateTimeFieldType46);
        int int48 = yearMonth3.get(dateTimeFieldType46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate50 = yearMonth3.toLocalDate((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 12 + "'", int40 == 12);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Oct" + "'", str45, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        int int8 = property4.get();
        java.lang.String str9 = property4.getAsString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "10" + "'", str9, "10");
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth.Property property10 = yearMonth3.year();
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumShortTextLength(locale11);
        org.joda.time.YearMonth yearMonth14 = property10.addToCopy((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth14.toInterval(dateTimeZone15);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(interval16);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        boolean boolean14 = yearMonth12.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.YearMonth yearMonth30 = property19.getYearMonth();
        java.lang.String str31 = property19.getAsText();
        org.joda.time.YearMonth yearMonth32 = property19.getYearMonth();
        boolean boolean33 = yearMonth12.isBefore((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = yearMonth32.indexOf(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "October" + "'", str31, "October");
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.lang.String str11 = property4.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property4.getFieldType();
        java.util.Locale locale14 = null;
        org.joda.time.YearMonth yearMonth15 = property4.setCopy("October", locale14);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = yearMonth15.getFields();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth.Property property14 = yearMonth9.year();
        org.joda.time.YearMonth.Property property15 = yearMonth9.year();
        int int16 = property15.getMinimumValueOverall();
        java.lang.String str17 = property15.getAsText();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-292275054) + "'", int16 == (-292275054));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "97" + "'", str17, "97");
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology1 = yearMonth0.getChronology();
        org.joda.time.YearMonth yearMonth3 = yearMonth0.withMonthOfYear((int) (short) 1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth.Property property8 = yearMonth7.monthOfYear();
        int int9 = property8.getMaximumValue();
        java.util.Locale locale10 = null;
        int int11 = property8.getMaximumShortTextLength(locale10);
        java.util.Locale locale12 = null;
        int int13 = property8.getMaximumTextLength(locale12);
        java.lang.String str14 = property8.getName();
        org.joda.time.YearMonth yearMonth16 = property8.addWrapFieldToCopy(100);
        int int17 = yearMonth16.getMonthOfYear();
        org.joda.time.YearMonth.Property property18 = yearMonth16.year();
        org.joda.time.YearMonth yearMonth20 = property18.setCopy((int) '#');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        int int38 = yearMonth35.size();
        org.joda.time.YearMonth yearMonth40 = yearMonth35.plusMonths((int) (byte) 10);
        int int41 = property31.compareTo((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.Interval interval43 = yearMonth35.toInterval(dateTimeZone42);
        org.joda.time.YearMonth yearMonth45 = yearMonth35.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth yearMonth51 = yearMonth49.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology54);
        org.joda.time.YearMonth yearMonth57 = yearMonth55.minusYears((int) (short) 0);
        int int58 = yearMonth55.size();
        boolean boolean59 = yearMonth51.isAfter((org.joda.time.ReadablePartial) yearMonth55);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology67);
        org.joda.time.YearMonth yearMonth70 = yearMonth68.minusYears((int) (short) 0);
        int int71 = yearMonth68.size();
        org.joda.time.YearMonth yearMonth73 = yearMonth68.plusMonths((int) (byte) 10);
        int int74 = property64.compareTo((org.joda.time.ReadablePartial) yearMonth68);
        org.joda.time.Chronology chronology75 = yearMonth68.getChronology();
        org.joda.time.YearMonth yearMonth76 = yearMonth55.withChronologyRetainFields(chronology75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.YearMonth yearMonth79 = yearMonth76.withPeriodAdded(readablePeriod77, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        int int81 = yearMonth79.indexOf(dateTimeFieldType80);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.YearMonth yearMonth85 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology84);
        org.joda.time.YearMonth.Property property86 = yearMonth85.monthOfYear();
        int int87 = property86.getMaximumValue();
        java.lang.String str88 = property86.getAsShortText();
        java.util.Locale locale89 = null;
        java.lang.String str90 = property86.getAsShortText(locale89);
        org.joda.time.YearMonth yearMonth92 = property86.setCopy("October");
        org.joda.time.ReadableInstant readableInstant93 = null;
        org.joda.time.DateTime dateTime94 = yearMonth92.toDateTime(readableInstant93);
        org.joda.time.DateTime dateTime95 = yearMonth79.toDateTime(readableInstant93);
        org.joda.time.DateTime dateTime96 = yearMonth35.toDateTime((org.joda.time.ReadableInstant) dateTime95);
        org.joda.time.DateTime dateTime97 = yearMonth26.toDateTime((org.joda.time.ReadableInstant) dateTime96);
        org.joda.time.DateTime dateTime98 = yearMonth20.toDateTime((org.joda.time.ReadableInstant) dateTime96);
        org.joda.time.DateTime dateTime99 = yearMonth3.toDateTime((org.joda.time.ReadableInstant) dateTime98);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(yearMonth76);
        org.junit.Assert.assertNotNull(yearMonth79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 12 + "'", int87 == 12);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Oct" + "'", str88, "Oct");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Oct" + "'", str90, "Oct");
        org.junit.Assert.assertNotNull(yearMonth92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertNotNull(dateTime98);
        org.junit.Assert.assertNotNull(dateTime99);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = yearMonth8.indexOf(dateTimeFieldType14);
        org.joda.time.YearMonth yearMonth17 = yearMonth8.plusMonths((-1));
        int int18 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.YearMonth yearMonth20 = property4.addToCopy((-1));
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(yearMonth20);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Interval interval17 = yearMonth8.toInterval();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        int int24 = yearMonth21.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth21.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        int int28 = yearMonth21.indexOf(dateTimeFieldType27);
        org.joda.time.Interval interval29 = yearMonth21.toInterval();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth.Property property34 = yearMonth33.monthOfYear();
        int int35 = property34.getMaximumValue();
        java.lang.String str36 = property34.getAsShortText();
        java.util.Locale locale37 = null;
        java.lang.String str38 = property34.getAsShortText(locale37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property34.getFieldType();
        int int40 = yearMonth21.get(dateTimeFieldType39);
        org.joda.time.YearMonth.Property property41 = yearMonth8.property(dateTimeFieldType39);
        boolean boolean42 = yearMonth2.isSupported(dateTimeFieldType39);
        org.joda.time.YearMonth.Property property43 = yearMonth2.year();
        java.lang.String str44 = property43.toString();
        java.lang.Class<?> wildcardClass45 = property43.getClass();
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 12 + "'", int35 == 12);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Oct" + "'", str36, "Oct");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Oct" + "'", str38, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Property[year]" + "'", str44, "Property[year]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("1970-01");
        java.lang.Class<?> wildcardClass2 = yearMonth1.getClass();
        org.junit.Assert.assertNotNull(yearMonth1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        java.lang.String str2 = yearMonth1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth12.withYear((int) (byte) 1);
        boolean boolean36 = yearMonth1.isEqual((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.YearMonth.Property property37 = yearMonth1.monthOfYear();
        int int38 = property37.getMaximumValue();
        java.util.Locale locale40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth41 = property37.setCopy("0098-06", locale40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0098-06\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01" + "'", str2, "1970-01");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 12 + "'", int38 == 12);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth8.withYear((int) (byte) 10);
        org.joda.time.Interval interval27 = yearMonth26.toInterval();
        java.lang.String str29 = yearMonth26.toString("2015-01");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2015-01" + "'", str29, "2015-01");
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonth yearMonth9 = yearMonth3.withPeriodAdded(readablePeriod7, (int) (byte) 0);
        org.joda.time.YearMonth yearMonth11 = yearMonth3.plusYears((int) '#');
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth11);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        int int8 = yearMonth5.size();
        org.joda.time.YearMonth yearMonth10 = yearMonth5.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonth5.indexOf(dateTimeFieldType11);
        org.joda.time.YearMonth yearMonth14 = yearMonth5.plusMonths((-1));
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.Interval interval26 = yearMonth18.toInterval();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        int int37 = yearMonth18.get(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth5.property(dateTimeFieldType36);
        org.joda.time.Chronology chronology39 = yearMonth5.getChronology();
        org.joda.time.YearMonth yearMonth40 = org.joda.time.YearMonth.now(chronology39);
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth(1, 3, chronology39);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.YearMonth yearMonth43 = yearMonth41.plus(readablePeriod42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.YearMonth yearMonth46 = yearMonth43.withPeriodAdded(readablePeriod44, (int) (short) -1);
        java.lang.Class<?> wildcardClass47 = yearMonth43.getClass();
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((long) (short) 1, chronology32);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth(chronology32);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = yearMonth36.toString(dateTimeFormatter37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonth yearMonth40 = yearMonth36.plus(readablePeriod39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth yearMonth51 = yearMonth49.minusYears((int) (short) 0);
        int int52 = yearMonth49.size();
        org.joda.time.YearMonth yearMonth54 = yearMonth49.plusMonths((int) (byte) 10);
        int int55 = property45.compareTo((org.joda.time.ReadablePartial) yearMonth49);
        org.joda.time.Chronology chronology56 = yearMonth49.getChronology();
        org.joda.time.YearMonth yearMonth57 = yearMonth36.withChronologyRetainFields(chronology56);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = null;
        java.lang.String str59 = yearMonth57.toString(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0100-10" + "'", str38, "0100-10");
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0100-10" + "'", str59, "0100-10");
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((int) ' ', 3);
        org.joda.time.YearMonth yearMonth4 = org.joda.time.YearMonth.parse("2020-11");
        int int5 = yearMonth4.getMonthOfYear();
        boolean boolean6 = yearMonth2.isBefore((org.joda.time.ReadablePartial) yearMonth4);
        org.joda.time.YearMonth yearMonth8 = yearMonth4.minusYears((int) (short) 0);
        org.junit.Assert.assertNotNull(yearMonth4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 11 + "'", int5 == 11);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(yearMonth8);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonth8.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonth8.toInterval(dateTimeZone26);
        int[] intArray28 = yearMonth8.getValues();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth yearMonth41 = yearMonth39.minusYears((int) (short) 0);
        int int42 = yearMonth39.size();
        boolean boolean43 = yearMonth35.isAfter((org.joda.time.ReadablePartial) yearMonth39);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology46);
        org.joda.time.YearMonth.Property property48 = yearMonth47.monthOfYear();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology51);
        org.joda.time.YearMonth yearMonth54 = yearMonth52.minusYears((int) (short) 0);
        int int55 = yearMonth52.size();
        org.joda.time.YearMonth yearMonth57 = yearMonth52.plusMonths((int) (byte) 10);
        int int58 = property48.compareTo((org.joda.time.ReadablePartial) yearMonth52);
        org.joda.time.Chronology chronology59 = yearMonth52.getChronology();
        org.joda.time.YearMonth yearMonth60 = yearMonth39.withChronologyRetainFields(chronology59);
        org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth((long) (short) 1, chronology59);
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth(chronology59);
        java.lang.Class<?> wildcardClass63 = chronology59.getClass();
        boolean boolean64 = yearMonth8.equals((java.lang.Object) wildcardClass63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField66 = yearMonth8.getField((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[97, 10]");
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth17 = yearMonth5.minus(readablePeriod16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.year();
        int int20 = yearMonth17.getValue((int) (byte) 1);
        org.joda.time.YearMonth.Property property21 = yearMonth17.year();
        org.joda.time.YearMonth.Property property22 = yearMonth17.monthOfYear();
        org.joda.time.YearMonth yearMonth24 = yearMonth17.minusYears(6);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth24);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        int int37 = yearMonth34.size();
        org.joda.time.YearMonth yearMonth39 = yearMonth34.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        int int41 = yearMonth34.indexOf(dateTimeFieldType40);
        org.joda.time.YearMonth yearMonth43 = yearMonth34.plusMonths((-1));
        boolean boolean44 = yearMonth9.isEqual((org.joda.time.ReadablePartial) yearMonth43);
        org.joda.time.YearMonth yearMonth46 = yearMonth43.withYear((int) '4');
        org.joda.time.YearMonth.Property property47 = yearMonth43.year();
        java.lang.String str48 = property47.getAsString();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "97" + "'", str48, "97");
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy(100);
        int int13 = yearMonth12.getMonthOfYear();
        org.joda.time.YearMonth.Property property14 = yearMonth12.year();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.YearMonth yearMonth27 = yearMonth18.plusMonths((-1));
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        org.joda.time.YearMonth yearMonth36 = yearMonth31.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        int int38 = yearMonth31.indexOf(dateTimeFieldType37);
        org.joda.time.Interval interval39 = yearMonth31.toInterval();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth.Property property44 = yearMonth43.monthOfYear();
        int int45 = property44.getMaximumValue();
        java.lang.String str46 = property44.getAsShortText();
        java.util.Locale locale47 = null;
        java.lang.String str48 = property44.getAsShortText(locale47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property44.getFieldType();
        int int50 = yearMonth31.get(dateTimeFieldType49);
        org.joda.time.YearMonth.Property property51 = yearMonth18.property(dateTimeFieldType49);
        org.joda.time.Chronology chronology52 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth(chronology52);
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth yearMonth60 = yearMonth58.minusYears((int) (short) 0);
        org.joda.time.Interval interval61 = yearMonth58.toInterval();
        org.joda.time.Chronology chronology62 = yearMonth58.getChronology();
        org.joda.time.YearMonth yearMonth63 = yearMonth54.withChronologyRetainFields(chronology62);
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth(chronology62);
        org.joda.time.YearMonth yearMonth65 = yearMonth53.withChronologyRetainFields(chronology62);
        org.joda.time.YearMonth yearMonth66 = yearMonth12.withChronologyRetainFields(chronology62);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.YearMonth yearMonth70 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology69);
        org.joda.time.YearMonth.Property property71 = yearMonth70.monthOfYear();
        int int72 = property71.getMaximumValue();
        java.util.Locale locale73 = null;
        int int74 = property71.getMaximumShortTextLength(locale73);
        java.util.Locale locale75 = null;
        int int76 = property71.getMaximumTextLength(locale75);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.YearMonth yearMonth80 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology79);
        org.joda.time.YearMonth.Property property81 = yearMonth80.monthOfYear();
        int int82 = property81.getMaximumValue();
        java.util.Locale locale83 = null;
        int int84 = property81.getMaximumShortTextLength(locale83);
        java.util.Locale locale85 = null;
        int int86 = property81.getMaximumTextLength(locale85);
        java.lang.String str87 = property81.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = property81.getFieldType();
        boolean boolean89 = property71.equals((java.lang.Object) property81);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = property81.getFieldType();
        org.joda.time.YearMonth.Property property91 = yearMonth12.property(dateTimeFieldType90);
        int int92 = property91.getMaximumValue();
        java.util.Locale locale93 = null;
        int int94 = property91.getMaximumTextLength(locale93);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 12 + "'", int45 == 12);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Oct" + "'", str46, "Oct");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Oct" + "'", str48, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 12 + "'", int72 == 12);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 9 + "'", int76 == 9);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 12 + "'", int82 == 12);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 9 + "'", int86 == 9);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Oct" + "'", str87, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 12 + "'", int92 == 12);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 9 + "'", int94 == 9);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property15.getFieldType();
        org.joda.time.DurationField durationField18 = property15.getDurationField();
        org.joda.time.YearMonth yearMonth19 = property15.getYearMonth();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(yearMonth19);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        java.lang.String str6 = yearMonth3.toString();
        java.lang.String str7 = yearMonth3.toString();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = yearMonth3.toInterval(dateTimeZone8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        boolean boolean37 = yearMonth29.isAfter((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Interval interval38 = yearMonth29.toInterval();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonth42.indexOf(dateTimeFieldType48);
        org.joda.time.Interval interval50 = yearMonth42.toInterval();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth.Property property55 = yearMonth54.monthOfYear();
        int int56 = property55.getMaximumValue();
        java.lang.String str57 = property55.getAsShortText();
        java.util.Locale locale58 = null;
        java.lang.String str59 = property55.getAsShortText(locale58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property55.getFieldType();
        int int61 = yearMonth42.get(dateTimeFieldType60);
        org.joda.time.YearMonth.Property property62 = yearMonth29.property(dateTimeFieldType60);
        boolean boolean63 = yearMonth23.isSupported(dateTimeFieldType60);
        org.joda.time.YearMonth yearMonth65 = yearMonth17.withField(dateTimeFieldType60, (int) (short) 10);
        boolean boolean66 = yearMonth13.isBefore((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.Interval interval68 = yearMonth13.toInterval(dateTimeZone67);
        int int69 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0097-10" + "'", str6, "0097-10");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0097-10" + "'", str7, "0097-10");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 12 + "'", int56 == 12);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Oct" + "'", str57, "Oct");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Oct" + "'", str59, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.YearMonth.Property property4 = yearMonth1.year();
        java.lang.String str5 = property4.getAsShortText();
        java.lang.String str6 = property4.getName();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970" + "'", str5, "1970");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "year" + "'", str6, "year");
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        int int8 = yearMonth5.size();
        org.joda.time.YearMonth yearMonth10 = yearMonth5.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonth5.indexOf(dateTimeFieldType11);
        org.joda.time.YearMonth yearMonth14 = yearMonth5.plusMonths((-1));
        org.joda.time.YearMonth yearMonth16 = yearMonth5.plusMonths((-1));
        org.joda.time.YearMonth.Property property17 = yearMonth16.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonth yearMonth20 = yearMonth16.withPeriodAdded(readablePeriod18, (int) (byte) 10);
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.Chronology chronology23 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth(chronology23);
        org.joda.time.YearMonth yearMonth25 = yearMonth20.withChronologyRetainFields(chronology23);
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) (short) 0, 9, chronology23);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        int int37 = yearMonth30.indexOf(dateTimeFieldType36);
        org.joda.time.YearMonth yearMonth39 = yearMonth30.plusMonths((-1));
        org.joda.time.YearMonth yearMonth41 = yearMonth30.plusMonths((-1));
        org.joda.time.YearMonth.Property property42 = yearMonth41.monthOfYear();
        int int43 = property42.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property42.getFieldType();
        int int45 = property42.getMaximumValueOverall();
        java.util.Locale locale46 = null;
        java.lang.String str47 = property42.getAsShortText(locale46);
        int int48 = property42.getMinimumValueOverall();
        org.joda.time.YearMonth yearMonth50 = property42.addToCopy((int) (byte) 100);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth.Property property55 = yearMonth54.monthOfYear();
        int int56 = property55.getMaximumValue();
        java.util.Locale locale57 = null;
        int int58 = property55.getMaximumShortTextLength(locale57);
        java.util.Locale locale59 = null;
        int int60 = property55.getMaximumTextLength(locale59);
        java.lang.String str61 = property55.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property55.getFieldType();
        boolean boolean63 = yearMonth50.isSupported(dateTimeFieldType62);
        boolean boolean64 = yearMonth26.isSupported(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 12 + "'", int45 == 12);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Sep" + "'", str47, "Sep");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 12 + "'", int56 == 12);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Oct" + "'", str61, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(10L);
        org.joda.time.YearMonth.Property property2 = yearMonth1.monthOfYear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth.Property property7 = yearMonth6.monthOfYear();
        int int8 = property7.getMaximumValue();
        java.util.Locale locale9 = null;
        int int10 = property7.getMaximumShortTextLength(locale9);
        java.util.Locale locale11 = null;
        int int12 = property7.getMaximumTextLength(locale11);
        java.lang.String str13 = property7.getName();
        org.joda.time.YearMonth yearMonth15 = property7.addWrapFieldToCopy(100);
        boolean boolean16 = yearMonth1.isEqual((org.joda.time.ReadablePartial) yearMonth15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.YearMonth yearMonth18 = yearMonth15.minus(readablePeriod17);
        int[] intArray19 = yearMonth15.getValues();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[97, 2]");
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((int) ' ', 3);
        java.lang.String str4 = yearMonth2.toString("0097-09");
        int int5 = yearMonth2.size();
        org.joda.time.YearMonth.Property property6 = yearMonth2.year();
        java.lang.String str8 = yearMonth2.toString("1970");
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = yearMonth2.getFields();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0097-09" + "'", str4, "0097-09");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970" + "'", str8, "1970");
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.getMaximumValue();
        java.lang.String str17 = property15.getAsShortText();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property15.getAsShortText(locale18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property15.getFieldType();
        org.joda.time.YearMonth.Property property21 = yearMonth3.property(dateTimeFieldType20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        boolean boolean35 = yearMonth27.isAfter((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth.Property property40 = yearMonth39.monthOfYear();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        int int47 = yearMonth44.size();
        org.joda.time.YearMonth yearMonth49 = yearMonth44.plusMonths((int) (byte) 10);
        int int50 = property40.compareTo((org.joda.time.ReadablePartial) yearMonth44);
        org.joda.time.Chronology chronology51 = yearMonth44.getChronology();
        org.joda.time.YearMonth yearMonth52 = yearMonth31.withChronologyRetainFields(chronology51);
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3, chronology51);
        org.joda.time.YearMonth yearMonth54 = org.joda.time.YearMonth.now(chronology51);
        org.joda.time.YearMonth yearMonth55 = org.joda.time.YearMonth.now(chronology51);
        int int56 = yearMonth55.getMonthOfYear();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Oct" + "'", str17, "Oct");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Oct" + "'", str19, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 11 + "'", int56 == 11);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMaximumValue();
        int int10 = property4.getMinimumValueOverall();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property4.getAsText(locale11);
        int int13 = property4.getMaximumValueOverall();
        org.joda.time.YearMonth yearMonth14 = property4.getYearMonth();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "October" + "'", str12, "October");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
        org.junit.Assert.assertNotNull(yearMonth14);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        int int16 = property4.getMaximumValue();
        java.lang.String str17 = property4.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[monthOfYear]" + "'", str17, "Property[monthOfYear]");
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        org.joda.time.YearMonth yearMonth7 = property4.setCopy("10");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        java.lang.String str14 = yearMonth11.toString();
        java.lang.String str15 = yearMonth11.toString();
        org.joda.time.YearMonth yearMonth17 = yearMonth11.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        int int24 = yearMonth21.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth21.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        int int28 = yearMonth21.indexOf(dateTimeFieldType27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth.Property property33 = yearMonth32.monthOfYear();
        int int34 = property33.getMaximumValue();
        java.lang.String str35 = property33.getAsShortText();
        java.util.Locale locale36 = null;
        java.lang.String str37 = property33.getAsShortText(locale36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property33.getFieldType();
        org.joda.time.YearMonth.Property property39 = yearMonth21.property(dateTimeFieldType38);
        boolean boolean40 = yearMonth11.isSupported(dateTimeFieldType38);
        int int41 = yearMonth7.compareTo((org.joda.time.ReadablePartial) yearMonth11);
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Interval interval45 = yearMonth43.toInterval(dateTimeZone44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.YearMonth yearMonth47 = yearMonth43.minus(readablePeriod46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.YearMonth yearMonth49 = yearMonth43.plus(readablePeriod48);
        int int50 = yearMonth11.compareTo((org.joda.time.ReadablePartial) yearMonth49);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0097-10" + "'", str14, "0097-10");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0097-10" + "'", str15, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 12 + "'", int34 == 12);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Oct" + "'", str37, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addToCopy((int) (short) 1);
        java.util.Locale locale10 = null;
        java.lang.String str11 = property4.getAsText(locale10);
        int int12 = property4.getMinimumValue();
        java.lang.String str13 = property4.getAsText();
        java.lang.String str14 = property4.toString();
        java.util.Locale locale15 = null;
        java.lang.String str16 = property4.getAsShortText(locale15);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "October" + "'", str11, "October");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "October" + "'", str13, "October");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[monthOfYear]" + "'", str14, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Oct" + "'", str16, "Oct");
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property15.getFieldType();
        org.joda.time.DurationField durationField18 = property15.getDurationField();
        org.joda.time.DateTimeField dateTimeField19 = property15.getField();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(9, (int) (byte) 1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth.Property property7 = yearMonth6.monthOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        int int14 = yearMonth11.size();
        org.joda.time.YearMonth yearMonth16 = yearMonth11.plusMonths((int) (byte) 10);
        int int17 = property7.compareTo((org.joda.time.ReadablePartial) yearMonth11);
        org.joda.time.YearMonth yearMonth18 = property7.getYearMonth();
        java.lang.String str19 = property7.getAsText();
        org.joda.time.YearMonth yearMonth20 = property7.getYearMonth();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth.Property property25 = yearMonth24.monthOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth yearMonth31 = yearMonth29.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        int int38 = yearMonth35.size();
        boolean boolean39 = yearMonth31.isAfter((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth.Property property44 = yearMonth43.monthOfYear();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology47);
        org.joda.time.YearMonth yearMonth50 = yearMonth48.minusYears((int) (short) 0);
        int int51 = yearMonth48.size();
        org.joda.time.YearMonth yearMonth53 = yearMonth48.plusMonths((int) (byte) 10);
        int int54 = property44.compareTo((org.joda.time.ReadablePartial) yearMonth48);
        org.joda.time.Chronology chronology55 = yearMonth48.getChronology();
        org.joda.time.YearMonth yearMonth56 = yearMonth35.withChronologyRetainFields(chronology55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.YearMonth yearMonth59 = yearMonth56.withPeriodAdded(readablePeriod57, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        int int61 = yearMonth59.indexOf(dateTimeFieldType60);
        boolean boolean62 = yearMonth24.isEqual((org.joda.time.ReadablePartial) yearMonth59);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth.Property property67 = yearMonth66.monthOfYear();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.YearMonth yearMonth71 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology70);
        org.joda.time.YearMonth yearMonth73 = yearMonth71.minusYears((int) (short) 0);
        int int74 = yearMonth71.size();
        org.joda.time.YearMonth yearMonth76 = yearMonth71.plusMonths((int) (byte) 10);
        int int77 = property67.compareTo((org.joda.time.ReadablePartial) yearMonth71);
        boolean boolean78 = yearMonth24.isEqual((org.joda.time.ReadablePartial) yearMonth71);
        boolean boolean79 = yearMonth20.isAfter((org.joda.time.ReadablePartial) yearMonth24);
        org.joda.time.YearMonth yearMonth81 = yearMonth20.plusMonths(2);
        org.joda.time.YearMonth yearMonth83 = yearMonth20.minusYears(3);
        boolean boolean84 = yearMonth2.isEqual((org.joda.time.ReadablePartial) yearMonth20);
        int int85 = yearMonth20.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = null;
        java.lang.String str87 = yearMonth20.toString(dateTimeFormatter86);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "October" + "'", str19, "October");
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(yearMonth76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(yearMonth81);
        org.junit.Assert.assertNotNull(yearMonth83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "0097-10" + "'", str87, "0097-10");
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        boolean boolean24 = yearMonth16.isAfter((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        int int39 = property29.compareTo((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = yearMonth33.getChronology();
        org.joda.time.YearMonth yearMonth41 = yearMonth20.withChronologyRetainFields(chronology40);
        int int42 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        int int48 = property47.getMaximumValue();
        java.util.Locale locale49 = null;
        int int50 = property47.getMaximumShortTextLength(locale49);
        java.util.Locale locale51 = null;
        int int52 = property47.getMaximumTextLength(locale51);
        org.joda.time.DurationField durationField53 = property47.getRangeDurationField();
        java.util.Locale locale54 = null;
        java.lang.String str55 = property47.getAsShortText(locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property47.getFieldType();
        org.joda.time.YearMonth yearMonth58 = yearMonth3.withField(dateTimeFieldType56, 11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = yearMonth58.getFieldTypes();
        org.joda.time.YearMonth yearMonth60 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology63);
        org.joda.time.YearMonth yearMonth66 = yearMonth64.minusYears((int) (short) 0);
        org.joda.time.Interval interval67 = yearMonth64.toInterval();
        org.joda.time.Chronology chronology68 = yearMonth64.getChronology();
        org.joda.time.YearMonth yearMonth69 = yearMonth60.withChronologyRetainFields(chronology68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.YearMonth yearMonth73 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology72);
        org.joda.time.YearMonth.Property property74 = yearMonth73.monthOfYear();
        int int75 = property74.getMaximumValue();
        java.util.Locale locale76 = null;
        int int77 = property74.getMaximumShortTextLength(locale76);
        java.util.Locale locale78 = null;
        int int79 = property74.getMaximumTextLength(locale78);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.YearMonth yearMonth83 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology82);
        org.joda.time.YearMonth.Property property84 = yearMonth83.monthOfYear();
        int int85 = property84.getMaximumValue();
        java.util.Locale locale86 = null;
        int int87 = property84.getMaximumShortTextLength(locale86);
        java.util.Locale locale88 = null;
        int int89 = property84.getMaximumTextLength(locale88);
        java.lang.String str90 = property84.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = property84.getFieldType();
        boolean boolean92 = property74.equals((java.lang.Object) property84);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = property84.getFieldType();
        int int94 = yearMonth69.get(dateTimeFieldType93);
        org.joda.time.YearMonth.Property property95 = yearMonth58.property(dateTimeFieldType93);
        org.joda.time.YearMonth yearMonth97 = yearMonth58.withYear(8);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 12 + "'", int48 == 12);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Oct" + "'", str55, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 12 + "'", int75 == 12);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 12 + "'", int85 == 12);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 9 + "'", int89 == 9);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Oct" + "'", str90, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 11 + "'", int94 == 11);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(yearMonth97);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonth8.getFieldTypes();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        boolean boolean40 = yearMonth32.isAfter((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth yearMonth51 = yearMonth49.minusYears((int) (short) 0);
        int int52 = yearMonth49.size();
        org.joda.time.YearMonth yearMonth54 = yearMonth49.plusMonths((int) (byte) 10);
        int int55 = property45.compareTo((org.joda.time.ReadablePartial) yearMonth49);
        org.joda.time.Chronology chronology56 = yearMonth49.getChronology();
        org.joda.time.YearMonth yearMonth57 = yearMonth36.withChronologyRetainFields(chronology56);
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((long) (short) 1, chronology56);
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((java.lang.Object) yearMonth8, chronology56);
        org.joda.time.YearMonth yearMonth61 = yearMonth8.plusYears((int) (short) 1);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.YearMonth yearMonth65 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology64);
        org.joda.time.YearMonth yearMonth67 = yearMonth65.minusYears((int) (short) 0);
        int int68 = yearMonth65.size();
        org.joda.time.YearMonth yearMonth70 = yearMonth65.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = null;
        int int72 = yearMonth65.indexOf(dateTimeFieldType71);
        int int73 = yearMonth65.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = yearMonth65.getFieldType(1);
        org.joda.time.YearMonth.Property property76 = yearMonth8.property(dateTimeFieldType75);
        java.lang.String str77 = yearMonth8.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 97 + "'", int73 == 97);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "0097-10" + "'", str77, "0097-10");
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.YearMonth.Property property36 = yearMonth3.property(dateTimeFieldType34);
        org.joda.time.Chronology chronology37 = yearMonth3.getChronology();
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth(chronology37);
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth yearMonth45 = yearMonth43.minusYears((int) (short) 0);
        org.joda.time.Interval interval46 = yearMonth43.toInterval();
        org.joda.time.Chronology chronology47 = yearMonth43.getChronology();
        org.joda.time.YearMonth yearMonth48 = yearMonth39.withChronologyRetainFields(chronology47);
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth(chronology47);
        org.joda.time.YearMonth yearMonth50 = yearMonth38.withChronologyRetainFields(chronology47);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        int int61 = yearMonth54.indexOf(dateTimeFieldType60);
        org.joda.time.YearMonth yearMonth63 = yearMonth54.plusMonths((-1));
        org.joda.time.YearMonth yearMonth65 = yearMonth54.plusMonths((-1));
        org.joda.time.YearMonth.Property property66 = yearMonth65.monthOfYear();
        int int67 = property66.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = property66.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property66.getFieldType();
        org.joda.time.YearMonth.Property property70 = yearMonth38.property(dateTimeFieldType69);
        int int71 = yearMonth38.size();
        org.joda.time.Interval interval72 = yearMonth38.toInterval();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(interval72);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        org.joda.time.YearMonth yearMonth41 = yearMonth36.plusMonths((int) (byte) 10);
        int int42 = property32.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        boolean boolean49 = yearMonth36.isAfter((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = yearMonth36.indexOf(dateTimeFieldType50);
        int int52 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.YearMonth yearMonth54 = yearMonth36.minusYears(11);
        org.joda.time.YearMonth yearMonth56 = yearMonth36.withMonthOfYear(2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType58 = yearMonth56.getFieldType(2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(yearMonth56);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        int int10 = property4.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth3.getFieldTypes();
        int[] intArray10 = yearMonth3.getValues();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        int int25 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.Chronology chronology26 = yearMonth19.getChronology();
        org.joda.time.YearMonth yearMonth27 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth28 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3, chronology26);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth.Property property34 = yearMonth33.monthOfYear();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth yearMonth40 = yearMonth38.minusYears((int) (short) 0);
        int int41 = yearMonth38.size();
        org.joda.time.YearMonth yearMonth43 = yearMonth38.plusMonths((int) (byte) 10);
        int int44 = property34.compareTo((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Interval interval46 = yearMonth38.toInterval(dateTimeZone45);
        org.joda.time.YearMonth yearMonth48 = yearMonth38.minusYears((int) (short) 0);
        boolean boolean49 = yearMonth29.isAfter((org.joda.time.ReadablePartial) yearMonth48);
        org.joda.time.YearMonth yearMonth51 = yearMonth48.plusYears(12);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.YearMonth yearMonth54 = yearMonth48.withPeriodAdded(readablePeriod52, 0);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[97, 10]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(yearMonth54);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        java.lang.String str9 = property4.getAsText();
        org.joda.time.YearMonth yearMonth11 = property4.setCopy(12);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonth yearMonth13 = yearMonth11.plus(readablePeriod12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        org.joda.time.YearMonth yearMonth22 = yearMonth17.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = yearMonth17.indexOf(dateTimeFieldType23);
        org.joda.time.YearMonth yearMonth26 = yearMonth17.plusMonths((-1));
        org.joda.time.YearMonth yearMonth28 = yearMonth17.plusMonths((-1));
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property29.getFieldType();
        int int32 = property29.getMaximumValueOverall();
        java.util.Locale locale33 = null;
        java.lang.String str34 = property29.getAsShortText(locale33);
        int int35 = property29.getMinimumValueOverall();
        org.joda.time.YearMonth yearMonth37 = property29.addToCopy((int) (byte) 100);
        java.lang.String str38 = property29.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property29.getFieldType();
        org.joda.time.YearMonth.Property property40 = yearMonth11.property(dateTimeFieldType39);
        org.joda.time.Interval interval41 = yearMonth11.toInterval();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "October" + "'", str9, "October");
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Sep" + "'", str34, "Sep");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "9" + "'", str38, "9");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(interval41);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth.Property property12 = yearMonth11.monthOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        int int22 = property12.compareTo((org.joda.time.ReadablePartial) yearMonth16);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = yearMonth16.toInterval(dateTimeZone23);
        org.joda.time.YearMonth yearMonth26 = yearMonth16.minusYears((int) (short) 0);
        java.lang.String str27 = yearMonth16.toString();
        org.joda.time.YearMonth yearMonth29 = yearMonth16.withMonthOfYear(11);
        boolean boolean30 = property4.equals((java.lang.Object) 11);
        int int31 = property4.getMinimumValueOverall();
        org.joda.time.DurationField durationField32 = property4.getRangeDurationField();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        org.joda.time.YearMonth yearMonth41 = yearMonth36.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        int int43 = yearMonth36.indexOf(dateTimeFieldType42);
        int int44 = yearMonth36.getYear();
        boolean boolean45 = property4.equals((java.lang.Object) yearMonth36);
        org.joda.time.DurationFieldType durationFieldType46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth48 = yearMonth36.withFieldAdded(durationFieldType46, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0097-10" + "'", str27, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 97 + "'", int44 == 97);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.joda.time.YearMonth yearMonth0 = org.joda.time.YearMonth.now();
        org.joda.time.YearMonth yearMonth2 = yearMonth0.plusMonths((int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = yearMonth0.getFields();
        int int4 = yearMonth0.getYear();
        org.junit.Assert.assertNotNull(yearMonth0);
        org.junit.Assert.assertNotNull(yearMonth2);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2020 + "'", int4 == 2020);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth8.withYear((int) (byte) 10);
        org.joda.time.YearMonth yearMonth28 = yearMonth8.minusYears(12);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth yearMonth40 = yearMonth38.minusYears((int) (short) 0);
        int int41 = yearMonth38.size();
        boolean boolean42 = yearMonth34.isAfter((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Interval interval43 = yearMonth34.toInterval();
        org.joda.time.YearMonth.Property property44 = yearMonth34.year();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.YearMonth yearMonth46 = yearMonth34.minus(readablePeriod45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.year();
        int int48 = yearMonth28.compareTo((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.YearMonth yearMonth51 = yearMonth46.withPeriodAdded(readablePeriod49, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType53 = yearMonth46.getFieldType(98);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 98");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(yearMonth51);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.Interval interval26 = yearMonth18.toInterval();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        int int37 = yearMonth18.get(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth5.property(dateTimeFieldType36);
        org.joda.time.DurationFieldType durationFieldType39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth41 = yearMonth5.withFieldAdded(durationFieldType39, 98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        int int10 = property4.getMinimumValue();
        java.lang.String str11 = property4.getName();
        org.joda.time.DurationField durationField12 = property4.getDurationField();
        int int13 = property4.getMaximumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "monthOfYear" + "'", str11, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.plusYears((int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = yearMonth32.getFieldTypes();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth.Property property38 = yearMonth37.monthOfYear();
        int int39 = property38.getMaximumValue();
        java.util.Locale locale40 = null;
        int int41 = property38.getMaximumShortTextLength(locale40);
        java.util.Locale locale42 = null;
        int int43 = property38.getMaximumTextLength(locale42);
        org.joda.time.DurationField durationField44 = property38.getRangeDurationField();
        java.util.Locale locale45 = null;
        int int46 = property38.getMaximumShortTextLength(locale45);
        org.joda.time.YearMonth yearMonth48 = property38.addToCopy(100);
        boolean boolean49 = yearMonth32.isAfter((org.joda.time.ReadablePartial) yearMonth48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = yearMonth32.getFieldType((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.YearMonth yearMonth53 = yearMonth32.minus(readablePeriod52);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(yearMonth53);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        org.joda.time.YearMonth yearMonth13 = property4.addToCopy(3);
        java.lang.String str14 = property4.getAsString();
        java.lang.String str15 = property4.getAsShortText();
        org.joda.time.DurationField durationField16 = property4.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property4.getFieldType();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Oct" + "'", str15, "Oct");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        org.joda.time.DurationField durationField16 = property4.getDurationField();
        org.joda.time.DateTimeField dateTimeField17 = property4.getField();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property4.getAsText(locale18);
        java.util.Locale locale20 = null;
        java.lang.String str21 = property4.getAsText(locale20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((java.lang.Object) property4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.YearMonth$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "October" + "'", str19, "October");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "October" + "'", str21, "October");
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        org.joda.time.YearMonth yearMonth41 = yearMonth36.plusMonths((int) (byte) 10);
        int int42 = property32.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        boolean boolean49 = yearMonth36.isAfter((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = yearMonth36.indexOf(dateTimeFieldType50);
        int int52 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.YearMonth yearMonth54 = yearMonth36.minusYears(11);
        org.joda.time.YearMonth.Property property55 = yearMonth36.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property55.getFieldType();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = yearMonth18.toString(dateTimeFormatter22);
        org.joda.time.YearMonth.Property property24 = yearMonth18.year();
        org.joda.time.YearMonth yearMonth26 = property24.setCopy(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = yearMonth26.toString(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0097-10" + "'", str23, "0097-10");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0000-10" + "'", str28, "0000-10");
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.lang.String str8 = property4.getAsString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        boolean boolean22 = yearMonth14.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth.Property property27 = yearMonth26.monthOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        org.joda.time.YearMonth yearMonth36 = yearMonth31.plusMonths((int) (byte) 10);
        int int37 = property27.compareTo((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology38 = yearMonth31.getChronology();
        org.joda.time.YearMonth yearMonth39 = yearMonth18.withChronologyRetainFields(chronology38);
        org.joda.time.YearMonth yearMonth41 = yearMonth39.plusYears((int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = yearMonth41.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Interval interval44 = yearMonth41.toInterval(dateTimeZone43);
        int int45 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.YearMonth yearMonth47 = property4.addWrapFieldToCopy((int) '#');
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10" + "'", str8, "10");
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(yearMonth47);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        boolean boolean14 = yearMonth12.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.YearMonth yearMonth30 = property19.getYearMonth();
        java.lang.String str31 = property19.getAsText();
        org.joda.time.YearMonth yearMonth32 = property19.getYearMonth();
        boolean boolean33 = yearMonth12.isBefore((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.YearMonth yearMonth35 = yearMonth12.minusYears(3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = yearMonth35.getFieldTypes();
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withYear((int) ' ');
        org.joda.time.YearMonth.Property property39 = yearMonth38.year();
        int int40 = yearMonth38.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth42 = yearMonth38.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "October" + "'", str31, "October");
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.YearMonth.Property property5 = yearMonth3.year();
        int int6 = property5.get();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth yearMonth9 = yearMonth7.minusYears((int) (short) 0);
        int int10 = yearMonth7.size();
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        boolean boolean27 = yearMonth19.isAfter((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Interval interval28 = yearMonth19.toInterval();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = yearMonth32.indexOf(dateTimeFieldType38);
        org.joda.time.Interval interval40 = yearMonth32.toInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        int int46 = property45.getMaximumValue();
        java.lang.String str47 = property45.getAsShortText();
        java.util.Locale locale48 = null;
        java.lang.String str49 = property45.getAsShortText(locale48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property45.getFieldType();
        int int51 = yearMonth32.get(dateTimeFieldType50);
        org.joda.time.YearMonth.Property property52 = yearMonth19.property(dateTimeFieldType50);
        boolean boolean53 = yearMonth13.isSupported(dateTimeFieldType50);
        org.joda.time.YearMonth yearMonth55 = yearMonth7.withField(dateTimeFieldType50, (int) (short) 10);
        boolean boolean56 = yearMonth3.isBefore((org.joda.time.ReadablePartial) yearMonth7);
        java.util.Locale locale58 = null;
        java.lang.String str59 = yearMonth7.toString("1970-01", locale58);
        org.joda.time.YearMonth.Property property60 = yearMonth7.monthOfYear();
        int int61 = property60.getMaximumValueOverall();
        java.util.Locale locale62 = null;
        int int63 = property60.getMaximumTextLength(locale62);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Oct" + "'", str47, "Oct");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Oct" + "'", str49, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01" + "'", str59, "1970-01");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 12 + "'", int61 == 12);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.lang.String str8 = property4.getName();
        org.joda.time.YearMonth yearMonth10 = property4.addWrapFieldToCopy(12);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.YearMonth yearMonth13 = yearMonth10.withPeriodAdded(readablePeriod11, 3);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        int int15 = property14.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology2 = yearMonth1.getChronology();
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((long) 3, chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth3.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = yearMonth3.toString(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01" + "'", str6, "1970-01");
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        int[] intArray4 = yearMonth3.getValues();
        org.joda.time.YearMonth yearMonth6 = yearMonth3.withYear(11);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        boolean boolean21 = yearMonth13.isAfter((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth.Property property26 = yearMonth25.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        int int36 = property26.compareTo((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.Chronology chronology37 = yearMonth30.getChronology();
        org.joda.time.YearMonth yearMonth38 = yearMonth17.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((long) (short) 1, chronology37);
        org.joda.time.YearMonth yearMonth40 = org.joda.time.YearMonth.now(chronology37);
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3, chronology37);
        org.joda.time.YearMonth yearMonth42 = org.joda.time.YearMonth.now(chronology37);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 10]");
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth42);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.YearMonth yearMonth33 = org.joda.time.YearMonth.now(chronology30);
        org.joda.time.Chronology chronology34 = yearMonth33.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField36 = yearMonth33.getField(98);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 98");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(chronology34);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth9.withYear((int) (byte) 1);
        int int33 = yearMonth32.getMonthOfYear();
        org.joda.time.YearMonth.Property property34 = yearMonth32.year();
        int int35 = property34.getMinimumValue();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-292275054) + "'", int35 == (-292275054));
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.YearMonth yearMonth3 = yearMonth1.plus(readablePeriod2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField5 = yearMonth3.getField((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth3);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        org.joda.time.YearMonth yearMonth29 = yearMonth3.minusYears(100);
        java.lang.Object obj30 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        int int51 = property41.compareTo((org.joda.time.ReadablePartial) yearMonth45);
        org.joda.time.Chronology chronology52 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth53 = org.joda.time.YearMonth.now(chronology52);
        org.joda.time.YearMonth yearMonth54 = yearMonth36.withChronologyRetainFields(chronology52);
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth(obj30, chronology52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((java.lang.Object) 100, chronology52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(yearMonth54);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        org.joda.time.YearMonth yearMonth13 = property4.addToCopy(3);
        java.lang.String str14 = property4.getAsString();
        org.joda.time.YearMonth yearMonth16 = property4.addToCopy(0);
        org.joda.time.YearMonth yearMonth18 = property4.addWrapFieldToCopy((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((java.lang.Object) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Byte");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth18);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        java.lang.String str17 = property15.toString();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[monthOfYear]" + "'", str17, "Property[monthOfYear]");
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        java.lang.String str6 = yearMonth3.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        org.joda.time.Interval interval13 = yearMonth10.toInterval();
        org.joda.time.Chronology chronology14 = yearMonth10.getChronology();
        boolean boolean15 = yearMonth3.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth17 = yearMonth3.minus(readablePeriod16);
        java.lang.Object obj18 = null;
        boolean boolean19 = yearMonth3.equals(obj18);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0097-10" + "'", str6, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth yearMonth9 = yearMonth7.minusYears((int) (short) 0);
        int int10 = yearMonth7.size();
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        boolean boolean27 = yearMonth19.isAfter((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Interval interval28 = yearMonth19.toInterval();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = yearMonth32.indexOf(dateTimeFieldType38);
        org.joda.time.Interval interval40 = yearMonth32.toInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        int int46 = property45.getMaximumValue();
        java.lang.String str47 = property45.getAsShortText();
        java.util.Locale locale48 = null;
        java.lang.String str49 = property45.getAsShortText(locale48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property45.getFieldType();
        int int51 = yearMonth32.get(dateTimeFieldType50);
        org.joda.time.YearMonth.Property property52 = yearMonth19.property(dateTimeFieldType50);
        boolean boolean53 = yearMonth13.isSupported(dateTimeFieldType50);
        org.joda.time.YearMonth yearMonth55 = yearMonth7.withField(dateTimeFieldType50, (int) (short) 10);
        boolean boolean56 = yearMonth3.isBefore((org.joda.time.ReadablePartial) yearMonth7);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.Interval interval58 = yearMonth3.toInterval(dateTimeZone57);
        org.joda.time.YearMonth yearMonth60 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Interval interval62 = yearMonth60.toInterval(dateTimeZone61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = yearMonth60.getFieldType((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth66 = yearMonth3.withField(dateTimeFieldType64, 1980);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1980 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Oct" + "'", str47, "Oct");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Oct" + "'", str49, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property4.getFieldType();
        java.lang.String str9 = property4.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[monthOfYear]" + "'", str9, "Property[monthOfYear]");
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.lang.String str11 = property4.toString();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property4.getAsText(locale12);
        java.lang.String str14 = property4.getName();
        java.lang.String str15 = property4.getAsShortText();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "October" + "'", str13, "October");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "monthOfYear" + "'", str14, "monthOfYear");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Oct" + "'", str15, "Oct");
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        org.joda.time.YearMonth yearMonth13 = property4.addToCopy(3);
        java.lang.String str14 = property4.getAsString();
        org.joda.time.YearMonth yearMonth16 = property4.addToCopy(0);
        int int17 = property4.get();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        int int7 = yearMonth4.size();
        org.joda.time.YearMonth yearMonth9 = yearMonth4.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = yearMonth4.indexOf(dateTimeFieldType10);
        org.joda.time.YearMonth yearMonth13 = yearMonth4.plusMonths((-1));
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.YearMonth yearMonth16 = yearMonth13.withPeriodAdded(readablePeriod14, 3);
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology18 = yearMonth17.getChronology();
        org.joda.time.YearMonth yearMonth19 = yearMonth13.withChronologyRetainFields(chronology18);
        org.joda.time.Chronology chronology20 = yearMonth13.getChronology();
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((long) (byte) 0, chronology20);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        int int17 = property15.getMaximumValueOverall();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property15.getAsText(locale18);
        org.joda.time.DurationField durationField20 = property15.getRangeDurationField();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "September" + "'", str19, "September");
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        int int47 = property46.getMinimumValue();
        java.util.Locale locale48 = null;
        int int49 = property46.getMaximumShortTextLength(locale48);
        org.joda.time.YearMonth yearMonth51 = property46.addToCopy((int) (short) 1);
        boolean boolean52 = yearMonth3.equals((java.lang.Object) yearMonth51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology61);
        org.joda.time.YearMonth yearMonth64 = yearMonth62.minusYears((int) (short) 0);
        int int65 = yearMonth62.size();
        boolean boolean66 = yearMonth58.isAfter((org.joda.time.ReadablePartial) yearMonth62);
        org.joda.time.Interval interval67 = yearMonth58.toInterval();
        org.joda.time.YearMonth.Property property68 = yearMonth58.year();
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.YearMonth yearMonth70 = yearMonth58.minus(readablePeriod69);
        boolean boolean71 = yearMonth51.isEqual((org.joda.time.ReadablePartial) yearMonth70);
        org.joda.time.YearMonth yearMonth72 = new org.joda.time.YearMonth((java.lang.Object) yearMonth70);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth(chronology29);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.plusMonths((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = yearMonth31.toString(dateTimeFormatter34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField37 = yearMonth31.getField((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2020-11" + "'", str35, "2020-11");
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        java.lang.String str9 = property4.getAsString();
        org.joda.time.YearMonth yearMonth10 = property4.getYearMonth();
        java.util.Locale locale11 = null;
        int int12 = property4.getMaximumTextLength(locale11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property4.getFieldType();
        java.util.Locale locale15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth16 = property4.setCopy("0097-12", locale15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0097-12\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "10" + "'", str9, "10");
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
    }
}


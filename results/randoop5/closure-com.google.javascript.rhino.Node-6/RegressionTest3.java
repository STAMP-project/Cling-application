import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        int int7 = node1.getLineno();
        node1.setSourceFileForTesting("STRING ");
        int int10 = node1.getLength();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        boolean boolean7 = node1.isStringKey();
        boolean boolean8 = node1.isThrow();
        boolean boolean9 = node1.isDo();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        boolean boolean6 = node1.isAssign();
        boolean boolean7 = node1.isArrayLit();
        com.google.javascript.rhino.Node node8 = node1.cloneTree();
        boolean boolean9 = node8.isBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        node39.putIntProp((int) (short) 10, 16);
        boolean boolean43 = node39.isCase();
        boolean boolean44 = node39.isOnlyModifiesThisCall();
        boolean boolean45 = node39.isOptionalArg();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isCall();
        boolean boolean19 = node1.isEquivalentTo(node15);
        node1.setIsSyntheticBlock(true);
        node1.setVarArgs(false);
        node1.setCharno(0);
        node1.setSourceEncodedPosition((int) (byte) 1);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        node29.setSourceEncodedPosition(4095);
        boolean boolean32 = node29.isNot();
        java.lang.String str36 = node29.toString(true, true, false);
        boolean boolean37 = node1.isEquivalentTo(node29);
        boolean boolean38 = node29.isHook();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "STRING  0" + "'", str36, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        boolean boolean65 = node42.isScript();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(0.0d);
        node67.setIsSyntheticBlock(true);
        node42.addChildrenToFront(node67);
        boolean boolean71 = node42.isFalse();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder72 = node42.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("");
        boolean boolean75 = node74.isOnlyModifiesThisCall();
        boolean boolean76 = node74.isEmpty();
        boolean boolean77 = node74.isCatch();
        java.lang.String str78 = node74.getSourceFileName();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node79 = node42.getChildBefore(node74);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str78);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isReturn();
        boolean boolean6 = node2.isNE();
        boolean boolean7 = node2.isAssign();
        boolean boolean8 = node2.isArrayLit();
        com.google.javascript.rhino.Node node9 = node2.cloneTree();
        com.google.javascript.rhino.Node node10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(54, node9, node10, (int) (short) 10, 49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        boolean boolean36 = node28.isOptionalArg();
        node28.setCharno(0);
        boolean boolean39 = node28.isStringKey();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setAllFlags();
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        node4.setType(35);
        boolean boolean77 = node4.isFor();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isSetterDef();
        com.google.javascript.rhino.Node node5 = node1.getAncestor((int) (short) 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        com.google.javascript.rhino.Node node10 = node7.removeFirstChild();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node15.getStaticSourceFile();
        boolean boolean20 = node15.isAssignAdd();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        node22.setSourceEncodedPosition(4095);
        boolean boolean25 = node22.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node22.getStaticSourceFile();
        com.google.javascript.rhino.Node node27 = node15.copyInformationFromForTree(node22);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isArrayLit();
        com.google.javascript.rhino.Node node33 = node15.useSourceInfoFrom(node29);
        boolean boolean34 = node33.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isArrayLit();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        boolean boolean42 = node41.isOnlyModifiesThisCall();
        boolean boolean43 = node41.isEmpty();
        boolean boolean44 = node41.isReturn();
        boolean boolean45 = node41.isNE();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(4095, node33, node36, node41, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(36, node48, node50, node57);
        node7.putProp(12, (java.lang.Object) node50);
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildrenToBack(node50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node57);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node19.isUnscopedQualifiedName();
        boolean boolean21 = node19.isWhile();
        boolean boolean22 = node19.isComma();
        boolean boolean23 = node19.isScript();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        boolean boolean30 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node25.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node43 = node25.useSourceInfoFrom(node39);
        boolean boolean44 = node43.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isReturn();
        boolean boolean55 = node51.isNE();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node43, node46, node51, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(36, node58, node60, node67);
        boolean boolean69 = node67.isTypeOf();
        boolean boolean70 = node67.isGetterDef();
        boolean boolean71 = node67.isFor();
        boolean boolean72 = node1.isEquivalentToTyped(node67);
        java.lang.Object obj74 = node1.getProp(0);
        boolean boolean75 = node1.isSyntheticBlock();
        node1.setLength(35);
        node1.setLength(30);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.Node node5 = node1.getLastSibling();
        int int6 = node1.getType();
        boolean boolean7 = node1.isFalse();
        int int8 = node1.getSideEffectFlags();
        boolean boolean9 = node1.isVar();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable10 = node1.children();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 40 + "'", int6 == 40);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeIterable10);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node4.isAnd();
        node4.setLength(4095);
        node4.setLength(54);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean84 = node83.isTypeOf();
        boolean boolean85 = node83.isInc();
        com.google.javascript.rhino.Node node86 = node4.useSourceInfoIfMissingFrom(node83);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags87 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean88 = sideEffectFlags87.areAllFlagsSet();
        sideEffectFlags87.setMutatesThis();
        sideEffectFlags87.setAllFlags();
        sideEffectFlags87.setThrows();
        sideEffectFlags87.setReturnsTainted();
        sideEffectFlags87.setMutatesThis();
        sideEffectFlags87.setMutatesArguments();
        // The following exception was thrown during execution in test generation
        try {
            node86.setSideEffectFlags(sideEffectFlags87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NEG");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        int int8 = node2.getLineno();
        node2.setSourceFileForTesting("STRING ");
        boolean boolean11 = node2.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        boolean boolean26 = node20.isFromExterns();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        node28.setSourceEncodedPosition(4095);
        boolean boolean31 = node28.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = node28.getStaticSourceFile();
        boolean boolean33 = node28.isAssignAdd();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        com.google.javascript.rhino.Node node40 = node28.copyInformationFromForTree(node35);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        boolean boolean43 = node42.isOnlyModifiesThisCall();
        boolean boolean44 = node42.isEmpty();
        boolean boolean45 = node42.isArrayLit();
        com.google.javascript.rhino.Node node46 = node28.useSourceInfoFrom(node42);
        boolean boolean47 = node42.hasChildren();
        boolean boolean48 = node42.isNumber();
        boolean boolean49 = node42.isVarArgs();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node55 = node54.cloneTree();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(50, node2, node20, node42, node55, 32, 29);
        boolean boolean59 = node42.isGetProp();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(staticSourceFile32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNew();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node10 = node6.getAncestor((int) (short) 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        boolean boolean13 = node12.isOnlyModifiesThisCall();
        boolean boolean14 = node12.isEmpty();
        com.google.javascript.rhino.Node node15 = node12.removeFirstChild();
        boolean boolean16 = node12.isIf();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.Node node22 = node12.srcrefTree(node18);
        boolean boolean23 = node12.isContinue();
        com.google.javascript.rhino.Node node24 = node6.srcrefTree(node12);
        boolean boolean25 = node1.isEquivalentTo(node24);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable26 = node1.children();
        com.google.javascript.rhino.InputId inputId27 = node1.getInputId();
        boolean boolean28 = node1.wasEmptyNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeIterable26);
        org.junit.Assert.assertNull(inputId27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        boolean boolean14 = node1.isNE();
        boolean boolean15 = node1.isThrow();
        boolean boolean16 = node1.wasEmptyNode();
        boolean boolean17 = node1.isDefaultCase();
        node1.removeProp(49);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        boolean boolean25 = node21.isBreak();
        boolean boolean26 = node21.isTypeOf();
        boolean boolean27 = node21.isDec();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        node29.setSourceEncodedPosition(4095);
        boolean boolean32 = node29.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = node29.getStaticSourceFile();
        boolean boolean34 = node29.isAssignAdd();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        node36.setSourceEncodedPosition(4095);
        boolean boolean39 = node36.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = node36.getStaticSourceFile();
        com.google.javascript.rhino.Node node41 = node29.copyInformationFromForTree(node36);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        boolean boolean44 = node43.isOnlyModifiesThisCall();
        boolean boolean45 = node43.isEmpty();
        boolean boolean46 = node43.isArrayLit();
        com.google.javascript.rhino.Node node47 = node29.useSourceInfoFrom(node43);
        boolean boolean48 = node47.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node49 = node21.useSourceInfoFromForTree(node47);
        boolean boolean50 = node49.isStringKey();
        boolean boolean51 = node49.isOptionalArg();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node53.getStaticSourceFile();
        boolean boolean58 = node53.isAssignAdd();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        boolean boolean63 = node60.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = node60.getStaticSourceFile();
        com.google.javascript.rhino.Node node65 = node53.copyInformationFromForTree(node60);
        com.google.javascript.rhino.Node node66 = node60.removeFirstChild();
        boolean boolean67 = node60.isAnd();
        node60.putProp(46, (java.lang.Object) 45);
        boolean boolean71 = node60.isNew();
        // The following exception was thrown during execution in test generation
        try {
            node1.replaceChildAfter(node49, node60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(staticSourceFile33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(staticSourceFile40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(staticSourceFile64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        com.google.javascript.rhino.Node node5 = node2.removeFirstChild();
        boolean boolean6 = node2.isIf();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.Node node12 = node2.srcrefTree(node8);
        boolean boolean13 = node12.isFromExterns();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        boolean boolean22 = node17.isAssignAdd();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node29 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node35 = node17.useSourceInfoFrom(node31);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] { node17 };
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(32, nodeArray36);
        int int39 = node37.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        boolean boolean42 = node41.isOnlyModifiesThisCall();
        boolean boolean43 = node41.isEmpty();
        boolean boolean44 = node41.isReturn();
        boolean boolean45 = node41.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        node47.setSourceEncodedPosition(4095);
        boolean boolean50 = node47.isNot();
        boolean boolean51 = node47.isBreak();
        boolean boolean52 = node47.isIn();
        com.google.javascript.rhino.Node node53 = node41.useSourceInfoIfMissingFromForTree(node47);
        com.google.javascript.rhino.Node node54 = node37.useSourceInfoFrom(node47);
        boolean boolean55 = node47.isNE();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        boolean boolean58 = node57.isOnlyModifiesThisCall();
        boolean boolean59 = node57.isEmpty();
        boolean boolean60 = node57.isReturn();
        boolean boolean61 = node57.isRegExp();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(52, node47, node57);
        boolean boolean63 = node57.isExprResult();
        boolean boolean64 = node57.isSwitch();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(50, node12, node57, (int) 'a', 48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: second new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        node7.setSourceEncodedPositionForTree(50);
        boolean boolean13 = node7.isNoSideEffectsCall();
        com.google.javascript.rhino.InputId inputId14 = null;
        node7.setInputId(inputId14);
        boolean boolean16 = node7.isFor();
        java.util.Set<java.lang.String> strSet17 = node7.getDirectives();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strSet17);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        boolean boolean11 = node10.isIf();
        boolean boolean12 = node10.isArrayLit();
        boolean boolean13 = node10.isSyntheticBlock();
        boolean boolean14 = node10.isContinue();
        boolean boolean15 = node10.isAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        java.lang.String str47 = node38.toString();
        node38.setSourceEncodedPositionForTree(31);
        boolean boolean50 = node38.isStringKey();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "STRING  0" + "'", str47, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        java.lang.String str16 = node8.getSourceFileName();
        int int17 = node8.getLineno();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        boolean boolean20 = node19.isOnlyModifiesThisCall();
        boolean boolean21 = node19.isEmpty();
        boolean boolean22 = node19.isReturn();
        boolean boolean23 = node19.isNE();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        node28.setSourceEncodedPosition(4095);
        boolean boolean31 = node28.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = node28.getStaticSourceFile();
        boolean boolean33 = node28.isAssignAdd();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        com.google.javascript.rhino.Node node40 = node28.copyInformationFromForTree(node35);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        boolean boolean43 = node42.isOnlyModifiesThisCall();
        boolean boolean44 = node42.isEmpty();
        boolean boolean45 = node42.isArrayLit();
        com.google.javascript.rhino.Node node46 = node28.useSourceInfoFrom(node42);
        boolean boolean47 = node46.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        boolean boolean55 = node54.isOnlyModifiesThisCall();
        boolean boolean56 = node54.isEmpty();
        boolean boolean57 = node54.isReturn();
        boolean boolean58 = node54.isNE();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(4095, node46, node49, node54, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node62 = node25.useSourceInfoIfMissingFrom(node61);
        node19.addChildrenToBack(node25);
        java.lang.String str64 = node25.getQualifiedName();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("");
        node66.setSourceEncodedPosition(4095);
        boolean boolean69 = node66.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile70 = node66.getStaticSourceFile();
        node66.setVarArgs(false);
        boolean boolean73 = node66.isFromExterns();
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        node66.setDirectives((java.util.Set<java.lang.String>) strSet77);
        node25.setDirectives((java.util.Set<java.lang.String>) strSet77);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet77);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(staticSourceFile32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(staticSourceFile70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(16, 30, 0);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        node5.setSourceEncodedPosition(4095);
        boolean boolean8 = node5.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node5.getStaticSourceFile();
        boolean boolean10 = node5.isAssignAdd();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        com.google.javascript.rhino.Node node17 = node5.copyInformationFromForTree(node12);
        com.google.javascript.rhino.Node node18 = node12.removeFirstChild();
        boolean boolean19 = node12.isAnd();
        boolean boolean20 = node12.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        boolean boolean23 = node22.isOnlyModifiesThisCall();
        boolean boolean24 = node22.isEmpty();
        boolean boolean25 = node22.isArrayLit();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isSetterDef();
        com.google.javascript.rhino.Node node30 = node22.srcref(node27);
        node12.addChildToFront(node22);
        com.google.javascript.rhino.Node node32 = node12.getLastChild();
        com.google.javascript.rhino.Node node33 = node3.useSourceInfoIfMissingFromForTree(node12);
        boolean boolean34 = node12.isDelProp();
        boolean boolean35 = node12.isNot();
        boolean boolean36 = node12.isLabelName();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        node6.setLineno((int) (short) 1);
        int int77 = node6.getCharno();
        boolean boolean78 = node6.isAssignAdd();
        node6.removeProp(47);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4095 + "'", int77 == 4095);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("", 12, (int) (short) -1);
        com.google.javascript.rhino.Node node79 = node72.copyInformationFromForTree(node78);
        boolean boolean80 = node79.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("");
        boolean boolean83 = node82.isOnlyModifiesThisCall();
        boolean boolean84 = node82.isEmpty();
        boolean boolean85 = node82.isArrayLit();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString("");
        boolean boolean88 = node87.isOnlyModifiesThisCall();
        boolean boolean89 = node87.isSetterDef();
        com.google.javascript.rhino.Node node90 = node82.srcref(node87);
        node90.detachChildren();
        int int92 = node90.getSourcePosition();
        com.google.javascript.rhino.Node node93 = node79.copyInformationFrom(node90);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(node93);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        boolean boolean28 = node18.isString();
        boolean boolean29 = node18.isLabel();
        boolean boolean30 = node18.isHook();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("");
        boolean boolean72 = node71.isOnlyModifiesThisCall();
        boolean boolean73 = node71.isEmpty();
        boolean boolean74 = node71.isArrayLit();
        com.google.javascript.rhino.Node node75 = node57.useSourceInfoFrom(node71);
        boolean boolean76 = node71.hasChildren();
        com.google.javascript.rhino.Node node77 = node32.copyInformationFrom(node71);
        boolean boolean78 = node32.hasChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = node32.getJSDocInfo();
        boolean boolean80 = node32.wasEmptyNode();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNull(jSDocInfo79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        node28.setLineno((int) (short) 100);
        boolean boolean31 = node28.isVar();
        node28.putIntProp(409700, (int) (short) 10);
        boolean boolean35 = node28.isContinue();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("STRING  0");
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100, node38, 54, 35);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean46 = node45.isTypeOf();
        boolean boolean47 = node45.isInc();
        com.google.javascript.rhino.Node node48 = node45.cloneTree();
        com.google.javascript.rhino.Node node49 = node38.copyInformationFrom(node48);
        boolean boolean50 = node38.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node51 = node28.useSourceInfoIfMissingFrom(node38);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        boolean boolean58 = node56.isEmpty();
        boolean boolean59 = node56.isArrayLit();
        com.google.javascript.rhino.Node node60 = node42.useSourceInfoFrom(node56);
        java.lang.String str61 = node39.checkTreeEquals(node42);
        node42.putIntProp(409700, (int) '4');
        java.lang.String str65 = node42.getString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING \n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING \n" + "'", str61, "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING \n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        boolean boolean58 = node56.isEmpty();
        boolean boolean59 = node56.isArrayLit();
        com.google.javascript.rhino.Node node60 = node42.useSourceInfoFrom(node56);
        boolean boolean61 = node60.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        boolean boolean64 = node63.isOnlyModifiesThisCall();
        boolean boolean65 = node63.isEmpty();
        boolean boolean66 = node63.isArrayLit();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        boolean boolean69 = node68.isOnlyModifiesThisCall();
        boolean boolean70 = node68.isEmpty();
        boolean boolean71 = node68.isReturn();
        boolean boolean72 = node68.isNE();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(4095, node60, node63, node68, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        node77.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(36, node75, node77, node84);
        java.lang.String str86 = node77.toString();
        com.google.javascript.rhino.Node node87 = node37.useSourceInfoFrom(node77);
        boolean boolean88 = node77.isTrue();
        // The following exception was thrown during execution in test generation
        try {
            int int90 = node77.getExistingIntProp(49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 49");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "STRING  0" + "'", str86, "STRING  0");
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(0, 51, 49);
        // The following exception was thrown during execution in test generation
        try {
            node3.setString("Node tree inequality:\nTree1:\nSTRING  [quoted: 1]\n\n\nTree2:\nNUMBER 37.0 100\n\n\nSubtree1: STRING  [quoted: 1]\n\n\nSubtree2: NUMBER 37.0 100\n");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING NUMBER 8.0\n", (int) (byte) 1, 54);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isFromExterns();
        com.google.javascript.rhino.Node node6 = node1.getLastSibling();
        boolean boolean7 = node1.isStringKey();
        com.google.javascript.rhino.Node node8 = node1.getNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isDec();
        int int17 = node8.getType();
        java.lang.String str18 = node8.toString();
        int int20 = node8.getIntProp(409700);
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node8.setJSType(jSType21);
        java.lang.String str26 = node8.toString(true, false, false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 40 + "'", int17 == 40);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "STRING  0" + "'", str18, "STRING  0");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "STRING  0" + "'", str26, "STRING  0");
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        boolean boolean9 = node1.getBooleanProp(45);
        com.google.javascript.rhino.Node node10 = node1.cloneTree();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        boolean boolean28 = node8.isVar();
        boolean boolean29 = node8.isIf();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node50 = node32.useSourceInfoFrom(node46);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] { node32 };
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(32, nodeArray51);
        int int54 = node52.getIntProp((int) (byte) 100);
        boolean boolean56 = node52.getBooleanProp(0);
        com.google.javascript.rhino.Node node57 = node8.useSourceInfoIfMissingFromForTree(node52);
        boolean boolean58 = node52.isAssignAdd();
        boolean boolean59 = node52.isRegExp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        node7.setSourceEncodedPositionForTree(39);
        boolean boolean16 = node7.isIf();
        int int17 = node7.getSourceOffset();
        boolean boolean18 = node7.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        boolean boolean28 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        node30.setSourceEncodedPosition(4095);
        boolean boolean33 = node30.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node30.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node23.copyInformationFromForTree(node30);
        com.google.javascript.rhino.Node node36 = node30.removeFirstChild();
        boolean boolean37 = node30.isAnd();
        boolean boolean38 = node30.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        boolean boolean41 = node40.isOnlyModifiesThisCall();
        boolean boolean42 = node40.isEmpty();
        boolean boolean43 = node40.isArrayLit();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        boolean boolean46 = node45.isOnlyModifiesThisCall();
        boolean boolean47 = node45.isSetterDef();
        com.google.javascript.rhino.Node node48 = node40.srcref(node45);
        node30.addChildToFront(node40);
        com.google.javascript.rhino.Node node50 = node30.getLastChild();
        boolean boolean51 = node30.isInstanceOf();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node53.getStaticSourceFile();
        boolean boolean58 = node53.isAssignAdd();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        boolean boolean63 = node60.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = node60.getStaticSourceFile();
        com.google.javascript.rhino.Node node65 = node53.copyInformationFromForTree(node60);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isArrayLit();
        com.google.javascript.rhino.Node node71 = node53.useSourceInfoFrom(node67);
        boolean boolean72 = node53.isVarArgs();
        int int73 = node53.getType();
        node30.addChildToBack(node53);
        int int75 = node1.getIndexOfChild(node53);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int80 = node79.getLength();
        boolean boolean81 = node79.isStringKey();
        com.google.javascript.rhino.Node node82 = node79.removeFirstChild();
        boolean boolean83 = node79.isGetterDef();
        com.google.javascript.rhino.Node node84 = node1.clonePropsFrom(node79);
        boolean boolean85 = node79.isName();
        java.lang.String str86 = node79.toString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(staticSourceFile64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 40 + "'", int73 == 40);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "NUMBER 37.0 100" + "'", str86, "NUMBER 37.0 100");
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("TYPEOF 0", 48, (int) '4');
        com.google.javascript.rhino.InputId inputId4 = null;
        node3.setInputId(inputId4);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        boolean boolean11 = node7.isDebugger();
        boolean boolean12 = node7.isName();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("STRING  0");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100, node16, 54, 35);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean24 = node23.isTypeOf();
        boolean boolean25 = node23.isInc();
        com.google.javascript.rhino.Node node26 = node23.cloneTree();
        com.google.javascript.rhino.Node node27 = node16.copyInformationFrom(node26);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node50 = node32.useSourceInfoFrom(node46);
        boolean boolean51 = node50.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        boolean boolean54 = node53.isOnlyModifiesThisCall();
        boolean boolean55 = node53.isEmpty();
        boolean boolean56 = node53.isArrayLit();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        boolean boolean59 = node58.isOnlyModifiesThisCall();
        boolean boolean60 = node58.isEmpty();
        boolean boolean61 = node58.isReturn();
        boolean boolean62 = node58.isNE();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(4095, node50, node53, node58, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node66 = node29.useSourceInfoIfMissingFrom(node65);
        boolean boolean67 = node66.isNull();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("");
        boolean boolean70 = node69.isOnlyModifiesThisCall();
        boolean boolean71 = node69.isEmpty();
        boolean boolean72 = node69.isReturn();
        boolean boolean73 = node69.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType74 = node69.getJSType();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("");
        node76.setSourceEncodedPosition(4095);
        boolean boolean79 = node76.isNot();
        boolean boolean80 = node76.isBreak();
        boolean boolean81 = node76.isTypeOf();
        boolean boolean82 = node76.isInc();
        boolean boolean83 = node76.isWhile();
        node76.setSourceEncodedPosition((-1));
        boolean boolean86 = node69.hasChild(node76);
        com.google.javascript.rhino.Node node87 = node66.copyInformationFrom(node76);
        com.google.javascript.rhino.Node node88 = node26.srcrefTree(node66);
        node7.putProp(49, (java.lang.Object) node66);
        com.google.javascript.rhino.Node node90 = node66.getNext();
        com.google.javascript.rhino.jstype.JSType jSType91 = null;
        // The following exception was thrown during execution in test generation
        try {
            node90.setJSType(jSType91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(jSType74);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNull(node90);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isRegExp();
        java.lang.String str6 = node1.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable7 = node1.getAncestors();
        boolean boolean8 = node1.isScript();
        boolean boolean9 = node1.isScript();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "STRING \n" + "'", str6, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setAllFlags();
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isIn();
        boolean boolean7 = node1.isOptionalArg();
        boolean boolean8 = node1.isNE();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node23 = node17.removeFirstChild();
        boolean boolean24 = node17.isAnd();
        boolean boolean25 = node17.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = node32.isOnlyModifiesThisCall();
        boolean boolean34 = node32.isSetterDef();
        com.google.javascript.rhino.Node node35 = node27.srcref(node32);
        node17.addChildToFront(node27);
        boolean boolean37 = node17.isVar();
        boolean boolean38 = node17.isIf();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("");
        boolean boolean56 = node55.isOnlyModifiesThisCall();
        boolean boolean57 = node55.isEmpty();
        boolean boolean58 = node55.isArrayLit();
        com.google.javascript.rhino.Node node59 = node41.useSourceInfoFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] { node41 };
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(32, nodeArray60);
        int int63 = node61.getIntProp((int) (byte) 100);
        boolean boolean65 = node61.getBooleanProp(0);
        com.google.javascript.rhino.Node node66 = node17.useSourceInfoIfMissingFromForTree(node61);
        boolean boolean67 = node61.isAssignAdd();
        boolean boolean68 = node61.isHook();
        node1.addChildrenToFront(node61);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(16, 30, 0);
        node3.setSourceEncodedPositionForTree(36);
        boolean boolean6 = node3.isDefaultCase();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesGlobalState();
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        com.google.javascript.rhino.Node node5 = node2.removeFirstChild();
        boolean boolean6 = node2.isIf();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.Node node12 = node2.srcrefTree(node8);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node14.getStaticSourceFile();
        boolean boolean19 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        com.google.javascript.rhino.Node node26 = node14.copyInformationFromForTree(node21);
        com.google.javascript.rhino.Node node27 = node21.removeFirstChild();
        boolean boolean28 = node21.isAnd();
        node21.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node33 = node21.getAncestor(0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node33.siblings();
        node33.putIntProp(12, 43);
        com.google.javascript.rhino.Node node38 = node12.useSourceInfoFromForTree(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node33.siblings();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, node33);
        boolean boolean41 = node33.isLabelName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(42);
        int int2 = node1.getSourcePosition();
        boolean boolean3 = node1.isCase();
        boolean boolean4 = node1.isTrue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(36, node37, node39, node46);
        boolean boolean48 = node46.isTypeOf();
        boolean boolean49 = node46.isGetterDef();
        boolean boolean50 = node46.isInstanceOf();
        com.google.javascript.rhino.Node node51 = node46.getFirstChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(41);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) '4', node51, node53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node51);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        boolean boolean41 = node33.isNE();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        boolean boolean44 = node43.isOnlyModifiesThisCall();
        boolean boolean45 = node43.isEmpty();
        boolean boolean46 = node43.isReturn();
        boolean boolean47 = node43.isRegExp();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(52, node33, node43);
        boolean boolean49 = node43.isInstanceOf();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        node51.setSourceEncodedPosition(4095);
        boolean boolean54 = node51.isNew();
        node51.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node57 = node43.copyInformationFromForTree(node51);
        node51.setOptionalArg(false);
        boolean boolean60 = node51.isArrayLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        boolean boolean29 = node22.isCall();
        com.google.javascript.rhino.Node node30 = node22.getLastChild();
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        node30.setString("LE 43\n    STRING \n    STRING \n    STRING  0 [is_namespace: 45]\n");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int4 = node3.getLength();
        int int5 = node3.getCharno();
        com.google.javascript.rhino.InputId inputId6 = node3.getInputId();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(inputId6);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING  0");
        boolean boolean2 = node1.isFromExterns();
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        node1.setJSType(jSType3);
        node1.setSourceFileForTesting("NUMBER 8.0\n");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        node40.setSourceEncodedPosition(4095);
        boolean boolean43 = node40.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = node40.getStaticSourceFile();
        boolean boolean45 = node40.isAssignAdd();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        node47.setSourceEncodedPosition(4095);
        boolean boolean50 = node47.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = node47.getStaticSourceFile();
        com.google.javascript.rhino.Node node52 = node40.copyInformationFromForTree(node47);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        boolean boolean55 = node54.isOnlyModifiesThisCall();
        boolean boolean56 = node54.isEmpty();
        boolean boolean57 = node54.isArrayLit();
        com.google.javascript.rhino.Node node58 = node40.useSourceInfoFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] { node40 };
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(32, nodeArray59);
        node20.addChildrenToFront(node60);
        com.google.javascript.rhino.Node node62 = node60.removeChildren();
        boolean boolean63 = node62.isEmpty();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(staticSourceFile44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(staticSourceFile51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        boolean boolean62 = node58.isBreak();
        boolean boolean63 = node58.isTypeOf();
        int int64 = node58.getCharno();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("");
        boolean boolean67 = node66.isOnlyModifiesThisCall();
        int int68 = node66.getSourceOffset();
        boolean boolean69 = node66.isExprResult();
        com.google.javascript.rhino.Node node70 = node58.srcref(node66);
        boolean boolean71 = node70.isNE();
        com.google.javascript.rhino.Node node72 = node56.srcrefTree(node70);
        boolean boolean73 = node56.isLabelName();
        boolean boolean74 = node56.isInc();
        // The following exception was thrown during execution in test generation
        try {
            node56.setSideEffectFlags((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4095 + "'", int64 == 4095);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isCatch();
        int int5 = node1.getSourceOffset();
        boolean boolean6 = node1.isDo();
        com.google.javascript.rhino.Node node7 = node1.getLastChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        boolean boolean2 = node1.isExprResult();
        boolean boolean3 = node1.isArrayLit();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = node1.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 100.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isReturn();
        boolean boolean6 = node2.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        boolean boolean12 = node8.isBreak();
        boolean boolean13 = node8.isIn();
        com.google.javascript.rhino.Node node14 = node2.useSourceInfoIfMissingFromForTree(node8);
        node8.setSourceEncodedPositionForTree(39);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isReturn();
        boolean boolean22 = node18.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        boolean boolean28 = node24.isBreak();
        boolean boolean29 = node24.isIn();
        com.google.javascript.rhino.Node node30 = node18.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        boolean boolean45 = node32.isNE();
        boolean boolean46 = node32.isThrow();
        boolean boolean47 = node32.isFor();
        com.google.javascript.rhino.Node node48 = node24.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(0.0d);
        node50.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        boolean boolean55 = node54.isOnlyModifiesThisCall();
        boolean boolean56 = node54.isEmpty();
        boolean boolean57 = node54.isCatch();
        int int58 = node54.getSourceOffset();
        boolean boolean59 = node54.isHook();
        node50.addChildToBack(node54);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        node63.setSourceEncodedPosition(4095);
        boolean boolean66 = node63.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile67 = node63.getStaticSourceFile();
        boolean boolean68 = node63.isAssignAdd();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("");
        node70.setSourceEncodedPosition(4095);
        boolean boolean73 = node70.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = node70.getStaticSourceFile();
        com.google.javascript.rhino.Node node75 = node63.copyInformationFromForTree(node70);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        boolean boolean78 = node77.isOnlyModifiesThisCall();
        boolean boolean79 = node77.isEmpty();
        boolean boolean80 = node77.isArrayLit();
        com.google.javascript.rhino.Node node81 = node63.useSourceInfoFrom(node77);
        com.google.javascript.rhino.Node[] nodeArray82 = new com.google.javascript.rhino.Node[] { node63 };
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(32, nodeArray82);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("");
        boolean boolean86 = node85.isOnlyModifiesThisCall();
        boolean boolean87 = node85.isEmpty();
        boolean boolean88 = node85.isReturn();
        com.google.javascript.rhino.Node node89 = node83.useSourceInfoFromForTree(node85);
        boolean boolean90 = node85.isAdd();
        node85.putBooleanProp(38, false);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((int) (short) 10, node8, node48, node50, node85);
        int int95 = node48.getLineno();
        boolean boolean96 = node48.isNull();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(staticSourceFile67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(staticSourceFile74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(nodeArray82);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        boolean boolean14 = node1.isNE();
        boolean boolean15 = node1.isThrow();
        boolean boolean16 = node1.isFor();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        com.google.javascript.rhino.Node node27 = node26.getLastSibling();
        boolean boolean28 = node27.isIf();
        com.google.javascript.rhino.Node node29 = node1.clonePropsFrom(node27);
        int int30 = node29.getCharno();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(39, "Node tree inequality:\nTree1:\nSTRING  [quoted: 1]\n\n\nTree2:\nNUMBER 37.0 100\n\n\nSubtree1: STRING  [quoted: 1]\n\n\nSubtree2: NUMBER 37.0 100\n", 36, 0);
        boolean boolean36 = node35.isTry();
        node35.setType(409700);
        boolean boolean39 = node29.isEquivalentToTyped(node35);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean44 = node43.isObjectLit();
        com.google.javascript.rhino.Node node45 = node35.useSourceInfoIfMissingFromForTree(node43);
        com.google.javascript.rhino.InputId inputId46 = null;
        node43.setInputId(inputId46);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4095 + "'", int30 == 4095);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(16, 30, 0);
        node3.setSourceEncodedPositionForTree(36);
        java.lang.Appendable appendable6 = null;
        // The following exception was thrown during execution in test generation
        try {
            node3.appendStringTree(appendable6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        boolean boolean14 = node1.isNE();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(16, 30, 0);
        node1.addChildToFront(node18);
        boolean boolean20 = node18.isStringKey();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = node18.getJSDocInfo();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(jSDocInfo21);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        node16.setVarArgs(false);
        boolean boolean23 = node16.isFromExterns();
        boolean boolean24 = node16.isNull();
        boolean boolean25 = node16.isFalse();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        node27.setSourceEncodedPosition(4095);
        boolean boolean30 = node27.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node27.getStaticSourceFile();
        boolean boolean32 = node27.isAssignAdd();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("");
        node34.setSourceEncodedPosition(4095);
        boolean boolean37 = node34.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = node34.getStaticSourceFile();
        com.google.javascript.rhino.Node node39 = node27.copyInformationFromForTree(node34);
        com.google.javascript.rhino.Node node40 = node34.removeFirstChild();
        com.google.javascript.rhino.Node node41 = node16.useSourceInfoIfMissingFrom(node34);
        com.google.javascript.rhino.Node node42 = node14.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(45, node42);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        boolean boolean49 = node46.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node46.getStaticSourceFile();
        boolean boolean51 = node46.isAssignAdd();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node53.getStaticSourceFile();
        com.google.javascript.rhino.Node node58 = node46.copyInformationFromForTree(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        boolean boolean61 = node60.isOnlyModifiesThisCall();
        boolean boolean62 = node60.isEmpty();
        boolean boolean63 = node60.isArrayLit();
        com.google.javascript.rhino.Node node64 = node46.useSourceInfoFrom(node60);
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] { node46 };
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(32, nodeArray65);
        int int68 = node66.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("");
        boolean boolean71 = node70.isOnlyModifiesThisCall();
        boolean boolean72 = node70.isEmpty();
        boolean boolean73 = node70.isReturn();
        boolean boolean74 = node70.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("");
        node76.setSourceEncodedPosition(4095);
        boolean boolean79 = node76.isNot();
        boolean boolean80 = node76.isBreak();
        boolean boolean81 = node76.isIn();
        com.google.javascript.rhino.Node node82 = node70.useSourceInfoIfMissingFromForTree(node76);
        com.google.javascript.rhino.Node node83 = node66.useSourceInfoFrom(node76);
        boolean boolean84 = node83.isLabelName();
        boolean boolean85 = node83.isName();
        node42.addChildrenToFront(node83);
        node42.setSourceFileForTesting("STRING  0\n");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(staticSourceFile31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(staticSourceFile38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        int int7 = node1.getLineno();
        node1.setSourceFileForTesting("STRING ");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        boolean boolean16 = node11.isAssignAdd();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node23 = node11.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node29 = node11.useSourceInfoFrom(node25);
        boolean boolean30 = node11.isVarArgs();
        int int31 = node11.getType();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        boolean boolean54 = node53.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        boolean boolean58 = node56.isEmpty();
        boolean boolean59 = node56.isArrayLit();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("");
        boolean boolean62 = node61.isOnlyModifiesThisCall();
        boolean boolean63 = node61.isEmpty();
        boolean boolean64 = node61.isReturn();
        boolean boolean65 = node61.isNE();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(4095, node53, node56, node61, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("");
        node70.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(36, node68, node70, node77);
        boolean boolean79 = node77.isTypeOf();
        boolean boolean80 = node77.isGetterDef();
        boolean boolean81 = node77.isFor();
        boolean boolean82 = node11.isEquivalentToTyped(node77);
        boolean boolean83 = node1.hasChild(node77);
        int int84 = node1.getType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 40 + "'", int31 == 40);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 40 + "'", int84 == 40);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 31);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        boolean boolean5 = node4.isAnd();
        boolean boolean6 = node4.isDec();
        int int7 = node4.getSourceOffset();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        boolean boolean29 = node22.isCall();
        com.google.javascript.rhino.Node node30 = node22.getLastChild();
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        boolean boolean32 = node31.isNew();
        boolean boolean33 = node31.isString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        boolean boolean11 = node8.isReturn();
        boolean boolean12 = node8.isRegExp();
        int int13 = node8.getLength();
        boolean boolean14 = node8.isNumber();
        boolean boolean16 = node8.getBooleanProp(12);
        int int17 = node1.getIndexOfChild(node8);
        com.google.javascript.rhino.Node node18 = node8.getFirstChild();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(42);
        com.google.javascript.rhino.Node node21 = node8.copyInformationFromForTree(node20);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node21.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(staticSourceFile22);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isSetterDef();
        com.google.javascript.rhino.Node node5 = node1.getAncestor((int) (short) 0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder6 = node5.new FileLevelJsDocBuilder();
        boolean boolean7 = node5.isTrue();
        node5.setLineno(409700);
        boolean boolean10 = node5.isTrue();
        node5.setLineno(15);
        int int13 = node5.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(39, "Node tree inequality:\nTree1:\nSTRING  [quoted: 1]\n\n\nTree2:\nNUMBER 37.0 100\n\n\nSubtree1: STRING  [quoted: 1]\n\n\nSubtree2: NUMBER 37.0 100\n", 36, 0);
        boolean boolean19 = node18.isGetterDef();
        boolean boolean20 = node5.isEquivalentToTyped(node18);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        boolean boolean30 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node25.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node43 = node25.useSourceInfoFrom(node39);
        boolean boolean44 = node43.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isReturn();
        boolean boolean55 = node51.isNE();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node43, node46, node51, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(36, node58, node60, node67);
        boolean boolean69 = node67.isTypeOf();
        boolean boolean70 = node67.isGetterDef();
        boolean boolean71 = node67.isFor();
        boolean boolean72 = node1.isEquivalentToTyped(node67);
        boolean boolean73 = node67.isGetterDef();
        boolean boolean74 = node67.isDelProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isInc();
        boolean boolean21 = node1.isLocalResultCall();
        boolean boolean22 = node1.hasOneChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        boolean boolean6 = node2.isBreak();
        boolean boolean7 = node2.isIn();
        boolean boolean8 = node2.isLabel();
        boolean boolean9 = node2.isLabel();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable10 = node2.getAncestors();
        boolean boolean11 = node2.isNE();
        com.google.javascript.rhino.InputId inputId12 = node2.getInputId();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node14.getStaticSourceFile();
        boolean boolean19 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        com.google.javascript.rhino.Node node26 = node14.copyInformationFromForTree(node21);
        com.google.javascript.rhino.Node node27 = node21.removeFirstChild();
        boolean boolean28 = node21.isAnd();
        boolean boolean29 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isSetterDef();
        com.google.javascript.rhino.Node node39 = node31.srcref(node36);
        node21.addChildToFront(node31);
        com.google.javascript.rhino.Node node41 = node21.getLastChild();
        boolean boolean42 = node21.isInstanceOf();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("");
        node44.setSourceEncodedPosition(4095);
        boolean boolean47 = node44.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = node44.getStaticSourceFile();
        boolean boolean49 = node44.isAssignAdd();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        node51.setSourceEncodedPosition(4095);
        boolean boolean54 = node51.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = node51.getStaticSourceFile();
        com.google.javascript.rhino.Node node56 = node44.copyInformationFromForTree(node51);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        boolean boolean59 = node58.isOnlyModifiesThisCall();
        boolean boolean60 = node58.isEmpty();
        boolean boolean61 = node58.isArrayLit();
        com.google.javascript.rhino.Node node62 = node44.useSourceInfoFrom(node58);
        boolean boolean63 = node44.isVarArgs();
        int int64 = node44.getType();
        node21.addChildToBack(node44);
        boolean boolean66 = node44.isInstanceOf();
        boolean boolean67 = node44.isSyntheticBlock();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("");
        boolean boolean70 = node69.isOnlyModifiesThisCall();
        int int71 = node69.getSourceOffset();
        boolean boolean72 = node69.isCatch();
        boolean boolean73 = node69.isParamList();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (byte) 100, node2, node44, node69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(ancestorIterable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(inputId12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(staticSourceFile48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(staticSourceFile55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 40 + "'", int64 == 40);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        com.google.javascript.rhino.InputId inputId14 = null;
        node13.setInputId(inputId14);
        com.google.javascript.rhino.Node node16 = node13.removeFirstChild();
        node13.detachChildren();
        node13.setLineno(35);
        com.google.javascript.rhino.Node node20 = node13.getLastChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isSetterDef();
        boolean boolean4 = node1.isQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 39, 29, 54);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(0.0d);
        node1.setIsSyntheticBlock(true);
        int int4 = node1.getSourceOffset();
        boolean boolean5 = node1.isCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        boolean boolean11 = node7.isDebugger();
        boolean boolean12 = node7.isName();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable13 = node7.getAncestors();
        com.google.javascript.rhino.Node node14 = node7.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = node14.isCase();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(ancestorIterable13);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setAllFlags();
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        int int3 = node1.getSourceOffset();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = node1.getStaticSourceFile();
        node1.setCharno(0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(staticSourceFile4);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] { node4 };
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(32, nodeArray23);
        int int26 = node24.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("");
        node34.setSourceEncodedPosition(4095);
        boolean boolean37 = node34.isNot();
        boolean boolean38 = node34.isBreak();
        boolean boolean39 = node34.isIn();
        com.google.javascript.rhino.Node node40 = node28.useSourceInfoIfMissingFromForTree(node34);
        com.google.javascript.rhino.Node node41 = node24.useSourceInfoFrom(node34);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        boolean boolean46 = node43.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        boolean boolean48 = node43.isAssignAdd();
        java.util.Set<java.lang.String> strSet49 = node43.getDirectives();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        node51.setSourceEncodedPosition(4095);
        boolean boolean54 = node51.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = node51.getStaticSourceFile();
        node51.setVarArgs(false);
        boolean boolean58 = node51.isFromExterns();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        boolean boolean63 = node60.isNot();
        com.google.javascript.rhino.Node node64 = node60.getLastSibling();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(37, node24, node43, node51, node64);
        boolean boolean66 = node65.isExprResult();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(49, node65, (int) (byte) 10, (int) (short) 10);
        boolean boolean70 = node69.isAssign();
        boolean boolean71 = node69.hasOneChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(strSet49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(staticSourceFile55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        boolean boolean9 = node1.getBooleanProp(45);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        boolean boolean15 = node11.isBreak();
        boolean boolean16 = node11.isTypeOf();
        node11.setVarArgs(false);
        boolean boolean19 = node1.hasChild(node11);
        int int20 = node1.getType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 40 + "'", int20 == 40);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        boolean boolean6 = node1.isAssign();
        boolean boolean7 = node1.isArrayLit();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node1.getJSDocInfo();
        com.google.javascript.rhino.Node node9 = node1.cloneTree();
        node9.setLineno((int) '4');
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertNotNull(node9);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node19.isUnscopedQualifiedName();
        boolean boolean21 = node19.isWhile();
        boolean boolean22 = node19.isDo();
        boolean boolean23 = node19.isInc();
        int int24 = node19.getLineno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray5, 12, 100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(53, nodeArray5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100, nodeArray5);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) 'a', nodeArray5);
        com.google.javascript.rhino.Node node13 = node12.getLastSibling();
        com.google.javascript.rhino.Node node14 = node12.getParent();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isTypeOf();
        boolean boolean5 = node3.isInc();
        com.google.javascript.rhino.Node node6 = node3.cloneTree();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder7 = node6.new FileLevelJsDocBuilder();
        int int8 = node6.getSourceOffset();
        boolean boolean9 = node6.isIf();
        boolean boolean10 = node6.isName();
        boolean boolean11 = node6.isReturn();
        boolean boolean12 = node6.isVarArgs();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node13 = node6.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        node28.setLineno((int) (short) 100);
        boolean boolean31 = node28.isDec();
        boolean boolean32 = node28.isNumber();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node33 = node28.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(36);
        boolean boolean2 = node1.isFromExterns();
        node1.setLineno(12);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        int int3 = node1.getSourceOffset();
        boolean boolean4 = node1.isLabel();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isEmpty();
        boolean boolean9 = node6.isArrayLit();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        boolean boolean12 = node11.isOnlyModifiesThisCall();
        boolean boolean13 = node11.isSetterDef();
        com.google.javascript.rhino.Node node14 = node6.srcref(node11);
        com.google.javascript.rhino.Node node15 = node14.getLastSibling();
        boolean boolean16 = node15.isIf();
        node15.setLength(4);
        boolean boolean19 = node15.isFunction();
        com.google.javascript.rhino.Node node20 = node1.useSourceInfoIfMissingFromForTree(node15);
        node15.putIntProp((int) (short) 0, 2);
        node15.setSourceEncodedPosition((int) (byte) 0);
        boolean boolean26 = node15.isLabelName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        boolean boolean2 = node1.isExprResult();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        boolean boolean13 = node9.isBreak();
        boolean boolean14 = node9.isIn();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        boolean boolean21 = node16.isAssignAdd();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        com.google.javascript.rhino.Node node28 = node16.copyInformationFromForTree(node23);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isArrayLit();
        com.google.javascript.rhino.Node node34 = node16.useSourceInfoFrom(node30);
        boolean boolean35 = node16.isInc();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        boolean boolean41 = node38.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = node38.getStaticSourceFile();
        boolean boolean43 = node38.isAssignAdd();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        node45.setSourceEncodedPosition(4095);
        boolean boolean48 = node45.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = node45.getStaticSourceFile();
        com.google.javascript.rhino.Node node50 = node38.copyInformationFromForTree(node45);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("");
        boolean boolean53 = node52.isOnlyModifiesThisCall();
        boolean boolean54 = node52.isEmpty();
        boolean boolean55 = node52.isArrayLit();
        com.google.javascript.rhino.Node node56 = node38.useSourceInfoFrom(node52);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] { node38 };
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(32, nodeArray57);
        int int60 = node58.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        boolean boolean63 = node62.isOnlyModifiesThisCall();
        boolean boolean64 = node62.isEmpty();
        boolean boolean65 = node62.isReturn();
        boolean boolean66 = node62.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        node68.setSourceEncodedPosition(4095);
        boolean boolean71 = node68.isNot();
        boolean boolean72 = node68.isBreak();
        boolean boolean73 = node68.isIn();
        com.google.javascript.rhino.Node node74 = node62.useSourceInfoIfMissingFromForTree(node68);
        com.google.javascript.rhino.Node node75 = node58.useSourceInfoFrom(node68);
        boolean boolean76 = node75.isLabelName();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(29, node7, node9, node16, node75);
        com.google.javascript.rhino.Node node78 = node16.getFirstChild();
        com.google.javascript.rhino.Node node79 = node1.srcrefTree(node16);
        node16.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("");
        boolean boolean84 = node83.isOnlyModifiesThisCall();
        boolean boolean85 = node83.isEmpty();
        boolean boolean86 = node83.isReturn();
        boolean boolean87 = node83.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newString("");
        node89.setSourceEncodedPosition(4095);
        boolean boolean92 = node89.isNot();
        boolean boolean93 = node89.isBreak();
        boolean boolean94 = node89.isIn();
        com.google.javascript.rhino.Node node95 = node83.useSourceInfoIfMissingFromForTree(node89);
        boolean boolean96 = node16.hasChild(node95);
        boolean boolean97 = node95.isInc();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(staticSourceFile42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(staticSourceFile49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(29);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        node2.removeProp(12);
        boolean boolean7 = node2.isParamList();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        boolean boolean16 = node11.isAssignAdd();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node23 = node11.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node29 = node11.useSourceInfoFrom(node25);
        boolean boolean30 = node29.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = node32.isOnlyModifiesThisCall();
        boolean boolean34 = node32.isEmpty();
        boolean boolean35 = node32.isArrayLit();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        boolean boolean38 = node37.isOnlyModifiesThisCall();
        boolean boolean39 = node37.isEmpty();
        boolean boolean40 = node37.isReturn();
        boolean boolean41 = node37.isNE();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(4095, node29, node32, node37, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(36, node44, node46, node53);
        boolean boolean55 = node44.isGetElem();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        boolean boolean58 = node57.isOnlyModifiesThisCall();
        boolean boolean59 = node57.isEmpty();
        boolean boolean60 = node57.isArrayLit();
        boolean boolean61 = node57.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node62 = node44.srcref(node57);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        boolean boolean69 = node64.isAssignAdd();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("");
        node71.setSourceEncodedPosition(4095);
        boolean boolean74 = node71.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile75 = node71.getStaticSourceFile();
        com.google.javascript.rhino.Node node76 = node64.copyInformationFromForTree(node71);
        com.google.javascript.rhino.Node node77 = node71.removeFirstChild();
        boolean boolean78 = node71.isAnd();
        node71.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node83 = node71.getAncestor(0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable84 = node83.siblings();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(15, node2, node57, node83, 43, (int) (short) 10);
        java.lang.String str88 = node87.toStringTree();
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newString("TRUE\n    STRING STRING \n    STRING  [length: 4]\n    SHEQ\n        STRING  0\n");
        node87.addChildrenToBack(node90);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(staticSourceFile75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(nodeIterable84);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "LE 43\n    STRING \n    STRING \n    STRING  0 [is_namespace: 45]\n" + "'", str88, "LE 43\n    STRING \n    STRING \n    STRING  0 [is_namespace: 45]\n");
        org.junit.Assert.assertNotNull(node90);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("");
        boolean boolean72 = node71.isOnlyModifiesThisCall();
        boolean boolean73 = node71.isEmpty();
        boolean boolean74 = node71.isArrayLit();
        com.google.javascript.rhino.Node node75 = node57.useSourceInfoFrom(node71);
        boolean boolean76 = node71.hasChildren();
        com.google.javascript.rhino.Node node77 = node32.copyInformationFrom(node71);
        java.lang.String str78 = node32.toString();
        boolean boolean79 = node32.wasEmptyNode();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString("");
        node81.setSourceEncodedPosition(4095);
        boolean boolean84 = node81.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile85 = node81.getStaticSourceFile();
        boolean boolean86 = node81.isAssignAdd();
        com.google.javascript.rhino.Node node88 = com.google.javascript.rhino.Node.newString("");
        node88.setSourceEncodedPosition(4095);
        boolean boolean91 = node88.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile92 = node88.getStaticSourceFile();
        com.google.javascript.rhino.Node node93 = node81.copyInformationFromForTree(node88);
        boolean boolean94 = node81.isNE();
        node81.setVarArgs(false);
        node32.addChildrenToFront(node81);
        boolean boolean98 = node81.isIf();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "STRING " + "'", str78, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(staticSourceFile85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(staticSourceFile92);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("STRING  0");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, node2, 54, 35);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean10 = node9.isTypeOf();
        boolean boolean11 = node9.isInc();
        com.google.javascript.rhino.Node node12 = node9.cloneTree();
        com.google.javascript.rhino.Node node13 = node2.copyInformationFrom(node12);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        boolean boolean23 = node18.isAssignAdd();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        com.google.javascript.rhino.Node node30 = node18.copyInformationFromForTree(node25);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = node32.isOnlyModifiesThisCall();
        boolean boolean34 = node32.isEmpty();
        boolean boolean35 = node32.isArrayLit();
        com.google.javascript.rhino.Node node36 = node18.useSourceInfoFrom(node32);
        boolean boolean37 = node36.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("");
        boolean boolean45 = node44.isOnlyModifiesThisCall();
        boolean boolean46 = node44.isEmpty();
        boolean boolean47 = node44.isReturn();
        boolean boolean48 = node44.isNE();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(4095, node36, node39, node44, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node52 = node15.useSourceInfoIfMissingFrom(node51);
        boolean boolean53 = node52.isNull();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("");
        boolean boolean56 = node55.isOnlyModifiesThisCall();
        boolean boolean57 = node55.isEmpty();
        boolean boolean58 = node55.isReturn();
        boolean boolean59 = node55.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType60 = node55.getJSType();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        node62.setSourceEncodedPosition(4095);
        boolean boolean65 = node62.isNot();
        boolean boolean66 = node62.isBreak();
        boolean boolean67 = node62.isTypeOf();
        boolean boolean68 = node62.isInc();
        boolean boolean69 = node62.isWhile();
        node62.setSourceEncodedPosition((-1));
        boolean boolean72 = node55.hasChild(node62);
        com.google.javascript.rhino.Node node73 = node52.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node74 = node12.srcrefTree(node52);
        boolean boolean75 = node74.isGetProp();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        boolean boolean9 = node1.getBooleanProp(45);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        boolean boolean15 = node11.isBreak();
        boolean boolean16 = node11.isTypeOf();
        node11.setVarArgs(false);
        boolean boolean19 = node1.hasChild(node11);
        boolean boolean20 = node1.isLabelName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        com.google.javascript.rhino.Node node10 = node1.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = node10.isLabelName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 4, 32);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        boolean boolean6 = node5.isOnlyModifiesThisCall();
        boolean boolean7 = node5.isEmpty();
        boolean boolean8 = node5.isArrayLit();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        boolean boolean11 = node10.isOnlyModifiesThisCall();
        boolean boolean12 = node10.isSetterDef();
        com.google.javascript.rhino.Node node13 = node5.srcref(node10);
        com.google.javascript.rhino.Node node14 = node13.getLastSibling();
        boolean boolean15 = node14.isIf();
        boolean boolean16 = node14.isArrayLit();
        boolean boolean17 = node14.isSyntheticBlock();
        int int18 = node3.getIndexOfChild(node14);
        boolean boolean19 = node14.isHook();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node2.new FileLevelJsDocBuilder();
        boolean boolean22 = node2.isDefaultCase();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, (int) ' ', 53);
        boolean boolean26 = node2.hasOneChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        boolean boolean15 = node2.isNE();
        boolean boolean16 = node2.isThrow();
        boolean boolean17 = node2.isFor();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        node19.setSourceEncodedPosition(4095);
        boolean boolean22 = node19.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node19.getStaticSourceFile();
        boolean boolean24 = node19.isAssignAdd();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        node26.setSourceEncodedPosition(4095);
        boolean boolean29 = node26.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node26.getStaticSourceFile();
        com.google.javascript.rhino.Node node31 = node19.copyInformationFromForTree(node26);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        boolean boolean34 = node33.isOnlyModifiesThisCall();
        boolean boolean35 = node33.isEmpty();
        boolean boolean36 = node33.isArrayLit();
        com.google.javascript.rhino.Node node37 = node19.useSourceInfoFrom(node33);
        boolean boolean38 = node33.hasChildren();
        boolean boolean39 = node33.isNumber();
        boolean boolean40 = node33.isVarArgs();
        boolean boolean41 = node33.isInstanceOf();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        boolean boolean44 = node43.isOnlyModifiesThisCall();
        boolean boolean45 = node43.isEmpty();
        boolean boolean46 = node43.isArrayLit();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        boolean boolean49 = node48.isOnlyModifiesThisCall();
        boolean boolean50 = node48.isSetterDef();
        com.google.javascript.rhino.Node node51 = node43.srcref(node48);
        com.google.javascript.rhino.Node node52 = node51.getLastSibling();
        node51.removeProp((int) (byte) 1);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        node56.setSourceEncodedPosition(4095);
        boolean boolean59 = node56.isNot();
        boolean boolean60 = node56.isBreak();
        boolean boolean61 = node56.isTypeOf();
        int int62 = node56.getCharno();
        node56.putBooleanProp((int) (byte) 10, false);
        boolean boolean66 = node56.isBreak();
        boolean boolean67 = node56.hasMoreThanOneChild();
        boolean boolean68 = node56.isTrue();
        com.google.javascript.rhino.Node node69 = node51.useSourceInfoIfMissingFrom(node56);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(37, node2, node33, node56);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(staticSourceFile30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4095 + "'", int62 == 4095);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        boolean boolean62 = node58.isBreak();
        boolean boolean63 = node58.isTypeOf();
        int int64 = node58.getCharno();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("");
        boolean boolean67 = node66.isOnlyModifiesThisCall();
        int int68 = node66.getSourceOffset();
        boolean boolean69 = node66.isExprResult();
        com.google.javascript.rhino.Node node70 = node58.srcref(node66);
        boolean boolean71 = node70.isNE();
        com.google.javascript.rhino.Node node72 = node56.srcrefTree(node70);
        com.google.javascript.rhino.Node node73 = node56.cloneTree();
        boolean boolean74 = node56.isOptionalArg();
        com.google.javascript.rhino.Node node75 = node56.removeFirstChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4095 + "'", int64 == 4095);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 8);
        int int3 = node1.getIntProp(15);
        node1.detachChildren();
        boolean boolean5 = node1.isInstanceOf();
        boolean boolean6 = node1.isFalse();
        boolean boolean7 = node1.isNot();
        boolean boolean8 = node1.isFunction();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isDec();
        int int17 = node8.getType();
        java.lang.String str18 = node8.toString();
        java.lang.Object obj20 = node8.getProp(4095);
        boolean boolean21 = node8.isGetElem();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 40 + "'", int17 == 40);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "STRING  0" + "'", str18, "STRING  0");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.clearAllFlags();
        boolean boolean5 = sideEffectFlags0.areAllFlagsSet();
        boolean boolean6 = sideEffectFlags0.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(409700, 36, 54);
        boolean boolean4 = node3.hasOneChild();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        boolean boolean6 = node2.isBreak();
        boolean boolean7 = node2.isTypeOf();
        int int8 = node2.getCharno();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        boolean boolean11 = node10.isOnlyModifiesThisCall();
        int int12 = node10.getSourceOffset();
        boolean boolean13 = node10.isExprResult();
        com.google.javascript.rhino.Node node14 = node2.srcref(node10);
        boolean boolean15 = node14.isNE();
        boolean boolean16 = node14.isContinue();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(15, node14, 10, 12);
        // The following exception was thrown during execution in test generation
        try {
            node19.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4095 + "'", int8 == 4095);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isReturn();
        boolean boolean6 = node2.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        boolean boolean12 = node8.isBreak();
        boolean boolean13 = node8.isIn();
        com.google.javascript.rhino.Node node14 = node2.useSourceInfoIfMissingFromForTree(node8);
        node8.setSourceEncodedPositionForTree(39);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isReturn();
        boolean boolean22 = node18.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        boolean boolean28 = node24.isBreak();
        boolean boolean29 = node24.isIn();
        com.google.javascript.rhino.Node node30 = node18.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        boolean boolean45 = node32.isNE();
        boolean boolean46 = node32.isThrow();
        boolean boolean47 = node32.isFor();
        com.google.javascript.rhino.Node node48 = node24.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(0.0d);
        node50.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        boolean boolean55 = node54.isOnlyModifiesThisCall();
        boolean boolean56 = node54.isEmpty();
        boolean boolean57 = node54.isCatch();
        int int58 = node54.getSourceOffset();
        boolean boolean59 = node54.isHook();
        node50.addChildToBack(node54);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        node63.setSourceEncodedPosition(4095);
        boolean boolean66 = node63.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile67 = node63.getStaticSourceFile();
        boolean boolean68 = node63.isAssignAdd();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("");
        node70.setSourceEncodedPosition(4095);
        boolean boolean73 = node70.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = node70.getStaticSourceFile();
        com.google.javascript.rhino.Node node75 = node63.copyInformationFromForTree(node70);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        boolean boolean78 = node77.isOnlyModifiesThisCall();
        boolean boolean79 = node77.isEmpty();
        boolean boolean80 = node77.isArrayLit();
        com.google.javascript.rhino.Node node81 = node63.useSourceInfoFrom(node77);
        com.google.javascript.rhino.Node[] nodeArray82 = new com.google.javascript.rhino.Node[] { node63 };
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(32, nodeArray82);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("");
        boolean boolean86 = node85.isOnlyModifiesThisCall();
        boolean boolean87 = node85.isEmpty();
        boolean boolean88 = node85.isReturn();
        com.google.javascript.rhino.Node node89 = node83.useSourceInfoFromForTree(node85);
        boolean boolean90 = node85.isAdd();
        node85.putBooleanProp(38, false);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((int) (short) 10, node8, node48, node50, node85);
        int int95 = node50.getCharno();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(staticSourceFile67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(staticSourceFile74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(nodeArray82);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        boolean boolean55 = node42.isWith();
        node33.addChildToFront(node42);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node58.getStaticSourceFile();
        boolean boolean63 = node58.isAssignAdd();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = node65.getStaticSourceFile();
        com.google.javascript.rhino.Node node70 = node58.copyInformationFromForTree(node65);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        boolean boolean73 = node72.isOnlyModifiesThisCall();
        boolean boolean74 = node72.isEmpty();
        boolean boolean75 = node72.isArrayLit();
        com.google.javascript.rhino.Node node76 = node58.useSourceInfoFrom(node72);
        boolean boolean77 = node72.hasChildren();
        com.google.javascript.rhino.Node node78 = node33.copyInformationFrom(node72);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("");
        node80.setSourceEncodedPosition(4095);
        boolean boolean83 = node80.isNot();
        boolean boolean84 = node80.isBreak();
        boolean boolean85 = node80.isTypeOf();
        boolean boolean86 = node80.isInc();
        boolean boolean87 = node80.isWhile();
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newString("");
        node89.setSourceEncodedPosition(4095);
        boolean boolean92 = node89.isNot();
        boolean boolean93 = node89.isBreak();
        boolean boolean94 = node89.isIn();
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node((int) 'a', node78, node80, node89);
        boolean boolean96 = node95.isAnd();
        boolean boolean97 = node95.isDo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(staticSourceFile69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        node1.putBooleanProp((int) (byte) 10, false);
        boolean boolean11 = node1.isBreak();
        boolean boolean12 = node1.hasMoreThanOneChild();
        boolean boolean13 = node1.isTrue();
        boolean boolean14 = node1.isInc();
        com.google.javascript.rhino.Node node15 = node1.getLastSibling();
        boolean boolean16 = node15.isEmpty();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node15.getStaticSourceFile();
        boolean boolean20 = node15.isAssignAdd();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        node22.setSourceEncodedPosition(4095);
        boolean boolean25 = node22.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node22.getStaticSourceFile();
        com.google.javascript.rhino.Node node27 = node15.copyInformationFromForTree(node22);
        boolean boolean28 = node15.isNE();
        boolean boolean29 = node15.isThrow();
        boolean boolean30 = node15.isFor();
        com.google.javascript.rhino.Node node31 = node7.useSourceInfoFrom(node15);
        boolean boolean32 = node7.isDelProp();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable33 = node7.getAncestors();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(ancestorIterable33);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node19.isUnscopedQualifiedName();
        node19.putIntProp((int) (short) 0, 42);
        boolean boolean24 = node19.isObjectLit();
        java.util.Set<java.lang.String> strSet25 = node19.getDirectives();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strSet25);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        node9.detachChildren();
        int int11 = node9.getSourcePosition();
        node9.setSourceFileForTesting("hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        boolean boolean21 = node16.isAssignAdd();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        com.google.javascript.rhino.Node node28 = node16.copyInformationFromForTree(node23);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isArrayLit();
        com.google.javascript.rhino.Node node34 = node16.useSourceInfoFrom(node30);
        boolean boolean35 = node34.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        boolean boolean38 = node37.isOnlyModifiesThisCall();
        boolean boolean39 = node37.isEmpty();
        boolean boolean40 = node37.isArrayLit();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        boolean boolean43 = node42.isOnlyModifiesThisCall();
        boolean boolean44 = node42.isEmpty();
        boolean boolean45 = node42.isReturn();
        boolean boolean46 = node42.isNE();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(4095, node34, node37, node42, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node50 = null;
        int int51 = node34.getIndexOfChild(node50);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        boolean boolean54 = node53.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node55 = node34.clonePropsFrom(node53);
        boolean boolean56 = node53.isVar();
        boolean boolean57 = node9.hasChild(node53);
        // The following exception was thrown during execution in test generation
        try {
            node9.setSideEffectFlags((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(41);
        boolean boolean2 = node1.isTypeOf();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        node5.setSourceEncodedPosition(4095);
        boolean boolean8 = node5.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node5.getStaticSourceFile();
        boolean boolean10 = node5.isAssignAdd();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        com.google.javascript.rhino.Node node17 = node5.copyInformationFromForTree(node12);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        boolean boolean20 = node19.isOnlyModifiesThisCall();
        boolean boolean21 = node19.isEmpty();
        boolean boolean22 = node19.isArrayLit();
        com.google.javascript.rhino.Node node23 = node5.useSourceInfoFrom(node19);
        boolean boolean24 = node23.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isArrayLit();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isReturn();
        boolean boolean35 = node31.isNE();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(4095, node23, node26, node31, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node39 = null;
        int int40 = node23.getIndexOfChild(node39);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        boolean boolean46 = node43.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        boolean boolean48 = node43.isAssignAdd();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        com.google.javascript.rhino.Node node55 = node43.copyInformationFromForTree(node50);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        boolean boolean58 = node57.isOnlyModifiesThisCall();
        boolean boolean59 = node57.isEmpty();
        boolean boolean60 = node57.isArrayLit();
        com.google.javascript.rhino.Node node61 = node43.useSourceInfoFrom(node57);
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] { node43 };
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(32, nodeArray62);
        node23.addChildrenToFront(node63);
        com.google.javascript.rhino.Node node65 = node23.detachFromParent();
        int int66 = node23.getChildCount();
        int int67 = node23.getType();
        node1.addChildrenToBack(node23);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 40 + "'", int67 == 40);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        int int3 = node1.getSourceOffset();
        boolean boolean4 = node1.isLabel();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isEmpty();
        boolean boolean9 = node6.isArrayLit();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        boolean boolean12 = node11.isOnlyModifiesThisCall();
        boolean boolean13 = node11.isSetterDef();
        com.google.javascript.rhino.Node node14 = node6.srcref(node11);
        com.google.javascript.rhino.Node node15 = node14.getLastSibling();
        boolean boolean16 = node15.isIf();
        node15.setLength(4);
        boolean boolean19 = node15.isFunction();
        com.google.javascript.rhino.Node node20 = node1.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean21 = node1.isScript();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(15, "NUMBER 8.0\n", 42, 54);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isInstanceOf();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        boolean boolean13 = node12.isOnlyModifiesThisCall();
        boolean boolean14 = node12.isEmpty();
        node6.putProp((int) '4', (java.lang.Object) node12);
        boolean boolean16 = node12.isDebugger();
        boolean boolean17 = node12.isName();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("STRING  0");
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100, node21, 54, 35);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean29 = node28.isTypeOf();
        boolean boolean30 = node28.isInc();
        com.google.javascript.rhino.Node node31 = node28.cloneTree();
        com.google.javascript.rhino.Node node32 = node21.copyInformationFrom(node31);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        node37.setSourceEncodedPosition(4095);
        boolean boolean40 = node37.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = node37.getStaticSourceFile();
        boolean boolean42 = node37.isAssignAdd();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("");
        node44.setSourceEncodedPosition(4095);
        boolean boolean47 = node44.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = node44.getStaticSourceFile();
        com.google.javascript.rhino.Node node49 = node37.copyInformationFromForTree(node44);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isArrayLit();
        com.google.javascript.rhino.Node node55 = node37.useSourceInfoFrom(node51);
        boolean boolean56 = node55.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        boolean boolean59 = node58.isOnlyModifiesThisCall();
        boolean boolean60 = node58.isEmpty();
        boolean boolean61 = node58.isArrayLit();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        boolean boolean64 = node63.isOnlyModifiesThisCall();
        boolean boolean65 = node63.isEmpty();
        boolean boolean66 = node63.isReturn();
        boolean boolean67 = node63.isNE();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(4095, node55, node58, node63, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node71 = node34.useSourceInfoIfMissingFrom(node70);
        boolean boolean72 = node71.isNull();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("");
        boolean boolean75 = node74.isOnlyModifiesThisCall();
        boolean boolean76 = node74.isEmpty();
        boolean boolean77 = node74.isReturn();
        boolean boolean78 = node74.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType79 = node74.getJSType();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString("");
        node81.setSourceEncodedPosition(4095);
        boolean boolean84 = node81.isNot();
        boolean boolean85 = node81.isBreak();
        boolean boolean86 = node81.isTypeOf();
        boolean boolean87 = node81.isInc();
        boolean boolean88 = node81.isWhile();
        node81.setSourceEncodedPosition((-1));
        boolean boolean91 = node74.hasChild(node81);
        com.google.javascript.rhino.Node node92 = node71.copyInformationFrom(node81);
        com.google.javascript.rhino.Node node93 = node31.srcrefTree(node71);
        node12.putProp(49, (java.lang.Object) node71);
        boolean boolean95 = node4.hasChild(node71);
        boolean boolean96 = node71.isLabel();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(staticSourceFile41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(staticSourceFile48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.Node node5 = node1.getLastSibling();
        node1.setVarArgs(true);
        boolean boolean8 = node1.isFor();
        node1.setType(52);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node16.hasChildren();
        boolean boolean22 = node16.isNumber();
        boolean boolean23 = node16.isTry();
        node16.setLineno((int) (short) 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        node28.setSourceEncodedPosition(4095);
        boolean boolean31 = node28.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = node28.getStaticSourceFile();
        boolean boolean33 = node28.isAssignAdd();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        com.google.javascript.rhino.Node node40 = node28.copyInformationFromForTree(node35);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        boolean boolean43 = node42.isOnlyModifiesThisCall();
        boolean boolean44 = node42.isEmpty();
        boolean boolean45 = node42.isArrayLit();
        com.google.javascript.rhino.Node node46 = node28.useSourceInfoFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] { node28 };
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(32, nodeArray47);
        int int50 = node48.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("");
        boolean boolean53 = node52.isOnlyModifiesThisCall();
        boolean boolean54 = node52.isEmpty();
        boolean boolean55 = node52.isReturn();
        boolean boolean56 = node52.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        boolean boolean62 = node58.isBreak();
        boolean boolean63 = node58.isIn();
        com.google.javascript.rhino.Node node64 = node52.useSourceInfoIfMissingFromForTree(node58);
        com.google.javascript.rhino.Node node65 = node48.useSourceInfoFrom(node58);
        boolean boolean66 = node48.isRegExp();
        com.google.javascript.rhino.Node node67 = node48.getLastChild();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(47, node16, node48);
        node48.setCharno(29);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(staticSourceFile32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        int int65 = node23.getSideEffectFlags();
        boolean boolean66 = node23.isFromExterns();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        boolean boolean69 = node68.isOnlyModifiesThisCall();
        boolean boolean70 = node68.isEmpty();
        com.google.javascript.rhino.Node node71 = node68.removeFirstChild();
        com.google.javascript.rhino.Node node72 = node23.useSourceInfoFrom(node68);
        boolean boolean73 = node23.isEmpty();
        boolean boolean74 = node23.isQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.Node node5 = node1.getLastSibling();
        int int6 = node1.getType();
        boolean boolean7 = node1.isFalse();
        boolean boolean8 = node1.isGetElem();
        boolean boolean9 = node1.isThis();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 40 + "'", int6 == 40);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.Node node5 = node1.getLastSibling();
        node1.setVarArgs(true);
        boolean boolean8 = node1.isFor();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        node10.setString("STRING \n");
        node1.addChildToBack(node10);
        boolean boolean16 = node1.isVarArgs();
        boolean boolean17 = node1.isNE();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isCall();
        boolean boolean19 = node1.isEquivalentTo(node15);
        node1.setIsSyntheticBlock(true);
        node1.setVarArgs(false);
        boolean boolean24 = node1.isIn();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        node26.setSourceEncodedPosition(4095);
        boolean boolean29 = node26.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node26.getStaticSourceFile();
        boolean boolean31 = node26.isAssignAdd();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = node33.getStaticSourceFile();
        com.google.javascript.rhino.Node node38 = node26.copyInformationFromForTree(node33);
        com.google.javascript.rhino.Node node39 = node33.removeFirstChild();
        boolean boolean40 = node33.isAnd();
        boolean boolean41 = node33.isDec();
        int int42 = node33.getType();
        boolean boolean43 = node33.isInc();
        com.google.javascript.rhino.Node node44 = node1.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.InputId inputId45 = node33.getInputId();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(staticSourceFile30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(staticSourceFile37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 40 + "'", int42 == 40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(inputId45);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        int int65 = node23.getSideEffectFlags();
        boolean boolean66 = node23.isDefaultCase();
        com.google.javascript.rhino.Node node67 = node23.getLastSibling();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable68 = node67.getAncestors();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(ancestorIterable68);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node node40 = node37.getAncestor(38);
        java.lang.String str41 = node37.getSourceFileName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node4.isAnd();
        boolean boolean76 = node4.isRegExp();
        boolean boolean77 = node4.isBlock();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setReturnsTainted();
        int int6 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        boolean boolean6 = node2.isBreak();
        boolean boolean7 = node2.isTypeOf();
        boolean boolean8 = node2.isDec();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(0);
        node2.addChildrenToBack(node10);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        boolean boolean17 = node13.isBreak();
        boolean boolean18 = node13.isTypeOf();
        boolean boolean19 = node13.isDec();
        boolean boolean20 = node13.isInstanceOf();
        boolean boolean21 = node13.isName();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(24, node10, node13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setAllFlags();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        node28.setLineno((int) (short) 100);
        boolean boolean31 = node28.isExprResult();
        java.lang.String str32 = node28.toStringTree();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "TYPEOF 100\n    STRING \n" + "'", str32, "TYPEOF 100\n    STRING \n");
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node16.hasChildren();
        boolean boolean22 = node16.isNumber();
        boolean boolean23 = node16.isTry();
        node16.setLineno((int) (short) 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        node28.setSourceEncodedPosition(4095);
        boolean boolean31 = node28.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = node28.getStaticSourceFile();
        boolean boolean33 = node28.isAssignAdd();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        com.google.javascript.rhino.Node node40 = node28.copyInformationFromForTree(node35);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        boolean boolean43 = node42.isOnlyModifiesThisCall();
        boolean boolean44 = node42.isEmpty();
        boolean boolean45 = node42.isArrayLit();
        com.google.javascript.rhino.Node node46 = node28.useSourceInfoFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] { node28 };
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(32, nodeArray47);
        int int50 = node48.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("");
        boolean boolean53 = node52.isOnlyModifiesThisCall();
        boolean boolean54 = node52.isEmpty();
        boolean boolean55 = node52.isReturn();
        boolean boolean56 = node52.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        boolean boolean62 = node58.isBreak();
        boolean boolean63 = node58.isIn();
        com.google.javascript.rhino.Node node64 = node52.useSourceInfoIfMissingFromForTree(node58);
        com.google.javascript.rhino.Node node65 = node48.useSourceInfoFrom(node58);
        boolean boolean66 = node48.isRegExp();
        com.google.javascript.rhino.Node node67 = node48.getLastChild();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(47, node16, node48);
        // The following exception was thrown during execution in test generation
        try {
            double double69 = node68.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: REGEXP is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(staticSourceFile32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 8.0\n", 10, 49);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node7.getStaticSourceFile();
        boolean boolean12 = node7.isAssignAdd();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node19 = node7.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        boolean boolean22 = node21.isOnlyModifiesThisCall();
        boolean boolean23 = node21.isEmpty();
        boolean boolean24 = node21.isArrayLit();
        com.google.javascript.rhino.Node node25 = node7.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] { node7 };
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(32, nodeArray26);
        int int29 = node27.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isReturn();
        boolean boolean35 = node31.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        node37.setSourceEncodedPosition(4095);
        boolean boolean40 = node37.isNot();
        boolean boolean41 = node37.isBreak();
        boolean boolean42 = node37.isIn();
        com.google.javascript.rhino.Node node43 = node31.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.Node node44 = node27.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        boolean boolean49 = node46.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node46.getStaticSourceFile();
        boolean boolean51 = node46.isAssignAdd();
        java.util.Set<java.lang.String> strSet52 = node46.getDirectives();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        node54.setSourceEncodedPosition(4095);
        boolean boolean57 = node54.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = node54.getStaticSourceFile();
        node54.setVarArgs(false);
        boolean boolean61 = node54.isFromExterns();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        node63.setSourceEncodedPosition(4095);
        boolean boolean66 = node63.isNot();
        com.google.javascript.rhino.Node node67 = node63.getLastSibling();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(37, node27, node46, node54, node67);
        node67.setVarArgs(false);
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildToFront(node67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(staticSourceFile58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        node1.putBooleanProp((int) (byte) 10, false);
        boolean boolean11 = node1.isBreak();
        boolean boolean12 = node1.hasMoreThanOneChild();
        boolean boolean13 = node1.isTrue();
        boolean boolean14 = node1.isVar();
        boolean boolean15 = node1.isVoid();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        node1.setVarArgs(false);
        boolean boolean8 = node1.isFromExterns();
        boolean boolean9 = node1.isNull();
        boolean boolean10 = node1.isFalse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        boolean boolean17 = node12.isAssignAdd();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        node19.setSourceEncodedPosition(4095);
        boolean boolean22 = node19.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node19.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node12.copyInformationFromForTree(node19);
        com.google.javascript.rhino.Node node25 = node19.removeFirstChild();
        com.google.javascript.rhino.Node node26 = node1.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node node27 = node26.cloneNode();
        java.lang.String str28 = node26.toStringTree();
        int int29 = node26.getChildCount();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "STRING  0\n" + "'", str28, "STRING  0\n");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable56 = node32.children();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator57 = nodeIterable56.spliterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeIterable56);
        org.junit.Assert.assertNotNull(nodeSpliterator57);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node41 = node20.clonePropsFrom(node39);
        int int42 = node39.getSideEffectFlags();
        node39.setOptionalArg(true);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        boolean boolean49 = node46.isNot();
        com.google.javascript.rhino.Node node50 = node46.getLastSibling();
        node46.setVarArgs(true);
        boolean boolean53 = node46.isExprResult();
        boolean boolean54 = node46.isLocalResultCall();
        node39.addChildrenToBack(node46);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder56 = node39.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder56);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(52);
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        node1.setJSType(jSType4);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node28 = node10.useSourceInfoFrom(node24);
        boolean boolean29 = node28.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isReturn();
        boolean boolean40 = node36.isNE();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(4095, node28, node31, node36, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node44 = node7.useSourceInfoIfMissingFrom(node43);
        node1.addChildrenToBack(node7);
        java.lang.String str46 = node7.getQualifiedName();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        node48.setVarArgs(false);
        boolean boolean55 = node48.isFromExterns();
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        node48.setDirectives((java.util.Set<java.lang.String>) strSet59);
        node7.setDirectives((java.util.Set<java.lang.String>) strSet59);
        int int63 = node7.getLineno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesGlobalState();
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        boolean boolean14 = node1.isWith();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        boolean boolean22 = node17.isAssignAdd();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node29 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node35 = node17.useSourceInfoFrom(node31);
        boolean boolean36 = node35.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        boolean boolean39 = node38.isOnlyModifiesThisCall();
        boolean boolean40 = node38.isEmpty();
        boolean boolean41 = node38.isArrayLit();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        boolean boolean44 = node43.isOnlyModifiesThisCall();
        boolean boolean45 = node43.isEmpty();
        boolean boolean46 = node43.isReturn();
        boolean boolean47 = node43.isNE();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(4095, node35, node38, node43, (int) (byte) 10, 32);
        boolean boolean51 = node1.isEquivalentTo(node43);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = node1.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  0 is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int4 = node3.getLength();
        java.util.Set<java.lang.String> strSet5 = node3.getDirectives();
        boolean boolean6 = node3.isStringKey();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        boolean boolean58 = node56.isEmpty();
        boolean boolean59 = node56.isArrayLit();
        com.google.javascript.rhino.Node node60 = node42.useSourceInfoFrom(node56);
        boolean boolean61 = node60.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        boolean boolean64 = node63.isOnlyModifiesThisCall();
        boolean boolean65 = node63.isEmpty();
        boolean boolean66 = node63.isArrayLit();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        boolean boolean69 = node68.isOnlyModifiesThisCall();
        boolean boolean70 = node68.isEmpty();
        boolean boolean71 = node68.isReturn();
        boolean boolean72 = node68.isNE();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(4095, node60, node63, node68, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        node77.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(36, node75, node77, node84);
        java.lang.String str86 = node77.toString();
        com.google.javascript.rhino.Node node87 = node37.useSourceInfoFrom(node77);
        boolean boolean88 = node87.isBlock();
        boolean boolean89 = node87.isSetterDef();
        node87.setVarArgs(false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "STRING  0" + "'", str86, "STRING  0");
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING  0", 45, 32);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        java.util.Set<java.lang.String> strSet47 = node46.getDirectives();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(strSet47);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node22.isRegExp();
        com.google.javascript.rhino.Node node41 = node22.getLastChild();
        boolean boolean42 = node22.isNew();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        boolean boolean38 = node20.isNE();
        boolean boolean39 = node20.isIf();
        boolean boolean40 = node20.isIf();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int4 = node3.getLength();
        com.google.javascript.rhino.Node node5 = node3.getFirstChild();
        java.lang.String str6 = node3.getSourceFileName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        boolean boolean56 = node41.isHook();
        boolean boolean57 = node41.isTry();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.clearAllFlags();
        int int5 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setMutatesThis();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 31 + "'", int5 == 31);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        node21.setVarArgs(false);
        boolean boolean28 = node21.isFromExterns();
        boolean boolean29 = node21.isNull();
        boolean boolean30 = node21.isFalse();
        boolean boolean31 = node15.hasChild(node21);
        com.google.javascript.rhino.jstype.JSType jSType32 = node15.getJSType();
        boolean boolean33 = node15.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int4 = node3.getLength();
        boolean boolean5 = node3.isStringKey();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        boolean boolean13 = node8.isAssignAdd();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node15.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node8.copyInformationFromForTree(node15);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        boolean boolean23 = node22.isOnlyModifiesThisCall();
        boolean boolean24 = node22.isEmpty();
        boolean boolean25 = node22.isArrayLit();
        com.google.javascript.rhino.Node node26 = node8.useSourceInfoFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] { node8 };
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, nodeArray27);
        int int30 = node28.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = node32.isOnlyModifiesThisCall();
        boolean boolean34 = node32.isEmpty();
        boolean boolean35 = node32.isReturn();
        boolean boolean36 = node32.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        boolean boolean41 = node38.isNot();
        boolean boolean42 = node38.isBreak();
        boolean boolean43 = node38.isIn();
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        com.google.javascript.rhino.Node node45 = node28.useSourceInfoFrom(node38);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        node47.setSourceEncodedPosition(4095);
        boolean boolean50 = node47.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = node47.getStaticSourceFile();
        boolean boolean52 = node47.isAssignAdd();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        node54.setSourceEncodedPosition(4095);
        boolean boolean57 = node54.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = node54.getStaticSourceFile();
        com.google.javascript.rhino.Node node59 = node47.copyInformationFromForTree(node54);
        boolean boolean60 = node47.isWith();
        node38.addChildToFront(node47);
        com.google.javascript.rhino.Node node62 = node38.getLastSibling();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        boolean boolean68 = node64.isBreak();
        boolean boolean69 = node64.isTypeOf();
        int int70 = node64.getCharno();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        boolean boolean73 = node72.isOnlyModifiesThisCall();
        int int74 = node72.getSourceOffset();
        boolean boolean75 = node72.isExprResult();
        com.google.javascript.rhino.Node node76 = node64.srcref(node72);
        boolean boolean77 = node76.isNE();
        com.google.javascript.rhino.Node node78 = node62.srcrefTree(node76);
        com.google.javascript.rhino.Node node79 = node3.useSourceInfoFromForTree(node62);
        boolean boolean80 = node62.isGetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(staticSourceFile51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(staticSourceFile58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4095 + "'", int70 == 4095);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isRegExp();
        int int6 = node1.getLength();
        boolean boolean7 = node1.isNumber();
        boolean boolean8 = node1.isWhile();
        // The following exception was thrown during execution in test generation
        try {
            node1.setDouble((double) 51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node1.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder20.append("hi!");
        fileLevelJsDocBuilder20.append("Node tree inequality:\nTree1:\nNUMBER 37.0 100\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: NUMBER 37.0 100\n\n\nSubtree2: STRING  0\n");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        boolean boolean30 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node25.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node43 = node25.useSourceInfoFrom(node39);
        boolean boolean44 = node43.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isReturn();
        boolean boolean55 = node51.isNE();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node43, node46, node51, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(36, node58, node60, node67);
        boolean boolean69 = node67.isTypeOf();
        boolean boolean70 = node67.isGetterDef();
        boolean boolean71 = node67.isFor();
        boolean boolean72 = node1.isEquivalentToTyped(node67);
        java.lang.Object obj74 = node1.getProp(0);
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        node1.setJSType(jSType75);
        java.lang.String str77 = node1.getQualifiedName();
        com.google.javascript.rhino.Node node78 = node1.cloneNode();
        boolean boolean79 = node1.isIn();
        java.lang.String str83 = node1.toString(true, false, false);
        java.lang.Appendable appendable84 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.appendStringTree(appendable84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "STRING " + "'", str83, "STRING ");
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        boolean boolean14 = node1.isThis();
        node1.removeProp(45);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType6 = node1.getJSType();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        boolean boolean12 = node8.isBreak();
        boolean boolean13 = node8.isTypeOf();
        boolean boolean14 = node8.isInc();
        boolean boolean15 = node8.isWhile();
        node8.setSourceEncodedPosition((-1));
        boolean boolean18 = node1.hasChild(node8);
        boolean boolean19 = node1.isAssign();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        boolean boolean28 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        node30.setSourceEncodedPosition(4095);
        boolean boolean33 = node30.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node30.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node23.copyInformationFromForTree(node30);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        boolean boolean38 = node37.isOnlyModifiesThisCall();
        boolean boolean39 = node37.isEmpty();
        boolean boolean40 = node37.isArrayLit();
        com.google.javascript.rhino.Node node41 = node23.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] { node23 };
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(32, nodeArray42);
        int int45 = node43.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        boolean boolean48 = node47.isOnlyModifiesThisCall();
        boolean boolean49 = node47.isEmpty();
        boolean boolean50 = node47.isReturn();
        boolean boolean51 = node47.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        boolean boolean57 = node53.isBreak();
        boolean boolean58 = node53.isIn();
        com.google.javascript.rhino.Node node59 = node47.useSourceInfoIfMissingFromForTree(node53);
        com.google.javascript.rhino.Node node60 = node43.useSourceInfoFrom(node53);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        node62.setSourceEncodedPosition(4095);
        boolean boolean65 = node62.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = node62.getStaticSourceFile();
        boolean boolean67 = node62.isAssignAdd();
        java.util.Set<java.lang.String> strSet68 = node62.getDirectives();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("");
        node70.setSourceEncodedPosition(4095);
        boolean boolean73 = node70.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = node70.getStaticSourceFile();
        node70.setVarArgs(false);
        boolean boolean77 = node70.isFromExterns();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("");
        node79.setSourceEncodedPosition(4095);
        boolean boolean82 = node79.isNot();
        com.google.javascript.rhino.Node node83 = node79.getLastSibling();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(37, node43, node62, node70, node83);
        boolean boolean85 = node84.isExprResult();
        boolean boolean86 = node1.isEquivalentToTyped(node84);
        java.lang.Class<?> wildcardClass87 = node84.getClass();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(staticSourceFile66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(strSet68);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(staticSourceFile74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(15, "NUMBER 8.0\n", 42, 54);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isInstanceOf();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        boolean boolean13 = node12.isOnlyModifiesThisCall();
        boolean boolean14 = node12.isEmpty();
        node6.putProp((int) '4', (java.lang.Object) node12);
        boolean boolean16 = node12.isDebugger();
        boolean boolean17 = node12.isName();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("STRING  0");
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100, node21, 54, 35);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean29 = node28.isTypeOf();
        boolean boolean30 = node28.isInc();
        com.google.javascript.rhino.Node node31 = node28.cloneTree();
        com.google.javascript.rhino.Node node32 = node21.copyInformationFrom(node31);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        node37.setSourceEncodedPosition(4095);
        boolean boolean40 = node37.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = node37.getStaticSourceFile();
        boolean boolean42 = node37.isAssignAdd();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("");
        node44.setSourceEncodedPosition(4095);
        boolean boolean47 = node44.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = node44.getStaticSourceFile();
        com.google.javascript.rhino.Node node49 = node37.copyInformationFromForTree(node44);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isArrayLit();
        com.google.javascript.rhino.Node node55 = node37.useSourceInfoFrom(node51);
        boolean boolean56 = node55.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        boolean boolean59 = node58.isOnlyModifiesThisCall();
        boolean boolean60 = node58.isEmpty();
        boolean boolean61 = node58.isArrayLit();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        boolean boolean64 = node63.isOnlyModifiesThisCall();
        boolean boolean65 = node63.isEmpty();
        boolean boolean66 = node63.isReturn();
        boolean boolean67 = node63.isNE();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(4095, node55, node58, node63, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node71 = node34.useSourceInfoIfMissingFrom(node70);
        boolean boolean72 = node71.isNull();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("");
        boolean boolean75 = node74.isOnlyModifiesThisCall();
        boolean boolean76 = node74.isEmpty();
        boolean boolean77 = node74.isReturn();
        boolean boolean78 = node74.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType79 = node74.getJSType();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString("");
        node81.setSourceEncodedPosition(4095);
        boolean boolean84 = node81.isNot();
        boolean boolean85 = node81.isBreak();
        boolean boolean86 = node81.isTypeOf();
        boolean boolean87 = node81.isInc();
        boolean boolean88 = node81.isWhile();
        node81.setSourceEncodedPosition((-1));
        boolean boolean91 = node74.hasChild(node81);
        com.google.javascript.rhino.Node node92 = node71.copyInformationFrom(node81);
        com.google.javascript.rhino.Node node93 = node31.srcrefTree(node71);
        node12.putProp(49, (java.lang.Object) node71);
        boolean boolean95 = node4.hasChild(node71);
        com.google.javascript.rhino.Node node96 = node4.getFirstChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(staticSourceFile41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(staticSourceFile48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(node96);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray3, 12, 100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(53, nodeArray3);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(41, nodeArray3, (int) (byte) -1, 31);
        boolean boolean11 = node10.isRegExp();
        node10.putBooleanProp((int) (byte) 10, true);
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        boolean boolean11 = node10.isIf();
        boolean boolean12 = node10.isArrayLit();
        boolean boolean13 = node10.isObjectLit();
        boolean boolean14 = node10.wasEmptyNode();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        boolean boolean20 = node16.isBreak();
        boolean boolean21 = node16.isTypeOf();
        boolean boolean22 = node16.isDec();
        boolean boolean23 = node16.isInstanceOf();
        com.google.javascript.rhino.Node node24 = node10.clonePropsFrom(node16);
        com.google.javascript.rhino.Node node25 = node24.cloneTree();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray4, 12, 100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(53, nodeArray4);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 0, nodeArray4);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(52, nodeArray4);
        org.junit.Assert.assertNotNull(nodeArray4);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        boolean boolean19 = node15.isVarArgs();
        node15.setSourceFileForTesting("Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nTYPEOF 0\n    STRING \n\n\nSubtree1: STRING \n\n\nSubtree2: TYPEOF 0\n    STRING \n");
        com.google.javascript.rhino.Node node22 = node8.copyInformationFromForTree(node15);
        boolean boolean23 = node8.isScript();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node29 = node8.copyInformationFromForTree(node28);
        boolean boolean30 = node8.wasEmptyNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setAllFlags();
        int int3 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setThrows();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        boolean boolean11 = node10.isIf();
        com.google.javascript.rhino.jstype.JSType jSType12 = null;
        node10.setJSType(jSType12);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node41 = node20.clonePropsFrom(node39);
        node39.setQuotedString();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean47 = node46.isObjectLit();
        boolean boolean48 = node46.isFunction();
        java.lang.String str49 = node39.checkTreeEquals(node46);
        boolean boolean50 = node39.isFalse();
        boolean boolean51 = node39.isAssignAdd();
        boolean boolean52 = node39.isQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  [quoted: 1]\n\n\nTree2:\nNUMBER 37.0 100\n\n\nSubtree1: STRING  [quoted: 1]\n\n\nSubtree2: NUMBER 37.0 100\n" + "'", str49, "Node tree inequality:\nTree1:\nSTRING  [quoted: 1]\n\n\nTree2:\nNUMBER 37.0 100\n\n\nSubtree1: STRING  [quoted: 1]\n\n\nSubtree2: NUMBER 37.0 100\n");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        boolean boolean62 = node58.isBreak();
        boolean boolean63 = node58.isTypeOf();
        int int64 = node58.getCharno();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("");
        boolean boolean67 = node66.isOnlyModifiesThisCall();
        int int68 = node66.getSourceOffset();
        boolean boolean69 = node66.isExprResult();
        com.google.javascript.rhino.Node node70 = node58.srcref(node66);
        boolean boolean71 = node70.isNE();
        com.google.javascript.rhino.Node node72 = node56.srcrefTree(node70);
        int int73 = node56.getLength();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable74 = node56.getAncestors();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4095 + "'", int64 == 4095);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(ancestorIterable74);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        int int3 = node1.getSourceOffset();
        boolean boolean4 = node1.isLabel();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isEmpty();
        boolean boolean9 = node6.isArrayLit();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        boolean boolean12 = node11.isOnlyModifiesThisCall();
        boolean boolean13 = node11.isSetterDef();
        com.google.javascript.rhino.Node node14 = node6.srcref(node11);
        com.google.javascript.rhino.Node node15 = node14.getLastSibling();
        boolean boolean16 = node15.isIf();
        node15.setLength(4);
        boolean boolean19 = node15.isFunction();
        com.google.javascript.rhino.Node node20 = node1.useSourceInfoIfMissingFromForTree(node15);
        node1.setCharno(39);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray3, 12, 100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(53, nodeArray3);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100, nodeArray3);
        boolean boolean9 = node8.isFalse();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        boolean boolean16 = node11.isAssignAdd();
        java.util.Set<java.lang.String> strSet17 = node11.getDirectives();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        boolean boolean20 = node19.isOnlyModifiesThisCall();
        boolean boolean21 = node19.isEmpty();
        boolean boolean22 = node19.isReturn();
        boolean boolean23 = node19.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType24 = node19.getJSType();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        node26.setSourceEncodedPosition(4095);
        boolean boolean29 = node26.isNot();
        boolean boolean30 = node26.isBreak();
        boolean boolean31 = node26.isTypeOf();
        boolean boolean32 = node26.isInc();
        boolean boolean33 = node26.isWhile();
        node26.setSourceEncodedPosition((-1));
        boolean boolean36 = node19.hasChild(node26);
        boolean boolean37 = node19.isAssign();
        int int38 = node19.getSideEffectFlags();
        // The following exception was thrown during execution in test generation
        try {
            node8.addChildrenAfter(node11, node19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        boolean boolean14 = node1.isNE();
        boolean boolean15 = node1.isThrow();
        boolean boolean16 = node1.isFor();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        com.google.javascript.rhino.Node node27 = node26.getLastSibling();
        boolean boolean28 = node27.isIf();
        com.google.javascript.rhino.Node node29 = node1.clonePropsFrom(node27);
        boolean boolean30 = node27.isRegExp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node4.isAnd();
        node4.setLength(4095);
        com.google.javascript.rhino.Node node78 = node4.getParent();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable79 = node4.children();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(nodeIterable79);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 8);
        com.google.javascript.rhino.Node node2 = node1.getLastSibling();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node6.getStaticSourceFile();
        boolean boolean11 = node6.isAssignAdd();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        com.google.javascript.rhino.Node node18 = node6.copyInformationFromForTree(node13);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        boolean boolean21 = node20.isOnlyModifiesThisCall();
        boolean boolean22 = node20.isEmpty();
        boolean boolean23 = node20.isArrayLit();
        com.google.javascript.rhino.Node node24 = node6.useSourceInfoFrom(node20);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] { node6 };
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(32, nodeArray25);
        int int28 = node26.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        node36.setSourceEncodedPosition(4095);
        boolean boolean39 = node36.isNot();
        boolean boolean40 = node36.isBreak();
        boolean boolean41 = node36.isIn();
        com.google.javascript.rhino.Node node42 = node30.useSourceInfoIfMissingFromForTree(node36);
        com.google.javascript.rhino.Node node43 = node26.useSourceInfoFrom(node36);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        node45.setSourceEncodedPosition(4095);
        boolean boolean48 = node45.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = node45.getStaticSourceFile();
        boolean boolean50 = node45.isAssignAdd();
        java.util.Set<java.lang.String> strSet51 = node45.getDirectives();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node53.getStaticSourceFile();
        node53.setVarArgs(false);
        boolean boolean60 = node53.isFromExterns();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        node62.setSourceEncodedPosition(4095);
        boolean boolean65 = node62.isNot();
        com.google.javascript.rhino.Node node66 = node62.getLastSibling();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(37, node26, node45, node53, node66);
        boolean boolean68 = node67.isExprResult();
        com.google.javascript.rhino.Node node69 = node67.removeFirstChild();
        boolean boolean70 = node2.isEquivalentTo(node67);
        com.google.javascript.rhino.Node[] nodeArray74 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray74, 12, 100);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(53, nodeArray74);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (byte) 0, nodeArray74);
        com.google.javascript.rhino.InputId inputId80 = node79.getInputId();
        node67.addChildToBack(node79);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(staticSourceFile49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(strSet51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(nodeArray74);
        org.junit.Assert.assertNull(inputId80);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("");
        boolean boolean72 = node71.isOnlyModifiesThisCall();
        boolean boolean73 = node71.isEmpty();
        boolean boolean74 = node71.isArrayLit();
        com.google.javascript.rhino.Node node75 = node57.useSourceInfoFrom(node71);
        boolean boolean76 = node71.hasChildren();
        com.google.javascript.rhino.Node node77 = node32.copyInformationFrom(node71);
        boolean boolean78 = node32.isThis();
        boolean boolean79 = node32.isInc();
        com.google.javascript.rhino.Node node80 = node32.cloneTree();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("STRING  0");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, node2, 54, 35);
        java.lang.String str9 = node5.toString(false, false, true);
        boolean boolean10 = node5.isExprResult();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OR" + "'", str9, "OR");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(49);
        sideEffectFlags1.setReturnsTainted();
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, 2, 30);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node15.getStaticSourceFile();
        boolean boolean20 = node15.isAssignAdd();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        node22.setSourceEncodedPosition(4095);
        boolean boolean25 = node22.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node22.getStaticSourceFile();
        com.google.javascript.rhino.Node node27 = node15.copyInformationFromForTree(node22);
        boolean boolean28 = node15.isNE();
        boolean boolean29 = node15.isThrow();
        boolean boolean30 = node15.isFor();
        com.google.javascript.rhino.Node node31 = node7.useSourceInfoFrom(node15);
        boolean boolean32 = node7.isOptionalArg();
        boolean boolean33 = node7.isArrayLit();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(48);
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesThis();
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        boolean boolean65 = node64.isExprResult();
        boolean boolean66 = node64.isSwitch();
        int int67 = node64.getSourcePosition();
        node64.setVarArgs(false);
        boolean boolean70 = node64.isVoid();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        com.google.javascript.rhino.InputId inputId10 = null;
        node9.setInputId(inputId10);
        java.util.Set<java.lang.String> strSet12 = node9.getDirectives();
        boolean boolean13 = node9.isBreak();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        boolean boolean7 = node1.isStringKey();
        boolean boolean8 = node1.isIf();
        boolean boolean9 = node1.isComma();
        com.google.javascript.rhino.Node node10 = node1.getLastSibling();
        boolean boolean11 = node10.isNew();
        boolean boolean12 = node10.isNull();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int5 = node4.getLength();
        int int6 = node4.getCharno();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        boolean boolean16 = node11.isAssignAdd();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node23 = node11.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node29 = node11.useSourceInfoFrom(node25);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] { node11 };
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(32, nodeArray30);
        int int33 = node31.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        boolean boolean36 = node35.isOnlyModifiesThisCall();
        boolean boolean37 = node35.isEmpty();
        boolean boolean38 = node35.isReturn();
        boolean boolean39 = node35.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        boolean boolean45 = node41.isBreak();
        boolean boolean46 = node41.isIn();
        com.google.javascript.rhino.Node node47 = node35.useSourceInfoIfMissingFromForTree(node41);
        com.google.javascript.rhino.Node node48 = node31.useSourceInfoFrom(node41);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        boolean boolean55 = node50.isAssignAdd();
        java.util.Set<java.lang.String> strSet56 = node50.getDirectives();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node58.getStaticSourceFile();
        node58.setVarArgs(false);
        boolean boolean65 = node58.isFromExterns();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        node67.setSourceEncodedPosition(4095);
        boolean boolean70 = node67.isNot();
        com.google.javascript.rhino.Node node71 = node67.getLastSibling();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(37, node31, node50, node58, node71);
        boolean boolean73 = node72.isExprResult();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(49, node72, (int) (byte) 10, (int) (short) 10);
        boolean boolean77 = node76.isAssign();
        com.google.javascript.rhino.Node node79 = node76.getAncestor(0);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(31, node4, node76);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder81 = node76.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder81);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        boolean boolean11 = node8.isReturn();
        boolean boolean12 = node8.isRegExp();
        int int13 = node8.getLength();
        boolean boolean14 = node8.isNumber();
        boolean boolean16 = node8.getBooleanProp(12);
        int int17 = node1.getIndexOfChild(node8);
        com.google.javascript.rhino.Node node18 = node8.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = node18.isGetProp();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        com.google.javascript.rhino.Node node28 = node8.getLastChild();
        boolean boolean29 = node8.isInstanceOf();
        boolean boolean30 = node8.isBlock();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = node32.isOnlyModifiesThisCall();
        node8.addChildToBack(node32);
        boolean boolean35 = node8.isVoid();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node15 = node9.removeFirstChild();
        boolean boolean16 = node9.isAnd();
        boolean boolean17 = node9.isDec();
        int int18 = node9.getType();
        java.lang.String str19 = node9.toString();
        int int21 = node9.getIntProp(409700);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        boolean boolean28 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isRegExp();
        int int35 = node30.getLength();
        boolean boolean36 = node30.isNumber();
        boolean boolean38 = node30.getBooleanProp(12);
        int int39 = node23.getIndexOfChild(node30);
        com.google.javascript.rhino.Node node40 = node30.getFirstChild();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(42);
        com.google.javascript.rhino.Node node43 = node30.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        boolean boolean49 = node46.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node46.getStaticSourceFile();
        boolean boolean51 = node46.isAssignAdd();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node53.getStaticSourceFile();
        com.google.javascript.rhino.Node node58 = node46.copyInformationFromForTree(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        boolean boolean61 = node60.isOnlyModifiesThisCall();
        boolean boolean62 = node60.isEmpty();
        boolean boolean63 = node60.isArrayLit();
        com.google.javascript.rhino.Node node64 = node46.useSourceInfoFrom(node60);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder65 = node46.new FileLevelJsDocBuilder();
        boolean boolean66 = node46.isDefaultCase();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (byte) 0, node46, (int) ' ', 53);
        node46.removeProp((int) (byte) -1);
        java.lang.String str75 = node46.toString(false, true, false);
        boolean boolean76 = node46.isDebugger();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(100, node9, node42, node46, (int) (short) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 40 + "'", int18 == 40);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "STRING  0" + "'", str19, "STRING  0");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "STRING " + "'", str75, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        boolean boolean39 = node38.isOptionalArg();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = node38.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        boolean boolean36 = node23.isInstanceOf();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        com.google.javascript.rhino.Node node75 = node72.getLastSibling();
        boolean boolean76 = node72.isVarArgs();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        boolean boolean6 = node2.isBreak();
        boolean boolean7 = node2.isTypeOf();
        int int8 = node2.getCharno();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        boolean boolean11 = node10.isOnlyModifiesThisCall();
        int int12 = node10.getSourceOffset();
        boolean boolean13 = node10.isExprResult();
        com.google.javascript.rhino.Node node14 = node2.srcref(node10);
        boolean boolean15 = node14.isNE();
        boolean boolean16 = node14.isContinue();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(15, node14, 10, 12);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        boolean boolean26 = node21.isAssignAdd();
        java.util.Set<java.lang.String> strSet27 = node21.getDirectives();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node30 = node21.copyInformationFrom(node29);
        node30.setCharno(48);
        // The following exception was thrown during execution in test generation
        try {
            node19.removeChild(node30);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4095 + "'", int8 == 4095);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node14 = node13.cloneNode();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        boolean boolean22 = node17.isAssignAdd();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node29 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node35 = node17.useSourceInfoFrom(node31);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder36 = node17.new FileLevelJsDocBuilder();
        boolean boolean37 = node17.isDefaultCase();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 0, node17, (int) ' ', 53);
        boolean boolean41 = node17.isQuotedString();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node46 = node43.getLastSibling();
        node43.setSourceFileForTesting("");
        node17.addChildrenToFront(node43);
        boolean boolean50 = node13.isEquivalentToTyped(node17);
        int int51 = node13.getChildCount();
        node13.setVarArgs(true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int5 = node4.getLength();
        int int6 = node4.getCharno();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        boolean boolean16 = node11.isAssignAdd();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node23 = node11.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node29 = node11.useSourceInfoFrom(node25);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] { node11 };
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(32, nodeArray30);
        int int33 = node31.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        boolean boolean36 = node35.isOnlyModifiesThisCall();
        boolean boolean37 = node35.isEmpty();
        boolean boolean38 = node35.isReturn();
        boolean boolean39 = node35.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        boolean boolean45 = node41.isBreak();
        boolean boolean46 = node41.isIn();
        com.google.javascript.rhino.Node node47 = node35.useSourceInfoIfMissingFromForTree(node41);
        com.google.javascript.rhino.Node node48 = node31.useSourceInfoFrom(node41);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        boolean boolean55 = node50.isAssignAdd();
        java.util.Set<java.lang.String> strSet56 = node50.getDirectives();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node58.getStaticSourceFile();
        node58.setVarArgs(false);
        boolean boolean65 = node58.isFromExterns();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        node67.setSourceEncodedPosition(4095);
        boolean boolean70 = node67.isNot();
        com.google.javascript.rhino.Node node71 = node67.getLastSibling();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(37, node31, node50, node58, node71);
        boolean boolean73 = node72.isExprResult();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(49, node72, (int) (byte) 10, (int) (short) 10);
        boolean boolean77 = node76.isAssign();
        com.google.javascript.rhino.Node node79 = node76.getAncestor(0);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(31, node4, node76);
        boolean boolean81 = node76.isInstanceOf();
        java.lang.String str82 = node76.toStringTree();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "THROW 10\n    CALL\n        TYPEOF 0\n            STRING \n        STRING  0\n        STRING  0\n        STRING  0\n" + "'", str82, "THROW 10\n    CALL\n        TYPEOF 0\n            STRING \n        STRING  0\n        STRING  0\n        STRING  0\n");
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("TYPEOF 0\n    STRING \n", 37, 43);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray5, 12, 100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(53, nodeArray5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100, nodeArray5);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray5);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(24, nodeArray5, 0, (int) (short) 0);
        org.junit.Assert.assertNotNull(nodeArray5);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        com.google.javascript.rhino.Node node6 = node1.removeFirstChild();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node28 = node10.useSourceInfoFrom(node24);
        boolean boolean29 = node28.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isReturn();
        boolean boolean40 = node36.isNE();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(4095, node28, node31, node36, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        node45.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(36, node43, node45, node52);
        int int54 = node1.getIndexOfChild(node52);
        boolean boolean55 = node1.isInstanceOf();
        node1.setSourceEncodedPosition(47);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("");
        boolean boolean72 = node71.isOnlyModifiesThisCall();
        boolean boolean73 = node71.isEmpty();
        boolean boolean74 = node71.isArrayLit();
        com.google.javascript.rhino.Node node75 = node57.useSourceInfoFrom(node71);
        boolean boolean76 = node71.hasChildren();
        com.google.javascript.rhino.Node node77 = node32.copyInformationFrom(node71);
        boolean boolean78 = node32.isWhile();
        boolean boolean79 = node32.isAssign();
        boolean boolean80 = node32.hasChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isSetterDef();
        com.google.javascript.rhino.Node node5 = node1.getAncestor((int) (short) 0);
        int int7 = node5.getIntProp(0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.Node node5 = node1.getLastSibling();
        node1.setVarArgs(true);
        boolean boolean8 = node1.isFor();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        node10.setString("STRING \n");
        node1.addChildToBack(node10);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node10.setStaticSourceFile(staticSourceFile16);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        boolean boolean6 = node1.isContinue();
        boolean boolean7 = node1.isSwitch();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        boolean boolean11 = node9.isEmpty();
        boolean boolean12 = node9.isReturn();
        boolean boolean13 = node9.isRegExp();
        java.lang.String str14 = node9.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable15 = node9.getAncestors();
        com.google.javascript.rhino.Node node16 = node1.copyInformationFromForTree(node9);
        node16.putBooleanProp(42, true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "STRING \n" + "'", str14, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable15);
        org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        boolean boolean11 = node1.isFromExterns();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder12 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        boolean boolean15 = node14.isOnlyModifiesThisCall();
        boolean boolean16 = node14.isEmpty();
        boolean boolean17 = node14.isReturn();
        boolean boolean18 = node14.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        boolean boolean24 = node20.isBreak();
        boolean boolean25 = node20.isIn();
        com.google.javascript.rhino.Node node26 = node14.useSourceInfoIfMissingFromForTree(node20);
        boolean boolean27 = node14.isThis();
        com.google.javascript.rhino.jstype.JSType jSType28 = node14.getJSType();
        com.google.javascript.rhino.Node node29 = null;
        node1.addChildAfter(node14, node29);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSType28);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 8);
        int int3 = node1.getIntProp(15);
        node1.detachChildren();
        java.lang.String str5 = node1.toStringTree();
        int int6 = node1.getLength();
        java.lang.Object obj8 = node1.getProp((int) (short) 1);
        boolean boolean9 = node1.isInstanceOf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 8.0\n" + "'", str5, "NUMBER 8.0\n");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isTypeOf();
        node8.setVarArgs(false);
        boolean boolean18 = node8.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node72.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node76 = node72.getParent();
        java.lang.String str77 = node72.getSourceFileName();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        boolean boolean30 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node25.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node43 = node25.useSourceInfoFrom(node39);
        boolean boolean44 = node43.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isReturn();
        boolean boolean55 = node51.isNE();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node43, node46, node51, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(36, node58, node60, node67);
        boolean boolean69 = node67.isTypeOf();
        boolean boolean70 = node67.isGetterDef();
        boolean boolean71 = node67.isFor();
        boolean boolean72 = node1.isEquivalentToTyped(node67);
        java.lang.Object obj74 = node1.getProp(0);
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        node1.setJSType(jSType75);
        com.google.javascript.rhino.InputId inputId77 = null;
        node1.setInputId(inputId77);
        com.google.javascript.rhino.Node node79 = node1.getLastChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNull(node79);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isEmpty();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        boolean boolean13 = node8.isAssignAdd();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node15.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node8.copyInformationFromForTree(node15);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        boolean boolean23 = node22.isOnlyModifiesThisCall();
        boolean boolean24 = node22.isEmpty();
        boolean boolean25 = node22.isArrayLit();
        com.google.javascript.rhino.Node node26 = node8.useSourceInfoFrom(node22);
        boolean boolean27 = node26.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isArrayLit();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("");
        boolean boolean35 = node34.isOnlyModifiesThisCall();
        boolean boolean36 = node34.isEmpty();
        boolean boolean37 = node34.isReturn();
        boolean boolean38 = node34.isNE();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(4095, node26, node29, node34, (int) (byte) 10, 32);
        boolean boolean42 = node34.isCase();
        com.google.javascript.rhino.Node node43 = node1.srcref(node34);
        com.google.javascript.rhino.Node node44 = node43.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = node44.isNull();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node44);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node4 = node1.getLastSibling();
        boolean boolean5 = node1.isExprResult();
        boolean boolean6 = node1.hasChildren();
        boolean boolean7 = node1.isTrue();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        boolean boolean17 = node12.isAssignAdd();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        node19.setSourceEncodedPosition(4095);
        boolean boolean22 = node19.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node19.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node12.copyInformationFromForTree(node19);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isArrayLit();
        com.google.javascript.rhino.Node node30 = node12.useSourceInfoFrom(node26);
        boolean boolean31 = node30.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        boolean boolean34 = node33.isOnlyModifiesThisCall();
        boolean boolean35 = node33.isEmpty();
        boolean boolean36 = node33.isArrayLit();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        boolean boolean39 = node38.isOnlyModifiesThisCall();
        boolean boolean40 = node38.isEmpty();
        boolean boolean41 = node38.isReturn();
        boolean boolean42 = node38.isNE();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(4095, node30, node33, node38, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node46 = node9.useSourceInfoIfMissingFrom(node45);
        com.google.javascript.rhino.Node node48 = node45.getAncestor(38);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        boolean boolean55 = node50.isAssignAdd();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        com.google.javascript.rhino.Node node62 = node50.copyInformationFromForTree(node57);
        boolean boolean63 = node50.isNE();
        boolean boolean64 = node50.isThrow();
        boolean boolean65 = node50.isFor();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isArrayLit();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        boolean boolean73 = node72.isOnlyModifiesThisCall();
        boolean boolean74 = node72.isSetterDef();
        com.google.javascript.rhino.Node node75 = node67.srcref(node72);
        com.google.javascript.rhino.Node node76 = node75.getLastSibling();
        boolean boolean77 = node76.isIf();
        com.google.javascript.rhino.Node node78 = node50.clonePropsFrom(node76);
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = null;
        node76.setJSDocInfo(jSDocInfo79);
        boolean boolean81 = node76.isGetterDef();
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildBefore(node48, node76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.clearSideEffectFlags();
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 43, 10, 47);
        boolean boolean4 = node3.isIf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        boolean boolean11 = node1.isNE();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node14.getStaticSourceFile();
        boolean boolean19 = node14.isAssignAdd();
        int int20 = node14.getLineno();
        node14.setSourceFileForTesting("STRING ");
        boolean boolean23 = node14.isStringKey();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        boolean boolean30 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node25.copyInformationFromForTree(node32);
        boolean boolean38 = node32.isFromExterns();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        node40.setSourceEncodedPosition(4095);
        boolean boolean43 = node40.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = node40.getStaticSourceFile();
        boolean boolean45 = node40.isAssignAdd();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        node47.setSourceEncodedPosition(4095);
        boolean boolean50 = node47.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = node47.getStaticSourceFile();
        com.google.javascript.rhino.Node node52 = node40.copyInformationFromForTree(node47);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        boolean boolean55 = node54.isOnlyModifiesThisCall();
        boolean boolean56 = node54.isEmpty();
        boolean boolean57 = node54.isArrayLit();
        com.google.javascript.rhino.Node node58 = node40.useSourceInfoFrom(node54);
        boolean boolean59 = node54.hasChildren();
        boolean boolean60 = node54.isNumber();
        boolean boolean61 = node54.isVarArgs();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node67 = node66.cloneTree();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(50, node14, node32, node54, node67, 32, 29);
        boolean boolean71 = node54.isComma();
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildrenToFront(node54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(staticSourceFile44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(staticSourceFile51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isEmpty();
        boolean boolean6 = node1.isRegExp();
        boolean boolean7 = node1.isWith();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        boolean boolean11 = node9.isEmpty();
        boolean boolean12 = node9.isArrayLit();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        boolean boolean15 = node14.isOnlyModifiesThisCall();
        boolean boolean16 = node14.isSetterDef();
        com.google.javascript.rhino.Node node17 = node9.srcref(node14);
        com.google.javascript.rhino.Node node18 = node17.getLastSibling();
        boolean boolean19 = node18.isIf();
        boolean boolean20 = node18.hasMoreThanOneChild();
        node18.setVarArgs(true);
        boolean boolean23 = node18.isDo();
        boolean boolean24 = node18.isDefaultCase();
        boolean boolean25 = node18.isThis();
        node1.addChildToBack(node18);
        boolean boolean27 = node18.isFunction();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) 100, "hi!", 32, 37);
        com.google.javascript.rhino.Node node5 = node4.removeFirstChild();
        int int6 = node4.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        node8.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node20 = node8.getAncestor(0);
        node20.setLineno((int) '4');
        boolean boolean23 = node20.isExprResult();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("TRUE\n    STRING STRING \n    STRING  [length: 4]\n    SHEQ\n        STRING  0\n", 35, 54);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        boolean boolean65 = node64.isThrow();
        com.google.javascript.rhino.Node node66 = node64.removeChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNew();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node6.getStaticSourceFile();
        boolean boolean11 = node6.isAssignAdd();
        boolean boolean12 = node6.isStringKey();
        boolean boolean13 = node6.isDec();
        boolean boolean14 = node1.isEquivalentTo(node6);
        boolean boolean15 = node6.isCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        boolean boolean28 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        node30.setSourceEncodedPosition(4095);
        boolean boolean33 = node30.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node30.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node23.copyInformationFromForTree(node30);
        com.google.javascript.rhino.Node node36 = node30.removeFirstChild();
        boolean boolean37 = node30.isAnd();
        boolean boolean38 = node30.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        boolean boolean41 = node40.isOnlyModifiesThisCall();
        boolean boolean42 = node40.isEmpty();
        boolean boolean43 = node40.isArrayLit();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        boolean boolean46 = node45.isOnlyModifiesThisCall();
        boolean boolean47 = node45.isSetterDef();
        com.google.javascript.rhino.Node node48 = node40.srcref(node45);
        node30.addChildToFront(node40);
        com.google.javascript.rhino.Node node50 = node30.getLastChild();
        boolean boolean51 = node30.isInstanceOf();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node53.getStaticSourceFile();
        boolean boolean58 = node53.isAssignAdd();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        boolean boolean63 = node60.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = node60.getStaticSourceFile();
        com.google.javascript.rhino.Node node65 = node53.copyInformationFromForTree(node60);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isArrayLit();
        com.google.javascript.rhino.Node node71 = node53.useSourceInfoFrom(node67);
        boolean boolean72 = node53.isVarArgs();
        int int73 = node53.getType();
        node30.addChildToBack(node53);
        int int75 = node1.getIndexOfChild(node53);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int80 = node79.getLength();
        boolean boolean81 = node79.isStringKey();
        com.google.javascript.rhino.Node node82 = node79.removeFirstChild();
        boolean boolean83 = node79.isGetterDef();
        com.google.javascript.rhino.Node node84 = node1.clonePropsFrom(node79);
        boolean boolean85 = node79.isName();
        boolean boolean86 = node79.isGetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(staticSourceFile64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 40 + "'", int73 == 40);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        boolean boolean28 = node8.isVar();
        boolean boolean29 = node8.isIf();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node50 = node32.useSourceInfoFrom(node46);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] { node32 };
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(32, nodeArray51);
        int int54 = node52.getIntProp((int) (byte) 100);
        boolean boolean56 = node52.getBooleanProp(0);
        com.google.javascript.rhino.Node node57 = node8.useSourceInfoIfMissingFromForTree(node52);
        boolean boolean58 = node52.isAssignAdd();
        boolean boolean59 = node52.isCatch();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        boolean boolean7 = node1.isStringKey();
        boolean boolean8 = node1.isIf();
        boolean boolean9 = node1.isLabelName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node14 = node7.getNext();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = node14.isOr();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(12, "STRING  0");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(36);
        boolean boolean5 = node4.isFromExterns();
        boolean boolean6 = node4.isComma();
        com.google.javascript.rhino.Node node7 = node2.useSourceInfoFromForTree(node4);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node28 = node10.useSourceInfoFrom(node24);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] { node10 };
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(32, nodeArray29);
        int int32 = node30.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("");
        boolean boolean35 = node34.isOnlyModifiesThisCall();
        boolean boolean36 = node34.isEmpty();
        boolean boolean37 = node34.isReturn();
        boolean boolean38 = node34.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        node40.setSourceEncodedPosition(4095);
        boolean boolean43 = node40.isNot();
        boolean boolean44 = node40.isBreak();
        boolean boolean45 = node40.isIn();
        com.google.javascript.rhino.Node node46 = node34.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node47 = node30.useSourceInfoFrom(node40);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        boolean boolean54 = node49.isAssignAdd();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        node56.setSourceEncodedPosition(4095);
        boolean boolean59 = node56.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile60 = node56.getStaticSourceFile();
        com.google.javascript.rhino.Node node61 = node49.copyInformationFromForTree(node56);
        boolean boolean62 = node49.isWith();
        node40.addChildToFront(node49);
        com.google.javascript.rhino.Node node64 = node40.getLastSibling();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("");
        node66.setSourceEncodedPosition(4095);
        boolean boolean69 = node66.isNot();
        boolean boolean70 = node66.isBreak();
        boolean boolean71 = node66.isTypeOf();
        int int72 = node66.getCharno();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("");
        boolean boolean75 = node74.isOnlyModifiesThisCall();
        int int76 = node74.getSourceOffset();
        boolean boolean77 = node74.isExprResult();
        com.google.javascript.rhino.Node node78 = node66.srcref(node74);
        boolean boolean79 = node78.isNE();
        com.google.javascript.rhino.Node node80 = node64.srcrefTree(node78);
        com.google.javascript.rhino.Node node81 = node4.useSourceInfoIfMissingFrom(node80);
        node80.setCharno(46);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(staticSourceFile60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4095 + "'", int72 == 4095);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("TRUE\n    STRING STRING \n    STRING  [length: 4]\n    SHEQ\n        STRING  0\n");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 1, node2);
        node2.removeProp(47);
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 43, 10, 47);
        boolean boolean5 = node3.getBooleanProp(2);
        boolean boolean6 = node3.isThis();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node14 = node13.cloneNode();
        boolean boolean15 = node14.isDelProp();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        node28.setSourceEncodedPositionForTree(43);
        java.lang.String str38 = node28.toString();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(10, 42, (int) (byte) 1);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("");
        boolean boolean45 = node44.isOnlyModifiesThisCall();
        boolean boolean46 = node44.isEmpty();
        boolean boolean47 = node44.isArrayLit();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isSetterDef();
        com.google.javascript.rhino.Node node52 = node44.srcref(node49);
        com.google.javascript.rhino.Node node53 = node52.getLastSibling();
        boolean boolean54 = node53.isSetterDef();
        com.google.javascript.rhino.Node node55 = node42.clonePropsFrom(node53);
        int int56 = node42.getSourceOffset();
        node28.addChildrenToFront(node42);
        com.google.javascript.rhino.Node node58 = node28.removeFirstChild();
        boolean boolean59 = node28.isScript();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "STRING  0" + "'", str38, "STRING  0");
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node28 = node10.useSourceInfoFrom(node24);
        boolean boolean29 = node28.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isReturn();
        boolean boolean40 = node36.isNE();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(4095, node28, node31, node36, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node44 = node7.useSourceInfoIfMissingFrom(node43);
        node1.addChildrenToBack(node7);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        node47.setSourceEncodedPosition(4095);
        boolean boolean50 = node47.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = node47.getStaticSourceFile();
        boolean boolean52 = node47.isAssignAdd();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        node54.setSourceEncodedPosition(4095);
        boolean boolean57 = node54.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = node54.getStaticSourceFile();
        com.google.javascript.rhino.Node node59 = node47.copyInformationFromForTree(node54);
        com.google.javascript.rhino.Node node60 = node54.removeFirstChild();
        boolean boolean61 = node54.isAnd();
        boolean boolean62 = node54.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        boolean boolean65 = node64.isOnlyModifiesThisCall();
        boolean boolean66 = node64.isEmpty();
        boolean boolean67 = node64.isArrayLit();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("");
        boolean boolean70 = node69.isOnlyModifiesThisCall();
        boolean boolean71 = node69.isSetterDef();
        com.google.javascript.rhino.Node node72 = node64.srcref(node69);
        node54.addChildToFront(node64);
        boolean boolean74 = node64.isString();
        com.google.javascript.rhino.Node node75 = node1.useSourceInfoIfMissingFrom(node64);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(staticSourceFile51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(staticSourceFile58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(node75);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        boolean boolean14 = node1.isAssign();
        int int15 = node1.getType();
        int int16 = node1.getSourcePosition();
        boolean boolean17 = node1.isGetterDef();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        node19.setSourceEncodedPosition(4095);
        boolean boolean22 = node19.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node19.getStaticSourceFile();
        boolean boolean24 = node19.isAssignAdd();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.isRegExp();
        int int31 = node26.getLength();
        boolean boolean32 = node26.isNumber();
        boolean boolean34 = node26.getBooleanProp(12);
        int int35 = node19.getIndexOfChild(node26);
        com.google.javascript.rhino.Node node36 = node1.copyInformationFrom(node26);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean41 = node40.isObjectLit();
        com.google.javascript.rhino.Node node42 = node36.useSourceInfoIfMissingFrom(node40);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(51, 4095, 42);
        // The following exception was thrown during execution in test generation
        try {
            node3.setString("TYPEOF");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: IN 4095 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray3, 12, 100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(53, nodeArray3);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(43, nodeArray3, 15, 53);
        org.junit.Assert.assertNotNull(nodeArray3);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isReturn();
        boolean boolean6 = node2.isRegExp();
        com.google.javascript.rhino.Node node7 = node2.getLastSibling();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray11, 12, 100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(53, nodeArray11);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) '#', nodeArray11, (int) 'a', (int) (byte) 0);
        java.lang.String str19 = node18.getQualifiedName();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node7, node18, 8, 46);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 49, 39, (int) '#');
        com.google.javascript.rhino.Node node27 = node26.getLastSibling();
        boolean boolean29 = node26.getBooleanProp((int) (byte) 10);
        int int30 = node7.getIndexOfChild(node26);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        node28.setLineno((int) (short) 100);
        boolean boolean31 = node28.isDec();
        com.google.javascript.rhino.Node node32 = node28.getParent();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = node32.isQualifiedName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node32);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNew();
        boolean boolean5 = node1.isDelProp();
        boolean boolean6 = node1.isNot();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        boolean boolean46 = node43.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        boolean boolean48 = node43.isAssignAdd();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        com.google.javascript.rhino.Node node55 = node43.copyInformationFromForTree(node50);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        boolean boolean58 = node57.isOnlyModifiesThisCall();
        boolean boolean59 = node57.isEmpty();
        boolean boolean60 = node57.isArrayLit();
        com.google.javascript.rhino.Node node61 = node43.useSourceInfoFrom(node57);
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] { node43 };
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(32, nodeArray62);
        int int65 = node63.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isReturn();
        boolean boolean71 = node67.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("");
        node73.setSourceEncodedPosition(4095);
        boolean boolean76 = node73.isNot();
        boolean boolean77 = node73.isBreak();
        boolean boolean78 = node73.isIn();
        com.google.javascript.rhino.Node node79 = node67.useSourceInfoIfMissingFromForTree(node73);
        com.google.javascript.rhino.Node node80 = node63.useSourceInfoFrom(node73);
        boolean boolean81 = node73.isNE();
        java.lang.String str82 = node39.checkTreeEquals(node73);
        boolean boolean84 = node73.getBooleanProp(42);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile85 = node73.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n" + "'", str82, "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(staticSourceFile85);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        boolean boolean55 = node42.isWith();
        node33.addChildToFront(node42);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node58.getStaticSourceFile();
        boolean boolean63 = node58.isAssignAdd();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = node65.getStaticSourceFile();
        com.google.javascript.rhino.Node node70 = node58.copyInformationFromForTree(node65);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        boolean boolean73 = node72.isOnlyModifiesThisCall();
        boolean boolean74 = node72.isEmpty();
        boolean boolean75 = node72.isArrayLit();
        com.google.javascript.rhino.Node node76 = node58.useSourceInfoFrom(node72);
        boolean boolean77 = node72.hasChildren();
        com.google.javascript.rhino.Node node78 = node33.copyInformationFrom(node72);
        boolean boolean79 = node33.isThis();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString(2, "", 38, 44);
        com.google.javascript.rhino.Node node85 = node33.srcrefTree(node84);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(8, node85);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(staticSourceFile69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node85);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        node28.setLineno((int) (short) 100);
        boolean boolean31 = node28.isDec();
        boolean boolean32 = node28.isNumber();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node28.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.clearAllFlags();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray3, 12, 100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(53, nodeArray3);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) '#', nodeArray3, (int) 'a', (int) (byte) 0);
        java.lang.String str11 = node10.getQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            node10.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        boolean boolean11 = node7.isReturn();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        boolean boolean21 = node1.isLabel();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        com.google.javascript.rhino.Node node26 = node23.removeFirstChild();
        boolean boolean27 = node23.isIf();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        node29.setSourceEncodedPosition(4095);
        boolean boolean32 = node29.isNot();
        com.google.javascript.rhino.Node node33 = node23.srcrefTree(node29);
        boolean boolean34 = node33.isFromExterns();
        node1.addChildrenToFront(node33);
        boolean boolean36 = node33.isComma();
        boolean boolean37 = node33.isEmpty();
        boolean boolean38 = node33.isLocalResultCall();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags39 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags39.setMutatesGlobalState();
        sideEffectFlags39.setMutatesGlobalState();
        sideEffectFlags39.clearAllFlags();
        sideEffectFlags39.setMutatesArguments();
        sideEffectFlags39.setThrows();
        // The following exception was thrown during execution in test generation
        try {
            node33.setSideEffectFlags(sideEffectFlags39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.Node node5 = node1.getLastSibling();
        node1.setVarArgs(true);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        node1.setJSType(jSType8);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable10 = node1.getAncestors();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        boolean boolean17 = node12.isAssignAdd();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        node19.setSourceEncodedPosition(4095);
        boolean boolean22 = node19.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node19.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node12.copyInformationFromForTree(node19);
        com.google.javascript.rhino.Node node25 = node19.removeFirstChild();
        boolean boolean26 = node19.isAnd();
        boolean boolean27 = node19.isDec();
        int int28 = node19.getType();
        java.lang.String str29 = node19.toString();
        int int31 = node19.getIntProp(409700);
        java.lang.String str32 = node1.checkTreeEquals(node19);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node34 = node19.getChildAtIndex(49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(ancestorIterable10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 40 + "'", int28 == 40);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "STRING  0" + "'", str29, "STRING  0");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(51);
        boolean boolean2 = node1.isOr();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        boolean boolean11 = node10.isIf();
        boolean boolean12 = node10.isArrayLit();
        boolean boolean13 = node10.isSyntheticBlock();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        boolean boolean24 = node20.isBreak();
        boolean boolean25 = node20.isIn();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        node27.setSourceEncodedPosition(4095);
        boolean boolean30 = node27.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node27.getStaticSourceFile();
        boolean boolean32 = node27.isAssignAdd();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("");
        node34.setSourceEncodedPosition(4095);
        boolean boolean37 = node34.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = node34.getStaticSourceFile();
        com.google.javascript.rhino.Node node39 = node27.copyInformationFromForTree(node34);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        boolean boolean42 = node41.isOnlyModifiesThisCall();
        boolean boolean43 = node41.isEmpty();
        boolean boolean44 = node41.isArrayLit();
        com.google.javascript.rhino.Node node45 = node27.useSourceInfoFrom(node41);
        boolean boolean46 = node27.isInc();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        boolean boolean54 = node49.isAssignAdd();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        node56.setSourceEncodedPosition(4095);
        boolean boolean59 = node56.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile60 = node56.getStaticSourceFile();
        com.google.javascript.rhino.Node node61 = node49.copyInformationFromForTree(node56);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        boolean boolean64 = node63.isOnlyModifiesThisCall();
        boolean boolean65 = node63.isEmpty();
        boolean boolean66 = node63.isArrayLit();
        com.google.javascript.rhino.Node node67 = node49.useSourceInfoFrom(node63);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] { node49 };
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(32, nodeArray68);
        int int71 = node69.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("");
        boolean boolean74 = node73.isOnlyModifiesThisCall();
        boolean boolean75 = node73.isEmpty();
        boolean boolean76 = node73.isReturn();
        boolean boolean77 = node73.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("");
        node79.setSourceEncodedPosition(4095);
        boolean boolean82 = node79.isNot();
        boolean boolean83 = node79.isBreak();
        boolean boolean84 = node79.isIn();
        com.google.javascript.rhino.Node node85 = node73.useSourceInfoIfMissingFromForTree(node79);
        com.google.javascript.rhino.Node node86 = node69.useSourceInfoFrom(node79);
        boolean boolean87 = node86.isLabelName();
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(29, node18, node20, node27, node86);
        node10.addChildrenToBack(node88);
        boolean boolean90 = node10.isFalse();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(staticSourceFile31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(staticSourceFile38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(staticSourceFile60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node14 = node13.cloneNode();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        boolean boolean22 = node17.isAssignAdd();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node29 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node35 = node17.useSourceInfoFrom(node31);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder36 = node17.new FileLevelJsDocBuilder();
        boolean boolean37 = node17.isDefaultCase();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 0, node17, (int) ' ', 53);
        boolean boolean41 = node17.isQuotedString();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node46 = node43.getLastSibling();
        node43.setSourceFileForTesting("");
        node17.addChildrenToFront(node43);
        boolean boolean50 = node13.isEquivalentToTyped(node17);
        int int51 = node13.getChildCount();
        com.google.javascript.rhino.Node node52 = node13.removeChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNull(node52);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        int int65 = node50.getSourcePosition();
        java.lang.String str66 = node50.toStringTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4095 + "'", int65 == 4095);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "STRING  0\n" + "'", str66, "STRING  0\n");
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int4 = node3.getLength();
        boolean boolean5 = node3.isStringKey();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        boolean boolean13 = node8.isAssignAdd();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node15.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node8.copyInformationFromForTree(node15);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        boolean boolean23 = node22.isOnlyModifiesThisCall();
        boolean boolean24 = node22.isEmpty();
        boolean boolean25 = node22.isArrayLit();
        com.google.javascript.rhino.Node node26 = node8.useSourceInfoFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] { node8 };
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, nodeArray27);
        int int30 = node28.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = node32.isOnlyModifiesThisCall();
        boolean boolean34 = node32.isEmpty();
        boolean boolean35 = node32.isReturn();
        boolean boolean36 = node32.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        boolean boolean41 = node38.isNot();
        boolean boolean42 = node38.isBreak();
        boolean boolean43 = node38.isIn();
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        com.google.javascript.rhino.Node node45 = node28.useSourceInfoFrom(node38);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        node47.setSourceEncodedPosition(4095);
        boolean boolean50 = node47.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = node47.getStaticSourceFile();
        boolean boolean52 = node47.isAssignAdd();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        node54.setSourceEncodedPosition(4095);
        boolean boolean57 = node54.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = node54.getStaticSourceFile();
        com.google.javascript.rhino.Node node59 = node47.copyInformationFromForTree(node54);
        boolean boolean60 = node47.isWith();
        node38.addChildToFront(node47);
        com.google.javascript.rhino.Node node62 = node38.getLastSibling();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        boolean boolean68 = node64.isBreak();
        boolean boolean69 = node64.isTypeOf();
        int int70 = node64.getCharno();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        boolean boolean73 = node72.isOnlyModifiesThisCall();
        int int74 = node72.getSourceOffset();
        boolean boolean75 = node72.isExprResult();
        com.google.javascript.rhino.Node node76 = node64.srcref(node72);
        boolean boolean77 = node76.isNE();
        com.google.javascript.rhino.Node node78 = node62.srcrefTree(node76);
        com.google.javascript.rhino.Node node79 = node3.useSourceInfoFromForTree(node62);
        boolean boolean80 = node79.isComma();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(staticSourceFile51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(staticSourceFile58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4095 + "'", int70 == 4095);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node74.isDelProp();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node28 = node10.useSourceInfoFrom(node24);
        boolean boolean29 = node28.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isReturn();
        boolean boolean40 = node36.isNE();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(4095, node28, node31, node36, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node44 = node7.useSourceInfoIfMissingFrom(node43);
        node1.addChildrenToBack(node7);
        java.lang.String str46 = node7.getQualifiedName();
        boolean boolean47 = node7.isAssignAdd();
        com.google.javascript.rhino.Node node48 = node7.getNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(node48);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        boolean boolean6 = node1.isAssign();
        boolean boolean7 = node1.isArrayLit();
        com.google.javascript.rhino.Node node8 = node1.cloneTree();
        boolean boolean9 = node8.isArrayLit();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        boolean boolean21 = node1.isLabel();
        boolean boolean22 = node1.isGetElem();
        boolean boolean23 = node1.isThis();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        int int14 = node13.getSideEffectFlags();
        com.google.javascript.rhino.InputId inputId15 = node13.getInputId();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(inputId15);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType6 = node1.getJSType();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        boolean boolean12 = node8.isBreak();
        boolean boolean13 = node8.isTypeOf();
        boolean boolean14 = node8.isInc();
        boolean boolean15 = node8.isWhile();
        node8.setSourceEncodedPosition((-1));
        boolean boolean18 = node1.hasChild(node8);
        boolean boolean19 = node8.isNew();
        boolean boolean20 = node8.isSetterDef();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        node22.setSourceEncodedPosition(4095);
        boolean boolean25 = node22.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node22.getStaticSourceFile();
        boolean boolean27 = node22.isStringKey();
        java.util.Set<java.lang.String> strSet28 = node22.getDirectives();
        boolean boolean29 = node22.isEmpty();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isReturn();
        boolean boolean35 = node31.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        node40.setSourceEncodedPosition(4095);
        boolean boolean43 = node40.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = node40.getStaticSourceFile();
        boolean boolean45 = node40.isAssignAdd();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        node47.setSourceEncodedPosition(4095);
        boolean boolean50 = node47.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = node47.getStaticSourceFile();
        com.google.javascript.rhino.Node node52 = node40.copyInformationFromForTree(node47);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        boolean boolean55 = node54.isOnlyModifiesThisCall();
        boolean boolean56 = node54.isEmpty();
        boolean boolean57 = node54.isArrayLit();
        com.google.javascript.rhino.Node node58 = node40.useSourceInfoFrom(node54);
        boolean boolean59 = node58.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("");
        boolean boolean62 = node61.isOnlyModifiesThisCall();
        boolean boolean63 = node61.isEmpty();
        boolean boolean64 = node61.isArrayLit();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("");
        boolean boolean67 = node66.isOnlyModifiesThisCall();
        boolean boolean68 = node66.isEmpty();
        boolean boolean69 = node66.isReturn();
        boolean boolean70 = node66.isNE();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(4095, node58, node61, node66, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node74 = node37.useSourceInfoIfMissingFrom(node73);
        node31.addChildrenToBack(node37);
        java.lang.String str76 = node37.getQualifiedName();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("");
        node78.setSourceEncodedPosition(4095);
        boolean boolean81 = node78.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile82 = node78.getStaticSourceFile();
        node78.setVarArgs(false);
        boolean boolean85 = node78.isFromExterns();
        java.lang.String[] strArray88 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet89 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet89, strArray88);
        node78.setDirectives((java.util.Set<java.lang.String>) strSet89);
        node37.setDirectives((java.util.Set<java.lang.String>) strSet89);
        node22.setDirectives((java.util.Set<java.lang.String>) strSet89);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet89);
        boolean boolean95 = node8.isNE();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(staticSourceFile44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(staticSourceFile51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(staticSourceFile82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isIn();
        boolean boolean7 = node1.hasChildren();
        node1.setCharno((int) (short) 100);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        boolean boolean11 = node1.isFromExterns();
        boolean boolean12 = node1.isNot();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable13 = node1.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor14 = ancestorIterable13.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator15 = ancestorIterable13.spliterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(ancestorIterable13);
        org.junit.Assert.assertNotNull(nodeItor14);
        org.junit.Assert.assertNotNull(nodeSpliterator15);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isReturn();
        boolean boolean6 = node2.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        boolean boolean12 = node8.isBreak();
        boolean boolean13 = node8.isIn();
        com.google.javascript.rhino.Node node14 = node2.useSourceInfoIfMissingFromForTree(node8);
        node8.setSourceEncodedPositionForTree(39);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isReturn();
        boolean boolean22 = node18.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        boolean boolean28 = node24.isBreak();
        boolean boolean29 = node24.isIn();
        com.google.javascript.rhino.Node node30 = node18.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        boolean boolean45 = node32.isNE();
        boolean boolean46 = node32.isThrow();
        boolean boolean47 = node32.isFor();
        com.google.javascript.rhino.Node node48 = node24.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(0.0d);
        node50.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        boolean boolean55 = node54.isOnlyModifiesThisCall();
        boolean boolean56 = node54.isEmpty();
        boolean boolean57 = node54.isCatch();
        int int58 = node54.getSourceOffset();
        boolean boolean59 = node54.isHook();
        node50.addChildToBack(node54);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        node63.setSourceEncodedPosition(4095);
        boolean boolean66 = node63.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile67 = node63.getStaticSourceFile();
        boolean boolean68 = node63.isAssignAdd();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("");
        node70.setSourceEncodedPosition(4095);
        boolean boolean73 = node70.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = node70.getStaticSourceFile();
        com.google.javascript.rhino.Node node75 = node63.copyInformationFromForTree(node70);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        boolean boolean78 = node77.isOnlyModifiesThisCall();
        boolean boolean79 = node77.isEmpty();
        boolean boolean80 = node77.isArrayLit();
        com.google.javascript.rhino.Node node81 = node63.useSourceInfoFrom(node77);
        com.google.javascript.rhino.Node[] nodeArray82 = new com.google.javascript.rhino.Node[] { node63 };
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(32, nodeArray82);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("");
        boolean boolean86 = node85.isOnlyModifiesThisCall();
        boolean boolean87 = node85.isEmpty();
        boolean boolean88 = node85.isReturn();
        com.google.javascript.rhino.Node node89 = node83.useSourceInfoFromForTree(node85);
        boolean boolean90 = node85.isAdd();
        node85.putBooleanProp(38, false);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((int) (short) 10, node8, node48, node50, node85);
        double double95 = node50.getDouble();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable96 = node50.children();
        boolean boolean97 = node50.wasEmptyNode();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(staticSourceFile67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(staticSourceFile74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(nodeArray82);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNotNull(nodeIterable96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        boolean boolean58 = node56.isEmpty();
        boolean boolean59 = node56.isArrayLit();
        com.google.javascript.rhino.Node node60 = node42.useSourceInfoFrom(node56);
        boolean boolean61 = node60.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        boolean boolean64 = node63.isOnlyModifiesThisCall();
        boolean boolean65 = node63.isEmpty();
        boolean boolean66 = node63.isArrayLit();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        boolean boolean69 = node68.isOnlyModifiesThisCall();
        boolean boolean70 = node68.isEmpty();
        boolean boolean71 = node68.isReturn();
        boolean boolean72 = node68.isNE();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(4095, node60, node63, node68, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        node77.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(36, node75, node77, node84);
        java.lang.String str86 = node77.toString();
        com.google.javascript.rhino.Node node87 = node37.useSourceInfoFrom(node77);
        boolean boolean88 = node87.isBlock();
        boolean boolean89 = node87.isSetterDef();
        boolean boolean90 = node87.isFunction();
        com.google.javascript.rhino.InputId inputId91 = node87.getInputId();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "STRING  0" + "'", str86, "STRING  0");
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(inputId91);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) '4', "hi!", 2, (int) (byte) 0);
        boolean boolean5 = node4.isSyntheticBlock();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node7.getStaticSourceFile();
        boolean boolean12 = node7.isAssignAdd();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node19 = node7.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        boolean boolean22 = node21.isOnlyModifiesThisCall();
        boolean boolean23 = node21.isEmpty();
        boolean boolean24 = node21.isArrayLit();
        com.google.javascript.rhino.Node node25 = node7.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder26 = node7.new FileLevelJsDocBuilder();
        boolean boolean27 = node7.isDefaultCase();
        boolean boolean28 = node7.isFalse();
        boolean boolean29 = node7.isDec();
        com.google.javascript.rhino.Node node30 = node7.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node31 = node4.useSourceInfoFrom(node30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(node30);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        boolean boolean11 = node1.isFromExterns();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder12 = node1.getJsDocBuilderForNode();
        fileLevelJsDocBuilder12.append("TYPEOF 100\n    STRING \n");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder12);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isArrayLit();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isSetterDef();
        com.google.javascript.rhino.Node node10 = node2.srcref(node7);
        node10.detachChildren();
        int int12 = node10.getSourcePosition();
        node10.setLength(31);
        boolean boolean15 = node10.isStringKey();
        com.google.javascript.rhino.InputId inputId16 = node10.getInputId();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        com.google.javascript.rhino.Node node21 = node18.removeFirstChild();
        boolean boolean22 = node18.isIf();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.Node node28 = node18.srcrefTree(node24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(10, node10, node28);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(inputId16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setThrows();
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("");
        boolean boolean72 = node71.isOnlyModifiesThisCall();
        boolean boolean73 = node71.isEmpty();
        boolean boolean74 = node71.isArrayLit();
        com.google.javascript.rhino.Node node75 = node57.useSourceInfoFrom(node71);
        boolean boolean76 = node71.hasChildren();
        com.google.javascript.rhino.Node node77 = node32.copyInformationFrom(node71);
        boolean boolean78 = node32.isThis();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString(2, "", 38, 44);
        com.google.javascript.rhino.Node node84 = node32.srcrefTree(node83);
        boolean boolean85 = node84.isSwitch();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString("");
        boolean boolean88 = node87.isOnlyModifiesThisCall();
        boolean boolean89 = node87.isEmpty();
        boolean boolean90 = node87.isCatch();
        java.lang.String str91 = node87.getSourceFileName();
        node87.setType((int) ' ');
        node87.setSourceFileForTesting("TYPEOF 0\n    STRING \n");
        com.google.javascript.rhino.Node node96 = node84.clonePropsFrom(node87);
        int int97 = node87.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearAllFlags();
        boolean boolean5 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isInstanceOf();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        node2.putProp((int) '4', (java.lang.Object) node8);
        boolean boolean12 = node8.isDebugger();
        boolean boolean13 = node8.isVar();
        node8.setString("STRING ");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        boolean boolean23 = node22.isOnlyModifiesThisCall();
        boolean boolean24 = node22.isSetterDef();
        com.google.javascript.rhino.Node node25 = node17.srcref(node22);
        com.google.javascript.rhino.Node node26 = node25.getLastSibling();
        boolean boolean27 = node26.isIf();
        node26.setLength(4);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        boolean boolean49 = node46.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node46.getStaticSourceFile();
        node46.setVarArgs(false);
        boolean boolean53 = node46.isFromExterns();
        boolean boolean54 = node46.isNull();
        boolean boolean55 = node46.isFalse();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node70 = node64.removeFirstChild();
        com.google.javascript.rhino.Node node71 = node46.useSourceInfoIfMissingFrom(node64);
        com.google.javascript.rhino.Node node72 = node44.useSourceInfoFromForTree(node71);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(45, node72);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(44, node8, node26, node73);
        boolean boolean75 = node8.isContinue();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        boolean boolean6 = node1.isContinue();
        boolean boolean7 = node1.isSwitch();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        boolean boolean11 = node9.isEmpty();
        boolean boolean12 = node9.isReturn();
        boolean boolean13 = node9.isRegExp();
        java.lang.String str14 = node9.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable15 = node9.getAncestors();
        com.google.javascript.rhino.Node node16 = node1.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        node18.setVarArgs(false);
        boolean boolean25 = node18.isFromExterns();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet29);
        com.google.javascript.rhino.Node node32 = node9.useSourceInfoFromForTree(node18);
        java.lang.Object obj34 = node18.getProp(37);
        boolean boolean35 = node18.isCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "STRING \n" + "'", str14, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(12, "STRING  0");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        boolean boolean5 = node4.isOnlyModifiesThisCall();
        boolean boolean6 = node4.isEmpty();
        boolean boolean7 = node4.isReturn();
        boolean boolean8 = node4.hasMoreThanOneChild();
        boolean boolean9 = node4.isRegExp();
        node4.detachChildren();
        int int11 = node2.getIndexOfChild(node4);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nTYPEOF 0\n    STRING \n\n\nSubtree1: STRING \n\n\nSubtree2: TYPEOF 0\n    STRING \n", (int) (byte) 0, (int) (byte) -1);
        boolean boolean4 = node3.isBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isTypeOf();
        boolean boolean5 = node3.isInc();
        boolean boolean6 = node3.isSwitch();
        node3.setDouble((double) (-1));
        node3.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node28.getStaticSourceFile();
        boolean boolean30 = node28.isParamList();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = node33.getStaticSourceFile();
        boolean boolean38 = node33.isAssignAdd();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        node40.setSourceEncodedPosition(4095);
        boolean boolean43 = node40.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = node40.getStaticSourceFile();
        com.google.javascript.rhino.Node node45 = node33.copyInformationFromForTree(node40);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        boolean boolean48 = node47.isOnlyModifiesThisCall();
        boolean boolean49 = node47.isEmpty();
        boolean boolean50 = node47.isArrayLit();
        com.google.javascript.rhino.Node node51 = node33.useSourceInfoFrom(node47);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] { node33 };
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(32, nodeArray52);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("");
        boolean boolean56 = node55.isOnlyModifiesThisCall();
        boolean boolean57 = node55.isEmpty();
        boolean boolean58 = node55.isReturn();
        com.google.javascript.rhino.Node node59 = node53.useSourceInfoFromForTree(node55);
        int int60 = node53.getType();
        com.google.javascript.rhino.Node node61 = node28.clonePropsFrom(node53);
        // The following exception was thrown during execution in test generation
        try {
            node53.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(staticSourceFile37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(staticSourceFile44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 32 + "'", int60 == 32);
        org.junit.Assert.assertNotNull(node61);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        boolean boolean29 = node22.isCall();
        com.google.javascript.rhino.Node node30 = node22.getLastChild();
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        boolean boolean32 = node31.isNew();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = null;
        node31.setStaticSourceFile(staticSourceFile33);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        node37.setSourceEncodedPosition(4095);
        boolean boolean40 = node37.isInstanceOf();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        boolean boolean44 = node43.isOnlyModifiesThisCall();
        boolean boolean45 = node43.isEmpty();
        node37.putProp((int) '4', (java.lang.Object) node43);
        boolean boolean47 = node43.isDebugger();
        boolean boolean48 = node43.isName();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable49 = node43.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor50 = ancestorIterable49.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator51 = ancestorIterable49.spliterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor52 = ancestorIterable49.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator53 = ancestorIterable49.spliterator();
        node31.putProp((int) '4', (java.lang.Object) ancestorIterable49);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(ancestorIterable49);
        org.junit.Assert.assertNotNull(nodeItor50);
        org.junit.Assert.assertNotNull(nodeSpliterator51);
        org.junit.Assert.assertNotNull(nodeItor52);
        org.junit.Assert.assertNotNull(nodeSpliterator53);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isEmpty();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node1.siblings();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = null;
        node1.setStaticSourceFile(staticSourceFile7);
        boolean boolean9 = node1.isNumber();
        boolean boolean10 = node1.isIf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isStringKey();
        boolean boolean7 = node1.isQuotedString();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node1.children();
        java.lang.Class<?> wildcardClass9 = nodeIterable8.getClass();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        node8.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node20 = node8.getAncestor(0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node20.siblings();
        node20.putIntProp(12, 43);
        node20.setCharno(36);
        node20.setLineno(53);
        int int29 = node20.getType();
        node20.setOptionalArg(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 40 + "'", int29 == 40);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isArrayLit();
        boolean boolean6 = node2.isVarArgs();
        boolean boolean7 = node2.isObjectLit();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        boolean boolean13 = node9.isBreak();
        boolean boolean14 = node9.isIn();
        boolean boolean15 = node9.isLabel();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        boolean boolean23 = node18.isAssignAdd();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        com.google.javascript.rhino.Node node30 = node18.copyInformationFromForTree(node25);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = node32.isOnlyModifiesThisCall();
        boolean boolean34 = node32.isEmpty();
        boolean boolean35 = node32.isArrayLit();
        com.google.javascript.rhino.Node node36 = node18.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] { node18 };
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(32, nodeArray37);
        int int40 = node38.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        boolean boolean43 = node42.isOnlyModifiesThisCall();
        boolean boolean44 = node42.isEmpty();
        boolean boolean45 = node42.isReturn();
        boolean boolean46 = node42.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        boolean boolean52 = node48.isBreak();
        boolean boolean53 = node48.isIn();
        com.google.javascript.rhino.Node node54 = node42.useSourceInfoIfMissingFromForTree(node48);
        com.google.javascript.rhino.Node node55 = node38.useSourceInfoFrom(node48);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        boolean boolean70 = node57.isWith();
        node48.addChildToFront(node57);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("");
        node73.setSourceEncodedPosition(4095);
        boolean boolean76 = node73.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile77 = node73.getStaticSourceFile();
        boolean boolean78 = node73.isAssignAdd();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("");
        node80.setSourceEncodedPosition(4095);
        boolean boolean83 = node80.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile84 = node80.getStaticSourceFile();
        com.google.javascript.rhino.Node node85 = node73.copyInformationFromForTree(node80);
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString("");
        boolean boolean88 = node87.isOnlyModifiesThisCall();
        boolean boolean89 = node87.isEmpty();
        boolean boolean90 = node87.isArrayLit();
        com.google.javascript.rhino.Node node91 = node73.useSourceInfoFrom(node87);
        boolean boolean92 = node87.hasChildren();
        com.google.javascript.rhino.Node node93 = node48.copyInformationFrom(node87);
        boolean boolean94 = node48.isThis();
        com.google.javascript.rhino.Node node97 = new com.google.javascript.rhino.Node(37, node2, node9, node48, 53, 37);
        boolean boolean98 = node9.isObjectLit();
        boolean boolean99 = node9.isDebugger();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(staticSourceFile77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(staticSourceFile84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setThrows();
        boolean boolean6 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        node5.setSourceEncodedPosition(4095);
        boolean boolean8 = node5.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node5.getStaticSourceFile();
        boolean boolean10 = node5.isAssignAdd();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        com.google.javascript.rhino.Node node17 = node5.copyInformationFromForTree(node12);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        boolean boolean20 = node19.isOnlyModifiesThisCall();
        boolean boolean21 = node19.isEmpty();
        boolean boolean22 = node19.isArrayLit();
        com.google.javascript.rhino.Node node23 = node5.useSourceInfoFrom(node19);
        boolean boolean24 = node23.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isArrayLit();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isReturn();
        boolean boolean35 = node31.isNE();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(4095, node23, node26, node31, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        node40.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(36, node38, node40, node47);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        boolean boolean55 = node50.isAssignAdd();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        com.google.javascript.rhino.Node node62 = node50.copyInformationFromForTree(node57);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        boolean boolean65 = node64.isOnlyModifiesThisCall();
        boolean boolean66 = node64.isEmpty();
        boolean boolean67 = node64.isArrayLit();
        com.google.javascript.rhino.Node node68 = node50.useSourceInfoFrom(node64);
        boolean boolean69 = node64.hasChildren();
        boolean boolean70 = node64.isNumber();
        boolean boolean71 = node64.isTry();
        com.google.javascript.rhino.Node node72 = node64.cloneTree();
        com.google.javascript.rhino.Node node73 = node40.srcrefTree(node72);
        node72.putBooleanProp(409700, true);
        int int77 = node1.getIndexOfChild(node72);
        boolean boolean78 = node72.isParamList();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isCatch();
        int int5 = node1.getSourceOffset();
        boolean boolean6 = node1.isHook();
        // The following exception was thrown during execution in test generation
        try {
            node1.setDouble((double) 24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        boolean boolean6 = node1.isContinue();
        boolean boolean7 = node1.isSwitch();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        boolean boolean11 = node9.isEmpty();
        boolean boolean12 = node9.isReturn();
        boolean boolean13 = node9.isRegExp();
        java.lang.String str14 = node9.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable15 = node9.getAncestors();
        com.google.javascript.rhino.Node node16 = node1.copyInformationFromForTree(node9);
        java.lang.Class<?> wildcardClass17 = node16.getClass();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "STRING \n" + "'", str14, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isTypeOf();
        boolean boolean5 = node3.isInc();
        com.google.javascript.rhino.Node node6 = node3.cloneTree();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder7 = node6.new FileLevelJsDocBuilder();
        int int8 = node6.getSourceOffset();
        boolean boolean9 = node6.isIf();
        int int10 = node6.getSourcePosition();
        double double11 = node6.getDouble();
        boolean boolean12 = node6.isSwitch();
        node6.setLength(44);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 409700 + "'", int10 == 409700);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 37.0d + "'", double11 == 37.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING  4\n", 54, (int) (short) 100);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        boolean boolean2 = node1.isExprResult();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        boolean boolean13 = node9.isBreak();
        boolean boolean14 = node9.isIn();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        boolean boolean21 = node16.isAssignAdd();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        com.google.javascript.rhino.Node node28 = node16.copyInformationFromForTree(node23);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isArrayLit();
        com.google.javascript.rhino.Node node34 = node16.useSourceInfoFrom(node30);
        boolean boolean35 = node16.isInc();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        boolean boolean41 = node38.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = node38.getStaticSourceFile();
        boolean boolean43 = node38.isAssignAdd();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        node45.setSourceEncodedPosition(4095);
        boolean boolean48 = node45.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = node45.getStaticSourceFile();
        com.google.javascript.rhino.Node node50 = node38.copyInformationFromForTree(node45);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("");
        boolean boolean53 = node52.isOnlyModifiesThisCall();
        boolean boolean54 = node52.isEmpty();
        boolean boolean55 = node52.isArrayLit();
        com.google.javascript.rhino.Node node56 = node38.useSourceInfoFrom(node52);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] { node38 };
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(32, nodeArray57);
        int int60 = node58.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        boolean boolean63 = node62.isOnlyModifiesThisCall();
        boolean boolean64 = node62.isEmpty();
        boolean boolean65 = node62.isReturn();
        boolean boolean66 = node62.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        node68.setSourceEncodedPosition(4095);
        boolean boolean71 = node68.isNot();
        boolean boolean72 = node68.isBreak();
        boolean boolean73 = node68.isIn();
        com.google.javascript.rhino.Node node74 = node62.useSourceInfoIfMissingFromForTree(node68);
        com.google.javascript.rhino.Node node75 = node58.useSourceInfoFrom(node68);
        boolean boolean76 = node75.isLabelName();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(29, node7, node9, node16, node75);
        com.google.javascript.rhino.Node node78 = node16.getFirstChild();
        com.google.javascript.rhino.Node node79 = node1.srcrefTree(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = node1.getJSDocInfo();
        boolean boolean81 = node1.isFunction();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(staticSourceFile42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(staticSourceFile49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(jSDocInfo80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        node1.setVarArgs(false);
        boolean boolean8 = node1.isFromExterns();
        boolean boolean9 = node1.isNull();
        boolean boolean10 = node1.isFalse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        boolean boolean17 = node12.isAssignAdd();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        node19.setSourceEncodedPosition(4095);
        boolean boolean22 = node19.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node19.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node12.copyInformationFromForTree(node19);
        com.google.javascript.rhino.Node node25 = node19.removeFirstChild();
        com.google.javascript.rhino.Node node26 = node1.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node node27 = node26.cloneNode();
        boolean boolean28 = node26.isLocalResultCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node26.getJSDocInfo();
        node26.setCharno((int) (short) 1);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        com.google.javascript.rhino.InputId inputId14 = null;
        node13.setInputId(inputId14);
        com.google.javascript.rhino.Node node16 = node13.removeFirstChild();
        node13.detachChildren();
        node13.setLineno(35);
        // The following exception was thrown during execution in test generation
        try {
            node13.setSideEffectFlags(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node16);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        boolean boolean8 = node1.isUnscopedQualifiedName();
        boolean boolean9 = node1.isAssignAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING  0");
        boolean boolean2 = node1.isDefaultCase();
        boolean boolean3 = node1.isDec();
        boolean boolean4 = node1.isCase();
        node1.setType(54);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        boolean boolean16 = node11.isAssignAdd();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node23 = node11.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node29 = node11.useSourceInfoFrom(node25);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] { node11 };
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(32, nodeArray30);
        int int33 = node31.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        boolean boolean36 = node35.isOnlyModifiesThisCall();
        boolean boolean37 = node35.isEmpty();
        boolean boolean38 = node35.isReturn();
        boolean boolean39 = node35.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        boolean boolean45 = node41.isBreak();
        boolean boolean46 = node41.isIn();
        com.google.javascript.rhino.Node node47 = node35.useSourceInfoIfMissingFromForTree(node41);
        com.google.javascript.rhino.Node node48 = node31.useSourceInfoFrom(node41);
        boolean boolean49 = node41.isNE();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isReturn();
        boolean boolean55 = node51.isRegExp();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(52, node41, node51);
        boolean boolean57 = node51.isInstanceOf();
        boolean boolean58 = node1.isEquivalentTo(node51);
        node51.removeProp(44);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        boolean boolean6 = node1.isContinue();
        boolean boolean7 = node1.isSwitch();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        boolean boolean11 = node9.isEmpty();
        boolean boolean12 = node9.isReturn();
        boolean boolean13 = node9.isRegExp();
        java.lang.String str14 = node9.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable15 = node9.getAncestors();
        com.google.javascript.rhino.Node node16 = node1.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        node18.setVarArgs(false);
        boolean boolean25 = node18.isFromExterns();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet29);
        com.google.javascript.rhino.Node node32 = node9.useSourceInfoFromForTree(node18);
        int int33 = node32.getLineno();
        boolean boolean34 = node32.isSwitch();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "STRING \n" + "'", str14, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        boolean boolean6 = node1.isAssign();
        boolean boolean7 = node1.isVar();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node1.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        boolean boolean6 = node1.isAssign();
        boolean boolean7 = node1.hasOneChild();
        boolean boolean8 = node1.isDefaultCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        node2.removeProp(12);
        boolean boolean7 = node2.isParamList();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        boolean boolean16 = node11.isAssignAdd();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node23 = node11.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node29 = node11.useSourceInfoFrom(node25);
        boolean boolean30 = node29.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        boolean boolean33 = node32.isOnlyModifiesThisCall();
        boolean boolean34 = node32.isEmpty();
        boolean boolean35 = node32.isArrayLit();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        boolean boolean38 = node37.isOnlyModifiesThisCall();
        boolean boolean39 = node37.isEmpty();
        boolean boolean40 = node37.isReturn();
        boolean boolean41 = node37.isNE();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(4095, node29, node32, node37, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(36, node44, node46, node53);
        boolean boolean55 = node44.isGetElem();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        boolean boolean58 = node57.isOnlyModifiesThisCall();
        boolean boolean59 = node57.isEmpty();
        boolean boolean60 = node57.isArrayLit();
        boolean boolean61 = node57.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node62 = node44.srcref(node57);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        boolean boolean69 = node64.isAssignAdd();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("");
        node71.setSourceEncodedPosition(4095);
        boolean boolean74 = node71.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile75 = node71.getStaticSourceFile();
        com.google.javascript.rhino.Node node76 = node64.copyInformationFromForTree(node71);
        com.google.javascript.rhino.Node node77 = node71.removeFirstChild();
        boolean boolean78 = node71.isAnd();
        node71.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node83 = node71.getAncestor(0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable84 = node83.siblings();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(15, node2, node57, node83, 43, (int) (short) 10);
        boolean boolean88 = node2.isOptionalArg();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(staticSourceFile75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(nodeIterable84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        boolean boolean14 = node1.isAssign();
        int int15 = node1.getType();
        boolean boolean16 = node1.isReturn();
        node1.setCharno(45);
        boolean boolean19 = node1.isExprResult();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        boolean boolean28 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        node30.setSourceEncodedPosition(4095);
        boolean boolean33 = node30.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node30.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node23.copyInformationFromForTree(node30);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        boolean boolean38 = node37.isOnlyModifiesThisCall();
        boolean boolean39 = node37.isEmpty();
        boolean boolean40 = node37.isArrayLit();
        com.google.javascript.rhino.Node node41 = node23.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] { node23 };
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(32, nodeArray42);
        int int45 = node43.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        boolean boolean48 = node47.isOnlyModifiesThisCall();
        boolean boolean49 = node47.isEmpty();
        boolean boolean50 = node47.isReturn();
        boolean boolean51 = node47.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        boolean boolean57 = node53.isBreak();
        boolean boolean58 = node53.isIn();
        com.google.javascript.rhino.Node node59 = node47.useSourceInfoIfMissingFromForTree(node53);
        com.google.javascript.rhino.Node node60 = node43.useSourceInfoFrom(node53);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        node62.setSourceEncodedPosition(4095);
        boolean boolean65 = node62.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = node62.getStaticSourceFile();
        boolean boolean67 = node62.isAssignAdd();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("");
        node69.setSourceEncodedPosition(4095);
        boolean boolean72 = node69.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile73 = node69.getStaticSourceFile();
        com.google.javascript.rhino.Node node74 = node62.copyInformationFromForTree(node69);
        boolean boolean75 = node62.isWith();
        node53.addChildToFront(node62);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable77 = node53.children();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(2, node53, 54, 0);
        boolean boolean81 = node1.isEquivalentTo(node80);
        boolean boolean82 = node80.isNot();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(staticSourceFile66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(staticSourceFile73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(nodeIterable77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node14 = node13.cloneNode();
        java.lang.String str18 = node14.toString(false, true, true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "STRING " + "'", str18, "STRING ");
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        node1.setVarArgs(false);
        boolean boolean8 = node1.isFromExterns();
        boolean boolean9 = node1.isNull();
        boolean boolean10 = node1.isFalse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        boolean boolean17 = node12.isAssignAdd();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        node19.setSourceEncodedPosition(4095);
        boolean boolean22 = node19.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node19.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node12.copyInformationFromForTree(node19);
        com.google.javascript.rhino.Node node25 = node19.removeFirstChild();
        com.google.javascript.rhino.Node node26 = node1.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node node27 = node26.cloneNode();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("STRING \n");
        com.google.javascript.rhino.Node node30 = node26.srcrefTree(node29);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        boolean boolean33 = node32.isLabelName();
        java.lang.String str34 = node26.checkTreeEquals(node32);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nNUMBER 100.0\n\n\nSubtree1: STRING \n\n\nSubtree2: NUMBER 100.0\n" + "'", str34, "Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nNUMBER 100.0\n\n\nSubtree1: STRING \n\n\nSubtree2: NUMBER 100.0\n");
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        com.google.javascript.rhino.Node node4 = node1.removeFirstChild();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        boolean boolean14 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node9.copyInformationFromForTree(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node27 = node9.useSourceInfoFrom(node23);
        boolean boolean28 = node27.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isArrayLit();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        boolean boolean36 = node35.isOnlyModifiesThisCall();
        boolean boolean37 = node35.isEmpty();
        boolean boolean38 = node35.isReturn();
        boolean boolean39 = node35.isNE();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(4095, node27, node30, node35, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("");
        node44.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(36, node42, node44, node51);
        node1.putProp(12, (java.lang.Object) node44);
        node44.setSourceFileForTesting("STRING  0");
        node44.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node51);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setAllFlags();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("THROW 10\n    CALL\n        TYPEOF 0\n            STRING \n        STRING  0\n        STRING  0\n        STRING  0\n", 32, 36);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isReturn();
        boolean boolean6 = node2.isRegExp();
        java.lang.String str7 = node2.toStringTree();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean12 = node11.isTypeOf();
        boolean boolean13 = node11.isInc();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        boolean boolean19 = node15.isBreak();
        boolean boolean20 = node15.isTypeOf();
        int int21 = node15.getCharno();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        int int25 = node23.getSourceOffset();
        boolean boolean26 = node23.isExprResult();
        com.google.javascript.rhino.Node node27 = node15.srcref(node23);
        boolean boolean28 = node15.isAssign();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(2, node2, node11, node15, (int) (short) 1, 42);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable32 = node31.getAncestors();
        int int33 = node31.getType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "STRING \n" + "'", str7, "STRING \n");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4095 + "'", int21 == 4095);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(ancestorIterable32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        boolean boolean29 = node22.isCall();
        com.google.javascript.rhino.Node node30 = node22.getLastChild();
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("");
        node34.setSourceEncodedPosition(4095);
        boolean boolean37 = node34.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = node34.getStaticSourceFile();
        boolean boolean39 = node34.isAssignAdd();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        com.google.javascript.rhino.Node node46 = node34.copyInformationFromForTree(node41);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        boolean boolean49 = node48.isOnlyModifiesThisCall();
        boolean boolean50 = node48.isEmpty();
        boolean boolean51 = node48.isArrayLit();
        com.google.javascript.rhino.Node node52 = node34.useSourceInfoFrom(node48);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] { node34 };
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(32, nodeArray53);
        java.lang.String str55 = node31.checkTreeEquals(node54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = node54.getJSDocInfo();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(staticSourceFile38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nTYPEOF 0\n    STRING \n\n\nSubtree1: STRING \n\n\nSubtree2: TYPEOF 0\n    STRING \n" + "'", str55, "Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nTYPEOF 0\n    STRING \n\n\nSubtree1: STRING \n\n\nSubtree2: TYPEOF 0\n    STRING \n");
        org.junit.Assert.assertNull(jSDocInfo56);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node5 = node4.cloneTree();
        boolean boolean6 = node5.isWhile();
        node5.setCharno(38);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isBlock();
        boolean boolean5 = node3.isNE();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        com.google.javascript.rhino.Node node11 = node7.getLastSibling();
        node7.setVarArgs(true);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node7.setJSType(jSType14);
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node7);
        boolean boolean17 = node3.isHook();
        com.google.javascript.rhino.Node node18 = node3.getFirstChild();
        boolean boolean19 = node3.isEmpty();
        boolean boolean20 = node3.isLabel();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node28 = node10.useSourceInfoFrom(node24);
        boolean boolean29 = node28.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isReturn();
        boolean boolean40 = node36.isNE();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(4095, node28, node31, node36, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node44 = node7.useSourceInfoIfMissingFrom(node43);
        node1.addChildrenToBack(node7);
        com.google.javascript.rhino.Node node46 = node1.removeChildren();
        boolean boolean47 = node46.isNew();
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray53, 12, 100);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(53, nodeArray53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100, nodeArray53);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(36, nodeArray53, (int) ' ', (int) (byte) 100);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(46, nodeArray53, 1, (int) (short) 0);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("");
        boolean boolean67 = node66.isOnlyModifiesThisCall();
        boolean boolean68 = node66.isEmpty();
        boolean boolean69 = node66.isReturn();
        boolean boolean70 = node66.isRegExp();
        java.lang.String str71 = node66.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable72 = node66.getAncestors();
        boolean boolean73 = node66.isScript();
        boolean boolean74 = node66.isCatch();
        int int75 = node64.getIndexOfChild(node66);
        node46.addChildToBack(node66);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "STRING \n" + "'", str71, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 8);
        boolean boolean58 = node57.isStringKey();
        node32.addChildrenToFront(node57);
        boolean boolean60 = node57.isAssignAdd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        boolean boolean21 = node1.isLabel();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        com.google.javascript.rhino.Node node26 = node23.removeFirstChild();
        boolean boolean27 = node23.isIf();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        node29.setSourceEncodedPosition(4095);
        boolean boolean32 = node29.isNot();
        com.google.javascript.rhino.Node node33 = node23.srcrefTree(node29);
        boolean boolean34 = node33.isFromExterns();
        node1.addChildrenToFront(node33);
        boolean boolean36 = node33.isComma();
        boolean boolean37 = node33.isEmpty();
        int int39 = node33.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = node33.getNext();
        java.lang.String str41 = node33.getQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        int int65 = node23.getSideEffectFlags();
        boolean boolean66 = node23.isDefaultCase();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable67 = node23.siblings();
        node23.addSuppression("STRING \n    STRING \n");
        boolean boolean70 = node23.isTrue();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(nodeIterable67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        boolean boolean7 = node1.isStringKey();
        boolean boolean8 = node1.isIf();
        int int9 = node1.getLength();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        boolean boolean16 = node11.isAssignAdd();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node23 = node11.copyInformationFromForTree(node18);
        boolean boolean24 = node11.isNE();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(16, 30, 0);
        node11.addChildToFront(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node31 = node1.useSourceInfoFromForTree(node28);
        node31.removeProp((int) (short) -1);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(16);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        boolean boolean58 = node56.isEmpty();
        boolean boolean59 = node56.isArrayLit();
        com.google.javascript.rhino.Node node60 = node42.useSourceInfoFrom(node56);
        boolean boolean61 = node60.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        boolean boolean64 = node63.isOnlyModifiesThisCall();
        boolean boolean65 = node63.isEmpty();
        boolean boolean66 = node63.isArrayLit();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        boolean boolean69 = node68.isOnlyModifiesThisCall();
        boolean boolean70 = node68.isEmpty();
        boolean boolean71 = node68.isReturn();
        boolean boolean72 = node68.isNE();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(4095, node60, node63, node68, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        node77.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(36, node75, node77, node84);
        java.lang.String str86 = node77.toString();
        com.google.javascript.rhino.Node node87 = node37.useSourceInfoFrom(node77);
        boolean boolean88 = node87.isBlock();
        node87.setCharno(47);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "STRING  0" + "'", str86, "STRING  0");
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        boolean boolean2 = node1.isExprResult();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        boolean boolean13 = node9.isBreak();
        boolean boolean14 = node9.isIn();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        boolean boolean21 = node16.isAssignAdd();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        com.google.javascript.rhino.Node node28 = node16.copyInformationFromForTree(node23);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isArrayLit();
        com.google.javascript.rhino.Node node34 = node16.useSourceInfoFrom(node30);
        boolean boolean35 = node16.isInc();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        boolean boolean41 = node38.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = node38.getStaticSourceFile();
        boolean boolean43 = node38.isAssignAdd();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        node45.setSourceEncodedPosition(4095);
        boolean boolean48 = node45.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = node45.getStaticSourceFile();
        com.google.javascript.rhino.Node node50 = node38.copyInformationFromForTree(node45);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("");
        boolean boolean53 = node52.isOnlyModifiesThisCall();
        boolean boolean54 = node52.isEmpty();
        boolean boolean55 = node52.isArrayLit();
        com.google.javascript.rhino.Node node56 = node38.useSourceInfoFrom(node52);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] { node38 };
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(32, nodeArray57);
        int int60 = node58.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        boolean boolean63 = node62.isOnlyModifiesThisCall();
        boolean boolean64 = node62.isEmpty();
        boolean boolean65 = node62.isReturn();
        boolean boolean66 = node62.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        node68.setSourceEncodedPosition(4095);
        boolean boolean71 = node68.isNot();
        boolean boolean72 = node68.isBreak();
        boolean boolean73 = node68.isIn();
        com.google.javascript.rhino.Node node74 = node62.useSourceInfoIfMissingFromForTree(node68);
        com.google.javascript.rhino.Node node75 = node58.useSourceInfoFrom(node68);
        boolean boolean76 = node75.isLabelName();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(29, node7, node9, node16, node75);
        com.google.javascript.rhino.Node node78 = node16.getFirstChild();
        com.google.javascript.rhino.Node node79 = node1.srcrefTree(node16);
        com.google.javascript.rhino.Node node80 = node1.getParent();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(staticSourceFile42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(staticSourceFile49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(node80);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node4.isAnd();
        node4.setLength(4095);
        boolean boolean78 = node4.isComma();
        boolean boolean79 = node4.isGetterDef();
        boolean boolean80 = node4.isDec();
        boolean boolean81 = node4.isGetProp();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        boolean boolean26 = node22.getBooleanProp(0);
        boolean boolean27 = node22.isIf();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        com.google.javascript.rhino.Node node4 = node1.removeFirstChild();
        boolean boolean5 = node1.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = null;
        node1.setStaticSourceFile(staticSourceFile6);
        boolean boolean8 = node1.isStringKey();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node4.isAnd();
        node4.setLength(4095);
        node4.setLength(54);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean84 = node83.isTypeOf();
        boolean boolean85 = node83.isInc();
        com.google.javascript.rhino.Node node86 = node4.useSourceInfoIfMissingFrom(node83);
        boolean boolean87 = node86.isIn();
        int int88 = node86.getLength();
        com.google.javascript.rhino.jstype.JSType jSType89 = null;
        node86.setJSType(jSType89);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 54 + "'", int88 == 54);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("");
        boolean boolean72 = node71.isOnlyModifiesThisCall();
        boolean boolean73 = node71.isEmpty();
        boolean boolean74 = node71.isArrayLit();
        com.google.javascript.rhino.Node node75 = node57.useSourceInfoFrom(node71);
        boolean boolean76 = node71.hasChildren();
        com.google.javascript.rhino.Node node77 = node32.copyInformationFrom(node71);
        boolean boolean78 = node77.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        boolean boolean36 = node28.isOptionalArg();
        node28.setCharno(0);
        boolean boolean39 = node28.hasChildren();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = node42.getLastSibling();
        boolean boolean46 = node42.isExprResult();
        node28.putProp(8, (java.lang.Object) node42);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray5, 12, 100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(53, nodeArray5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100, nodeArray5);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(36, nodeArray5, (int) ' ', (int) (byte) 100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(46, nodeArray5, 1, (int) (short) 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isReturn();
        boolean boolean22 = node18.isRegExp();
        java.lang.String str23 = node18.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable24 = node18.getAncestors();
        boolean boolean25 = node18.isScript();
        boolean boolean26 = node18.isCatch();
        int int27 = node16.getIndexOfChild(node18);
        boolean boolean28 = node16.isFalse();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "STRING \n" + "'", str23, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        boolean boolean9 = node1.getBooleanProp(45);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        boolean boolean15 = node11.isBreak();
        boolean boolean16 = node11.isTypeOf();
        node11.setVarArgs(false);
        boolean boolean19 = node1.hasChild(node11);
        node1.setString("Node tree inequality:\nTree1:\nNUMBER 37.0 100\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: NUMBER 37.0 100\n\n\nSubtree2: STRING  0\n");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        boolean boolean62 = node58.isBreak();
        boolean boolean63 = node58.isTypeOf();
        int int64 = node58.getCharno();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("");
        boolean boolean67 = node66.isOnlyModifiesThisCall();
        int int68 = node66.getSourceOffset();
        boolean boolean69 = node66.isExprResult();
        com.google.javascript.rhino.Node node70 = node58.srcref(node66);
        boolean boolean71 = node70.isNE();
        com.google.javascript.rhino.Node node72 = node56.srcrefTree(node70);
        com.google.javascript.rhino.Node node73 = node72.cloneNode();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4095 + "'", int64 == 4095);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        node40.setSourceEncodedPosition(4095);
        boolean boolean43 = node40.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = node40.getStaticSourceFile();
        boolean boolean45 = node40.isAssignAdd();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        node47.setSourceEncodedPosition(4095);
        boolean boolean50 = node47.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = node47.getStaticSourceFile();
        com.google.javascript.rhino.Node node52 = node40.copyInformationFromForTree(node47);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        boolean boolean55 = node54.isOnlyModifiesThisCall();
        boolean boolean56 = node54.isEmpty();
        boolean boolean57 = node54.isArrayLit();
        com.google.javascript.rhino.Node node58 = node40.useSourceInfoFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] { node40 };
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(32, nodeArray59);
        node20.addChildrenToFront(node60);
        int int62 = node60.getLength();
        boolean boolean63 = node60.isAssignAdd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(staticSourceFile44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(staticSourceFile51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        boolean boolean65 = node42.isScript();
        boolean boolean66 = node42.isOr();
        java.lang.String str70 = node42.toString(false, false, false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "STRING " + "'", str70, "STRING ");
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        boolean boolean46 = node43.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        boolean boolean48 = node43.isAssignAdd();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        com.google.javascript.rhino.Node node55 = node43.copyInformationFromForTree(node50);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        boolean boolean58 = node57.isOnlyModifiesThisCall();
        boolean boolean59 = node57.isEmpty();
        boolean boolean60 = node57.isArrayLit();
        com.google.javascript.rhino.Node node61 = node43.useSourceInfoFrom(node57);
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] { node43 };
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(32, nodeArray62);
        int int65 = node63.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isReturn();
        boolean boolean71 = node67.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("");
        node73.setSourceEncodedPosition(4095);
        boolean boolean76 = node73.isNot();
        boolean boolean77 = node73.isBreak();
        boolean boolean78 = node73.isIn();
        com.google.javascript.rhino.Node node79 = node67.useSourceInfoIfMissingFromForTree(node73);
        com.google.javascript.rhino.Node node80 = node63.useSourceInfoFrom(node73);
        boolean boolean81 = node73.isNE();
        java.lang.String str82 = node39.checkTreeEquals(node73);
        boolean boolean84 = node73.getBooleanProp(42);
        boolean boolean85 = node73.isThrow();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n" + "'", str82, "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        node8.setOptionalArg(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray8, 12, 100);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(53, nodeArray8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100, nodeArray8);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray8);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(409700, nodeArray8, 53, 2);
        node17.setLength(32);
        boolean boolean20 = node1.isEquivalentToTyped(node17);
        com.google.javascript.rhino.Node node21 = node1.cloneNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(48);
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesGlobalState();
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        boolean boolean11 = node10.isIf();
        boolean boolean12 = node10.isArrayLit();
        boolean boolean13 = node10.isObjectLit();
        boolean boolean14 = node10.wasEmptyNode();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        boolean boolean20 = node16.isBreak();
        boolean boolean21 = node16.isTypeOf();
        boolean boolean22 = node16.isDec();
        boolean boolean23 = node16.isInstanceOf();
        com.google.javascript.rhino.Node node24 = node10.clonePropsFrom(node16);
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isQuotedString();
        boolean boolean27 = node24.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int4 = node3.getLength();
        boolean boolean5 = node3.isStringKey();
        int int6 = node3.getSourcePosition();
        boolean boolean7 = node3.isQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 409700 + "'", int6 == 409700);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node7.getStaticSourceFile();
        boolean boolean12 = node7.isAssignAdd();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node19 = node7.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        boolean boolean22 = node21.isOnlyModifiesThisCall();
        boolean boolean23 = node21.isEmpty();
        boolean boolean24 = node21.isArrayLit();
        com.google.javascript.rhino.Node node25 = node7.useSourceInfoFrom(node21);
        boolean boolean26 = node25.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isArrayLit();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        boolean boolean34 = node33.isOnlyModifiesThisCall();
        boolean boolean35 = node33.isEmpty();
        boolean boolean36 = node33.isReturn();
        boolean boolean37 = node33.isNE();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(4095, node25, node28, node33, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(36, node40, node42, node49);
        boolean boolean51 = node50.isObjectLit();
        com.google.javascript.rhino.Node node52 = node1.srcrefTree(node50);
        int int53 = node52.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 100.0f, 30, 31);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        boolean boolean46 = node43.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        boolean boolean48 = node43.isAssignAdd();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        com.google.javascript.rhino.Node node55 = node43.copyInformationFromForTree(node50);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        boolean boolean58 = node57.isOnlyModifiesThisCall();
        boolean boolean59 = node57.isEmpty();
        boolean boolean60 = node57.isArrayLit();
        com.google.javascript.rhino.Node node61 = node43.useSourceInfoFrom(node57);
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] { node43 };
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(32, nodeArray62);
        int int65 = node63.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isReturn();
        boolean boolean71 = node67.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("");
        node73.setSourceEncodedPosition(4095);
        boolean boolean76 = node73.isNot();
        boolean boolean77 = node73.isBreak();
        boolean boolean78 = node73.isIn();
        com.google.javascript.rhino.Node node79 = node67.useSourceInfoIfMissingFromForTree(node73);
        com.google.javascript.rhino.Node node80 = node63.useSourceInfoFrom(node73);
        boolean boolean81 = node73.isNE();
        java.lang.String str82 = node39.checkTreeEquals(node73);
        boolean boolean83 = node39.isComma();
        node39.removeProp(48);
        boolean boolean86 = node39.isParamList();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n" + "'", str82, "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        boolean boolean47 = node36.isGetElem();
        boolean boolean48 = node36.isCall();
        com.google.javascript.rhino.Node node49 = node36.cloneTree();
        boolean boolean50 = node36.isInstanceOf();
        boolean boolean51 = node36.isNE();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        boolean boolean14 = node8.isLocalResultCall();
        // The following exception was thrown during execution in test generation
        try {
            node8.setDouble((-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        boolean boolean28 = node8.isVar();
        boolean boolean29 = node8.isIf();
        boolean boolean30 = node8.isGetElem();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node8.siblings();
        boolean boolean32 = node8.isGetProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        boolean boolean30 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node25.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node43 = node25.useSourceInfoFrom(node39);
        boolean boolean44 = node43.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isReturn();
        boolean boolean55 = node51.isNE();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node43, node46, node51, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(36, node58, node60, node67);
        boolean boolean69 = node67.isTypeOf();
        boolean boolean70 = node67.isGetterDef();
        boolean boolean71 = node67.isFor();
        boolean boolean72 = node1.isEquivalentToTyped(node67);
        java.lang.Object obj74 = node1.getProp(0);
        boolean boolean75 = node1.isSyntheticBlock();
        boolean boolean76 = node1.isIf();
        node1.setString("STRING \n");
        boolean boolean79 = node1.isNE();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 4, 32);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        node5.setSourceEncodedPosition(4095);
        boolean boolean8 = node5.isNot();
        boolean boolean9 = node5.isBreak();
        boolean boolean10 = node5.isTypeOf();
        int int11 = node5.getCharno();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        boolean boolean14 = node13.isOnlyModifiesThisCall();
        int int15 = node13.getSourceOffset();
        boolean boolean16 = node13.isExprResult();
        com.google.javascript.rhino.Node node17 = node5.srcref(node13);
        boolean boolean18 = node17.isNE();
        java.lang.String str19 = node17.toStringTree();
        com.google.javascript.rhino.Node node20 = node3.srcref(node17);
        node17.detachChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4095 + "'", int11 == 4095);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "STRING \n" + "'", str19, "STRING \n");
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("ASSIGN_MOD");
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder2 = node1.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(37, 2, 0);
        boolean boolean4 = node3.isNull();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isWhile();
        node1.setSourceFileForTesting("");
        boolean boolean6 = node1.isTypeOf();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        node8.setVarArgs(false);
        boolean boolean15 = node8.isFromExterns();
        boolean boolean16 = node8.isNull();
        boolean boolean17 = node8.isFalse();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        node19.setSourceEncodedPosition(4095);
        boolean boolean22 = node19.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node19.getStaticSourceFile();
        boolean boolean24 = node19.isAssignAdd();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        node26.setSourceEncodedPosition(4095);
        boolean boolean29 = node26.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node26.getStaticSourceFile();
        com.google.javascript.rhino.Node node31 = node19.copyInformationFromForTree(node26);
        com.google.javascript.rhino.Node node32 = node26.removeFirstChild();
        com.google.javascript.rhino.Node node33 = node8.useSourceInfoIfMissingFrom(node26);
        int int34 = node26.getLength();
        com.google.javascript.rhino.Node node35 = node1.copyInformationFrom(node26);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = node1.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  [source_file: ] is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(staticSourceFile30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node35);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 10, "STRING \n");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node22.isRegExp();
        com.google.javascript.rhino.Node node41 = node22.getLastChild();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder42 = node22.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder42.append("Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nTYPEOF 0\n    STRING \n\n\nSubtree1: STRING \n\n\nSubtree2: TYPEOF 0\n    STRING \n");
        fileLevelJsDocBuilder42.append("TYPEOF 0");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        boolean boolean7 = node1.isStringKey();
        boolean boolean8 = node1.isDec();
        node1.addSuppression("Node tree inequality:\nTree1:\nSTRING  [quoted: 1]\n\n\nTree2:\nNUMBER 37.0 100\n\n\nSubtree1: STRING  [quoted: 1]\n\n\nSubtree2: NUMBER 37.0 100\n");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNew();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isSetterDef();
        com.google.javascript.rhino.Node node21 = node17.getAncestor((int) (short) 0);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        com.google.javascript.rhino.Node node26 = node23.removeFirstChild();
        boolean boolean27 = node23.isIf();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        node29.setSourceEncodedPosition(4095);
        boolean boolean32 = node29.isNot();
        com.google.javascript.rhino.Node node33 = node23.srcrefTree(node29);
        boolean boolean34 = node23.isContinue();
        com.google.javascript.rhino.Node node35 = node17.srcrefTree(node23);
        boolean boolean36 = node12.isEquivalentTo(node35);
        node1.addChildrenToBack(node12);
        boolean boolean38 = node12.hasChildren();
        int int40 = node12.getIntProp(15);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        boolean boolean11 = node10.isIf();
        node10.setLength(4);
        boolean boolean14 = node10.isFunction();
        int int16 = node10.getIntProp(41);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = node10.getExistingIntProp(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 1");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(4095, "STRING  [quoted: 1]");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        boolean boolean14 = node1.isAssign();
        int int15 = node1.getType();
        boolean boolean16 = node1.isReturn();
        node1.setCharno(45);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        boolean boolean24 = node20.isBreak();
        boolean boolean25 = node20.isTypeOf();
        int int26 = node20.getCharno();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        int int30 = node28.getSourceOffset();
        boolean boolean31 = node28.isExprResult();
        com.google.javascript.rhino.Node node32 = node20.srcref(node28);
        boolean boolean33 = node32.isNE();
        boolean boolean34 = node32.isContinue();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isArrayLit();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        boolean boolean42 = node41.isOnlyModifiesThisCall();
        boolean boolean43 = node41.isSetterDef();
        com.google.javascript.rhino.Node node44 = node36.srcref(node41);
        node44.detachChildren();
        java.lang.String str46 = node44.getQualifiedName();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isInstanceOf();
        com.google.javascript.rhino.Node node52 = node48.getNext();
        com.google.javascript.rhino.Node node53 = node44.copyInformationFromForTree(node48);
        boolean boolean54 = node32.isEquivalentTo(node53);
        boolean boolean55 = node53.isSetterDef();
        com.google.javascript.rhino.Node node56 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.replaceChildAfter(node53, node56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4095 + "'", int26 == 4095);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isFor();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        boolean boolean14 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node9.copyInformationFromForTree(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node27 = node9.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] { node9 };
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(32, nodeArray28);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isReturn();
        com.google.javascript.rhino.Node node35 = node29.useSourceInfoFromForTree(node31);
        boolean boolean36 = node31.isAdd();
        node31.putBooleanProp(38, false);
        java.lang.String str40 = node1.checkTreeEquals(node31);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        boolean boolean43 = node42.isOnlyModifiesThisCall();
        boolean boolean44 = node42.isEmpty();
        boolean boolean45 = node42.isReturn();
        boolean boolean46 = node42.isNE();
        boolean boolean47 = node42.isAssign();
        boolean boolean48 = node42.isArrayLit();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = node42.getJSDocInfo();
        com.google.javascript.rhino.Node node50 = node42.cloneTree();
        boolean boolean51 = node42.isOnlyModifiesThisCall();
        boolean boolean52 = node42.isCase();
        boolean boolean53 = node31.hasChild(node42);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSDocInfo49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setAllFlags();
        boolean boolean6 = sideEffectFlags0.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder40 = node32.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder40.append("hi!");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 43, 10, 47);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n", 0, 42);
        int int9 = node8.getSourceOffset();
        node3.putProp(44, (java.lang.Object) int9);
        boolean boolean11 = node3.isTypeOf();
        java.lang.Appendable appendable12 = null;
        // The following exception was thrown during execution in test generation
        try {
            node3.appendStringTree(appendable12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isReturn();
        boolean boolean6 = node2.isNE();
        boolean boolean7 = node2.isContinue();
        boolean boolean8 = node2.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        boolean boolean11 = node10.isOnlyModifiesThisCall();
        boolean boolean12 = node10.isEmpty();
        boolean boolean13 = node10.isReturn();
        boolean boolean14 = node10.isRegExp();
        java.lang.String str15 = node10.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable16 = node10.getAncestors();
        com.google.javascript.rhino.Node node17 = node2.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        node19.setSourceEncodedPosition(4095);
        boolean boolean22 = node19.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node19.getStaticSourceFile();
        node19.setVarArgs(false);
        boolean boolean26 = node19.isFromExterns();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node19.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.rhino.Node node33 = node10.useSourceInfoFromForTree(node19);
        int int34 = node33.getLineno();
        boolean boolean35 = node33.isSyntheticBlock();
        com.google.javascript.rhino.Node node37 = node33.getAncestor(45);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) '#', node37, 48, 40992);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "STRING \n" + "'", str15, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(node37);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray5, 12, 100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(53, nodeArray5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) '#', nodeArray5, (int) 'a', (int) (byte) 0);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(46, nodeArray5);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray5, 37, 37);
        org.junit.Assert.assertNotNull(nodeArray5);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        boolean boolean29 = node22.isCall();
        com.google.javascript.rhino.Node node30 = node22.getLastChild();
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("");
        node34.setSourceEncodedPosition(4095);
        boolean boolean37 = node34.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = node34.getStaticSourceFile();
        boolean boolean39 = node34.isAssignAdd();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        com.google.javascript.rhino.Node node46 = node34.copyInformationFromForTree(node41);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        boolean boolean49 = node48.isOnlyModifiesThisCall();
        boolean boolean50 = node48.isEmpty();
        boolean boolean51 = node48.isArrayLit();
        com.google.javascript.rhino.Node node52 = node34.useSourceInfoFrom(node48);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] { node34 };
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(32, nodeArray53);
        java.lang.String str55 = node31.checkTreeEquals(node54);
        boolean boolean56 = node31.isTrue();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(staticSourceFile38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nTYPEOF 0\n    STRING \n\n\nSubtree1: STRING \n\n\nSubtree2: TYPEOF 0\n    STRING \n" + "'", str55, "Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nTYPEOF 0\n    STRING \n\n\nSubtree1: STRING \n\n\nSubtree2: TYPEOF 0\n    STRING \n");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 15, 12, 100);
        boolean boolean4 = node3.isTry();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isRegExp();
        java.lang.String str6 = node1.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable7 = node1.getAncestors();
        java.lang.String str8 = node1.getSourceFileName();
        boolean boolean9 = node1.isIn();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "STRING \n" + "'", str6, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        boolean boolean6 = node1.isRegExp();
        node1.detachChildren();
        boolean boolean8 = node1.isDefaultCase();
        com.google.javascript.rhino.jstype.JSType jSType9 = node1.getJSType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSType9);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        boolean boolean28 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        node30.setSourceEncodedPosition(4095);
        boolean boolean33 = node30.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node30.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node23.copyInformationFromForTree(node30);
        com.google.javascript.rhino.Node node36 = node30.removeFirstChild();
        boolean boolean37 = node30.isAnd();
        boolean boolean38 = node30.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        boolean boolean41 = node40.isOnlyModifiesThisCall();
        boolean boolean42 = node40.isEmpty();
        boolean boolean43 = node40.isArrayLit();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        boolean boolean46 = node45.isOnlyModifiesThisCall();
        boolean boolean47 = node45.isSetterDef();
        com.google.javascript.rhino.Node node48 = node40.srcref(node45);
        node30.addChildToFront(node40);
        com.google.javascript.rhino.Node node50 = node30.getLastChild();
        boolean boolean51 = node30.isInstanceOf();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node53.getStaticSourceFile();
        boolean boolean58 = node53.isAssignAdd();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        boolean boolean63 = node60.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = node60.getStaticSourceFile();
        com.google.javascript.rhino.Node node65 = node53.copyInformationFromForTree(node60);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isArrayLit();
        com.google.javascript.rhino.Node node71 = node53.useSourceInfoFrom(node67);
        boolean boolean72 = node53.isVarArgs();
        int int73 = node53.getType();
        node30.addChildToBack(node53);
        int int75 = node1.getIndexOfChild(node53);
        node53.addSuppression("STRING ");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(staticSourceFile64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 40 + "'", int73 == 40);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setMutatesArguments();
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setAllFlags();
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING ", (int) (byte) 100, 12);
        boolean boolean4 = node3.isCatch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node6.getStaticSourceFile();
        boolean boolean11 = node6.isAssignAdd();
        boolean boolean12 = node6.isStringKey();
        int int13 = node6.getChildCount();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isReturn();
        boolean boolean19 = node15.isEmpty();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        node22.setSourceEncodedPosition(4095);
        boolean boolean25 = node22.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node22.getStaticSourceFile();
        boolean boolean27 = node22.isAssignAdd();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        node29.setSourceEncodedPosition(4095);
        boolean boolean32 = node29.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = node29.getStaticSourceFile();
        com.google.javascript.rhino.Node node34 = node22.copyInformationFromForTree(node29);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isArrayLit();
        com.google.javascript.rhino.Node node40 = node22.useSourceInfoFrom(node36);
        boolean boolean41 = node40.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        boolean boolean44 = node43.isOnlyModifiesThisCall();
        boolean boolean45 = node43.isEmpty();
        boolean boolean46 = node43.isArrayLit();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        boolean boolean49 = node48.isOnlyModifiesThisCall();
        boolean boolean50 = node48.isEmpty();
        boolean boolean51 = node48.isReturn();
        boolean boolean52 = node48.isNE();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(4095, node40, node43, node48, (int) (byte) 10, 32);
        boolean boolean56 = node48.isCase();
        com.google.javascript.rhino.Node node57 = node15.srcref(node48);
        java.lang.String str58 = node6.checkTreeEquals(node57);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder59 = node57.new FileLevelJsDocBuilder();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node60 = node3.removeChildAfter(node57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(staticSourceFile33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node19.isUnscopedQualifiedName();
        boolean boolean21 = node19.isWhile();
        boolean boolean22 = node19.isComma();
        int int23 = node19.getLineno();
        int int24 = node19.getCharno();
        boolean boolean25 = node19.isCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 32, 47);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isInstanceOf();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        node2.putProp((int) '4', (java.lang.Object) node8);
        boolean boolean12 = node8.isDebugger();
        boolean boolean13 = node8.isVar();
        node8.setString("STRING ");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        boolean boolean23 = node22.isOnlyModifiesThisCall();
        boolean boolean24 = node22.isSetterDef();
        com.google.javascript.rhino.Node node25 = node17.srcref(node22);
        com.google.javascript.rhino.Node node26 = node25.getLastSibling();
        boolean boolean27 = node26.isIf();
        node26.setLength(4);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        boolean boolean49 = node46.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node46.getStaticSourceFile();
        node46.setVarArgs(false);
        boolean boolean53 = node46.isFromExterns();
        boolean boolean54 = node46.isNull();
        boolean boolean55 = node46.isFalse();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node70 = node64.removeFirstChild();
        com.google.javascript.rhino.Node node71 = node46.useSourceInfoIfMissingFrom(node64);
        com.google.javascript.rhino.Node node72 = node44.useSourceInfoFromForTree(node71);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(45, node72);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(44, node8, node26, node73);
        boolean boolean75 = node74.isHook();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isEmpty();
        boolean boolean33 = node30.isReturn();
        boolean boolean34 = node30.isNE();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node22, node25, node30, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFrom(node37);
        boolean boolean39 = node38.isNull();
        node38.setLineno(0);
        node38.setSourceFileForTesting("Node tree inequality:\nTree1:\nNUMBER 37.0 100\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: NUMBER 37.0 100\n\n\nSubtree2: STRING  0\n");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        node1.setVarArgs(false);
        boolean boolean8 = node1.isFromExterns();
        boolean boolean9 = node1.isNull();
        boolean boolean10 = node1.isFalse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        boolean boolean17 = node12.isAssignAdd();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        node19.setSourceEncodedPosition(4095);
        boolean boolean22 = node19.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node19.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node12.copyInformationFromForTree(node19);
        com.google.javascript.rhino.Node node25 = node19.removeFirstChild();
        com.google.javascript.rhino.Node node26 = node1.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node node27 = node26.cloneNode();
        java.lang.String str28 = node26.toStringTree();
        node26.setQuotedString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "STRING  0\n" + "'", str28, "STRING  0\n");
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nTYPEOF 0\n    STRING \n\n\nSubtree1: STRING \n\n\nSubtree2: TYPEOF 0\n    STRING \n", (int) (byte) 0, (int) (byte) -1);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(45, node4, 39, (int) ' ');
        com.google.javascript.rhino.Node node8 = node7.cloneNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = null;
        node8.setStaticSourceFile(staticSourceFile9);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        boolean boolean6 = node1.isContinue();
        boolean boolean7 = node1.isSwitch();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        boolean boolean11 = node9.isEmpty();
        boolean boolean12 = node9.isReturn();
        boolean boolean13 = node9.isRegExp();
        java.lang.String str14 = node9.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable15 = node9.getAncestors();
        com.google.javascript.rhino.Node node16 = node1.copyInformationFromForTree(node9);
        boolean boolean17 = node1.isSwitch();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "STRING \n" + "'", str14, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        boolean boolean14 = node1.isAssign();
        int int15 = node1.getType();
        boolean boolean16 = node1.isReturn();
        node1.setCharno(45);
        boolean boolean19 = node1.isExprResult();
        node1.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isInstanceOf();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        node2.putProp((int) '4', (java.lang.Object) node8);
        boolean boolean12 = node8.isDebugger();
        boolean boolean13 = node8.isVar();
        node8.setString("STRING ");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        boolean boolean23 = node22.isOnlyModifiesThisCall();
        boolean boolean24 = node22.isSetterDef();
        com.google.javascript.rhino.Node node25 = node17.srcref(node22);
        com.google.javascript.rhino.Node node26 = node25.getLastSibling();
        boolean boolean27 = node26.isIf();
        node26.setLength(4);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        boolean boolean49 = node46.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node46.getStaticSourceFile();
        node46.setVarArgs(false);
        boolean boolean53 = node46.isFromExterns();
        boolean boolean54 = node46.isNull();
        boolean boolean55 = node46.isFalse();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node70 = node64.removeFirstChild();
        com.google.javascript.rhino.Node node71 = node46.useSourceInfoIfMissingFrom(node64);
        com.google.javascript.rhino.Node node72 = node44.useSourceInfoFromForTree(node71);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(45, node72);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(44, node8, node26, node73);
        boolean boolean75 = node8.isFalse();
        int int76 = node8.getLineno();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(44, "NUMBER 37.0 100");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isCatch();
        java.lang.String str5 = node1.getSourceFileName();
        node1.setType((int) ' ');
        boolean boolean8 = node1.isIn();
        boolean boolean9 = node1.isRegExp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray6, 12, 100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(53, nodeArray6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, nodeArray6);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray6);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, 48, 8);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((-1), nodeArray6, 0, 49);
        org.junit.Assert.assertNotNull(nodeArray6);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        boolean boolean14 = node13.isCall();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        boolean boolean22 = node17.isAssignAdd();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node29 = node17.copyInformationFromForTree(node24);
        boolean boolean30 = node17.isNE();
        node17.setVarArgs(false);
        boolean boolean33 = node17.isStringKey();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "TYPEOF", "STRING \n", "Node tree inequality:\nTree1:\nSTRING  [quoted: 1]\n\n\nTree2:\nNUMBER 37.0 100\n\n\nSubtree1: STRING  [quoted: 1]\n\n\nSubtree2: NUMBER 37.0 100\n" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet40);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 8);
        int int46 = node44.getIntProp(15);
        node44.setSourceEncodedPositionForTree(35);
        boolean boolean49 = node44.isSwitch();
        boolean boolean50 = node44.isVoid();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("");
        boolean boolean53 = node52.isOnlyModifiesThisCall();
        boolean boolean54 = node52.isWhile();
        com.google.javascript.rhino.Node node55 = node52.getNext();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = node52.getStaticSourceFile();
        com.google.javascript.rhino.Node node57 = node52.cloneNode();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("");
        node73.setSourceEncodedPosition(4095);
        boolean boolean76 = node73.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile77 = node73.getStaticSourceFile();
        boolean boolean78 = node73.isAssignAdd();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("");
        node80.setSourceEncodedPosition(4095);
        boolean boolean83 = node80.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile84 = node80.getStaticSourceFile();
        com.google.javascript.rhino.Node node85 = node73.copyInformationFromForTree(node80);
        boolean boolean86 = node73.isNE();
        boolean boolean87 = node73.isThrow();
        boolean boolean88 = node73.isFor();
        com.google.javascript.rhino.Node node89 = node65.useSourceInfoFrom(node73);
        boolean boolean90 = node65.isOptionalArg();
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node((int) (byte) 100, node17, node44, node57, node65, 32, 39);
        com.google.javascript.rhino.Node node94 = node17.detachFromParent();
        boolean boolean95 = node13.hasChild(node17);
        boolean boolean96 = node17.isDelProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(staticSourceFile56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(staticSourceFile77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(staticSourceFile84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isWhile();
        node1.setSourceFileForTesting("");
        boolean boolean6 = node1.isTypeOf();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        node8.setVarArgs(false);
        boolean boolean15 = node8.isFromExterns();
        boolean boolean16 = node8.isNull();
        boolean boolean17 = node8.isFalse();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        node19.setSourceEncodedPosition(4095);
        boolean boolean22 = node19.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node19.getStaticSourceFile();
        boolean boolean24 = node19.isAssignAdd();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        node26.setSourceEncodedPosition(4095);
        boolean boolean29 = node26.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node26.getStaticSourceFile();
        com.google.javascript.rhino.Node node31 = node19.copyInformationFromForTree(node26);
        com.google.javascript.rhino.Node node32 = node26.removeFirstChild();
        com.google.javascript.rhino.Node node33 = node8.useSourceInfoIfMissingFrom(node26);
        int int34 = node26.getLength();
        com.google.javascript.rhino.Node node35 = node1.copyInformationFrom(node26);
        boolean boolean36 = node26.isDelProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(staticSourceFile30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder57 = node32.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node58 = node32.removeFirstChild();
        com.google.javascript.rhino.Node node60 = node32.getAncestor(0);
        node32.detachChildren();
        int int62 = node32.getCharno();
        boolean boolean63 = node32.isVoid();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4095 + "'", int62 == 4095);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node22.isName();
        boolean boolean41 = node22.isDo();
        boolean boolean42 = node22.isInstanceOf();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isIn();
        boolean boolean7 = node1.isLabel();
        boolean boolean8 = node1.isLabel();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable9 = node1.getAncestors();
        boolean boolean10 = node1.isNE();
        com.google.javascript.rhino.InputId inputId11 = node1.getInputId();
        com.google.javascript.rhino.Node node12 = node1.cloneNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(ancestorIterable9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertNotNull(node12);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int4 = node3.getLength();
        boolean boolean5 = node3.isStringKey();
        int int6 = node3.getSourcePosition();
        boolean boolean7 = node3.isExprResult();
        boolean boolean8 = node3.isExprResult();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 409700 + "'", int6 == 409700);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        node6.setLineno((int) (short) 1);
        int int77 = node6.getCharno();
        boolean boolean78 = node6.isAssignAdd();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("");
        node80.setSourceEncodedPosition(4095);
        boolean boolean83 = node80.isCall();
        boolean boolean84 = node80.isAssign();
        com.google.javascript.rhino.Node node85 = node6.useSourceInfoFromForTree(node80);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4095 + "'", int77 == 4095);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isTypeOf();
        boolean boolean5 = node3.isInc();
        com.google.javascript.rhino.Node node6 = node3.cloneTree();
        boolean boolean7 = node3.wasEmptyNode();
        boolean boolean8 = node3.isWith();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        boolean boolean16 = node11.isAssignAdd();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        node18.setSourceEncodedPosition(4095);
        boolean boolean21 = node18.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node23 = node11.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        boolean boolean26 = node25.isOnlyModifiesThisCall();
        boolean boolean27 = node25.isEmpty();
        boolean boolean28 = node25.isArrayLit();
        com.google.javascript.rhino.Node node29 = node11.useSourceInfoFrom(node25);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder30 = node11.new FileLevelJsDocBuilder();
        boolean boolean31 = node11.isDefaultCase();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) 0, node11, (int) ' ', 53);
        boolean boolean35 = node11.isQuotedString();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        node37.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node40 = node37.getLastSibling();
        node37.setSourceFileForTesting("");
        node11.addChildrenToFront(node37);
        com.google.javascript.rhino.Node node44 = node3.srcref(node11);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node2.new FileLevelJsDocBuilder();
        boolean boolean22 = node2.isDefaultCase();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 0, node2, (int) ' ', 53);
        node2.removeProp((int) (byte) -1);
        java.lang.String str31 = node2.toString(false, true, false);
        node2.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable34 = node2.getAncestors();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "STRING " + "'", str31, "STRING ");
        org.junit.Assert.assertNotNull(ancestorIterable34);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray5, 12, 100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(53, nodeArray5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100, nodeArray5);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray5);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(409700, nodeArray5, 53, 2);
        node14.setLength(32);
        boolean boolean17 = node14.isThrow();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isCall();
        boolean boolean5 = node1.isAssign();
        boolean boolean6 = node1.hasOneChild();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        boolean boolean11 = node8.isReturn();
        boolean boolean12 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        boolean boolean18 = node14.isBreak();
        boolean boolean19 = node14.isIn();
        com.google.javascript.rhino.Node node20 = node8.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node20.cloneNode();
        com.google.javascript.rhino.Node node22 = node1.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        boolean boolean29 = node24.isAssignAdd();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        node31.setSourceEncodedPosition(4095);
        boolean boolean34 = node31.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node31.getStaticSourceFile();
        com.google.javascript.rhino.Node node36 = node24.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node37 = node31.removeFirstChild();
        boolean boolean38 = node31.isAnd();
        node31.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node43 = node31.getAncestor(0);
        com.google.javascript.rhino.Node node44 = node22.useSourceInfoIfMissingFromForTree(node31);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = null;
        node44.setJSDocInfo(jSDocInfo45);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isTypeOf();
        boolean boolean5 = node3.isInc();
        com.google.javascript.rhino.Node node6 = node3.cloneTree();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder7 = node6.new FileLevelJsDocBuilder();
        int int8 = node6.getSourceOffset();
        boolean boolean9 = node6.isIf();
        boolean boolean10 = node6.isName();
        node6.setSourceEncodedPositionForTree(32);
        com.google.javascript.rhino.Node node13 = node6.cloneNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        boolean boolean30 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node37 = node25.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        boolean boolean41 = node39.isEmpty();
        boolean boolean42 = node39.isArrayLit();
        com.google.javascript.rhino.Node node43 = node25.useSourceInfoFrom(node39);
        boolean boolean44 = node43.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isReturn();
        boolean boolean55 = node51.isNE();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node43, node46, node51, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(36, node58, node60, node67);
        boolean boolean69 = node67.isTypeOf();
        boolean boolean70 = node67.isGetterDef();
        boolean boolean71 = node67.isFor();
        boolean boolean72 = node1.isEquivalentToTyped(node67);
        java.lang.Object obj74 = node1.getProp(0);
        boolean boolean75 = node1.isSyntheticBlock();
        node1.setLength(35);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("");
        boolean boolean80 = node79.isOnlyModifiesThisCall();
        boolean boolean81 = node79.isEmpty();
        com.google.javascript.rhino.Node node82 = node79.removeFirstChild();
        boolean boolean83 = node79.isCall();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable84 = node79.siblings();
        boolean boolean85 = node79.isGetProp();
        com.google.javascript.rhino.Node node86 = node1.useSourceInfoIfMissingFromForTree(node79);
        com.google.javascript.rhino.InputId inputId87 = node86.getInputId();
        boolean boolean88 = node86.isThrow();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(nodeIterable84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNull(inputId87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        boolean boolean55 = node42.isWith();
        node33.addChildToFront(node42);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node58.getStaticSourceFile();
        boolean boolean63 = node58.isAssignAdd();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = node65.getStaticSourceFile();
        com.google.javascript.rhino.Node node70 = node58.copyInformationFromForTree(node65);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        boolean boolean73 = node72.isOnlyModifiesThisCall();
        boolean boolean74 = node72.isEmpty();
        boolean boolean75 = node72.isArrayLit();
        com.google.javascript.rhino.Node node76 = node58.useSourceInfoFrom(node72);
        boolean boolean77 = node72.hasChildren();
        com.google.javascript.rhino.Node node78 = node33.copyInformationFrom(node72);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("");
        node80.setSourceEncodedPosition(4095);
        boolean boolean83 = node80.isNot();
        boolean boolean84 = node80.isBreak();
        boolean boolean85 = node80.isTypeOf();
        boolean boolean86 = node80.isInc();
        boolean boolean87 = node80.isWhile();
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newString("");
        node89.setSourceEncodedPosition(4095);
        boolean boolean92 = node89.isNot();
        boolean boolean93 = node89.isBreak();
        boolean boolean94 = node89.isIn();
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node((int) 'a', node78, node80, node89);
        com.google.javascript.rhino.Node node96 = node78.getParent();
        node96.setVarArgs(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(staticSourceFile69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node96);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 54, 38, 24);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        node3.setJSType(jSType4);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] { node4 };
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(32, nodeArray23);
        int int26 = node24.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("");
        node34.setSourceEncodedPosition(4095);
        boolean boolean37 = node34.isNot();
        boolean boolean38 = node34.isBreak();
        boolean boolean39 = node34.isIn();
        com.google.javascript.rhino.Node node40 = node28.useSourceInfoIfMissingFromForTree(node34);
        com.google.javascript.rhino.Node node41 = node24.useSourceInfoFrom(node34);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        boolean boolean46 = node43.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        boolean boolean48 = node43.isAssignAdd();
        java.util.Set<java.lang.String> strSet49 = node43.getDirectives();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        node51.setSourceEncodedPosition(4095);
        boolean boolean54 = node51.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = node51.getStaticSourceFile();
        node51.setVarArgs(false);
        boolean boolean58 = node51.isFromExterns();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        boolean boolean63 = node60.isNot();
        com.google.javascript.rhino.Node node64 = node60.getLastSibling();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(37, node24, node43, node51, node64);
        int int66 = node24.getSideEffectFlags();
        boolean boolean67 = node24.isFromExterns();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("");
        boolean boolean70 = node69.isOnlyModifiesThisCall();
        boolean boolean71 = node69.isEmpty();
        com.google.javascript.rhino.Node node72 = node69.removeFirstChild();
        com.google.javascript.rhino.Node node73 = node24.useSourceInfoFrom(node69);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("");
        boolean boolean76 = node75.isOnlyModifiesThisCall();
        boolean boolean77 = node75.isEmpty();
        boolean boolean78 = node75.isReturn();
        boolean boolean79 = node75.isEmpty();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable80 = node75.siblings();
        com.google.javascript.rhino.Node node81 = node73.copyInformationFrom(node75);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("");
        boolean boolean84 = node83.isOnlyModifiesThisCall();
        boolean boolean85 = node83.isEmpty();
        boolean boolean86 = node83.isCatch();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(48, node75, node83);
        boolean boolean88 = node83.isVar();
        node83.setCharno(44);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(strSet49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(staticSourceFile55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(nodeIterable80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        node1.setVarArgs(false);
        boolean boolean8 = node1.isFromExterns();
        node1.setLength(8);
        boolean boolean11 = node1.isString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isArrayLit();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isSetterDef();
        com.google.javascript.rhino.Node node10 = node2.srcref(node7);
        com.google.javascript.rhino.Node node11 = node10.getLastSibling();
        boolean boolean12 = node11.isIf();
        boolean boolean13 = node11.isArrayLit();
        boolean boolean14 = node11.isSyntheticBlock();
        boolean boolean15 = node11.isContinue();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100, node11);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isTypeOf();
        boolean boolean5 = node3.isInc();
        com.google.javascript.rhino.Node node6 = node3.cloneTree();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder7 = node6.new FileLevelJsDocBuilder();
        int int8 = node6.getSourceOffset();
        boolean boolean9 = node6.isIf();
        int int10 = node6.getSourcePosition();
        double double11 = node6.getDouble();
        boolean boolean12 = node6.isSwitch();
        com.google.javascript.rhino.Node node13 = node6.removeChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 409700 + "'", int10 == 409700);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 37.0d + "'", double11 == 37.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesGlobalState();
        boolean boolean7 = sideEffectFlags0.areAllFlagsSet();
        int int8 = sideEffectFlags0.valueOf();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        java.lang.String str16 = node8.getSourceFileName();
        boolean boolean17 = node8.isSwitch();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        boolean boolean7 = node6.isOnlyModifiesThisCall();
        boolean boolean8 = node6.isSetterDef();
        com.google.javascript.rhino.Node node9 = node1.srcref(node6);
        node9.detachChildren();
        java.lang.String str11 = node9.getQualifiedName();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isInstanceOf();
        com.google.javascript.rhino.Node node17 = node13.getNext();
        com.google.javascript.rhino.Node node18 = node9.copyInformationFromForTree(node13);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node23.getStaticSourceFile();
        node13.putProp((int) (short) -1, (java.lang.Object) node23);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(staticSourceFile24);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 8);
        boolean boolean2 = node1.isStringKey();
        boolean boolean3 = node1.isQualifiedName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node7.getStaticSourceFile();
        boolean boolean12 = node7.isAssignAdd();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node19 = node7.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        boolean boolean22 = node21.isOnlyModifiesThisCall();
        boolean boolean23 = node21.isEmpty();
        boolean boolean24 = node21.isArrayLit();
        com.google.javascript.rhino.Node node25 = node7.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] { node7 };
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(32, nodeArray26);
        int int29 = node27.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isReturn();
        boolean boolean35 = node31.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        node37.setSourceEncodedPosition(4095);
        boolean boolean40 = node37.isNot();
        boolean boolean41 = node37.isBreak();
        boolean boolean42 = node37.isIn();
        com.google.javascript.rhino.Node node43 = node31.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.Node node44 = node27.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        boolean boolean49 = node46.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node46.getStaticSourceFile();
        boolean boolean51 = node46.isAssignAdd();
        java.util.Set<java.lang.String> strSet52 = node46.getDirectives();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        node54.setSourceEncodedPosition(4095);
        boolean boolean57 = node54.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = node54.getStaticSourceFile();
        node54.setVarArgs(false);
        boolean boolean61 = node54.isFromExterns();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        node63.setSourceEncodedPosition(4095);
        boolean boolean66 = node63.isNot();
        com.google.javascript.rhino.Node node67 = node63.getLastSibling();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(37, node27, node46, node54, node67);
        int int69 = node27.getSideEffectFlags();
        boolean boolean70 = node27.isFromExterns();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        boolean boolean73 = node72.isOnlyModifiesThisCall();
        boolean boolean74 = node72.isEmpty();
        com.google.javascript.rhino.Node node75 = node72.removeFirstChild();
        com.google.javascript.rhino.Node node76 = node27.useSourceInfoFrom(node72);
        boolean boolean77 = node27.isEmpty();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("");
        node79.setSourceEncodedPosition(4095);
        boolean boolean82 = node79.isNot();
        boolean boolean83 = node79.isBreak();
        boolean boolean84 = node79.isTypeOf();
        node79.putBooleanProp(45, true);
        node27.addChildrenToBack(node79);
        int int89 = node1.getIndexOfChild(node27);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(staticSourceFile58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) -1);
        boolean boolean2 = node1.isFor();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        node50.putBooleanProp((int) (byte) 0, false);
        node50.setSourceEncodedPosition((int) 'a');
        boolean boolean70 = node50.isSwitch();
        int int72 = node50.getIntProp(409700);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isTypeOf();
        boolean boolean5 = node3.isInc();
        com.google.javascript.rhino.Node node6 = node3.cloneTree();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder7 = node6.new FileLevelJsDocBuilder();
        int int8 = node6.getSourceOffset();
        boolean boolean9 = node6.isIf();
        boolean boolean10 = node6.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isReturn();
        boolean boolean6 = node2.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType7 = node2.getJSType();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        boolean boolean13 = node9.isBreak();
        boolean boolean14 = node9.isTypeOf();
        boolean boolean15 = node9.isInc();
        boolean boolean16 = node9.isWhile();
        node9.setSourceEncodedPosition((-1));
        boolean boolean19 = node2.hasChild(node9);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(37, node9, 10, 48);
        boolean boolean23 = node22.isWith();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        java.lang.String str47 = node38.toString();
        node38.setSourceEncodedPositionForTree(31);
        com.google.javascript.rhino.Node node50 = node38.getLastSibling();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "STRING  0" + "'", str47, "STRING  0");
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isCatch();
        int int5 = node1.getSourceOffset();
        int int6 = node1.getType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 40 + "'", int6 == 40);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        boolean boolean4 = node2.isEmpty();
        boolean boolean5 = node2.isReturn();
        boolean boolean6 = node2.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType7 = node2.getJSType();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        boolean boolean13 = node9.isBreak();
        boolean boolean14 = node9.isTypeOf();
        boolean boolean15 = node9.isInc();
        boolean boolean16 = node9.isWhile();
        node9.setSourceEncodedPosition((-1));
        boolean boolean19 = node2.hasChild(node9);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(37, node9, 10, 48);
        node22.setSourceFileForTesting("hi!");
        boolean boolean25 = node22.isDebugger();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isSetterDef();
        com.google.javascript.rhino.Node node5 = node1.getAncestor((int) (short) 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        com.google.javascript.rhino.Node node10 = node7.removeFirstChild();
        boolean boolean11 = node7.isIf();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.Node node17 = node7.srcrefTree(node13);
        boolean boolean18 = node7.isContinue();
        com.google.javascript.rhino.Node node19 = node1.srcrefTree(node7);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node1.siblings();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeIterable20);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        node58.setSourceEncodedPosition(4095);
        boolean boolean61 = node58.isNot();
        boolean boolean62 = node58.isBreak();
        boolean boolean63 = node58.isTypeOf();
        int int64 = node58.getCharno();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("");
        boolean boolean67 = node66.isOnlyModifiesThisCall();
        int int68 = node66.getSourceOffset();
        boolean boolean69 = node66.isExprResult();
        com.google.javascript.rhino.Node node70 = node58.srcref(node66);
        boolean boolean71 = node70.isNE();
        com.google.javascript.rhino.Node node72 = node56.srcrefTree(node70);
        com.google.javascript.rhino.Node node73 = node56.cloneTree();
        int int74 = node56.getCharno();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4095 + "'", int64 == 4095);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node15.getStaticSourceFile();
        boolean boolean20 = node15.isAssignAdd();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        node22.setSourceEncodedPosition(4095);
        boolean boolean25 = node22.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node22.getStaticSourceFile();
        com.google.javascript.rhino.Node node27 = node15.copyInformationFromForTree(node22);
        boolean boolean28 = node15.isNE();
        boolean boolean29 = node15.isThrow();
        boolean boolean30 = node15.isFor();
        com.google.javascript.rhino.Node node31 = node7.useSourceInfoFrom(node15);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable32 = node7.getAncestors();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(ancestorIterable32);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        boolean boolean14 = node13.isNE();
        boolean boolean15 = node13.isContinue();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        boolean boolean23 = node22.isOnlyModifiesThisCall();
        boolean boolean24 = node22.isSetterDef();
        com.google.javascript.rhino.Node node25 = node17.srcref(node22);
        node25.detachChildren();
        java.lang.String str27 = node25.getQualifiedName();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        node29.setSourceEncodedPosition(4095);
        boolean boolean32 = node29.isInstanceOf();
        com.google.javascript.rhino.Node node33 = node29.getNext();
        com.google.javascript.rhino.Node node34 = node25.copyInformationFromForTree(node29);
        boolean boolean35 = node13.isEquivalentTo(node34);
        boolean boolean36 = node13.isInc();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        boolean boolean65 = node64.isExprResult();
        com.google.javascript.rhino.Node node66 = node64.removeFirstChild();
        node66.setCharno((int) (byte) -1);
        boolean boolean69 = node66.isBreak();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        node28.setLineno((int) (short) 100);
        boolean boolean31 = node28.isDec();
        boolean boolean32 = node28.isDo();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesThis();
        int int3 = sideEffectFlags0.valueOf();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        boolean boolean47 = node36.isGetElem();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        boolean boolean53 = node49.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node54 = node36.srcref(node49);
        boolean boolean55 = node36.isWhile();
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = node36.getJSDocInfo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(jSDocInfo56);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        boolean boolean7 = node1.isDec();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        boolean boolean14 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node9.copyInformationFromForTree(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node27 = node9.useSourceInfoFrom(node23);
        boolean boolean28 = node27.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node29 = node1.useSourceInfoFromForTree(node27);
        node1.setSourceEncodedPositionForTree(51);
        com.google.javascript.rhino.InputId inputId32 = node1.getInputId();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(inputId32);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        boolean boolean36 = node28.isOptionalArg();
        com.google.javascript.rhino.Node node37 = node28.getLastSibling();
        boolean boolean38 = node28.isFalse();
        java.lang.String str39 = node28.getSourceFileName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node16.hasChildren();
        boolean boolean22 = node16.isNumber();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        boolean boolean29 = node24.isAssignAdd();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        node31.setSourceEncodedPosition(4095);
        boolean boolean34 = node31.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node31.getStaticSourceFile();
        com.google.javascript.rhino.Node node36 = node24.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node37 = node31.removeFirstChild();
        boolean boolean38 = node31.isAnd();
        boolean boolean39 = node31.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        boolean boolean42 = node41.isOnlyModifiesThisCall();
        boolean boolean43 = node41.isEmpty();
        boolean boolean44 = node41.isArrayLit();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isSetterDef();
        com.google.javascript.rhino.Node node49 = node41.srcref(node46);
        node31.addChildToFront(node41);
        com.google.javascript.rhino.Node node51 = node31.getLastChild();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        boolean boolean57 = node53.isBreak();
        boolean boolean58 = node53.isTypeOf();
        int int59 = node53.getCharno();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("");
        boolean boolean62 = node61.isOnlyModifiesThisCall();
        int int63 = node61.getSourceOffset();
        boolean boolean64 = node61.isExprResult();
        com.google.javascript.rhino.Node node65 = node53.srcref(node61);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        node67.setSourceEncodedPosition(4095);
        boolean boolean70 = node67.isCall();
        boolean boolean71 = node53.isEquivalentTo(node67);
        node53.setIsSyntheticBlock(true);
        node53.setSourceFileForTesting("STRING \n");
        boolean boolean76 = node53.isSwitch();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("");
        node78.setSourceEncodedPosition(4095);
        boolean boolean81 = node78.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile82 = node78.getStaticSourceFile();
        boolean boolean83 = node78.isAssignAdd();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("");
        node85.setSourceEncodedPosition(4095);
        boolean boolean88 = node85.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile89 = node85.getStaticSourceFile();
        com.google.javascript.rhino.Node node90 = node78.copyInformationFromForTree(node85);
        boolean boolean91 = node78.isNE();
        boolean boolean92 = node78.isThrow();
        boolean boolean93 = node78.wasEmptyNode();
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node(50, node16, node31, node53, node78);
        boolean boolean95 = node16.isInc();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4095 + "'", int59 == 4095);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(staticSourceFile82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(staticSourceFile89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder57 = node32.getJsDocBuilderForNode();
        fileLevelJsDocBuilder57.append("STRING  [quoted: 1]");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder57);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        boolean boolean75 = node4.isAnd();
        boolean boolean76 = node4.isThrow();
        com.google.javascript.rhino.InputId inputId77 = node4.getInputId();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(inputId77);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray2, 12, 100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(53, nodeArray2);
        boolean boolean7 = node6.isSwitch();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        node21.setVarArgs(false);
        boolean boolean28 = node21.isFromExterns();
        boolean boolean29 = node21.isNull();
        boolean boolean30 = node21.isFalse();
        boolean boolean31 = node15.hasChild(node21);
        boolean boolean32 = node21.isDelProp();
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        node21.setJSType(jSType33);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        node36.setSourceEncodedPosition(4095);
        boolean boolean39 = node36.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = node36.getStaticSourceFile();
        boolean boolean41 = node36.isStringKey();
        boolean boolean42 = node36.isQuotedString();
        java.util.Set<java.lang.String> strSet43 = node36.getDirectives();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node44 = node21.removeChildAfter(node36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(staticSourceFile40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(strSet43);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setAllFlags();
        int int3 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setMutatesThis();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isArrayLit();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isFor();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        boolean boolean14 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        node16.setSourceEncodedPosition(4095);
        boolean boolean19 = node16.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node node21 = node9.copyInformationFromForTree(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node27 = node9.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] { node9 };
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(32, nodeArray28);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isReturn();
        com.google.javascript.rhino.Node node35 = node29.useSourceInfoFromForTree(node31);
        boolean boolean36 = node31.isAdd();
        node31.putBooleanProp(38, false);
        java.lang.String str40 = node1.checkTreeEquals(node31);
        boolean boolean41 = node31.isTypeOf();
        java.lang.Object obj43 = node31.getProp(0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray3, 12, 100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(53, nodeArray3);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(41, nodeArray3, (int) (byte) -1, 31);
        boolean boolean11 = node10.isRegExp();
        boolean boolean12 = node10.isNew();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node10.getJSDocInfo();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isObjectLit();
        boolean boolean5 = node3.isFunction();
        boolean boolean6 = node3.wasEmptyNode();
        boolean boolean7 = node3.isTypeOf();
        node3.setVarArgs(false);
        boolean boolean10 = node3.isTry();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        node28.setLineno((int) (short) 100);
        boolean boolean31 = node28.isVar();
        boolean boolean32 = node28.isParamList();
        node28.setLength(31);
        boolean boolean35 = node28.isLabelName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        node1.setString("STRING \n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = null;
        node1.setJSDocInfo(jSDocInfo6);
        boolean boolean8 = node1.isGetProp();
        boolean boolean9 = node1.isContinue();
        boolean boolean10 = node1.isHook();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100);
        boolean boolean2 = node1.isWith();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node1.siblings();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(nodeIterable3);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        boolean boolean6 = node1.isContinue();
        boolean boolean7 = node1.isSwitch();
        node1.setQuotedString();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node23 = node17.removeFirstChild();
        boolean boolean24 = node17.isAnd();
        boolean boolean25 = node17.isDec();
        int int26 = node17.getType();
        java.lang.String str27 = node17.toString();
        int int29 = node17.getIntProp(409700);
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node17.setJSType(jSType30);
        node1.addChildrenToFront(node17);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 40 + "'", int26 == 40);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "STRING  0" + "'", str27, "STRING  0");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        boolean boolean6 = node1.isContinue();
        boolean boolean7 = node1.isSwitch();
        node1.setQuotedString();
        boolean boolean9 = node1.isDelProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node16.hasChildren();
        boolean boolean22 = node16.isNumber();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        boolean boolean29 = node24.isAssignAdd();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        node31.setSourceEncodedPosition(4095);
        boolean boolean34 = node31.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node31.getStaticSourceFile();
        com.google.javascript.rhino.Node node36 = node24.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node37 = node31.removeFirstChild();
        boolean boolean38 = node31.isAnd();
        boolean boolean39 = node31.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        boolean boolean42 = node41.isOnlyModifiesThisCall();
        boolean boolean43 = node41.isEmpty();
        boolean boolean44 = node41.isArrayLit();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isSetterDef();
        com.google.javascript.rhino.Node node49 = node41.srcref(node46);
        node31.addChildToFront(node41);
        com.google.javascript.rhino.Node node51 = node31.getLastChild();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        boolean boolean57 = node53.isBreak();
        boolean boolean58 = node53.isTypeOf();
        int int59 = node53.getCharno();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("");
        boolean boolean62 = node61.isOnlyModifiesThisCall();
        int int63 = node61.getSourceOffset();
        boolean boolean64 = node61.isExprResult();
        com.google.javascript.rhino.Node node65 = node53.srcref(node61);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        node67.setSourceEncodedPosition(4095);
        boolean boolean70 = node67.isCall();
        boolean boolean71 = node53.isEquivalentTo(node67);
        node53.setIsSyntheticBlock(true);
        node53.setSourceFileForTesting("STRING \n");
        boolean boolean76 = node53.isSwitch();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("");
        node78.setSourceEncodedPosition(4095);
        boolean boolean81 = node78.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile82 = node78.getStaticSourceFile();
        boolean boolean83 = node78.isAssignAdd();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("");
        node85.setSourceEncodedPosition(4095);
        boolean boolean88 = node85.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile89 = node85.getStaticSourceFile();
        com.google.javascript.rhino.Node node90 = node78.copyInformationFromForTree(node85);
        boolean boolean91 = node78.isNE();
        boolean boolean92 = node78.isThrow();
        boolean boolean93 = node78.wasEmptyNode();
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node(50, node16, node31, node53, node78);
        java.lang.String str98 = node78.toString(true, true, false);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4095 + "'", int59 == 4095);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(staticSourceFile82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(staticSourceFile89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "STRING  0" + "'", str98, "STRING  0");
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        boolean boolean28 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        node30.setSourceEncodedPosition(4095);
        boolean boolean33 = node30.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node30.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node23.copyInformationFromForTree(node30);
        com.google.javascript.rhino.Node node36 = node30.removeFirstChild();
        boolean boolean37 = node30.isAnd();
        boolean boolean38 = node30.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        boolean boolean41 = node40.isOnlyModifiesThisCall();
        boolean boolean42 = node40.isEmpty();
        boolean boolean43 = node40.isArrayLit();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        boolean boolean46 = node45.isOnlyModifiesThisCall();
        boolean boolean47 = node45.isSetterDef();
        com.google.javascript.rhino.Node node48 = node40.srcref(node45);
        node30.addChildToFront(node40);
        com.google.javascript.rhino.Node node50 = node30.getLastChild();
        boolean boolean51 = node30.isInstanceOf();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node53.getStaticSourceFile();
        boolean boolean58 = node53.isAssignAdd();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        boolean boolean63 = node60.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = node60.getStaticSourceFile();
        com.google.javascript.rhino.Node node65 = node53.copyInformationFromForTree(node60);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isArrayLit();
        com.google.javascript.rhino.Node node71 = node53.useSourceInfoFrom(node67);
        boolean boolean72 = node53.isVarArgs();
        int int73 = node53.getType();
        node30.addChildToBack(node53);
        int int75 = node1.getIndexOfChild(node53);
        boolean boolean76 = node1.isFalse();
        java.lang.String str77 = node1.getSourceFileName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(staticSourceFile64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 40 + "'", int73 == 40);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        boolean boolean14 = node1.isNE();
        boolean boolean15 = node1.isThrow();
        boolean boolean16 = node1.isFor();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        com.google.javascript.rhino.Node node27 = node26.getLastSibling();
        boolean boolean28 = node27.isIf();
        com.google.javascript.rhino.Node node29 = node1.clonePropsFrom(node27);
        int int30 = node29.getCharno();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(39, "Node tree inequality:\nTree1:\nSTRING  [quoted: 1]\n\n\nTree2:\nNUMBER 37.0 100\n\n\nSubtree1: STRING  [quoted: 1]\n\n\nSubtree2: NUMBER 37.0 100\n", 36, 0);
        boolean boolean36 = node35.isTry();
        node35.setType(409700);
        boolean boolean39 = node29.isEquivalentToTyped(node35);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean44 = node43.isObjectLit();
        com.google.javascript.rhino.Node node45 = node35.useSourceInfoIfMissingFromForTree(node43);
        boolean boolean46 = node35.isOptionalArg();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4095 + "'", int30 == 4095);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        node21.setSourceEncodedPosition(4095);
        boolean boolean24 = node21.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        node21.setVarArgs(false);
        boolean boolean28 = node21.isFromExterns();
        boolean boolean29 = node21.isNull();
        boolean boolean30 = node21.isFalse();
        boolean boolean31 = node15.hasChild(node21);
        boolean boolean32 = node21.isAssignAdd();
        boolean boolean33 = node21.isThis();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        boolean boolean4 = node3.isOnlyModifiesThisCall();
        boolean boolean5 = node3.isEmpty();
        com.google.javascript.rhino.Node node6 = node3.removeFirstChild();
        boolean boolean7 = node3.isIf();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.Node node13 = node3.srcrefTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node15.getStaticSourceFile();
        boolean boolean20 = node15.isAssignAdd();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        node22.setSourceEncodedPosition(4095);
        boolean boolean25 = node22.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node22.getStaticSourceFile();
        com.google.javascript.rhino.Node node27 = node15.copyInformationFromForTree(node22);
        com.google.javascript.rhino.Node node28 = node22.removeFirstChild();
        boolean boolean29 = node22.isAnd();
        node22.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node34 = node22.getAncestor(0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node34.siblings();
        node34.putIntProp(12, 43);
        com.google.javascript.rhino.Node node39 = node13.useSourceInfoFromForTree(node34);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node34.siblings();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, node34);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(32, node34, 44, 47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(nodeIterable40);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        com.google.javascript.rhino.InputId inputId14 = null;
        node13.setInputId(inputId14);
        com.google.javascript.rhino.Node node16 = node13.removeFirstChild();
        node13.detachChildren();
        java.lang.String str18 = node13.getSourceFileName();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("STRING  0");
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100, node21, 54, 35);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean29 = node28.isTypeOf();
        boolean boolean30 = node28.isInc();
        com.google.javascript.rhino.Node node31 = node28.cloneTree();
        com.google.javascript.rhino.Node node32 = node21.copyInformationFrom(node31);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        node37.setSourceEncodedPosition(4095);
        boolean boolean40 = node37.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = node37.getStaticSourceFile();
        boolean boolean42 = node37.isAssignAdd();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("");
        node44.setSourceEncodedPosition(4095);
        boolean boolean47 = node44.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = node44.getStaticSourceFile();
        com.google.javascript.rhino.Node node49 = node37.copyInformationFromForTree(node44);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isArrayLit();
        com.google.javascript.rhino.Node node55 = node37.useSourceInfoFrom(node51);
        boolean boolean56 = node55.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        boolean boolean59 = node58.isOnlyModifiesThisCall();
        boolean boolean60 = node58.isEmpty();
        boolean boolean61 = node58.isArrayLit();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        boolean boolean64 = node63.isOnlyModifiesThisCall();
        boolean boolean65 = node63.isEmpty();
        boolean boolean66 = node63.isReturn();
        boolean boolean67 = node63.isNE();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(4095, node55, node58, node63, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node71 = node34.useSourceInfoIfMissingFrom(node70);
        boolean boolean72 = node71.isNull();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("");
        boolean boolean75 = node74.isOnlyModifiesThisCall();
        boolean boolean76 = node74.isEmpty();
        boolean boolean77 = node74.isReturn();
        boolean boolean78 = node74.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType79 = node74.getJSType();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString("");
        node81.setSourceEncodedPosition(4095);
        boolean boolean84 = node81.isNot();
        boolean boolean85 = node81.isBreak();
        boolean boolean86 = node81.isTypeOf();
        boolean boolean87 = node81.isInc();
        boolean boolean88 = node81.isWhile();
        node81.setSourceEncodedPosition((-1));
        boolean boolean91 = node74.hasChild(node81);
        com.google.javascript.rhino.Node node92 = node71.copyInformationFrom(node81);
        com.google.javascript.rhino.Node node93 = node31.srcrefTree(node71);
        boolean boolean94 = node93.isFor();
        boolean boolean95 = node13.isEquivalentToTyped(node93);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(staticSourceFile41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(staticSourceFile48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getSourcePosition();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isEmpty();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        boolean boolean13 = node8.isAssignAdd();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node15.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node8.copyInformationFromForTree(node15);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        boolean boolean23 = node22.isOnlyModifiesThisCall();
        boolean boolean24 = node22.isEmpty();
        boolean boolean25 = node22.isArrayLit();
        com.google.javascript.rhino.Node node26 = node8.useSourceInfoFrom(node22);
        boolean boolean27 = node26.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isArrayLit();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("");
        boolean boolean35 = node34.isOnlyModifiesThisCall();
        boolean boolean36 = node34.isEmpty();
        boolean boolean37 = node34.isReturn();
        boolean boolean38 = node34.isNE();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(4095, node26, node29, node34, (int) (byte) 10, 32);
        boolean boolean42 = node34.isCase();
        com.google.javascript.rhino.Node node43 = node1.srcref(node34);
        boolean boolean44 = node1.isOptionalArg();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isIn();
        boolean boolean7 = node1.isLabel();
        boolean boolean8 = node1.isLabel();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable9 = node1.getAncestors();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean14 = node13.isBlock();
        boolean boolean15 = node13.wasEmptyNode();
        java.lang.String str16 = node1.checkTreeEquals(node13);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(ancestorIterable9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0\n\n\nTree2:\nNUMBER 37.0 100\n\n\nSubtree1: STRING  0\n\n\nSubtree2: NUMBER 37.0 100\n" + "'", str16, "Node tree inequality:\nTree1:\nSTRING  0\n\n\nTree2:\nNUMBER 37.0 100\n\n\nSubtree1: STRING  0\n\n\nSubtree2: NUMBER 37.0 100\n");
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node22 = node1.removeFirstChild();
        node1.setString("STRING NUMBER 8.0\n");
        boolean boolean25 = node1.isFromExterns();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(35, "STRING  4\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("");
        node4.setSourceEncodedPosition(4095);
        boolean boolean7 = node4.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node4.getStaticSourceFile();
        boolean boolean9 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("");
        node11.setSourceEncodedPosition(4095);
        boolean boolean14 = node11.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node4.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node22 = node4.useSourceInfoFrom(node18);
        java.lang.Object obj24 = node4.getProp(51);
        boolean boolean25 = node4.isLabel();
        boolean boolean26 = node2.hasChild(node4);
        boolean boolean27 = node4.hasOneChild();
        node4.setSourceEncodedPosition(52);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 10.0f, 42, 43);
        boolean boolean4 = node3.isNot();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        boolean boolean4 = node3.isOnlyModifiesThisCall();
        boolean boolean5 = node3.isEmpty();
        boolean boolean6 = node3.isReturn();
        boolean boolean7 = node3.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        boolean boolean13 = node9.isBreak();
        boolean boolean14 = node9.isIn();
        com.google.javascript.rhino.Node node15 = node3.useSourceInfoIfMissingFromForTree(node9);
        node9.setSourceEncodedPositionForTree(39);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        boolean boolean20 = node19.isOnlyModifiesThisCall();
        boolean boolean21 = node19.isEmpty();
        boolean boolean22 = node19.isReturn();
        boolean boolean23 = node19.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("");
        node25.setSourceEncodedPosition(4095);
        boolean boolean28 = node25.isNot();
        boolean boolean29 = node25.isBreak();
        boolean boolean30 = node25.isIn();
        com.google.javascript.rhino.Node node31 = node19.useSourceInfoIfMissingFromForTree(node25);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = node33.getStaticSourceFile();
        boolean boolean38 = node33.isAssignAdd();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        node40.setSourceEncodedPosition(4095);
        boolean boolean43 = node40.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = node40.getStaticSourceFile();
        com.google.javascript.rhino.Node node45 = node33.copyInformationFromForTree(node40);
        boolean boolean46 = node33.isNE();
        boolean boolean47 = node33.isThrow();
        boolean boolean48 = node33.isFor();
        com.google.javascript.rhino.Node node49 = node25.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(0.0d);
        node51.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("");
        boolean boolean56 = node55.isOnlyModifiesThisCall();
        boolean boolean57 = node55.isEmpty();
        boolean boolean58 = node55.isCatch();
        int int59 = node55.getSourceOffset();
        boolean boolean60 = node55.isHook();
        node51.addChildToBack(node55);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        boolean boolean69 = node64.isAssignAdd();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("");
        node71.setSourceEncodedPosition(4095);
        boolean boolean74 = node71.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile75 = node71.getStaticSourceFile();
        com.google.javascript.rhino.Node node76 = node64.copyInformationFromForTree(node71);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("");
        boolean boolean79 = node78.isOnlyModifiesThisCall();
        boolean boolean80 = node78.isEmpty();
        boolean boolean81 = node78.isArrayLit();
        com.google.javascript.rhino.Node node82 = node64.useSourceInfoFrom(node78);
        com.google.javascript.rhino.Node[] nodeArray83 = new com.google.javascript.rhino.Node[] { node64 };
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(32, nodeArray83);
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString("");
        boolean boolean87 = node86.isOnlyModifiesThisCall();
        boolean boolean88 = node86.isEmpty();
        boolean boolean89 = node86.isReturn();
        com.google.javascript.rhino.Node node90 = node84.useSourceInfoFromForTree(node86);
        boolean boolean91 = node86.isAdd();
        node86.putBooleanProp(38, false);
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node((int) (short) 10, node9, node49, node51, node86);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node96 = new com.google.javascript.rhino.Node((-1), node86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(staticSourceFile37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(staticSourceFile44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(staticSourceFile75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(nodeArray83);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        java.lang.String str8 = node1.toString(true, true, false);
        boolean boolean9 = node1.isWith();
        node1.putIntProp((int) (byte) 10, 0);
        boolean boolean13 = node1.isAdd();
        boolean boolean14 = node1.isAssignAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node41 = node20.clonePropsFrom(node39);
        boolean boolean42 = node41.isCase();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        boolean boolean41 = node33.isNE();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        boolean boolean44 = node43.isOnlyModifiesThisCall();
        boolean boolean45 = node43.isEmpty();
        boolean boolean46 = node43.isReturn();
        boolean boolean47 = node43.isRegExp();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(52, node33, node43);
        boolean boolean49 = node33.isContinue();
        boolean boolean50 = node33.hasChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isTypeOf();
        boolean boolean5 = node3.isInc();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray10, 12, 100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(53, nodeArray10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 0, nodeArray10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(43, nodeArray10);
        boolean boolean17 = node16.isFor();
        boolean boolean18 = node3.isEquivalentTo(node16);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isInstanceOf();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        node2.putProp((int) '4', (java.lang.Object) node8);
        boolean boolean12 = node8.isDebugger();
        boolean boolean13 = node8.isVar();
        node8.setString("STRING ");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        boolean boolean23 = node22.isOnlyModifiesThisCall();
        boolean boolean24 = node22.isSetterDef();
        com.google.javascript.rhino.Node node25 = node17.srcref(node22);
        com.google.javascript.rhino.Node node26 = node25.getLastSibling();
        boolean boolean27 = node26.isIf();
        node26.setLength(4);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        node46.setSourceEncodedPosition(4095);
        boolean boolean49 = node46.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node46.getStaticSourceFile();
        node46.setVarArgs(false);
        boolean boolean53 = node46.isFromExterns();
        boolean boolean54 = node46.isNull();
        boolean boolean55 = node46.isFalse();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node70 = node64.removeFirstChild();
        com.google.javascript.rhino.Node node71 = node46.useSourceInfoIfMissingFrom(node64);
        com.google.javascript.rhino.Node node72 = node44.useSourceInfoFromForTree(node71);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(45, node72);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(44, node8, node26, node73);
        java.lang.String str75 = node74.toStringTree();
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = node74.getJSDocInfo();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "TRUE\n    STRING STRING \n    STRING  [length: 4]\n    SHEQ\n        STRING  0\n" + "'", str75, "TRUE\n    STRING STRING \n    STRING  [length: 4]\n    SHEQ\n        STRING  0\n");
        org.junit.Assert.assertNull(jSDocInfo76);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 39, 24, 31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = node3.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 39.0 24 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node15.getStaticSourceFile();
        boolean boolean20 = node15.isAssignAdd();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        node22.setSourceEncodedPosition(4095);
        boolean boolean25 = node22.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node22.getStaticSourceFile();
        com.google.javascript.rhino.Node node27 = node15.copyInformationFromForTree(node22);
        boolean boolean28 = node15.isNE();
        boolean boolean29 = node15.isThrow();
        boolean boolean30 = node15.isFor();
        com.google.javascript.rhino.Node node31 = node7.useSourceInfoFrom(node15);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node65.isNE();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("");
        boolean boolean76 = node75.isOnlyModifiesThisCall();
        boolean boolean77 = node75.isEmpty();
        boolean boolean78 = node75.isReturn();
        boolean boolean79 = node75.isRegExp();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(52, node65, node75);
        com.google.javascript.rhino.Node node81 = node31.useSourceInfoIfMissingFrom(node65);
        java.util.Set<java.lang.String> strSet82 = node81.getDirectives();
        int int83 = node81.getCharno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(strSet82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 4095 + "'", int83 == 4095);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isObjectLit();
        boolean boolean5 = node3.isReturn();
        boolean boolean6 = node3.isSetterDef();
        com.google.javascript.rhino.jstype.JSType jSType7 = node3.getJSType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSType7);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray5, 12, 100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(53, nodeArray5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 0, nodeArray5);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(43, nodeArray5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray5);
        java.lang.Class<?> wildcardClass13 = nodeArray5.getClass();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isBlock();
        boolean boolean5 = node3.isNE();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        com.google.javascript.rhino.Node node11 = node7.getLastSibling();
        node7.setVarArgs(true);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node7.setJSType(jSType14);
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node7);
        boolean boolean17 = node3.isHook();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        boolean boolean20 = node19.isOnlyModifiesThisCall();
        boolean boolean21 = node19.isEmpty();
        node19.removeProp(12);
        boolean boolean24 = node3.isEquivalentToTyped(node19);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.isNE();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        boolean boolean54 = node53.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        boolean boolean58 = node56.isEmpty();
        boolean boolean59 = node56.isArrayLit();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("");
        boolean boolean62 = node61.isOnlyModifiesThisCall();
        boolean boolean63 = node61.isEmpty();
        boolean boolean64 = node61.isReturn();
        boolean boolean65 = node61.isNE();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(4095, node53, node56, node61, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node69 = node32.useSourceInfoIfMissingFrom(node68);
        node26.addChildrenToBack(node32);
        com.google.javascript.rhino.Node node71 = node19.useSourceInfoIfMissingFrom(node32);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node71);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node41 = node20.clonePropsFrom(node39);
        boolean boolean42 = node39.isVar();
        com.google.javascript.rhino.Node node43 = node39.getLastSibling();
        int int44 = node43.getChildCount();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        boolean boolean11 = node1.isFromExterns();
        boolean boolean12 = node1.isNot();
        boolean boolean13 = node1.isAnd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (short) 0, 32, 40);
        boolean boolean4 = node3.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node5 = node3.getFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(29, (int) '#', (int) (byte) 0);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        boolean boolean10 = node6.isBreak();
        boolean boolean11 = node6.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isInc();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        boolean boolean40 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node35.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        boolean boolean50 = node49.isOnlyModifiesThisCall();
        boolean boolean51 = node49.isEmpty();
        boolean boolean52 = node49.isArrayLit();
        com.google.javascript.rhino.Node node53 = node35.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node35 };
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, nodeArray54);
        int int57 = node55.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        boolean boolean60 = node59.isOnlyModifiesThisCall();
        boolean boolean61 = node59.isEmpty();
        boolean boolean62 = node59.isReturn();
        boolean boolean63 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        node65.setSourceEncodedPosition(4095);
        boolean boolean68 = node65.isNot();
        boolean boolean69 = node65.isBreak();
        boolean boolean70 = node65.isIn();
        com.google.javascript.rhino.Node node71 = node59.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node72 = node55.useSourceInfoFrom(node65);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(29, node4, node6, node13, node72);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("", 12, (int) (short) -1);
        com.google.javascript.rhino.Node node79 = node72.copyInformationFromForTree(node78);
        boolean boolean80 = node79.isNull();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isSetterDef();
        com.google.javascript.rhino.Node node5 = node1.getAncestor((int) (short) 0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder6 = node5.new FileLevelJsDocBuilder();
        boolean boolean7 = node5.isTrue();
        node5.setLineno(409700);
        boolean boolean10 = node5.isTrue();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        boolean boolean17 = node12.isAssignAdd();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        node19.setSourceEncodedPosition(4095);
        boolean boolean22 = node19.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node19.getStaticSourceFile();
        com.google.javascript.rhino.Node node24 = node12.copyInformationFromForTree(node19);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isArrayLit();
        com.google.javascript.rhino.Node node30 = node12.useSourceInfoFrom(node26);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder31 = node12.new FileLevelJsDocBuilder();
        boolean boolean32 = node12.isDefaultCase();
        boolean boolean33 = node12.isFalse();
        boolean boolean34 = node12.hasOneChild();
        boolean boolean35 = node12.wasEmptyNode();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node36 = node5.removeChildAfter(node12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] { node3 };
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray22);
        int int25 = node23.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isReturn();
        boolean boolean31 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("");
        node33.setSourceEncodedPosition(4095);
        boolean boolean36 = node33.isNot();
        boolean boolean37 = node33.isBreak();
        boolean boolean38 = node33.isIn();
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = node23.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        java.util.Set<java.lang.String> strSet48 = node42.getDirectives();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        node50.setVarArgs(false);
        boolean boolean57 = node50.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(37, node23, node42, node50, node63);
        int int65 = node23.getSideEffectFlags();
        boolean boolean66 = node23.isFromExterns();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("");
        boolean boolean69 = node68.isOnlyModifiesThisCall();
        boolean boolean70 = node68.isEmpty();
        com.google.javascript.rhino.Node node71 = node68.removeFirstChild();
        com.google.javascript.rhino.Node node72 = node23.useSourceInfoFrom(node68);
        boolean boolean73 = node68.isScript();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node19.isName();
        boolean boolean21 = node19.isGetProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 8);
        int int4 = node2.getIntProp(15);
        node2.detachChildren();
        java.lang.String str6 = node2.toStringTree();
        boolean boolean7 = node2.isDelProp();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(46, node2, 12, (int) (short) -1);
        boolean boolean11 = node2.isInstanceOf();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "NUMBER 8.0\n" + "'", str6, "NUMBER 8.0\n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node3 = node2.getLastSibling();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        node5.setSourceEncodedPosition(4095);
        boolean boolean8 = node5.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node5.getStaticSourceFile();
        boolean boolean10 = node5.isAssignAdd();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        com.google.javascript.rhino.Node node17 = node5.copyInformationFromForTree(node12);
        com.google.javascript.rhino.Node node18 = node12.removeFirstChild();
        boolean boolean19 = node12.isAnd();
        node12.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node24 = node12.getAncestor(0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable25 = node24.siblings();
        node24.putIntProp(12, 43);
        int int29 = node24.getLineno();
        com.google.javascript.rhino.Node node30 = null;
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int35 = node34.getLength();
        boolean boolean36 = node34.isStringKey();
        com.google.javascript.rhino.Node node37 = node34.removeFirstChild();
        boolean boolean38 = node34.isGetterDef();
        boolean boolean39 = node34.isObjectLit();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(46, node3, node24, node30, node34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(nodeIterable25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        boolean boolean46 = node43.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        boolean boolean48 = node43.isAssignAdd();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        com.google.javascript.rhino.Node node55 = node43.copyInformationFromForTree(node50);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        boolean boolean58 = node57.isOnlyModifiesThisCall();
        boolean boolean59 = node57.isEmpty();
        boolean boolean60 = node57.isArrayLit();
        com.google.javascript.rhino.Node node61 = node43.useSourceInfoFrom(node57);
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] { node43 };
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(32, nodeArray62);
        int int65 = node63.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isReturn();
        boolean boolean71 = node67.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("");
        node73.setSourceEncodedPosition(4095);
        boolean boolean76 = node73.isNot();
        boolean boolean77 = node73.isBreak();
        boolean boolean78 = node73.isIn();
        com.google.javascript.rhino.Node node79 = node67.useSourceInfoIfMissingFromForTree(node73);
        com.google.javascript.rhino.Node node80 = node63.useSourceInfoFrom(node73);
        boolean boolean81 = node73.isNE();
        java.lang.String str82 = node39.checkTreeEquals(node73);
        boolean boolean83 = node39.isComma();
        com.google.javascript.rhino.Node node84 = node39.getLastChild();
        node84.addSuppression("STRING  [quoted: 1]");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n" + "'", str82, "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isCatch();
        java.lang.String str5 = node1.getSourceFileName();
        boolean boolean6 = node1.isNoSideEffectsCall();
        boolean boolean7 = node1.isParamList();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isSetterDef();
        boolean boolean4 = node1.isBlock();
        boolean boolean5 = node1.isInstanceOf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        boolean boolean28 = node18.isCatch();
        int int29 = node18.getLength();
        boolean boolean30 = node18.isScript();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        node5.setSourceEncodedPosition(4095);
        boolean boolean8 = node5.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node5.getStaticSourceFile();
        boolean boolean10 = node5.isAssignAdd();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("");
        node12.setSourceEncodedPosition(4095);
        boolean boolean15 = node12.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        com.google.javascript.rhino.Node node17 = node5.copyInformationFromForTree(node12);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        boolean boolean20 = node19.isOnlyModifiesThisCall();
        boolean boolean21 = node19.isEmpty();
        boolean boolean22 = node19.isArrayLit();
        com.google.javascript.rhino.Node node23 = node5.useSourceInfoFrom(node19);
        boolean boolean24 = node23.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isArrayLit();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isReturn();
        boolean boolean35 = node31.isNE();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(4095, node23, node26, node31, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoIfMissingFrom(node38);
        boolean boolean40 = node39.isNull();
        boolean boolean41 = node39.isFromExterns();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        boolean boolean46 = node43.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        boolean boolean48 = node43.isAssignAdd();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        node50.setSourceEncodedPosition(4095);
        boolean boolean53 = node50.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node50.getStaticSourceFile();
        com.google.javascript.rhino.Node node55 = node43.copyInformationFromForTree(node50);
        com.google.javascript.rhino.Node node56 = node50.removeFirstChild();
        boolean boolean57 = node50.isAnd();
        boolean boolean58 = node50.isThis();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(0, node39, node50);
        boolean boolean60 = node39.isInc();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node39.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(24);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        boolean boolean6 = node1.isContinue();
        boolean boolean7 = node1.isSwitch();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        boolean boolean11 = node9.isEmpty();
        boolean boolean12 = node9.isReturn();
        boolean boolean13 = node9.isRegExp();
        java.lang.String str14 = node9.toStringTree();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable15 = node9.getAncestors();
        com.google.javascript.rhino.Node node16 = node1.copyInformationFromForTree(node9);
        boolean boolean17 = node9.isWith();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "STRING \n" + "'", str14, "STRING \n");
        org.junit.Assert.assertNotNull(ancestorIterable15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        com.google.javascript.rhino.Node node4 = node1.removeFirstChild();
        boolean boolean5 = node1.isCall();
        boolean boolean6 = node1.isObjectLit();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isVarArgs();
        int int21 = node1.getType();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        node23.setSourceEncodedPosition(4095);
        boolean boolean26 = node23.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        boolean boolean28 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("");
        node30.setSourceEncodedPosition(4095);
        boolean boolean33 = node30.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node30.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node23.copyInformationFromForTree(node30);
        com.google.javascript.rhino.Node node36 = node30.removeFirstChild();
        boolean boolean37 = node30.isAnd();
        boolean boolean38 = node30.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        boolean boolean41 = node40.isOnlyModifiesThisCall();
        boolean boolean42 = node40.isEmpty();
        boolean boolean43 = node40.isArrayLit();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        boolean boolean46 = node45.isOnlyModifiesThisCall();
        boolean boolean47 = node45.isSetterDef();
        com.google.javascript.rhino.Node node48 = node40.srcref(node45);
        node30.addChildToFront(node40);
        com.google.javascript.rhino.Node node50 = node30.getLastChild();
        boolean boolean51 = node30.isInstanceOf();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        node53.setSourceEncodedPosition(4095);
        boolean boolean56 = node53.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node53.getStaticSourceFile();
        boolean boolean58 = node53.isAssignAdd();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        boolean boolean63 = node60.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = node60.getStaticSourceFile();
        com.google.javascript.rhino.Node node65 = node53.copyInformationFromForTree(node60);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        boolean boolean68 = node67.isOnlyModifiesThisCall();
        boolean boolean69 = node67.isEmpty();
        boolean boolean70 = node67.isArrayLit();
        com.google.javascript.rhino.Node node71 = node53.useSourceInfoFrom(node67);
        boolean boolean72 = node53.isVarArgs();
        int int73 = node53.getType();
        node30.addChildToBack(node53);
        int int75 = node1.getIndexOfChild(node53);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        int int80 = node79.getLength();
        boolean boolean81 = node79.isStringKey();
        com.google.javascript.rhino.Node node82 = node79.removeFirstChild();
        boolean boolean83 = node79.isGetterDef();
        com.google.javascript.rhino.Node node84 = node1.clonePropsFrom(node79);
        boolean boolean85 = node79.isName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable86 = node79.siblings();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(staticSourceFile64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 40 + "'", int73 == 40);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(nodeIterable86);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        boolean boolean40 = node39.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node41 = node20.clonePropsFrom(node39);
        node39.setQuotedString();
        java.lang.String[] strArray45 = new java.lang.String[] { "STRING ", "Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nTYPEOF 0\n    STRING \n\n\nSubtree1: STRING \n\n\nSubtree2: TYPEOF 0\n    STRING \n" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet46);
        boolean boolean49 = node39.isCase();
        boolean boolean50 = node39.isGetElem();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("");
        node52.setSourceEncodedPosition(4095);
        boolean boolean55 = node52.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = node52.getStaticSourceFile();
        boolean boolean57 = node52.isAssignAdd();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("");
        node59.setSourceEncodedPosition(4095);
        boolean boolean62 = node59.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = node59.getStaticSourceFile();
        com.google.javascript.rhino.Node node64 = node52.copyInformationFromForTree(node59);
        com.google.javascript.rhino.Node node65 = node59.removeFirstChild();
        boolean boolean66 = node59.isAnd();
        boolean boolean67 = node59.isDec();
        int int68 = node59.getType();
        java.lang.String str69 = node59.toString();
        int int70 = node39.getIndexOfChild(node59);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(staticSourceFile56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(staticSourceFile63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 40 + "'", int68 == 40);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "STRING  0" + "'", str69, "STRING  0");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isCall();
        boolean boolean19 = node1.isEquivalentTo(node15);
        node1.setIsSyntheticBlock(true);
        node1.setVarArgs(false);
        node1.setCharno(0);
        boolean boolean26 = node1.isSetterDef();
        boolean boolean27 = node1.isFunction();
        boolean boolean28 = node1.isThis();
        boolean boolean29 = node1.isAnd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(49, 31, (int) (byte) 10);
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray9, 12, 100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(53, nodeArray9);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(41, nodeArray9, (int) (byte) -1, 31);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("");
        boolean boolean20 = node19.isOnlyModifiesThisCall();
        boolean boolean21 = node19.isEmpty();
        boolean boolean22 = node19.isReturn();
        boolean boolean23 = node19.isRegExp();
        java.lang.String str24 = node19.toStringTree();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean29 = node28.isTypeOf();
        boolean boolean30 = node28.isInc();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isTypeOf();
        int int38 = node32.getCharno();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        boolean boolean41 = node40.isOnlyModifiesThisCall();
        int int42 = node40.getSourceOffset();
        boolean boolean43 = node40.isExprResult();
        com.google.javascript.rhino.Node node44 = node32.srcref(node40);
        boolean boolean45 = node32.isAssign();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(2, node19, node28, node32, (int) (short) 1, 42);
        com.google.javascript.rhino.Node node50 = node48.getAncestor((int) (byte) 0);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(50, node16, node48, (int) (short) -1, 47);
        node3.putProp(409700, (java.lang.Object) node16);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "STRING \n" + "'", str24, "STRING \n");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4095 + "'", int38 == 4095);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        boolean boolean7 = node1.isStringKey();
        int int8 = node1.getChildCount();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        boolean boolean11 = node10.isOnlyModifiesThisCall();
        boolean boolean12 = node10.isEmpty();
        boolean boolean13 = node10.isReturn();
        boolean boolean14 = node10.isEmpty();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        boolean boolean22 = node17.isAssignAdd();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        com.google.javascript.rhino.Node node29 = node17.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node35 = node17.useSourceInfoFrom(node31);
        boolean boolean36 = node35.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        boolean boolean39 = node38.isOnlyModifiesThisCall();
        boolean boolean40 = node38.isEmpty();
        boolean boolean41 = node38.isArrayLit();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        boolean boolean44 = node43.isOnlyModifiesThisCall();
        boolean boolean45 = node43.isEmpty();
        boolean boolean46 = node43.isReturn();
        boolean boolean47 = node43.isNE();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(4095, node35, node38, node43, (int) (byte) 10, 32);
        boolean boolean51 = node43.isCase();
        com.google.javascript.rhino.Node node52 = node10.srcref(node43);
        java.lang.String str53 = node1.checkTreeEquals(node52);
        // The following exception was thrown during execution in test generation
        try {
            node1.setSideEffectFlags((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isObjectLit();
        boolean boolean5 = node3.isName();
        java.lang.Appendable appendable6 = null;
        // The following exception was thrown during execution in test generation
        try {
            node3.appendStringTree(appendable6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        node3.setSourceEncodedPosition(4095);
        boolean boolean6 = node3.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node3.copyInformationFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        boolean boolean18 = node17.isOnlyModifiesThisCall();
        boolean boolean19 = node17.isEmpty();
        boolean boolean20 = node17.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFrom(node17);
        boolean boolean22 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("");
        boolean boolean30 = node29.isOnlyModifiesThisCall();
        boolean boolean31 = node29.isEmpty();
        boolean boolean32 = node29.isReturn();
        boolean boolean33 = node29.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node21, node24, node29, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("");
        node38.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, node36, node38, node45);
        java.lang.String str47 = node38.toString();
        node38.setSourceEncodedPositionForTree(31);
        boolean boolean50 = node38.isAssignAdd();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable51 = node38.siblings();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "STRING  0" + "'", str47, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeIterable51);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isNE();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        node10.setSourceEncodedPosition(4095);
        boolean boolean13 = node10.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node10.getStaticSourceFile();
        boolean boolean15 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        node17.setSourceEncodedPosition(4095);
        boolean boolean20 = node17.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node22 = node10.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isArrayLit();
        com.google.javascript.rhino.Node node28 = node10.useSourceInfoFrom(node24);
        boolean boolean29 = node28.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        boolean boolean32 = node31.isOnlyModifiesThisCall();
        boolean boolean33 = node31.isEmpty();
        boolean boolean34 = node31.isArrayLit();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("");
        boolean boolean37 = node36.isOnlyModifiesThisCall();
        boolean boolean38 = node36.isEmpty();
        boolean boolean39 = node36.isReturn();
        boolean boolean40 = node36.isNE();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(4095, node28, node31, node36, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node44 = node7.useSourceInfoIfMissingFrom(node43);
        node1.addChildrenToBack(node7);
        com.google.javascript.rhino.Node node46 = node1.removeChildren();
        boolean boolean47 = node1.isNoSideEffectsCall();
        boolean boolean48 = node1.isBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        node24.removeProp(53);
        java.util.Set<java.lang.String> strSet31 = node24.getDirectives();
        boolean boolean32 = node24.isQualifiedName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node24.new FileLevelJsDocBuilder();
        node24.setLength((-1));
        boolean boolean36 = node24.isDefaultCase();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        boolean boolean7 = node1.isInc();
        java.util.Set<java.lang.String> strSet8 = node1.getDirectives();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNew();
        boolean boolean5 = node1.isDelProp();
        java.lang.String str6 = node1.toStringTree();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isInstanceOf();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        boolean boolean15 = node14.isOnlyModifiesThisCall();
        boolean boolean16 = node14.isEmpty();
        node8.putProp((int) '4', (java.lang.Object) node14);
        boolean boolean18 = node8.isFromExterns();
        boolean boolean19 = node1.hasChild(node8);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "STRING  0\n" + "'", str6, "STRING  0\n");
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType6 = node1.getJSType();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        boolean boolean12 = node8.isBreak();
        boolean boolean13 = node8.isTypeOf();
        boolean boolean14 = node8.isInc();
        boolean boolean15 = node8.isWhile();
        node8.setSourceEncodedPosition((-1));
        boolean boolean18 = node1.hasChild(node8);
        boolean boolean19 = node1.isAssign();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable20 = node1.getAncestors();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(ancestorIterable20);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node56 = node32.getLastSibling();
        boolean boolean57 = node56.isName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = node56.getJSDocInfo();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(jSDocInfo58);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 4, 32);
        java.lang.String str4 = node3.toStringTree();
        int int5 = node3.getSourceOffset();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "STRING  4\n" + "'", str4, "STRING  4\n");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isTypeOf();
        boolean boolean5 = node3.isInc();
        com.google.javascript.rhino.Node node6 = node3.cloneTree();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder7 = node6.new FileLevelJsDocBuilder();
        int int8 = node6.getSourceOffset();
        boolean boolean9 = node6.isIf();
        boolean boolean10 = node6.isName();
        boolean boolean11 = node6.isReturn();
        boolean boolean12 = node6.isVarArgs();
        boolean boolean13 = node6.isSwitch();
        com.google.javascript.rhino.Node node14 = node6.removeChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING  0");
        boolean boolean2 = node1.isDefaultCase();
        boolean boolean3 = node1.isDec();
        com.google.javascript.rhino.Node node4 = node1.cloneTree();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node6.getStaticSourceFile();
        boolean boolean11 = node6.isAssignAdd();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        com.google.javascript.rhino.Node node18 = node6.copyInformationFromForTree(node13);
        com.google.javascript.rhino.Node node19 = node13.removeFirstChild();
        boolean boolean20 = node13.isAnd();
        boolean boolean21 = node13.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isSetterDef();
        com.google.javascript.rhino.Node node31 = node23.srcref(node28);
        node13.addChildToFront(node23);
        boolean boolean33 = node13.isGetElem();
        boolean boolean34 = node13.isSwitch();
        boolean boolean35 = node13.isNew();
        java.lang.String str36 = node1.checkTreeEquals(node13);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Node tree inequality:\nTree1:\nSTRING STRING  0\n\n\nTree2:\nSTRING  0\n    STRING \n\n\nSubtree1: STRING STRING  0\n\n\nSubtree2: STRING  0\n    STRING \n" + "'", str36, "Node tree inequality:\nTree1:\nSTRING STRING  0\n\n\nTree2:\nSTRING  0\n    STRING \n\n\nSubtree1: STRING STRING  0\n\n\nSubtree2: STRING  0\n    STRING \n");
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        boolean boolean11 = node7.isDebugger();
        boolean boolean12 = node7.isName();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("STRING  0");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100, node16, 54, 35);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean24 = node23.isTypeOf();
        boolean boolean25 = node23.isInc();
        com.google.javascript.rhino.Node node26 = node23.cloneTree();
        com.google.javascript.rhino.Node node27 = node16.copyInformationFrom(node26);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(0);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("");
        node39.setSourceEncodedPosition(4095);
        boolean boolean42 = node39.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.Node node44 = node32.copyInformationFromForTree(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        boolean boolean47 = node46.isOnlyModifiesThisCall();
        boolean boolean48 = node46.isEmpty();
        boolean boolean49 = node46.isArrayLit();
        com.google.javascript.rhino.Node node50 = node32.useSourceInfoFrom(node46);
        boolean boolean51 = node50.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("");
        boolean boolean54 = node53.isOnlyModifiesThisCall();
        boolean boolean55 = node53.isEmpty();
        boolean boolean56 = node53.isArrayLit();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        boolean boolean59 = node58.isOnlyModifiesThisCall();
        boolean boolean60 = node58.isEmpty();
        boolean boolean61 = node58.isReturn();
        boolean boolean62 = node58.isNE();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(4095, node50, node53, node58, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node66 = node29.useSourceInfoIfMissingFrom(node65);
        boolean boolean67 = node66.isNull();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("");
        boolean boolean70 = node69.isOnlyModifiesThisCall();
        boolean boolean71 = node69.isEmpty();
        boolean boolean72 = node69.isReturn();
        boolean boolean73 = node69.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSType jSType74 = node69.getJSType();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("");
        node76.setSourceEncodedPosition(4095);
        boolean boolean79 = node76.isNot();
        boolean boolean80 = node76.isBreak();
        boolean boolean81 = node76.isTypeOf();
        boolean boolean82 = node76.isInc();
        boolean boolean83 = node76.isWhile();
        node76.setSourceEncodedPosition((-1));
        boolean boolean86 = node69.hasChild(node76);
        com.google.javascript.rhino.Node node87 = node66.copyInformationFrom(node76);
        com.google.javascript.rhino.Node node88 = node26.srcrefTree(node66);
        node7.putProp(49, (java.lang.Object) node66);
        boolean boolean90 = node7.isFunction();
        boolean boolean91 = node7.isWith();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(jSType74);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isCall();
        boolean boolean19 = node1.isEquivalentTo(node15);
        node1.setIsSyntheticBlock(true);
        node1.setSourceFileForTesting("STRING \n");
        boolean boolean24 = node1.isVarArgs();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = null;
        node1.setJSDocInfo(jSDocInfo25);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        node28.setSourceEncodedPosition(4095);
        boolean boolean31 = node28.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = node28.getStaticSourceFile();
        boolean boolean33 = node28.isAssignAdd();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        node35.setSourceEncodedPosition(4095);
        boolean boolean38 = node35.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node35.getStaticSourceFile();
        com.google.javascript.rhino.Node node40 = node28.copyInformationFromForTree(node35);
        boolean boolean41 = node28.isNE();
        boolean boolean42 = node28.isThrow();
        boolean boolean43 = node28.isFor();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("");
        boolean boolean46 = node45.isOnlyModifiesThisCall();
        boolean boolean47 = node45.isEmpty();
        boolean boolean48 = node45.isArrayLit();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        boolean boolean51 = node50.isOnlyModifiesThisCall();
        boolean boolean52 = node50.isSetterDef();
        com.google.javascript.rhino.Node node53 = node45.srcref(node50);
        com.google.javascript.rhino.Node node54 = node53.getLastSibling();
        boolean boolean55 = node54.isIf();
        com.google.javascript.rhino.Node node56 = node28.clonePropsFrom(node54);
        node56.addSuppression("NUMBER 8.0\n");
        int int59 = node56.getSourcePosition();
        java.lang.String str60 = node56.getSourceFileName();
        boolean boolean61 = node1.isEquivalentTo(node56);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(staticSourceFile32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4095 + "'", int59 == 4095);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setAllFlags();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 49, 39, (int) '#');
        com.google.javascript.rhino.Node node4 = node3.getLastSibling();
        boolean boolean6 = node3.getBooleanProp((int) (byte) 10);
        boolean boolean7 = node3.isVoid();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setAllFlags();
        boolean boolean2 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setThrows();
        boolean boolean5 = sideEffectFlags0.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        node1.putBooleanProp((int) (byte) 10, false);
        boolean boolean11 = node1.isBreak();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        boolean boolean32 = node13.isVarArgs();
        int int33 = node13.getType();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        node37.setSourceEncodedPosition(4095);
        boolean boolean40 = node37.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = node37.getStaticSourceFile();
        boolean boolean42 = node37.isAssignAdd();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("");
        node44.setSourceEncodedPosition(4095);
        boolean boolean47 = node44.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = node44.getStaticSourceFile();
        com.google.javascript.rhino.Node node49 = node37.copyInformationFromForTree(node44);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        boolean boolean52 = node51.isOnlyModifiesThisCall();
        boolean boolean53 = node51.isEmpty();
        boolean boolean54 = node51.isArrayLit();
        com.google.javascript.rhino.Node node55 = node37.useSourceInfoFrom(node51);
        boolean boolean56 = node55.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("");
        boolean boolean59 = node58.isOnlyModifiesThisCall();
        boolean boolean60 = node58.isEmpty();
        boolean boolean61 = node58.isArrayLit();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        boolean boolean64 = node63.isOnlyModifiesThisCall();
        boolean boolean65 = node63.isEmpty();
        boolean boolean66 = node63.isReturn();
        boolean boolean67 = node63.isNE();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(4095, node55, node58, node63, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("");
        node72.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString(0, "STRING  0", 53, 100);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(36, node70, node72, node79);
        boolean boolean81 = node79.isTypeOf();
        boolean boolean82 = node79.isGetterDef();
        boolean boolean83 = node79.isFor();
        boolean boolean84 = node13.isEquivalentToTyped(node79);
        boolean boolean85 = node79.isWhile();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder86 = node79.getJsDocBuilderForNode();
        boolean boolean87 = node79.isFalse();
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildAfter(node79, node89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 40 + "'", int33 == 40);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(staticSourceFile41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(staticSourceFile48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isCall();
        boolean boolean5 = node1.isAssign();
        boolean boolean6 = node1.hasOneChild();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        boolean boolean11 = node8.isReturn();
        boolean boolean12 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        boolean boolean18 = node14.isBreak();
        boolean boolean19 = node14.isIn();
        com.google.javascript.rhino.Node node20 = node8.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node20.cloneNode();
        com.google.javascript.rhino.Node node22 = node1.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        boolean boolean29 = node24.isAssignAdd();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        node31.setSourceEncodedPosition(4095);
        boolean boolean34 = node31.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node31.getStaticSourceFile();
        com.google.javascript.rhino.Node node36 = node24.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node37 = node31.removeFirstChild();
        boolean boolean38 = node31.isAnd();
        node31.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node43 = node31.getAncestor(0);
        com.google.javascript.rhino.Node node44 = node22.useSourceInfoIfMissingFromForTree(node31);
        int int45 = node44.getCharno();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node44.children();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4095 + "'", int45 == 4095);
        org.junit.Assert.assertNotNull(nodeIterable46);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        boolean boolean19 = node15.isVarArgs();
        node15.setSourceFileForTesting("Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nTYPEOF 0\n    STRING \n\n\nSubtree1: STRING \n\n\nSubtree2: TYPEOF 0\n    STRING \n");
        com.google.javascript.rhino.Node node22 = node8.copyInformationFromForTree(node15);
        boolean boolean23 = node15.isParamList();
        boolean boolean24 = node15.isOr();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean4 = node3.isTypeOf();
        boolean boolean5 = node3.isInc();
        com.google.javascript.rhino.Node node6 = node3.cloneTree();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder7 = node6.new FileLevelJsDocBuilder();
        int int8 = node6.getSourceOffset();
        node6.setDouble((double) 16);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        boolean boolean25 = node24.isOnlyModifiesThisCall();
        boolean boolean26 = node24.isEmpty();
        boolean boolean27 = node24.isReturn();
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoFromForTree(node24);
        node28.setLineno((int) (short) 100);
        boolean boolean31 = node28.isVar();
        boolean boolean32 = node28.isParamList();
        boolean boolean33 = node28.isWhile();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 37, (int) (short) 100, 100);
        boolean boolean38 = node37.isBlock();
        boolean boolean39 = node37.isNE();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.Node node45 = node41.getLastSibling();
        node41.setVarArgs(true);
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        node41.setJSType(jSType48);
        com.google.javascript.rhino.Node node50 = node37.copyInformationFrom(node41);
        boolean boolean51 = node37.isHook();
        boolean boolean52 = node37.isParamList();
        boolean boolean53 = node37.isAnd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder54 = node37.getJsDocBuilderForNode();
        node28.addChildToFront(node37);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder54);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        boolean boolean21 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isEmpty();
        boolean boolean26 = node23.isArrayLit();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        boolean boolean29 = node28.isOnlyModifiesThisCall();
        boolean boolean30 = node28.isEmpty();
        boolean boolean31 = node28.isReturn();
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node20, node23, node28, (int) (byte) 10, 32);
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("");
        node40.setSourceEncodedPosition(4095);
        boolean boolean43 = node40.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = node40.getStaticSourceFile();
        boolean boolean45 = node40.isAssignAdd();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        node47.setSourceEncodedPosition(4095);
        boolean boolean50 = node47.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = node47.getStaticSourceFile();
        com.google.javascript.rhino.Node node52 = node40.copyInformationFromForTree(node47);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("");
        boolean boolean55 = node54.isOnlyModifiesThisCall();
        boolean boolean56 = node54.isEmpty();
        boolean boolean57 = node54.isArrayLit();
        com.google.javascript.rhino.Node node58 = node40.useSourceInfoFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] { node40 };
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(32, nodeArray59);
        node20.addChildrenToFront(node60);
        com.google.javascript.rhino.Node node62 = node20.detachFromParent();
        int int63 = node20.getChildCount();
        com.google.javascript.rhino.Node node64 = node20.removeFirstChild();
        com.google.javascript.rhino.jstype.JSType jSType65 = node64.getJSType();
        boolean boolean66 = node64.isCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(staticSourceFile44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(staticSourceFile51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(jSType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        boolean boolean15 = node8.isAnd();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("");
        boolean boolean19 = node18.isOnlyModifiesThisCall();
        boolean boolean20 = node18.isEmpty();
        boolean boolean21 = node18.isArrayLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        boolean boolean24 = node23.isOnlyModifiesThisCall();
        boolean boolean25 = node23.isSetterDef();
        com.google.javascript.rhino.Node node26 = node18.srcref(node23);
        node8.addChildToFront(node18);
        boolean boolean28 = node8.isGetElem();
        boolean boolean29 = node8.isReturn();
        boolean boolean30 = node8.isCatch();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder31 = node8.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        boolean boolean8 = node1.isUnscopedQualifiedName();
        boolean boolean9 = node1.isAdd();
        boolean boolean10 = node1.isIf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        boolean boolean3 = node1.isEmpty();
        boolean boolean4 = node1.isReturn();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        node7.setSourceEncodedPosition(4095);
        boolean boolean10 = node7.isNot();
        boolean boolean11 = node7.isBreak();
        boolean boolean12 = node7.isIn();
        com.google.javascript.rhino.Node node13 = node1.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node14 = node13.cloneNode();
        boolean boolean15 = node14.isDelProp();
        boolean boolean16 = node14.isGetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING  0");
        boolean boolean2 = node1.isDefaultCase();
        boolean boolean3 = node1.isDec();
        com.google.javascript.rhino.Node node4 = node1.cloneTree();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("");
        node6.setSourceEncodedPosition(4095);
        boolean boolean9 = node6.isNot();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        node13.setSourceEncodedPosition(4095);
        boolean boolean16 = node13.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("");
        node20.setSourceEncodedPosition(4095);
        boolean boolean23 = node20.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = node13.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        boolean boolean28 = node27.isOnlyModifiesThisCall();
        boolean boolean29 = node27.isEmpty();
        boolean boolean30 = node27.isArrayLit();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node27);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] { node13 };
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(32, nodeArray32);
        int int35 = node33.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        boolean boolean38 = node37.isOnlyModifiesThisCall();
        boolean boolean39 = node37.isEmpty();
        boolean boolean40 = node37.isReturn();
        boolean boolean41 = node37.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        node43.setSourceEncodedPosition(4095);
        boolean boolean46 = node43.isNot();
        boolean boolean47 = node43.isBreak();
        boolean boolean48 = node43.isIn();
        com.google.javascript.rhino.Node node49 = node37.useSourceInfoIfMissingFromForTree(node43);
        com.google.javascript.rhino.Node node50 = node33.useSourceInfoFrom(node43);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("");
        node52.setSourceEncodedPosition(4095);
        boolean boolean55 = node52.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = node52.getStaticSourceFile();
        boolean boolean57 = node52.isAssignAdd();
        java.util.Set<java.lang.String> strSet58 = node52.getDirectives();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("");
        node60.setSourceEncodedPosition(4095);
        boolean boolean63 = node60.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = node60.getStaticSourceFile();
        node60.setVarArgs(false);
        boolean boolean67 = node60.isFromExterns();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("");
        node69.setSourceEncodedPosition(4095);
        boolean boolean72 = node69.isNot();
        com.google.javascript.rhino.Node node73 = node69.getLastSibling();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(37, node33, node52, node60, node73);
        boolean boolean75 = node73.isOr();
        int int77 = node73.getIntProp(42);
        com.google.javascript.rhino.Node node78 = node6.copyInformationFromForTree(node73);
        com.google.javascript.rhino.Node node79 = node4.useSourceInfoFromForTree(node6);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(staticSourceFile56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(strSet58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(staticSourceFile64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("");
        boolean boolean8 = node7.isOnlyModifiesThisCall();
        boolean boolean9 = node7.isEmpty();
        node1.putProp((int) '4', (java.lang.Object) node7);
        boolean boolean11 = node1.isFromExterns();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder12 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isCall();
        boolean boolean18 = node14.isAssign();
        boolean boolean19 = node14.hasOneChild();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        boolean boolean22 = node21.isOnlyModifiesThisCall();
        boolean boolean23 = node21.isEmpty();
        boolean boolean24 = node21.isReturn();
        boolean boolean25 = node21.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        node27.setSourceEncodedPosition(4095);
        boolean boolean30 = node27.isNot();
        boolean boolean31 = node27.isBreak();
        boolean boolean32 = node27.isIn();
        com.google.javascript.rhino.Node node33 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node34 = node33.cloneNode();
        com.google.javascript.rhino.Node node35 = node14.useSourceInfoFrom(node34);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        node37.setSourceEncodedPosition(4095);
        boolean boolean40 = node37.isNot();
        boolean boolean41 = node37.isBreak();
        boolean boolean42 = node37.isTypeOf();
        boolean boolean43 = node37.isInc();
        boolean boolean44 = node37.isWhile();
        node37.setSourceEncodedPosition((-1));
        com.google.javascript.rhino.Node node47 = node37.getNext();
        boolean boolean48 = node37.isCall();
        node34.addChildrenToFront(node37);
        node34.detachChildren();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(0.0d);
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        boolean boolean58 = node56.isEmpty();
        boolean boolean59 = node56.isCatch();
        int int60 = node56.getSourceOffset();
        boolean boolean61 = node56.isHook();
        node52.addChildToBack(node56);
        boolean boolean63 = node52.isCase();
        com.google.javascript.rhino.Node node64 = node52.cloneTree();
        // The following exception was thrown during execution in test generation
        try {
            node1.replaceChildAfter(node34, node64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray5, 12, 100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(53, nodeArray5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 0, nodeArray5);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(43, nodeArray5);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(4, nodeArray5, 31, 35);
        org.junit.Assert.assertNotNull(nodeArray5);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isCall();
        boolean boolean5 = node1.isAssign();
        boolean boolean6 = node1.hasOneChild();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        boolean boolean9 = node8.isOnlyModifiesThisCall();
        boolean boolean10 = node8.isEmpty();
        boolean boolean11 = node8.isReturn();
        boolean boolean12 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("");
        node14.setSourceEncodedPosition(4095);
        boolean boolean17 = node14.isNot();
        boolean boolean18 = node14.isBreak();
        boolean boolean19 = node14.isIn();
        com.google.javascript.rhino.Node node20 = node8.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node21 = node20.cloneNode();
        com.google.javascript.rhino.Node node22 = node1.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("");
        node24.setSourceEncodedPosition(4095);
        boolean boolean27 = node24.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        boolean boolean29 = node24.isAssignAdd();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("");
        node31.setSourceEncodedPosition(4095);
        boolean boolean34 = node31.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node31.getStaticSourceFile();
        com.google.javascript.rhino.Node node36 = node24.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node37 = node31.removeFirstChild();
        boolean boolean38 = node31.isAnd();
        node31.putProp(46, (java.lang.Object) 45);
        com.google.javascript.rhino.Node node43 = node31.getAncestor(0);
        com.google.javascript.rhino.Node node44 = node22.useSourceInfoIfMissingFromForTree(node31);
        java.lang.String str45 = node31.getQualifiedName();
        node31.detachChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(52);
        boolean boolean2 = node1.isOr();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(43, (int) (byte) 0, 31);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        boolean boolean5 = node1.isBreak();
        boolean boolean6 = node1.isTypeOf();
        int int7 = node1.getCharno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isOnlyModifiesThisCall();
        int int11 = node9.getSourceOffset();
        boolean boolean12 = node9.isExprResult();
        com.google.javascript.rhino.Node node13 = node1.srcref(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        node15.setSourceEncodedPosition(4095);
        boolean boolean18 = node15.isCall();
        boolean boolean19 = node1.isEquivalentTo(node15);
        node1.setIsSyntheticBlock(true);
        node1.setSourceFileForTesting("STRING \n");
        node1.setString("STRING  [quoted: 1]");
        boolean boolean26 = node1.isFalse();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setSourceEncodedPosition(4095);
        boolean boolean4 = node1.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        boolean boolean6 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        node8.setSourceEncodedPosition(4095);
        boolean boolean11 = node8.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node13 = node1.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("");
        boolean boolean16 = node15.isOnlyModifiesThisCall();
        boolean boolean17 = node15.isEmpty();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoFrom(node15);
        boolean boolean20 = node1.isInc();
        boolean boolean21 = node1.isThis();
        boolean boolean22 = node1.isComma();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("");
        node42.setSourceEncodedPosition(4095);
        boolean boolean45 = node42.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        boolean boolean47 = node42.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("");
        node49.setSourceEncodedPosition(4095);
        boolean boolean52 = node49.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node49.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFromForTree(node49);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("");
        boolean boolean57 = node56.isOnlyModifiesThisCall();
        boolean boolean58 = node56.isEmpty();
        boolean boolean59 = node56.isArrayLit();
        com.google.javascript.rhino.Node node60 = node42.useSourceInfoFrom(node56);
        java.lang.String str61 = node39.checkTreeEquals(node42);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        boolean boolean64 = node63.isOnlyModifiesThisCall();
        boolean boolean65 = node63.isEmpty();
        boolean boolean66 = node63.isReturn();
        boolean boolean67 = node63.isEmpty();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node63.siblings();
        com.google.javascript.rhino.Node node69 = node39.clonePropsFrom(node63);
        node63.setIsSyntheticBlock(false);
        boolean boolean72 = node63.isString();
        node63.setString("TYPEOF 0\n    STRING \n");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING \n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING \n" + "'", str61, "Node tree inequality:\nTree1:\nTYPEOF 0\n    STRING \n\n\nTree2:\nSTRING \n\n\nSubtree1: TYPEOF 0\n    STRING \n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        node2.setSourceEncodedPosition(4095);
        boolean boolean5 = node2.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        node9.setSourceEncodedPosition(4095);
        boolean boolean12 = node9.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("");
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isEmpty();
        boolean boolean19 = node16.isArrayLit();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray21);
        int int24 = node22.getIntProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("");
        boolean boolean27 = node26.isOnlyModifiesThisCall();
        boolean boolean28 = node26.isEmpty();
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        node32.setSourceEncodedPosition(4095);
        boolean boolean35 = node32.isNot();
        boolean boolean36 = node32.isBreak();
        boolean boolean37 = node32.isIn();
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node39 = node22.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("");
        node41.setSourceEncodedPosition(4095);
        boolean boolean44 = node41.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node41.getStaticSourceFile();
        boolean boolean46 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("");
        node48.setSourceEncodedPosition(4095);
        boolean boolean51 = node48.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node53 = node41.copyInformationFromForTree(node48);
        boolean boolean54 = node41.isWith();
        node32.addChildToFront(node41);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("");
        node57.setSourceEncodedPosition(4095);
        boolean boolean60 = node57.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        boolean boolean62 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("");
        node64.setSourceEncodedPosition(4095);
        boolean boolean67 = node64.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node64.getStaticSourceFile();
        com.google.javascript.rhino.Node node69 = node57.copyInformationFromForTree(node64);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("");
        boolean boolean72 = node71.isOnlyModifiesThisCall();
        boolean boolean73 = node71.isEmpty();
        boolean boolean74 = node71.isArrayLit();
        com.google.javascript.rhino.Node node75 = node57.useSourceInfoFrom(node71);
        boolean boolean76 = node71.hasChildren();
        com.google.javascript.rhino.Node node77 = node32.copyInformationFrom(node71);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("");
        boolean boolean80 = node79.isOnlyModifiesThisCall();
        boolean boolean81 = node79.isEmpty();
        boolean boolean82 = node79.isArrayLit();
        boolean boolean83 = node79.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node84 = node71.srcref(node79);
        boolean boolean85 = node84.isThis();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }
}

